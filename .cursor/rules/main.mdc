---
description: 
globs: *.mdx
alwaysApply: false
---
First let's define a template, I will use Arc.mdx as an example.

<template start>
---
title: HTML5 canvas Arc Tutorial
sidebar_label: Arc
hide_table_of_contents: true
slug: Arc.html
---

Here will be the content of the post.

import Tabs from "@theme/Tabs";
import TabItem from "@theme/TabItem";

<Tabs>
  <TabItem value="Vanilla" default>
```js live vanilla
import Konva from 'konva';

// vanilla code here
```
  </TabItem>
  <TabItem value="React">
```js live react
import { Stage, Layer, Arc } from 'react-konva';

// react code here
const App = () => {
  return (
    <Stage width={window.innerWidth} height={window.innerHeight}>
      <Layer>
        <Arc
          x={window.innerWidth / 2}
          y={window.innerHeight / 2}
          innerRadius={40}
          outerRadius={70}
          angle={60}
          fill="yellow"
          stroke="black"
          strokeWidth={4}
        />
      </Layer>
    </Stage>
  );
};

export default App;
```
  </TabItem>
  <TabItem value="Vue">
```js live vue
// vue code here
<template>
  <v-stage :config="stageSize">
    <v-layer>
      <v-arc :config="arcConfig" />
    </v-layer>
  </v-stage>
</template>

<script setup>
const stageSize = {
  width: window.innerWidth,
  height: window.innerHeight
};

const arcConfig = {
  x: window.innerWidth / 2,
  y: window.innerHeight / 2,
  innerRadius: 40,
  outerRadius: 70,
  angle: 60,
  fill: 'yellow',
  stroke: 'black',
  strokeWidth: 4
};
</script>
```
  </TabItem>
</Tabs>
<template end>

If you see a link like this:
<!-- {% iframe /downloads/code/shapes/Arc.html %} -->
We need to replace it will vanilla, react and vue code. To find the code look into old_code folder.

if you see iframe to codesandbox link, keep it, but update it for jsx. Make sure it is valid for react in mdx file. Do not create vanilla, vue versions.


Several VERY important tips:
make sure demos are as consistent as possible, so they produce identical visial result across vanila, react and vue.
But for react and vue, try to keep react and vue best practices.
If you insert a code from old_code folder, make sure it keep it as close as possible to the original code, but keep best practices for React and Vue.
If you see `Instructions` section, make sure to make it bold. Insert it before the code/demos.
In React and Vue when setting cursor style, try to use style property on stage if possible. If not, use `e.target.getStage().container().style.cursor = ...`.
In React and Vue, if you have draggable nodes make sure to use state to set the position of the node and update it in `onDragEnd` event handler.
Change file type from md to mdx
Do not add anything additional into the file in terms of the content. It should be the same.
If you use image loading, make sure to follow best practives from @Image.mds file, means useImage hook for react and vue