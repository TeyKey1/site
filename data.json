[
  {
    "id": "Konva.Transform()",
    "longname": "Konva.Transform",
    "name": "Transform",
    "kind": "constructor",
    "memberof": "Konva.Transform",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "description": "Optional six-element matrix",
        "name": "m"
      }
    ],
    "order": 13
  },
  {
    "id": "Konva.Context()",
    "longname": "Konva.Context",
    "name": "Context",
    "kind": "constructor",
    "memberof": "Konva.Context",
    "examples": [
      "const rect = new Konva.Shape({\n   fill: 'red',\n   width: 100,\n   height: 100,\n   sceneFunc: (ctx, shape) => {\n     // ctx - is context wrapper\n     // shape - is instance of Konva.Shape, so it equals to \"rect\" variable\n     ctx.rect(0, 0, shape.getAttr('width'), shape.getAttr('height'));\n\n     // automatically fill shape from props and draw hit region\n     ctx.fillStrokeShape(shape);\n   }\n})"
    ],
    "order": 30
  },
  {
    "id": "Konva.Canvas()",
    "longname": "Konva.Canvas",
    "name": "Canvas",
    "kind": "constructor",
    "memberof": "Konva.Canvas",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "config.pixelRatio"
      }
    ],
    "order": 73
  },
  {
    "id": "Konva.Node()",
    "longname": "Konva.Node",
    "name": "Node",
    "kind": "constructor",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "name": "config.visible"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "whether or not the node is listening for events",
        "name": "config.listening"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "unique id",
        "name": "config.id"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "non-unique name",
        "name": "config.name"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "determines node opacity.  Can be any number between 0 and 1",
        "name": "config.opacity"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "set scale",
        "name": "config.scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale x",
        "name": "config.scaleX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale y",
        "name": "config.scaleY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "rotation in degrees",
        "name": "config.rotation"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "offset from center point and rotation point",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset x",
        "name": "config.offsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset y",
        "name": "config.offsetY"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "makes the node draggable.  When stages are draggable, you can drag and drop\n the entire stage by dragging any portion of the stage",
        "name": "config.draggable"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.dragDistance"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "name": "config.dragBoundFunc"
      }
    ],
    "order": 78
  },
  {
    "id": "Konva.Container()",
    "longname": "Konva.Container",
    "name": "Container",
    "kind": "constructor",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "name": "config.visible"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "whether or not the node is listening for events",
        "name": "config.listening"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "unique id",
        "name": "config.id"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "non-unique name",
        "name": "config.name"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "determines node opacity.  Can be any number between 0 and 1",
        "name": "config.opacity"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "set scale",
        "name": "config.scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale x",
        "name": "config.scaleX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale y",
        "name": "config.scaleY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "rotation in degrees",
        "name": "config.rotation"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "offset from center point and rotation point",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset x",
        "name": "config.offsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset y",
        "name": "config.offsetY"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "makes the node draggable.  When stages are draggable, you can drag and drop\n the entire stage by dragging any portion of the stage",
        "name": "config.draggable"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.dragDistance"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "* @param {Object} [config.clip] set clip",
        "name": "config.dragBoundFunc"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set clip x",
        "name": "config.clipX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set clip y",
        "name": "config.clipY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set clip width",
        "name": "config.clipWidth"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set clip height",
        "name": "config.clipHeight"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "set clip func",
        "name": "config.clipFunc"
      }
    ],
    "order": 166
  },
  {
    "id": "Konva.Stage()",
    "longname": "Konva.Stage",
    "name": "Stage",
    "kind": "constructor",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "String",
            "Element"
          ]
        },
        "description": "Container selector or DOM element",
        "name": "config.container"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "name": "config.visible"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "whether or not the node is listening for events",
        "name": "config.listening"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "unique id",
        "name": "config.id"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "non-unique name",
        "name": "config.name"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "determines node opacity.  Can be any number between 0 and 1",
        "name": "config.opacity"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "set scale",
        "name": "config.scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale x",
        "name": "config.scaleX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale y",
        "name": "config.scaleY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "rotation in degrees",
        "name": "config.rotation"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "offset from center point and rotation point",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset x",
        "name": "config.offsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset y",
        "name": "config.offsetY"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "makes the node draggable.  When stages are draggable, you can drag and drop\n the entire stage by dragging any portion of the stage",
        "name": "config.draggable"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.dragDistance"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "name": "config.dragBoundFunc"
      }
    ],
    "examples": [
      "var stage = new Konva.Stage({\n  width: 500,\n  height: 800,\n  container: 'containerId' // or \"#containerId\" or \".containerClass\"\n});"
    ],
    "order": 183
  },
  {
    "id": "Konva.Shape()",
    "longname": "Konva.Shape",
    "name": "Shape",
    "kind": "constructor",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "fill color",
        "name": "config.fill"
      },
      {
        "type": {
          "names": [
            "Image"
          ]
        },
        "optional": true,
        "description": "fill pattern image",
        "name": "config.fillPatternImage"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillPatternOffset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternOffsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternOffsetY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillPatternScale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternScaleX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternScaleY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternRotation"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\".  The default is \"no-repeat\"",
        "name": "config.fillPatternRepeat"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillLinearGradientStartPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientStartPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientStartPointY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillLinearGradientEndPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientEndPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientEndPointY"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "description": "array of color stops",
        "name": "config.fillLinearGradientColorStops"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillRadialGradientStartPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartPointY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillRadialGradientEndPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndPointY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartRadius"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndRadius"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "description": "array of color stops",
        "name": "config.fillRadialGradientColorStops"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the fill.  The default value is true",
        "name": "config.fillEnabled"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration",
        "name": "config.fillPriority"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "stroke color",
        "name": "config.stroke"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "stroke width",
        "name": "config.strokeWidth"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "Should we draw fill AFTER stroke? Default is false.",
        "name": "config.fillAfterStrokeEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "size of the stroke on hit canvas.  The default is \"auto\" - equals to strokeWidth",
        "name": "config.hitStrokeWidth"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables stroke hit region.  The default is true",
        "name": "config.strokeHitEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables using buffer canvas.  The default is true",
        "name": "config.perfectDrawEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables shadow for stroke.  The default is true",
        "name": "config.shadowForStrokeEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables stroke scale.  The default is true",
        "name": "config.strokeScaleEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the stroke.  The default value is true",
        "name": "config.strokeEnabled"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be miter, round, or bevel.  The default\n is miter",
        "name": "config.lineJoin"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be butt, round, or square.  The default\n is butt",
        "name": "config.lineCap"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "name": "config.shadowColor"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowBlur"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.shadowOffset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowOffsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowOffsetY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "shadow opacity.  Can be any real number\n between 0 and 1",
        "name": "config.shadowOpacity"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the shadow.  The default value is true",
        "name": "config.shadowEnabled"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "name": "config.dash"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the dashArray.  The default value is true",
        "name": "config.dashEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "name": "config.visible"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "whether or not the node is listening for events",
        "name": "config.listening"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "unique id",
        "name": "config.id"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "non-unique name",
        "name": "config.name"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "determines node opacity.  Can be any number between 0 and 1",
        "name": "config.opacity"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "set scale",
        "name": "config.scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale x",
        "name": "config.scaleX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale y",
        "name": "config.scaleY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "rotation in degrees",
        "name": "config.rotation"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "offset from center point and rotation point",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset x",
        "name": "config.offsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset y",
        "name": "config.offsetY"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "makes the node draggable.  When stages are draggable, you can drag and drop\n the entire stage by dragging any portion of the stage",
        "name": "config.draggable"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.dragDistance"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "name": "config.dragBoundFunc"
      }
    ],
    "examples": [
      "var customShape = new Konva.Shape({\n  x: 5,\n  y: 10,\n  fill: 'red',\n  // a Konva.Canvas renderer is passed into the sceneFunc function\n  sceneFunc (context, shape) {\n    context.beginPath();\n    context.moveTo(200, 50);\n    context.lineTo(420, 80);\n    context.quadraticCurveTo(300, 100, 260, 170);\n    context.closePath();\n    // Konva specific method\n    context.fillStrokeShape(shape);\n  }\n});"
    ],
    "order": 193
  },
  {
    "id": "Konva.Layer()",
    "longname": "Konva.Layer",
    "name": "Layer",
    "kind": "constructor",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this property to false if you don't want\nto clear the canvas before each layer draw.  The default value is true.",
        "name": "config.clearBeforeDraw"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "name": "config.visible"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "whether or not the node is listening for events",
        "name": "config.listening"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "unique id",
        "name": "config.id"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "non-unique name",
        "name": "config.name"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "determines node opacity.  Can be any number between 0 and 1",
        "name": "config.opacity"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "set scale",
        "name": "config.scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale x",
        "name": "config.scaleX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale y",
        "name": "config.scaleY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "rotation in degrees",
        "name": "config.rotation"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "offset from center point and rotation point",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset x",
        "name": "config.offsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset y",
        "name": "config.offsetY"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "makes the node draggable.  When stages are draggable, you can drag and drop\n the entire stage by dragging any portion of the stage",
        "name": "config.draggable"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.dragDistance"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "* @param {Object} [config.clip] set clip",
        "name": "config.dragBoundFunc"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set clip x",
        "name": "config.clipX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set clip y",
        "name": "config.clipY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set clip width",
        "name": "config.clipWidth"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set clip height",
        "name": "config.clipHeight"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "set clip func",
        "name": "config.clipFunc"
      }
    ],
    "examples": [
      "var layer = new Konva.Layer();\nstage.add(layer);\n// now you can add shapes, groups into the layer"
    ],
    "order": 262
  },
  {
    "id": "Konva.FastLayer()",
    "longname": "Konva.FastLayer",
    "name": "FastLayer",
    "kind": "constructor",
    "memberof": "Konva.FastLayer",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set clip x",
        "name": "config.clipX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set clip y",
        "name": "config.clipY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set clip width",
        "name": "config.clipWidth"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set clip height",
        "name": "config.clipHeight"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "set clip func",
        "name": "config.clipFunc"
      }
    ],
    "examples": [
      "var layer = new Konva.FastLayer();"
    ],
    "order": 278
  },
  {
    "id": "Konva.Group()",
    "longname": "Konva.Group",
    "name": "Group",
    "kind": "constructor",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "name": "config.visible"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "whether or not the node is listening for events",
        "name": "config.listening"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "unique id",
        "name": "config.id"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "non-unique name",
        "name": "config.name"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "determines node opacity.  Can be any number between 0 and 1",
        "name": "config.opacity"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "set scale",
        "name": "config.scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale x",
        "name": "config.scaleX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale y",
        "name": "config.scaleY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "rotation in degrees",
        "name": "config.rotation"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "offset from center point and rotation point",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset x",
        "name": "config.offsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset y",
        "name": "config.offsetY"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "makes the node draggable.  When stages are draggable, you can drag and drop\n the entire stage by dragging any portion of the stage",
        "name": "config.draggable"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.dragDistance"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "* @param {Object} [config.clip] set clip",
        "name": "config.dragBoundFunc"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set clip x",
        "name": "config.clipX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set clip y",
        "name": "config.clipY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set clip width",
        "name": "config.clipWidth"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set clip height",
        "name": "config.clipHeight"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "set clip func",
        "name": "config.clipFunc"
      }
    ],
    "examples": [
      "var group = new Konva.Group();"
    ],
    "order": 280
  },
  {
    "id": "Konva.Animation()",
    "longname": "Konva.Animation",
    "name": "Animation",
    "kind": "constructor",
    "memberof": "Konva.Animation",
    "params": [
      {
        "type": {
          "names": [
            "AnimationFn"
          ]
        },
        "description": "function executed on each animation frame.  The function is passed a frame object, which contains\n timeDiff, lastTime, time, and frameRate properties.  The timeDiff property is the number of milliseconds that have passed\n since the last animation frame. The time property is the time in milliseconds that elapsed from the moment the animation started\n to the current animation frame. The lastTime property is a `time` value from the previous frame.  The frameRate property is the current frame rate in frames / second.\n Return false from function, if you don't need to redraw layer/layers on some frames.",
        "name": "func"
      },
      {
        "type": {
          "names": [
            "Konva.Layer",
            "Array"
          ]
        },
        "optional": true,
        "description": "layer(s) to be redrawn on each animation frame. Can be a layer, an array of layers, or null.\n Not specifying a node will result in no redraw.",
        "name": "layers"
      }
    ],
    "examples": [
      "// move a node to the right at 50 pixels / second\nvar velocity = 50;\n\nvar anim = new Konva.Animation(function(frame) {\n  var dist = velocity * (frame.timeDiff / 1000);\n  node.move({x: dist, y: 0});\n}, layer);\n\nanim.start();"
    ],
    "order": 282
  },
  {
    "id": "Konva.Tween()",
    "longname": "Konva.Tween",
    "name": "Tween",
    "kind": "constructor",
    "memberof": "Konva.Tween",
    "examples": [
      "// instantiate new tween which fully rotates a node in 1 second\nvar tween = new Konva.Tween({\n  // list of tween specific properties\n  node: node,\n  duration: 1,\n  easing: Konva.Easings.EaseInOut,\n  onUpdate: () => console.log('node attrs updated')\n  onFinish: () => console.log('finished'),\n  // set new values for any attributes of a passed node\n  rotation: 360,\n  fill: 'red'\n});\n\n// play tween\ntween.play();\n\n// pause tween\ntween.pause();"
    ],
    "order": 290
  },
  {
    "id": "Konva.Arc()",
    "longname": "Konva.Arc",
    "name": "Arc",
    "kind": "constructor",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "in degrees",
        "name": "config.angle"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "config.innerRadius"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "config.outerRadius"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "name": "config.clockwise"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "fill color",
        "name": "config.fill"
      },
      {
        "type": {
          "names": [
            "Image"
          ]
        },
        "optional": true,
        "description": "fill pattern image",
        "name": "config.fillPatternImage"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillPatternOffset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternOffsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternOffsetY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillPatternScale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternScaleX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternScaleY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternRotation"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\".  The default is \"no-repeat\"",
        "name": "config.fillPatternRepeat"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillLinearGradientStartPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientStartPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientStartPointY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillLinearGradientEndPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientEndPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientEndPointY"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "description": "array of color stops",
        "name": "config.fillLinearGradientColorStops"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillRadialGradientStartPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartPointY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillRadialGradientEndPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndPointY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartRadius"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndRadius"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "description": "array of color stops",
        "name": "config.fillRadialGradientColorStops"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the fill.  The default value is true",
        "name": "config.fillEnabled"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration",
        "name": "config.fillPriority"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "stroke color",
        "name": "config.stroke"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "stroke width",
        "name": "config.strokeWidth"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "Should we draw fill AFTER stroke? Default is false.",
        "name": "config.fillAfterStrokeEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "size of the stroke on hit canvas.  The default is \"auto\" - equals to strokeWidth",
        "name": "config.hitStrokeWidth"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables stroke hit region.  The default is true",
        "name": "config.strokeHitEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables using buffer canvas.  The default is true",
        "name": "config.perfectDrawEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables shadow for stroke.  The default is true",
        "name": "config.shadowForStrokeEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables stroke scale.  The default is true",
        "name": "config.strokeScaleEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the stroke.  The default value is true",
        "name": "config.strokeEnabled"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be miter, round, or bevel.  The default\n is miter",
        "name": "config.lineJoin"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be butt, round, or square.  The default\n is butt",
        "name": "config.lineCap"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "name": "config.shadowColor"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowBlur"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.shadowOffset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowOffsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowOffsetY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "shadow opacity.  Can be any real number\n between 0 and 1",
        "name": "config.shadowOpacity"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the shadow.  The default value is true",
        "name": "config.shadowEnabled"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "name": "config.dash"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the dashArray.  The default value is true",
        "name": "config.dashEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "name": "config.visible"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "whether or not the node is listening for events",
        "name": "config.listening"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "unique id",
        "name": "config.id"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "non-unique name",
        "name": "config.name"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "determines node opacity.  Can be any number between 0 and 1",
        "name": "config.opacity"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "set scale",
        "name": "config.scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale x",
        "name": "config.scaleX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale y",
        "name": "config.scaleY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "rotation in degrees",
        "name": "config.rotation"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "offset from center point and rotation point",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset x",
        "name": "config.offsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset y",
        "name": "config.offsetY"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "makes the node draggable.  When stages are draggable, you can drag and drop\n the entire stage by dragging any portion of the stage",
        "name": "config.draggable"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.dragDistance"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "name": "config.dragBoundFunc"
      }
    ],
    "examples": [
      "// draw a Arc that's pointing downwards\nvar arc = new Konva.Arc({\n  innerRadius: 40,\n  outerRadius: 80,\n  fill: 'red',\n  stroke: 'black'\n  strokeWidth: 5,\n  angle: 60,\n  rotationDeg: -120\n});"
    ],
    "order": 317
  },
  {
    "id": "Konva.Line()",
    "longname": "Konva.Line",
    "name": "Line",
    "kind": "constructor",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Flat array of points coordinates. You should define them as [x1, y1, x2, y2, x3, y3].",
        "name": "config.points"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "Higher values will result in a more curvy line.  A value of 0 will result in no interpolation.\n  The default is 0",
        "name": "config.tension"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "defines whether or not the line shape is closed, creating a polygon or blob",
        "name": "config.closed"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "if no tension is provided but bezier=true, we draw the line as a bezier using the passed points",
        "name": "config.bezier"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "fill color",
        "name": "config.fill"
      },
      {
        "type": {
          "names": [
            "Image"
          ]
        },
        "optional": true,
        "description": "fill pattern image",
        "name": "config.fillPatternImage"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillPatternOffset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternOffsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternOffsetY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillPatternScale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternScaleX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternScaleY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternRotation"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\".  The default is \"no-repeat\"",
        "name": "config.fillPatternRepeat"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillLinearGradientStartPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientStartPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientStartPointY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillLinearGradientEndPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientEndPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientEndPointY"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "description": "array of color stops",
        "name": "config.fillLinearGradientColorStops"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillRadialGradientStartPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartPointY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillRadialGradientEndPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndPointY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartRadius"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndRadius"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "description": "array of color stops",
        "name": "config.fillRadialGradientColorStops"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the fill.  The default value is true",
        "name": "config.fillEnabled"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration",
        "name": "config.fillPriority"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "stroke color",
        "name": "config.stroke"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "stroke width",
        "name": "config.strokeWidth"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "Should we draw fill AFTER stroke? Default is false.",
        "name": "config.fillAfterStrokeEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "size of the stroke on hit canvas.  The default is \"auto\" - equals to strokeWidth",
        "name": "config.hitStrokeWidth"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables stroke hit region.  The default is true",
        "name": "config.strokeHitEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables using buffer canvas.  The default is true",
        "name": "config.perfectDrawEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables shadow for stroke.  The default is true",
        "name": "config.shadowForStrokeEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables stroke scale.  The default is true",
        "name": "config.strokeScaleEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the stroke.  The default value is true",
        "name": "config.strokeEnabled"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be miter, round, or bevel.  The default\n is miter",
        "name": "config.lineJoin"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be butt, round, or square.  The default\n is butt",
        "name": "config.lineCap"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "name": "config.shadowColor"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowBlur"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.shadowOffset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowOffsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowOffsetY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "shadow opacity.  Can be any real number\n between 0 and 1",
        "name": "config.shadowOpacity"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the shadow.  The default value is true",
        "name": "config.shadowEnabled"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "name": "config.dash"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the dashArray.  The default value is true",
        "name": "config.dashEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "name": "config.visible"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "whether or not the node is listening for events",
        "name": "config.listening"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "unique id",
        "name": "config.id"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "non-unique name",
        "name": "config.name"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "determines node opacity.  Can be any number between 0 and 1",
        "name": "config.opacity"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "set scale",
        "name": "config.scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale x",
        "name": "config.scaleX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale y",
        "name": "config.scaleY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "rotation in degrees",
        "name": "config.rotation"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "offset from center point and rotation point",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset x",
        "name": "config.offsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset y",
        "name": "config.offsetY"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "makes the node draggable.  When stages are draggable, you can drag and drop\n the entire stage by dragging any portion of the stage",
        "name": "config.draggable"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.dragDistance"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "name": "config.dragBoundFunc"
      }
    ],
    "examples": [
      "var line = new Konva.Line({\n  x: 100,\n  y: 50,\n  points: [73, 70, 340, 23, 450, 60, 500, 20],\n  stroke: 'red',\n  tension: 1\n});"
    ],
    "order": 323
  },
  {
    "id": "Konva.Path()",
    "longname": "Konva.Path",
    "name": "Path",
    "kind": "constructor",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "SVG data string",
        "name": "config.data"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "fill color",
        "name": "config.fill"
      },
      {
        "type": {
          "names": [
            "Image"
          ]
        },
        "optional": true,
        "description": "fill pattern image",
        "name": "config.fillPatternImage"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillPatternOffset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternOffsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternOffsetY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillPatternScale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternScaleX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternScaleY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternRotation"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\".  The default is \"no-repeat\"",
        "name": "config.fillPatternRepeat"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillLinearGradientStartPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientStartPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientStartPointY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillLinearGradientEndPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientEndPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientEndPointY"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "description": "array of color stops",
        "name": "config.fillLinearGradientColorStops"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillRadialGradientStartPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartPointY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillRadialGradientEndPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndPointY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartRadius"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndRadius"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "description": "array of color stops",
        "name": "config.fillRadialGradientColorStops"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the fill.  The default value is true",
        "name": "config.fillEnabled"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration",
        "name": "config.fillPriority"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "stroke color",
        "name": "config.stroke"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "stroke width",
        "name": "config.strokeWidth"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "Should we draw fill AFTER stroke? Default is false.",
        "name": "config.fillAfterStrokeEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "size of the stroke on hit canvas.  The default is \"auto\" - equals to strokeWidth",
        "name": "config.hitStrokeWidth"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables stroke hit region.  The default is true",
        "name": "config.strokeHitEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables using buffer canvas.  The default is true",
        "name": "config.perfectDrawEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables shadow for stroke.  The default is true",
        "name": "config.shadowForStrokeEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables stroke scale.  The default is true",
        "name": "config.strokeScaleEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the stroke.  The default value is true",
        "name": "config.strokeEnabled"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be miter, round, or bevel.  The default\n is miter",
        "name": "config.lineJoin"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be butt, round, or square.  The default\n is butt",
        "name": "config.lineCap"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "name": "config.shadowColor"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowBlur"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.shadowOffset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowOffsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowOffsetY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "shadow opacity.  Can be any real number\n between 0 and 1",
        "name": "config.shadowOpacity"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the shadow.  The default value is true",
        "name": "config.shadowEnabled"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "name": "config.dash"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the dashArray.  The default value is true",
        "name": "config.dashEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "name": "config.visible"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "whether or not the node is listening for events",
        "name": "config.listening"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "unique id",
        "name": "config.id"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "non-unique name",
        "name": "config.name"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "determines node opacity.  Can be any number between 0 and 1",
        "name": "config.opacity"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "set scale",
        "name": "config.scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale x",
        "name": "config.scaleX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale y",
        "name": "config.scaleY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "rotation in degrees",
        "name": "config.rotation"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "offset from center point and rotation point",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset x",
        "name": "config.offsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset y",
        "name": "config.offsetY"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "makes the node draggable.  When stages are draggable, you can drag and drop\n the entire stage by dragging any portion of the stage",
        "name": "config.draggable"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.dragDistance"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "name": "config.dragBoundFunc"
      }
    ],
    "examples": [
      "var path = new Konva.Path({\n  x: 240,\n  y: 40,\n  data: 'M12.582,9.551C3.251,16.237,0.921,29.021,7.08,38.564l-2.36,1.689l4.893,2.262l4.893,2.262l-0.568-5.36l-0.567-5.359l-2.365,1.694c-4.657-7.375-2.83-17.185,4.352-22.33c7.451-5.338,17.817-3.625,23.156,3.824c5.337,7.449,3.625,17.813-3.821,23.152l2.857,3.988c9.617-6.893,11.827-20.277,4.935-29.896C35.591,4.87,22.204,2.658,12.582,9.551z',\n  fill: 'green',\n  scaleX: 2,\n  scaleY: 2\n});"
    ],
    "order": 330
  },
  {
    "id": "Konva.Arrow()",
    "longname": "Konva.Arrow",
    "name": "Arrow",
    "kind": "constructor",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Flat array of points coordinates. You should define them as [x1, y1, x2, y2, x3, y3].",
        "name": "config.points"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "Higher values will result in a more curvy line.  A value of 0 will result in no interpolation.\n  The default is 0",
        "name": "config.tension"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "Arrow pointer length. Default value is 10.",
        "name": "config.pointerLength"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "Arrow pointer width. Default value is 10.",
        "name": "config.pointerWidth"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "Do we need to draw pointer on beginning position?. Default false.",
        "name": "config.pointerAtBeginning"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "Do we need to draw pointer on ending position?. Default true.",
        "name": "config.pointerAtEnding"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "fill color",
        "name": "config.fill"
      },
      {
        "type": {
          "names": [
            "Image"
          ]
        },
        "optional": true,
        "description": "fill pattern image",
        "name": "config.fillPatternImage"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillPatternOffset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternOffsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternOffsetY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillPatternScale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternScaleX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternScaleY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternRotation"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\".  The default is \"no-repeat\"",
        "name": "config.fillPatternRepeat"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillLinearGradientStartPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientStartPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientStartPointY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillLinearGradientEndPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientEndPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientEndPointY"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "description": "array of color stops",
        "name": "config.fillLinearGradientColorStops"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillRadialGradientStartPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartPointY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillRadialGradientEndPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndPointY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartRadius"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndRadius"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "description": "array of color stops",
        "name": "config.fillRadialGradientColorStops"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the fill.  The default value is true",
        "name": "config.fillEnabled"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration",
        "name": "config.fillPriority"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "stroke color",
        "name": "config.stroke"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "stroke width",
        "name": "config.strokeWidth"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "Should we draw fill AFTER stroke? Default is false.",
        "name": "config.fillAfterStrokeEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "size of the stroke on hit canvas.  The default is \"auto\" - equals to strokeWidth",
        "name": "config.hitStrokeWidth"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables stroke hit region.  The default is true",
        "name": "config.strokeHitEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables using buffer canvas.  The default is true",
        "name": "config.perfectDrawEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables shadow for stroke.  The default is true",
        "name": "config.shadowForStrokeEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables stroke scale.  The default is true",
        "name": "config.strokeScaleEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the stroke.  The default value is true",
        "name": "config.strokeEnabled"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be miter, round, or bevel.  The default\n is miter",
        "name": "config.lineJoin"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be butt, round, or square.  The default\n is butt",
        "name": "config.lineCap"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "name": "config.shadowColor"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowBlur"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.shadowOffset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowOffsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowOffsetY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "shadow opacity.  Can be any real number\n between 0 and 1",
        "name": "config.shadowOpacity"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the shadow.  The default value is true",
        "name": "config.shadowEnabled"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "name": "config.dash"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the dashArray.  The default value is true",
        "name": "config.dashEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "name": "config.visible"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "whether or not the node is listening for events",
        "name": "config.listening"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "unique id",
        "name": "config.id"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "non-unique name",
        "name": "config.name"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "determines node opacity.  Can be any number between 0 and 1",
        "name": "config.opacity"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "set scale",
        "name": "config.scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale x",
        "name": "config.scaleX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale y",
        "name": "config.scaleY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "rotation in degrees",
        "name": "config.rotation"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "offset from center point and rotation point",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset x",
        "name": "config.offsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset y",
        "name": "config.offsetY"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "makes the node draggable.  When stages are draggable, you can drag and drop\n the entire stage by dragging any portion of the stage",
        "name": "config.draggable"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.dragDistance"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "name": "config.dragBoundFunc"
      }
    ],
    "examples": [
      "var line = new Konva.Line({\n  points: [73, 70, 340, 23, 450, 60, 500, 20],\n  stroke: 'red',\n  tension: 1,\n  pointerLength : 10,\n  pointerWidth : 12\n});"
    ],
    "order": 335
  },
  {
    "id": "Konva.Circle()",
    "longname": "Konva.Circle",
    "name": "Circle",
    "kind": "constructor",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "config.radius"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "fill color",
        "name": "config.fill"
      },
      {
        "type": {
          "names": [
            "Image"
          ]
        },
        "optional": true,
        "description": "fill pattern image",
        "name": "config.fillPatternImage"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillPatternOffset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternOffsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternOffsetY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillPatternScale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternScaleX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternScaleY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternRotation"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\".  The default is \"no-repeat\"",
        "name": "config.fillPatternRepeat"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillLinearGradientStartPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientStartPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientStartPointY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillLinearGradientEndPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientEndPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientEndPointY"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "description": "array of color stops",
        "name": "config.fillLinearGradientColorStops"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillRadialGradientStartPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartPointY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillRadialGradientEndPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndPointY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartRadius"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndRadius"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "description": "array of color stops",
        "name": "config.fillRadialGradientColorStops"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the fill.  The default value is true",
        "name": "config.fillEnabled"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration",
        "name": "config.fillPriority"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "stroke color",
        "name": "config.stroke"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "stroke width",
        "name": "config.strokeWidth"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "Should we draw fill AFTER stroke? Default is false.",
        "name": "config.fillAfterStrokeEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "size of the stroke on hit canvas.  The default is \"auto\" - equals to strokeWidth",
        "name": "config.hitStrokeWidth"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables stroke hit region.  The default is true",
        "name": "config.strokeHitEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables using buffer canvas.  The default is true",
        "name": "config.perfectDrawEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables shadow for stroke.  The default is true",
        "name": "config.shadowForStrokeEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables stroke scale.  The default is true",
        "name": "config.strokeScaleEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the stroke.  The default value is true",
        "name": "config.strokeEnabled"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be miter, round, or bevel.  The default\n is miter",
        "name": "config.lineJoin"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be butt, round, or square.  The default\n is butt",
        "name": "config.lineCap"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "name": "config.shadowColor"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowBlur"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.shadowOffset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowOffsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowOffsetY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "shadow opacity.  Can be any real number\n between 0 and 1",
        "name": "config.shadowOpacity"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the shadow.  The default value is true",
        "name": "config.shadowEnabled"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "name": "config.dash"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the dashArray.  The default value is true",
        "name": "config.dashEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "name": "config.visible"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "whether or not the node is listening for events",
        "name": "config.listening"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "unique id",
        "name": "config.id"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "non-unique name",
        "name": "config.name"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "determines node opacity.  Can be any number between 0 and 1",
        "name": "config.opacity"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "set scale",
        "name": "config.scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale x",
        "name": "config.scaleX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale y",
        "name": "config.scaleY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "rotation in degrees",
        "name": "config.rotation"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "offset from center point and rotation point",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset x",
        "name": "config.offsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset y",
        "name": "config.offsetY"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "makes the node draggable.  When stages are draggable, you can drag and drop\n the entire stage by dragging any portion of the stage",
        "name": "config.draggable"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.dragDistance"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "name": "config.dragBoundFunc"
      }
    ],
    "examples": [
      "// create circle\nvar circle = new Konva.Circle({\n  radius: 40,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 5\n});"
    ],
    "order": 341
  },
  {
    "id": "Konva.Ellipse()",
    "longname": "Konva.Ellipse",
    "name": "Ellipse",
    "kind": "constructor",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "defines x and y radius",
        "name": "config.radius"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "fill color",
        "name": "config.fill"
      },
      {
        "type": {
          "names": [
            "Image"
          ]
        },
        "optional": true,
        "description": "fill pattern image",
        "name": "config.fillPatternImage"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillPatternOffset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternOffsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternOffsetY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillPatternScale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternScaleX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternScaleY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternRotation"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\".  The default is \"no-repeat\"",
        "name": "config.fillPatternRepeat"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillLinearGradientStartPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientStartPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientStartPointY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillLinearGradientEndPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientEndPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientEndPointY"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "description": "array of color stops",
        "name": "config.fillLinearGradientColorStops"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillRadialGradientStartPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartPointY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillRadialGradientEndPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndPointY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartRadius"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndRadius"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "description": "array of color stops",
        "name": "config.fillRadialGradientColorStops"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the fill.  The default value is true",
        "name": "config.fillEnabled"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration",
        "name": "config.fillPriority"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "stroke color",
        "name": "config.stroke"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "stroke width",
        "name": "config.strokeWidth"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "Should we draw fill AFTER stroke? Default is false.",
        "name": "config.fillAfterStrokeEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "size of the stroke on hit canvas.  The default is \"auto\" - equals to strokeWidth",
        "name": "config.hitStrokeWidth"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables stroke hit region.  The default is true",
        "name": "config.strokeHitEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables using buffer canvas.  The default is true",
        "name": "config.perfectDrawEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables shadow for stroke.  The default is true",
        "name": "config.shadowForStrokeEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables stroke scale.  The default is true",
        "name": "config.strokeScaleEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the stroke.  The default value is true",
        "name": "config.strokeEnabled"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be miter, round, or bevel.  The default\n is miter",
        "name": "config.lineJoin"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be butt, round, or square.  The default\n is butt",
        "name": "config.lineCap"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "name": "config.shadowColor"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowBlur"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.shadowOffset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowOffsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowOffsetY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "shadow opacity.  Can be any real number\n between 0 and 1",
        "name": "config.shadowOpacity"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the shadow.  The default value is true",
        "name": "config.shadowEnabled"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "name": "config.dash"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the dashArray.  The default value is true",
        "name": "config.dashEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "name": "config.visible"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "whether or not the node is listening for events",
        "name": "config.listening"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "unique id",
        "name": "config.id"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "non-unique name",
        "name": "config.name"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "determines node opacity.  Can be any number between 0 and 1",
        "name": "config.opacity"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "set scale",
        "name": "config.scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale x",
        "name": "config.scaleX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale y",
        "name": "config.scaleY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "rotation in degrees",
        "name": "config.rotation"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "offset from center point and rotation point",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset x",
        "name": "config.offsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset y",
        "name": "config.offsetY"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "makes the node draggable.  When stages are draggable, you can drag and drop\n the entire stage by dragging any portion of the stage",
        "name": "config.draggable"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.dragDistance"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "name": "config.dragBoundFunc"
      }
    ],
    "examples": [
      "var ellipse = new Konva.Ellipse({\n  radius : {\n    x : 50,\n    y : 50\n  },\n  fill: 'red'\n});"
    ],
    "order": 344
  },
  {
    "id": "Konva.Image()",
    "longname": "Konva.Image",
    "name": "Image",
    "kind": "constructor",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Image"
          ]
        },
        "name": "config.image"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "name": "config.crop"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "fill color",
        "name": "config.fill"
      },
      {
        "type": {
          "names": [
            "Image"
          ]
        },
        "optional": true,
        "description": "fill pattern image",
        "name": "config.fillPatternImage"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillPatternOffset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternOffsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternOffsetY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillPatternScale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternScaleX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternScaleY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternRotation"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\".  The default is \"no-repeat\"",
        "name": "config.fillPatternRepeat"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillLinearGradientStartPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientStartPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientStartPointY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillLinearGradientEndPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientEndPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientEndPointY"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "description": "array of color stops",
        "name": "config.fillLinearGradientColorStops"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillRadialGradientStartPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartPointY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillRadialGradientEndPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndPointY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartRadius"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndRadius"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "description": "array of color stops",
        "name": "config.fillRadialGradientColorStops"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the fill.  The default value is true",
        "name": "config.fillEnabled"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration",
        "name": "config.fillPriority"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "stroke color",
        "name": "config.stroke"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "stroke width",
        "name": "config.strokeWidth"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "Should we draw fill AFTER stroke? Default is false.",
        "name": "config.fillAfterStrokeEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "size of the stroke on hit canvas.  The default is \"auto\" - equals to strokeWidth",
        "name": "config.hitStrokeWidth"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables stroke hit region.  The default is true",
        "name": "config.strokeHitEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables using buffer canvas.  The default is true",
        "name": "config.perfectDrawEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables shadow for stroke.  The default is true",
        "name": "config.shadowForStrokeEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables stroke scale.  The default is true",
        "name": "config.strokeScaleEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the stroke.  The default value is true",
        "name": "config.strokeEnabled"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be miter, round, or bevel.  The default\n is miter",
        "name": "config.lineJoin"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be butt, round, or square.  The default\n is butt",
        "name": "config.lineCap"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "name": "config.shadowColor"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowBlur"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.shadowOffset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowOffsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowOffsetY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "shadow opacity.  Can be any real number\n between 0 and 1",
        "name": "config.shadowOpacity"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the shadow.  The default value is true",
        "name": "config.shadowEnabled"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "name": "config.dash"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the dashArray.  The default value is true",
        "name": "config.dashEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "name": "config.visible"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "whether or not the node is listening for events",
        "name": "config.listening"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "unique id",
        "name": "config.id"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "non-unique name",
        "name": "config.name"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "determines node opacity.  Can be any number between 0 and 1",
        "name": "config.opacity"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "set scale",
        "name": "config.scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale x",
        "name": "config.scaleX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale y",
        "name": "config.scaleY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "rotation in degrees",
        "name": "config.rotation"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "offset from center point and rotation point",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset x",
        "name": "config.offsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset y",
        "name": "config.offsetY"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "makes the node draggable.  When stages are draggable, you can drag and drop\n the entire stage by dragging any portion of the stage",
        "name": "config.draggable"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.dragDistance"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "name": "config.dragBoundFunc"
      }
    ],
    "examples": [
      "var imageObj = new Image();\nimageObj.onload = function() {\n  var image = new Konva.Image({\n    x: 200,\n    y: 50,\n    image: imageObj,\n    width: 100,\n    height: 100\n  });\n};\nimageObj.src = '/path/to/image.jpg'"
    ],
    "order": 349
  },
  {
    "id": "Konva.Label()",
    "longname": "Konva.Label",
    "name": "Label",
    "kind": "constructor",
    "memberof": "Konva.Label",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "name": "config.visible"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "whether or not the node is listening for events",
        "name": "config.listening"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "unique id",
        "name": "config.id"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "non-unique name",
        "name": "config.name"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "determines node opacity.  Can be any number between 0 and 1",
        "name": "config.opacity"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "set scale",
        "name": "config.scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale x",
        "name": "config.scaleX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale y",
        "name": "config.scaleY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "rotation in degrees",
        "name": "config.rotation"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "offset from center point and rotation point",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset x",
        "name": "config.offsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset y",
        "name": "config.offsetY"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "makes the node draggable.  When stages are draggable, you can drag and drop\n the entire stage by dragging any portion of the stage",
        "name": "config.draggable"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.dragDistance"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "name": "config.dragBoundFunc"
      }
    ],
    "examples": [
      "// create label\nvar label = new Konva.Label({\n  x: 100,\n  y: 100,\n  draggable: true\n});\n\n// add a tag to the label\nlabel.add(new Konva.Tag({\n  fill: '#bbb',\n  stroke: '#333',\n  shadowColor: 'black',\n  shadowBlur: 10,\n  shadowOffset: [10, 10],\n  shadowOpacity: 0.2,\n  lineJoin: 'round',\n  pointerDirection: 'up',\n  pointerWidth: 20,\n  pointerHeight: 20,\n  cornerRadius: 5\n}));\n\n// add text to the label\nlabel.add(new Konva.Text({\n  text: 'Hello World!',\n  fontSize: 50,\n  lineHeight: 1.2,\n  padding: 10,\n  fill: 'green'\n }));"
    ],
    "order": 359
  },
  {
    "id": "Konva.Tag()",
    "longname": "Konva.Tag",
    "name": "Tag",
    "kind": "constructor",
    "memberof": "Konva.Tag",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be up, right, down, left, or none; the default\n is none.  When a pointer is present, the positioning of the label is relative to the tip of the pointer.",
        "name": "config.pointerDirection"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.pointerWidth"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.pointerHeight"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.cornerRadius"
      }
    ],
    "order": 363
  },
  {
    "id": "Konva.Rect()",
    "longname": "Konva.Rect",
    "name": "Rect",
    "kind": "constructor",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.cornerRadius"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "fill color",
        "name": "config.fill"
      },
      {
        "type": {
          "names": [
            "Image"
          ]
        },
        "optional": true,
        "description": "fill pattern image",
        "name": "config.fillPatternImage"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillPatternOffset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternOffsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternOffsetY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillPatternScale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternScaleX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternScaleY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternRotation"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\".  The default is \"no-repeat\"",
        "name": "config.fillPatternRepeat"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillLinearGradientStartPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientStartPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientStartPointY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillLinearGradientEndPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientEndPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientEndPointY"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "description": "array of color stops",
        "name": "config.fillLinearGradientColorStops"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillRadialGradientStartPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartPointY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillRadialGradientEndPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndPointY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartRadius"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndRadius"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "description": "array of color stops",
        "name": "config.fillRadialGradientColorStops"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the fill.  The default value is true",
        "name": "config.fillEnabled"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration",
        "name": "config.fillPriority"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "stroke color",
        "name": "config.stroke"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "stroke width",
        "name": "config.strokeWidth"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "Should we draw fill AFTER stroke? Default is false.",
        "name": "config.fillAfterStrokeEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "size of the stroke on hit canvas.  The default is \"auto\" - equals to strokeWidth",
        "name": "config.hitStrokeWidth"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables stroke hit region.  The default is true",
        "name": "config.strokeHitEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables using buffer canvas.  The default is true",
        "name": "config.perfectDrawEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables shadow for stroke.  The default is true",
        "name": "config.shadowForStrokeEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables stroke scale.  The default is true",
        "name": "config.strokeScaleEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the stroke.  The default value is true",
        "name": "config.strokeEnabled"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be miter, round, or bevel.  The default\n is miter",
        "name": "config.lineJoin"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be butt, round, or square.  The default\n is butt",
        "name": "config.lineCap"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "name": "config.shadowColor"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowBlur"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.shadowOffset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowOffsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowOffsetY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "shadow opacity.  Can be any real number\n between 0 and 1",
        "name": "config.shadowOpacity"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the shadow.  The default value is true",
        "name": "config.shadowEnabled"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "name": "config.dash"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the dashArray.  The default value is true",
        "name": "config.dashEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "name": "config.visible"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "whether or not the node is listening for events",
        "name": "config.listening"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "unique id",
        "name": "config.id"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "non-unique name",
        "name": "config.name"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "determines node opacity.  Can be any number between 0 and 1",
        "name": "config.opacity"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "set scale",
        "name": "config.scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale x",
        "name": "config.scaleX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale y",
        "name": "config.scaleY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "rotation in degrees",
        "name": "config.rotation"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "offset from center point and rotation point",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset x",
        "name": "config.offsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset y",
        "name": "config.offsetY"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "makes the node draggable.  When stages are draggable, you can drag and drop\n the entire stage by dragging any portion of the stage",
        "name": "config.draggable"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.dragDistance"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "name": "config.dragBoundFunc"
      }
    ],
    "examples": [
      "var rect = new Konva.Rect({\n  width: 100,\n  height: 50,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 5\n});"
    ],
    "order": 369
  },
  {
    "id": "Konva.RegularPolygon()",
    "longname": "Konva.RegularPolygon",
    "name": "RegularPolygon",
    "kind": "constructor",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "config.sides"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "config.radius"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "fill color",
        "name": "config.fill"
      },
      {
        "type": {
          "names": [
            "Image"
          ]
        },
        "optional": true,
        "description": "fill pattern image",
        "name": "config.fillPatternImage"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillPatternOffset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternOffsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternOffsetY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillPatternScale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternScaleX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternScaleY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternRotation"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\".  The default is \"no-repeat\"",
        "name": "config.fillPatternRepeat"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillLinearGradientStartPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientStartPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientStartPointY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillLinearGradientEndPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientEndPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientEndPointY"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "description": "array of color stops",
        "name": "config.fillLinearGradientColorStops"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillRadialGradientStartPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartPointY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillRadialGradientEndPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndPointY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartRadius"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndRadius"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "description": "array of color stops",
        "name": "config.fillRadialGradientColorStops"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the fill.  The default value is true",
        "name": "config.fillEnabled"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration",
        "name": "config.fillPriority"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "stroke color",
        "name": "config.stroke"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "stroke width",
        "name": "config.strokeWidth"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "Should we draw fill AFTER stroke? Default is false.",
        "name": "config.fillAfterStrokeEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "size of the stroke on hit canvas.  The default is \"auto\" - equals to strokeWidth",
        "name": "config.hitStrokeWidth"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables stroke hit region.  The default is true",
        "name": "config.strokeHitEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables using buffer canvas.  The default is true",
        "name": "config.perfectDrawEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables shadow for stroke.  The default is true",
        "name": "config.shadowForStrokeEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables stroke scale.  The default is true",
        "name": "config.strokeScaleEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the stroke.  The default value is true",
        "name": "config.strokeEnabled"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be miter, round, or bevel.  The default\n is miter",
        "name": "config.lineJoin"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be butt, round, or square.  The default\n is butt",
        "name": "config.lineCap"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "name": "config.shadowColor"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowBlur"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.shadowOffset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowOffsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowOffsetY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "shadow opacity.  Can be any real number\n between 0 and 1",
        "name": "config.shadowOpacity"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the shadow.  The default value is true",
        "name": "config.shadowEnabled"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "name": "config.dash"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the dashArray.  The default value is true",
        "name": "config.dashEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "name": "config.visible"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "whether or not the node is listening for events",
        "name": "config.listening"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "unique id",
        "name": "config.id"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "non-unique name",
        "name": "config.name"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "determines node opacity.  Can be any number between 0 and 1",
        "name": "config.opacity"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "set scale",
        "name": "config.scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale x",
        "name": "config.scaleX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale y",
        "name": "config.scaleY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "rotation in degrees",
        "name": "config.rotation"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "offset from center point and rotation point",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset x",
        "name": "config.offsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset y",
        "name": "config.offsetY"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "makes the node draggable.  When stages are draggable, you can drag and drop\n the entire stage by dragging any portion of the stage",
        "name": "config.draggable"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.dragDistance"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "name": "config.dragBoundFunc"
      }
    ],
    "examples": [
      "var hexagon = new Konva.RegularPolygon({\n  x: 100,\n  y: 200,\n  sides: 6,\n  radius: 70,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4\n});"
    ],
    "order": 372
  },
  {
    "id": "Konva.Ring()",
    "longname": "Konva.Ring",
    "name": "Ring",
    "kind": "constructor",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "config.innerRadius"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "config.outerRadius"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "fill color",
        "name": "config.fill"
      },
      {
        "type": {
          "names": [
            "Image"
          ]
        },
        "optional": true,
        "description": "fill pattern image",
        "name": "config.fillPatternImage"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillPatternOffset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternOffsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternOffsetY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillPatternScale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternScaleX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternScaleY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternRotation"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\".  The default is \"no-repeat\"",
        "name": "config.fillPatternRepeat"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillLinearGradientStartPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientStartPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientStartPointY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillLinearGradientEndPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientEndPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientEndPointY"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "description": "array of color stops",
        "name": "config.fillLinearGradientColorStops"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillRadialGradientStartPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartPointY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillRadialGradientEndPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndPointY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartRadius"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndRadius"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "description": "array of color stops",
        "name": "config.fillRadialGradientColorStops"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the fill.  The default value is true",
        "name": "config.fillEnabled"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration",
        "name": "config.fillPriority"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "stroke color",
        "name": "config.stroke"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "stroke width",
        "name": "config.strokeWidth"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "Should we draw fill AFTER stroke? Default is false.",
        "name": "config.fillAfterStrokeEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "size of the stroke on hit canvas.  The default is \"auto\" - equals to strokeWidth",
        "name": "config.hitStrokeWidth"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables stroke hit region.  The default is true",
        "name": "config.strokeHitEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables using buffer canvas.  The default is true",
        "name": "config.perfectDrawEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables shadow for stroke.  The default is true",
        "name": "config.shadowForStrokeEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables stroke scale.  The default is true",
        "name": "config.strokeScaleEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the stroke.  The default value is true",
        "name": "config.strokeEnabled"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be miter, round, or bevel.  The default\n is miter",
        "name": "config.lineJoin"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be butt, round, or square.  The default\n is butt",
        "name": "config.lineCap"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "name": "config.shadowColor"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowBlur"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.shadowOffset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowOffsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowOffsetY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "shadow opacity.  Can be any real number\n between 0 and 1",
        "name": "config.shadowOpacity"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the shadow.  The default value is true",
        "name": "config.shadowEnabled"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "name": "config.dash"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the dashArray.  The default value is true",
        "name": "config.dashEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "name": "config.visible"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "whether or not the node is listening for events",
        "name": "config.listening"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "unique id",
        "name": "config.id"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "non-unique name",
        "name": "config.name"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "determines node opacity.  Can be any number between 0 and 1",
        "name": "config.opacity"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "set scale",
        "name": "config.scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale x",
        "name": "config.scaleX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale y",
        "name": "config.scaleY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "rotation in degrees",
        "name": "config.rotation"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "offset from center point and rotation point",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset x",
        "name": "config.offsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset y",
        "name": "config.offsetY"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "makes the node draggable.  When stages are draggable, you can drag and drop\n the entire stage by dragging any portion of the stage",
        "name": "config.draggable"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.dragDistance"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "name": "config.dragBoundFunc"
      }
    ],
    "examples": [
      "var ring = new Konva.Ring({\n  innerRadius: 40,\n  outerRadius: 80,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 5\n});"
    ],
    "order": 376
  },
  {
    "id": "Konva.Sprite()",
    "longname": "Konva.Sprite",
    "name": "Sprite",
    "kind": "constructor",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "animation key",
        "name": "config.animation"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "animation map",
        "name": "config.animations"
      },
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "optional": true,
        "description": "animation frame index",
        "name": "config.frameIndex"
      },
      {
        "type": {
          "names": [
            "Image"
          ]
        },
        "description": "image object",
        "name": "config.image"
      },
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "optional": true,
        "description": "animation frame rate",
        "name": "config.frameRate"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "fill color",
        "name": "config.fill"
      },
      {
        "type": {
          "names": [
            "Image"
          ]
        },
        "optional": true,
        "description": "fill pattern image",
        "name": "config.fillPatternImage"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillPatternOffset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternOffsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternOffsetY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillPatternScale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternScaleX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternScaleY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternRotation"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\".  The default is \"no-repeat\"",
        "name": "config.fillPatternRepeat"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillLinearGradientStartPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientStartPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientStartPointY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillLinearGradientEndPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientEndPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientEndPointY"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "description": "array of color stops",
        "name": "config.fillLinearGradientColorStops"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillRadialGradientStartPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartPointY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillRadialGradientEndPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndPointY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartRadius"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndRadius"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "description": "array of color stops",
        "name": "config.fillRadialGradientColorStops"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the fill.  The default value is true",
        "name": "config.fillEnabled"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration",
        "name": "config.fillPriority"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "stroke color",
        "name": "config.stroke"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "stroke width",
        "name": "config.strokeWidth"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "Should we draw fill AFTER stroke? Default is false.",
        "name": "config.fillAfterStrokeEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "size of the stroke on hit canvas.  The default is \"auto\" - equals to strokeWidth",
        "name": "config.hitStrokeWidth"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables stroke hit region.  The default is true",
        "name": "config.strokeHitEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables using buffer canvas.  The default is true",
        "name": "config.perfectDrawEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables shadow for stroke.  The default is true",
        "name": "config.shadowForStrokeEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables stroke scale.  The default is true",
        "name": "config.strokeScaleEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the stroke.  The default value is true",
        "name": "config.strokeEnabled"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be miter, round, or bevel.  The default\n is miter",
        "name": "config.lineJoin"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be butt, round, or square.  The default\n is butt",
        "name": "config.lineCap"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "name": "config.shadowColor"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowBlur"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.shadowOffset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowOffsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowOffsetY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "shadow opacity.  Can be any real number\n between 0 and 1",
        "name": "config.shadowOpacity"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the shadow.  The default value is true",
        "name": "config.shadowEnabled"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "name": "config.dash"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the dashArray.  The default value is true",
        "name": "config.dashEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "name": "config.visible"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "whether or not the node is listening for events",
        "name": "config.listening"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "unique id",
        "name": "config.id"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "non-unique name",
        "name": "config.name"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "determines node opacity.  Can be any number between 0 and 1",
        "name": "config.opacity"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "set scale",
        "name": "config.scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale x",
        "name": "config.scaleX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale y",
        "name": "config.scaleY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "rotation in degrees",
        "name": "config.rotation"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "offset from center point and rotation point",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset x",
        "name": "config.offsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset y",
        "name": "config.offsetY"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "makes the node draggable.  When stages are draggable, you can drag and drop\n the entire stage by dragging any portion of the stage",
        "name": "config.draggable"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.dragDistance"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "name": "config.dragBoundFunc"
      }
    ],
    "examples": [
      "var imageObj = new Image();\nimageObj.onload = function() {\n  var sprite = new Konva.Sprite({\n    x: 200,\n    y: 100,\n    image: imageObj,\n    animation: 'standing',\n    animations: {\n      standing: [\n        // x, y, width, height (6 frames)\n        0, 0, 49, 109,\n        52, 0, 49, 109,\n        105, 0, 49, 109,\n        158, 0, 49, 109,\n        210, 0, 49, 109,\n        262, 0, 49, 109\n      ],\n      kicking: [\n        // x, y, width, height (6 frames)\n        0, 109, 45, 98,\n        45, 109, 45, 98,\n        95, 109, 63, 98,\n        156, 109, 70, 98,\n        229, 109, 60, 98,\n        287, 109, 41, 98\n      ]\n    },\n    frameRate: 7,\n    frameIndex: 0\n  });\n};\nimageObj.src = '/path/to/image.jpg'"
    ],
    "order": 380
  },
  {
    "id": "Konva.Star()",
    "longname": "Konva.Star",
    "name": "Star",
    "kind": "constructor",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "config.numPoints"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "config.innerRadius"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "config.outerRadius"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "fill color",
        "name": "config.fill"
      },
      {
        "type": {
          "names": [
            "Image"
          ]
        },
        "optional": true,
        "description": "fill pattern image",
        "name": "config.fillPatternImage"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillPatternOffset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternOffsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternOffsetY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillPatternScale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternScaleX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternScaleY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternRotation"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\".  The default is \"no-repeat\"",
        "name": "config.fillPatternRepeat"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillLinearGradientStartPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientStartPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientStartPointY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillLinearGradientEndPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientEndPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientEndPointY"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "description": "array of color stops",
        "name": "config.fillLinearGradientColorStops"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillRadialGradientStartPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartPointY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillRadialGradientEndPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndPointY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartRadius"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndRadius"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "description": "array of color stops",
        "name": "config.fillRadialGradientColorStops"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the fill.  The default value is true",
        "name": "config.fillEnabled"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration",
        "name": "config.fillPriority"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "stroke color",
        "name": "config.stroke"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "stroke width",
        "name": "config.strokeWidth"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "Should we draw fill AFTER stroke? Default is false.",
        "name": "config.fillAfterStrokeEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "size of the stroke on hit canvas.  The default is \"auto\" - equals to strokeWidth",
        "name": "config.hitStrokeWidth"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables stroke hit region.  The default is true",
        "name": "config.strokeHitEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables using buffer canvas.  The default is true",
        "name": "config.perfectDrawEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables shadow for stroke.  The default is true",
        "name": "config.shadowForStrokeEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables stroke scale.  The default is true",
        "name": "config.strokeScaleEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the stroke.  The default value is true",
        "name": "config.strokeEnabled"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be miter, round, or bevel.  The default\n is miter",
        "name": "config.lineJoin"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be butt, round, or square.  The default\n is butt",
        "name": "config.lineCap"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "name": "config.shadowColor"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowBlur"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.shadowOffset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowOffsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowOffsetY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "shadow opacity.  Can be any real number\n between 0 and 1",
        "name": "config.shadowOpacity"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the shadow.  The default value is true",
        "name": "config.shadowEnabled"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "name": "config.dash"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the dashArray.  The default value is true",
        "name": "config.dashEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "name": "config.visible"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "whether or not the node is listening for events",
        "name": "config.listening"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "unique id",
        "name": "config.id"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "non-unique name",
        "name": "config.name"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "determines node opacity.  Can be any number between 0 and 1",
        "name": "config.opacity"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "set scale",
        "name": "config.scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale x",
        "name": "config.scaleX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale y",
        "name": "config.scaleY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "rotation in degrees",
        "name": "config.rotation"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "offset from center point and rotation point",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset x",
        "name": "config.offsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset y",
        "name": "config.offsetY"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "makes the node draggable.  When stages are draggable, you can drag and drop\n the entire stage by dragging any portion of the stage",
        "name": "config.draggable"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.dragDistance"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "name": "config.dragBoundFunc"
      }
    ],
    "examples": [
      "var star = new Konva.Star({\n  x: 100,\n  y: 200,\n  numPoints: 5,\n  innerRadius: 70,\n  outerRadius: 70,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4\n});"
    ],
    "order": 391
  },
  {
    "id": "Konva.Text()",
    "longname": "Konva.Text",
    "name": "Text",
    "kind": "constructor",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "default is inherit",
        "name": "config.direction"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "default is Arial",
        "name": "config.fontFamily"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "in pixels.  Default is 12",
        "name": "config.fontSize"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be 'normal', 'italic', or 'bold', '500' or even 'italic bold'.  'normal' is the default.",
        "name": "config.fontStyle"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be normal or small-caps.  Default is normal",
        "name": "config.fontVariant"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be line-through, underline or empty string. Default is empty string.",
        "name": "config.textDecoration"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "config.text"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be left, center, or right",
        "name": "config.align"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be top, middle or bottom",
        "name": "config.verticalAlign"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.padding"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "default is 1",
        "name": "config.lineHeight"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"word\", \"char\", or \"none\". Default is word",
        "name": "config.wrap"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "can be true or false. Default is false. if Konva.Text config is set to wrap=\"none\" and ellipsis=true, then it will add \"...\" to the end",
        "name": "config.ellipsis"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "fill color",
        "name": "config.fill"
      },
      {
        "type": {
          "names": [
            "Image"
          ]
        },
        "optional": true,
        "description": "fill pattern image",
        "name": "config.fillPatternImage"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillPatternOffset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternOffsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternOffsetY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillPatternScale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternScaleX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternScaleY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternRotation"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\".  The default is \"no-repeat\"",
        "name": "config.fillPatternRepeat"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillLinearGradientStartPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientStartPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientStartPointY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillLinearGradientEndPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientEndPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientEndPointY"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "description": "array of color stops",
        "name": "config.fillLinearGradientColorStops"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillRadialGradientStartPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartPointY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillRadialGradientEndPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndPointY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartRadius"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndRadius"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "description": "array of color stops",
        "name": "config.fillRadialGradientColorStops"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the fill.  The default value is true",
        "name": "config.fillEnabled"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration",
        "name": "config.fillPriority"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "stroke color",
        "name": "config.stroke"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "stroke width",
        "name": "config.strokeWidth"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "Should we draw fill AFTER stroke? Default is false.",
        "name": "config.fillAfterStrokeEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "size of the stroke on hit canvas.  The default is \"auto\" - equals to strokeWidth",
        "name": "config.hitStrokeWidth"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables stroke hit region.  The default is true",
        "name": "config.strokeHitEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables using buffer canvas.  The default is true",
        "name": "config.perfectDrawEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables shadow for stroke.  The default is true",
        "name": "config.shadowForStrokeEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables stroke scale.  The default is true",
        "name": "config.strokeScaleEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the stroke.  The default value is true",
        "name": "config.strokeEnabled"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be miter, round, or bevel.  The default\n is miter",
        "name": "config.lineJoin"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be butt, round, or square.  The default\n is butt",
        "name": "config.lineCap"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "name": "config.shadowColor"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowBlur"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.shadowOffset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowOffsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowOffsetY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "shadow opacity.  Can be any real number\n between 0 and 1",
        "name": "config.shadowOpacity"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the shadow.  The default value is true",
        "name": "config.shadowEnabled"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "name": "config.dash"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the dashArray.  The default value is true",
        "name": "config.dashEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "name": "config.visible"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "whether or not the node is listening for events",
        "name": "config.listening"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "unique id",
        "name": "config.id"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "non-unique name",
        "name": "config.name"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "determines node opacity.  Can be any number between 0 and 1",
        "name": "config.opacity"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "set scale",
        "name": "config.scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale x",
        "name": "config.scaleX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale y",
        "name": "config.scaleY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "rotation in degrees",
        "name": "config.rotation"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "offset from center point and rotation point",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset x",
        "name": "config.offsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset y",
        "name": "config.offsetY"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "makes the node draggable.  When stages are draggable, you can drag and drop\n the entire stage by dragging any portion of the stage",
        "name": "config.draggable"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.dragDistance"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "name": "config.dragBoundFunc"
      }
    ],
    "examples": [
      "var text = new Konva.Text({\n  x: 10,\n  y: 15,\n  text: 'Simple Text',\n  fontSize: 30,\n  fontFamily: 'Calibri',\n  fill: 'green'\n});"
    ],
    "order": 396
  },
  {
    "id": "Konva.TextPath()",
    "longname": "Konva.TextPath",
    "name": "TextPath",
    "kind": "constructor",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "default is Arial",
        "name": "config.fontFamily"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "default is 12",
        "name": "config.fontSize"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "Can be 'normal', 'italic', or 'bold', '500' or even 'italic bold'.  'normal' is the default.",
        "name": "config.fontStyle"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be normal or small-caps.  Default is normal",
        "name": "config.fontVariant"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "Can be 'top', 'bottom', 'middle', 'alphabetic', 'hanging'. Default is middle",
        "name": "config.textBaseline"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "config.text"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "SVG data string",
        "name": "config.data"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "a getter for kerning values for the specified characters",
        "name": "config.kerningFunc"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "fill color",
        "name": "config.fill"
      },
      {
        "type": {
          "names": [
            "Image"
          ]
        },
        "optional": true,
        "description": "fill pattern image",
        "name": "config.fillPatternImage"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillPatternOffset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternOffsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternOffsetY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillPatternScale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternScaleX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternScaleY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternRotation"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\".  The default is \"no-repeat\"",
        "name": "config.fillPatternRepeat"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillLinearGradientStartPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientStartPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientStartPointY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillLinearGradientEndPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientEndPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientEndPointY"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "description": "array of color stops",
        "name": "config.fillLinearGradientColorStops"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillRadialGradientStartPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartPointY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillRadialGradientEndPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndPointY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartRadius"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndRadius"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "description": "array of color stops",
        "name": "config.fillRadialGradientColorStops"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the fill.  The default value is true",
        "name": "config.fillEnabled"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration",
        "name": "config.fillPriority"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "stroke color",
        "name": "config.stroke"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "stroke width",
        "name": "config.strokeWidth"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "Should we draw fill AFTER stroke? Default is false.",
        "name": "config.fillAfterStrokeEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "size of the stroke on hit canvas.  The default is \"auto\" - equals to strokeWidth",
        "name": "config.hitStrokeWidth"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables stroke hit region.  The default is true",
        "name": "config.strokeHitEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables using buffer canvas.  The default is true",
        "name": "config.perfectDrawEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables shadow for stroke.  The default is true",
        "name": "config.shadowForStrokeEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables stroke scale.  The default is true",
        "name": "config.strokeScaleEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the stroke.  The default value is true",
        "name": "config.strokeEnabled"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be miter, round, or bevel.  The default\n is miter",
        "name": "config.lineJoin"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be butt, round, or square.  The default\n is butt",
        "name": "config.lineCap"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "name": "config.shadowColor"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowBlur"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.shadowOffset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowOffsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowOffsetY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "shadow opacity.  Can be any real number\n between 0 and 1",
        "name": "config.shadowOpacity"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the shadow.  The default value is true",
        "name": "config.shadowEnabled"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "name": "config.dash"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the dashArray.  The default value is true",
        "name": "config.dashEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "name": "config.visible"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "whether or not the node is listening for events",
        "name": "config.listening"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "unique id",
        "name": "config.id"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "non-unique name",
        "name": "config.name"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "determines node opacity.  Can be any number between 0 and 1",
        "name": "config.opacity"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "set scale",
        "name": "config.scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale x",
        "name": "config.scaleX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale y",
        "name": "config.scaleY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "rotation in degrees",
        "name": "config.rotation"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "offset from center point and rotation point",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset x",
        "name": "config.offsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset y",
        "name": "config.offsetY"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "makes the node draggable.  When stages are draggable, you can drag and drop\n the entire stage by dragging any portion of the stage",
        "name": "config.draggable"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.dragDistance"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "name": "config.dragBoundFunc"
      }
    ],
    "examples": [
      "var kerningPairs = {\n  'A': {\n    ' ': -0.05517578125,\n    'T': -0.07421875,\n    'V': -0.07421875\n  }\n  'V': {\n    ',': -0.091796875,\n    \":\": -0.037109375,\n    \";\": -0.037109375,\n    \"A\": -0.07421875\n  }\n}\nvar textpath = new Konva.TextPath({\n  x: 100,\n  y: 50,\n  fill: '#333',\n  fontSize: '24',\n  fontFamily: 'Arial',\n  text: 'All the world\\'s a stage, and all the men and women merely players.',\n  data: 'M10,10 C0,0 10,150 100,100 S300,150 400,50',\n  kerningFunc(leftChar, rightChar) {\n    return kerningPairs.hasOwnProperty(leftChar) ? pairs[leftChar][rightChar] || 0 : 0\n  }\n});"
    ],
    "order": 417
  },
  {
    "id": "Konva.Transformer()",
    "longname": "Konva.Transformer",
    "name": "Transformer",
    "kind": "constructor",
    "memberof": "Konva.Transformer",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "Default is true",
        "name": "config.resizeEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "Default is true",
        "name": "config.rotateEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "Default is true",
        "name": "config.rotateLineVisible"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "description": "Array of angles for rotation snaps. Default is []",
        "name": "config.rotationSnaps"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "Snapping tolerance. If closer than this it will snap. Default is 5",
        "name": "config.rotationSnapTolerance"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "Default is 50",
        "name": "config.rotateAnchorOffset"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "Default is crosshair",
        "name": "config.rotateAnchorCursor"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "Default is 0",
        "name": "config.padding"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "Should we draw border? Default is true",
        "name": "config.borderEnabled"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "Border stroke color",
        "name": "config.borderStroke"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "Border stroke size",
        "name": "config.borderStrokeWidth"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "description": "Array for border dash.",
        "name": "config.borderDash"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "Anchor fill color",
        "name": "config.anchorFill"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "Anchor stroke color",
        "name": "config.anchorStroke"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "Anchor corner radius",
        "name": "config.anchorCornerRadius"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "Anchor stroke size",
        "name": "config.anchorStrokeWidth"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "Default is 10",
        "name": "config.anchorSize"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "Should we keep ratio when we are moving edges? Default is true",
        "name": "config.keepRatio"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "How does transformer react on shift key press when we are moving edges? Default is 'default'",
        "name": "config.shiftBehavior"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "Should we resize relative to node's center? Default is false",
        "name": "config.centeredScaling"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "description": "Array of names of enabled handles",
        "name": "config.enabledAnchors"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "Can we flip/mirror shape on transform?. True by default",
        "name": "config.flipEnabled"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Bounding box function",
        "name": "config.boundBoxFunc"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Should we ignore stroke size? Default is false",
        "name": "config.ignoreStroke"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "When just one node attached, should we use its rotation for transformer?",
        "name": "config.useSingleNodeRotation"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "Should we fill whole transformer area with fake transparent shape to enable dragging from empty spaces?",
        "name": "config.shouldOverdrawWholeArea"
      }
    ],
    "examples": [
      "var transformer = new Konva.Transformer({\n  nodes: [rectangle],\n  rotateAnchorOffset: 60,\n  enabledAnchors: ['top-left', 'top-right', 'bottom-left', 'bottom-right']\n});\nlayer.add(transformer);"
    ],
    "order": 431
  },
  {
    "id": "Konva.Wedge()",
    "longname": "Konva.Wedge",
    "name": "Wedge",
    "kind": "constructor",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "in degrees",
        "name": "config.angle"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "config.radius"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "name": "config.clockwise"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "fill color",
        "name": "config.fill"
      },
      {
        "type": {
          "names": [
            "Image"
          ]
        },
        "optional": true,
        "description": "fill pattern image",
        "name": "config.fillPatternImage"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillPatternOffset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternOffsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternOffsetY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillPatternScale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternScaleX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternScaleY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillPatternRotation"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\".  The default is \"no-repeat\"",
        "name": "config.fillPatternRepeat"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillLinearGradientStartPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientStartPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientStartPointY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillLinearGradientEndPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientEndPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillLinearGradientEndPointY"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "description": "array of color stops",
        "name": "config.fillLinearGradientColorStops"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillRadialGradientStartPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartPointY"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.fillRadialGradientEndPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndPointX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndPointY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientStartRadius"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.fillRadialGradientEndRadius"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "description": "array of color stops",
        "name": "config.fillRadialGradientColorStops"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the fill.  The default value is true",
        "name": "config.fillEnabled"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration",
        "name": "config.fillPriority"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "stroke color",
        "name": "config.stroke"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "stroke width",
        "name": "config.strokeWidth"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "Should we draw fill AFTER stroke? Default is false.",
        "name": "config.fillAfterStrokeEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "size of the stroke on hit canvas.  The default is \"auto\" - equals to strokeWidth",
        "name": "config.hitStrokeWidth"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables stroke hit region.  The default is true",
        "name": "config.strokeHitEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables using buffer canvas.  The default is true",
        "name": "config.perfectDrawEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables shadow for stroke.  The default is true",
        "name": "config.shadowForStrokeEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables stroke scale.  The default is true",
        "name": "config.strokeScaleEnabled"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the stroke.  The default value is true",
        "name": "config.strokeEnabled"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be miter, round, or bevel.  The default\n is miter",
        "name": "config.lineJoin"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be butt, round, or square.  The default\n is butt",
        "name": "config.lineCap"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "name": "config.shadowColor"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowBlur"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "object with x and y component",
        "name": "config.shadowOffset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowOffsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.shadowOffsetY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "shadow opacity.  Can be any real number\n between 0 and 1",
        "name": "config.shadowOpacity"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the shadow.  The default value is true",
        "name": "config.shadowEnabled"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "name": "config.dash"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "flag which enables or disables the dashArray.  The default value is true",
        "name": "config.dashEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "name": "config.visible"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "whether or not the node is listening for events",
        "name": "config.listening"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "unique id",
        "name": "config.id"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "non-unique name",
        "name": "config.name"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "determines node opacity.  Can be any number between 0 and 1",
        "name": "config.opacity"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "set scale",
        "name": "config.scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale x",
        "name": "config.scaleX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set scale y",
        "name": "config.scaleY"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "rotation in degrees",
        "name": "config.rotation"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "offset from center point and rotation point",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset x",
        "name": "config.offsetX"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "set offset y",
        "name": "config.offsetY"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "makes the node draggable.  When stages are draggable, you can drag and drop\n the entire stage by dragging any portion of the stage",
        "name": "config.draggable"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.dragDistance"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "name": "config.dragBoundFunc"
      }
    ],
    "examples": [
      "// draw a wedge that's pointing downwards\nvar wedge = new Konva.Wedge({\n  radius: 40,\n  fill: 'red',\n  stroke: 'black'\n  strokeWidth: 5,\n  angleDeg: 60,\n  rotationDeg: -120\n});"
    ],
    "order": 469
  },
  {
    "id": "Konva",
    "longname": "Konva",
    "name": "Konva",
    "kind": "namespace",
    "scope": "global",
    "meta": {
      "lineno": 19,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 0
  },
  {
    "id": "Konva.Transform#copy",
    "longname": "Konva.Transform#copy",
    "name": "copy",
    "kind": "function",
    "scope": "instance",
    "description": "Copy Konva.Transform object",
    "memberof": "Konva.Transform",
    "examples": [
      "const tr = shape.getTransform().copy()"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 225,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 14
  },
  {
    "id": "Konva.Transform#point",
    "longname": "Konva.Transform#point",
    "name": "point",
    "kind": "function",
    "scope": "instance",
    "description": "Transform point",
    "memberof": "Konva.Transform",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "2D point(x, y)",
        "name": "point"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "2D point(x, y)"
      }
    ],
    "meta": {
      "lineno": 244,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 15
  },
  {
    "id": "Konva.Transform#translate",
    "longname": "Konva.Transform#translate",
    "name": "translate",
    "kind": "function",
    "scope": "instance",
    "description": "Apply translation",
    "memberof": "Konva.Transform",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 258,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 16
  },
  {
    "id": "Konva.Transform#scale",
    "longname": "Konva.Transform#scale",
    "name": "scale",
    "kind": "function",
    "scope": "instance",
    "description": "Apply scale",
    "memberof": "Konva.Transform",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "sx"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "sy"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 271,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 17
  },
  {
    "id": "Konva.Transform#rotate",
    "longname": "Konva.Transform#rotate",
    "name": "rotate",
    "kind": "function",
    "scope": "instance",
    "description": "Apply rotation",
    "memberof": "Konva.Transform",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "Angle in radians",
        "name": "rad"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 286,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 18
  },
  {
    "id": "Konva.Transform#getTranslation",
    "longname": "Konva.Transform#getTranslation",
    "name": "getTranslation",
    "kind": "function",
    "scope": "instance",
    "description": "Returns the translation",
    "memberof": "Konva.Transform",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "2D point(x, y)"
      }
    ],
    "meta": {
      "lineno": 306,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 19
  },
  {
    "id": "Konva.Transform#skew",
    "longname": "Konva.Transform#skew",
    "name": "skew",
    "kind": "function",
    "scope": "instance",
    "description": "Apply skew",
    "memberof": "Konva.Transform",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "sx"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "sy"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 318,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 20
  },
  {
    "id": "Konva.Transform#multiply",
    "longname": "Konva.Transform#multiply",
    "name": "multiply",
    "kind": "function",
    "scope": "instance",
    "description": "Transform multiplication",
    "memberof": "Konva.Transform",
    "params": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        },
        "name": "matrix"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 337,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 21
  },
  {
    "id": "Konva.Transform#invert",
    "longname": "Konva.Transform#invert",
    "name": "invert",
    "kind": "function",
    "scope": "instance",
    "description": "Invert the matrix",
    "memberof": "Konva.Transform",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 359,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 22
  },
  {
    "id": "Konva.Transform#getMatrix",
    "longname": "Konva.Transform#getMatrix",
    "name": "getMatrix",
    "kind": "function",
    "scope": "instance",
    "description": "return matrix",
    "memberof": "Konva.Transform",
    "meta": {
      "lineno": 381,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 23
  },
  {
    "id": "Konva.Transform#decompose",
    "longname": "Konva.Transform#decompose",
    "name": "decompose",
    "kind": "function",
    "scope": "instance",
    "description": "convert transformation matrix back into node's attributes",
    "memberof": "Konva.Transform",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 389,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 24
  },
  {
    "id": "Konva.Context#fillShape",
    "longname": "Konva.Context#fillShape",
    "name": "fillShape",
    "kind": "function",
    "scope": "instance",
    "description": "fill shape",
    "memberof": "Konva.Context",
    "params": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        },
        "name": "shape"
      }
    ],
    "meta": {
      "lineno": 1539,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 31
  },
  {
    "id": "Konva.Context#strokeShape",
    "longname": "Konva.Context#strokeShape",
    "name": "strokeShape",
    "kind": "function",
    "scope": "instance",
    "description": "stroke shape",
    "memberof": "Konva.Context",
    "params": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        },
        "name": "shape"
      }
    ],
    "meta": {
      "lineno": 1553,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 32
  },
  {
    "id": "Konva.Context#fillStrokeShape",
    "longname": "Konva.Context#fillStrokeShape",
    "name": "fillStrokeShape",
    "kind": "function",
    "scope": "instance",
    "description": "fill then stroke",
    "memberof": "Konva.Context",
    "params": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        },
        "name": "shape"
      }
    ],
    "meta": {
      "lineno": 1567,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 33
  },
  {
    "id": "Konva.Context#reset",
    "longname": "Konva.Context#reset",
    "name": "reset",
    "kind": "function",
    "scope": "instance",
    "description": "reset canvas context transform",
    "memberof": "Konva.Context",
    "meta": {
      "lineno": 1629,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 34
  },
  {
    "id": "Konva.Context#getCanvas",
    "longname": "Konva.Context#getCanvas",
    "name": "getCanvas",
    "kind": "function",
    "scope": "instance",
    "description": "get canvas wrapper",
    "memberof": "Konva.Context",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Canvas"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 1638,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 35
  },
  {
    "id": "Konva.Context#clear",
    "longname": "Konva.Context#clear",
    "name": "clear",
    "kind": "function",
    "scope": "instance",
    "description": "clear canvas",
    "memberof": "Konva.Context",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "name": "bounds"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "bounds.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "bounds.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "bounds.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "bounds.height"
      }
    ],
    "meta": {
      "lineno": 1647,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 36
  },
  {
    "id": "Konva.Context#arc",
    "longname": "Konva.Context#arc",
    "name": "arc",
    "kind": "function",
    "scope": "instance",
    "description": "arc function.",
    "memberof": "Konva.Context",
    "meta": {
      "lineno": 1687,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 37
  },
  {
    "id": "Konva.Context#arcTo",
    "longname": "Konva.Context#arcTo",
    "name": "arcTo",
    "kind": "function",
    "scope": "instance",
    "description": "arcTo function.",
    "memberof": "Konva.Context",
    "meta": {
      "lineno": 1695,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 38
  },
  {
    "id": "Konva.Context#beginPath",
    "longname": "Konva.Context#beginPath",
    "name": "beginPath",
    "kind": "function",
    "scope": "instance",
    "description": "beginPath function.",
    "memberof": "Konva.Context",
    "meta": {
      "lineno": 1704,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 39
  },
  {
    "id": "Konva.Context#bezierCurveTo",
    "longname": "Konva.Context#bezierCurveTo",
    "name": "bezierCurveTo",
    "kind": "function",
    "scope": "instance",
    "description": "bezierCurveTo function.",
    "memberof": "Konva.Context",
    "meta": {
      "lineno": 1712,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 40
  },
  {
    "id": "Konva.Context#clearRect",
    "longname": "Konva.Context#clearRect",
    "name": "clearRect",
    "kind": "function",
    "scope": "instance",
    "description": "clearRect function.",
    "memberof": "Konva.Context",
    "meta": {
      "lineno": 1720,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 41
  },
  {
    "id": "Konva.Context#closePath",
    "longname": "Konva.Context#closePath",
    "name": "closePath",
    "kind": "function",
    "scope": "instance",
    "description": "closePath function.",
    "memberof": "Konva.Context",
    "meta": {
      "lineno": 1731,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 42
  },
  {
    "id": "Konva.Context#createImageData",
    "longname": "Konva.Context#createImageData",
    "name": "createImageData",
    "kind": "function",
    "scope": "instance",
    "description": "createImageData function.",
    "memberof": "Konva.Context",
    "meta": {
      "lineno": 1739,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 43
  },
  {
    "id": "Konva.Context#createLinearGradient",
    "longname": "Konva.Context#createLinearGradient",
    "name": "createLinearGradient",
    "kind": "function",
    "scope": "instance",
    "description": "createLinearGradient function.",
    "memberof": "Konva.Context",
    "meta": {
      "lineno": 1753,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 44
  },
  {
    "id": "Konva.Context#createPattern",
    "longname": "Konva.Context#createPattern",
    "name": "createPattern",
    "kind": "function",
    "scope": "instance",
    "description": "createPattern function.",
    "memberof": "Konva.Context",
    "meta": {
      "lineno": 1761,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 45
  },
  {
    "id": "Konva.Context#createRadialGradient",
    "longname": "Konva.Context#createRadialGradient",
    "name": "createRadialGradient",
    "kind": "function",
    "scope": "instance",
    "description": "createRadialGradient function.",
    "memberof": "Konva.Context",
    "meta": {
      "lineno": 1769,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 46
  },
  {
    "id": "Konva.Context#drawImage",
    "longname": "Konva.Context#drawImage",
    "name": "drawImage",
    "kind": "function",
    "scope": "instance",
    "description": "drawImage function.",
    "memberof": "Konva.Context",
    "meta": {
      "lineno": 1777,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 47
  },
  {
    "id": "Konva.Context#ellipse",
    "longname": "Konva.Context#ellipse",
    "name": "ellipse",
    "kind": "function",
    "scope": "instance",
    "description": "ellipse function.",
    "memberof": "Konva.Context",
    "meta": {
      "lineno": 1795,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 48
  },
  {
    "id": "Konva.Context#isPointInPath",
    "longname": "Konva.Context#isPointInPath",
    "name": "isPointInPath",
    "kind": "function",
    "scope": "instance",
    "description": "isPointInPath function.",
    "memberof": "Konva.Context",
    "meta": {
      "lineno": 1803,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 49
  },
  {
    "id": "Konva.Context#fillRect",
    "longname": "Konva.Context#fillRect",
    "name": "fillRect",
    "kind": "function",
    "scope": "instance",
    "description": "fillRect function.",
    "memberof": "Konva.Context",
    "meta": {
      "lineno": 1818,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 50
  },
  {
    "id": "Konva.Context#strokeRect",
    "longname": "Konva.Context#strokeRect",
    "name": "strokeRect",
    "kind": "function",
    "scope": "instance",
    "description": "strokeRect function.",
    "memberof": "Konva.Context",
    "meta": {
      "lineno": 1826,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 51
  },
  {
    "id": "Konva.Context#fillText",
    "longname": "Konva.Context#fillText",
    "name": "fillText",
    "kind": "function",
    "scope": "instance",
    "description": "fillText function.",
    "memberof": "Konva.Context",
    "meta": {
      "lineno": 1834,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 52
  },
  {
    "id": "Konva.Context#measureText",
    "longname": "Konva.Context#measureText",
    "name": "measureText",
    "kind": "function",
    "scope": "instance",
    "description": "measureText function.",
    "memberof": "Konva.Context",
    "meta": {
      "lineno": 1847,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 53
  },
  {
    "id": "Konva.Context#getImageData",
    "longname": "Konva.Context#getImageData",
    "name": "getImageData",
    "kind": "function",
    "scope": "instance",
    "description": "getImageData function.",
    "memberof": "Konva.Context",
    "meta": {
      "lineno": 1855,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 54
  },
  {
    "id": "Konva.Context#lineTo",
    "longname": "Konva.Context#lineTo",
    "name": "lineTo",
    "kind": "function",
    "scope": "instance",
    "description": "lineTo function.",
    "memberof": "Konva.Context",
    "meta": {
      "lineno": 1863,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 55
  },
  {
    "id": "Konva.Context#moveTo",
    "longname": "Konva.Context#moveTo",
    "name": "moveTo",
    "kind": "function",
    "scope": "instance",
    "description": "moveTo function.",
    "memberof": "Konva.Context",
    "meta": {
      "lineno": 1871,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 56
  },
  {
    "id": "Konva.Context#rect",
    "longname": "Konva.Context#rect",
    "name": "rect",
    "kind": "function",
    "scope": "instance",
    "description": "rect function.",
    "memberof": "Konva.Context",
    "meta": {
      "lineno": 1879,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 57
  },
  {
    "id": "Konva.Context#roundRect",
    "longname": "Konva.Context#roundRect",
    "name": "roundRect",
    "kind": "function",
    "scope": "instance",
    "description": "roundRect function.",
    "memberof": "Konva.Context",
    "meta": {
      "lineno": 1887,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 58
  },
  {
    "id": "Konva.Context#putImageData",
    "longname": "Konva.Context#putImageData",
    "name": "putImageData",
    "kind": "function",
    "scope": "instance",
    "description": "putImageData function.",
    "memberof": "Konva.Context",
    "meta": {
      "lineno": 1895,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 59
  },
  {
    "id": "Konva.Context#quadraticCurveTo",
    "longname": "Konva.Context#quadraticCurveTo",
    "name": "quadraticCurveTo",
    "kind": "function",
    "scope": "instance",
    "description": "quadraticCurveTo function.",
    "memberof": "Konva.Context",
    "meta": {
      "lineno": 1903,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 60
  },
  {
    "id": "Konva.Context#restore",
    "longname": "Konva.Context#restore",
    "name": "restore",
    "kind": "function",
    "scope": "instance",
    "description": "restore function.",
    "memberof": "Konva.Context",
    "meta": {
      "lineno": 1911,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 61
  },
  {
    "id": "Konva.Context#rotate",
    "longname": "Konva.Context#rotate",
    "name": "rotate",
    "kind": "function",
    "scope": "instance",
    "description": "rotate function.",
    "memberof": "Konva.Context",
    "meta": {
      "lineno": 1919,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 62
  },
  {
    "id": "Konva.Context#save",
    "longname": "Konva.Context#save",
    "name": "save",
    "kind": "function",
    "scope": "instance",
    "description": "save function.",
    "memberof": "Konva.Context",
    "meta": {
      "lineno": 1927,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 63
  },
  {
    "id": "Konva.Context#scale",
    "longname": "Konva.Context#scale",
    "name": "scale",
    "kind": "function",
    "scope": "instance",
    "description": "scale function.",
    "memberof": "Konva.Context",
    "meta": {
      "lineno": 1935,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 64
  },
  {
    "id": "Konva.Context#setLineDash",
    "longname": "Konva.Context#setLineDash",
    "name": "setLineDash",
    "kind": "function",
    "scope": "instance",
    "description": "setLineDash function.",
    "memberof": "Konva.Context",
    "meta": {
      "lineno": 1943,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 65
  },
  {
    "id": "Konva.Context#getLineDash",
    "longname": "Konva.Context#getLineDash",
    "name": "getLineDash",
    "kind": "function",
    "scope": "instance",
    "description": "getLineDash function.",
    "memberof": "Konva.Context",
    "meta": {
      "lineno": 1963,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 66
  },
  {
    "id": "Konva.Context#setTransform",
    "longname": "Konva.Context#setTransform",
    "name": "setTransform",
    "kind": "function",
    "scope": "instance",
    "description": "setTransform function.",
    "memberof": "Konva.Context",
    "meta": {
      "lineno": 1971,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 67
  },
  {
    "id": "Konva.Context#stroke",
    "longname": "Konva.Context#stroke",
    "name": "stroke",
    "kind": "function",
    "scope": "instance",
    "description": "stroke function.",
    "memberof": "Konva.Context",
    "meta": {
      "lineno": 1979,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 68
  },
  {
    "id": "Konva.Context#strokeText",
    "longname": "Konva.Context#strokeText",
    "name": "strokeText",
    "kind": "function",
    "scope": "instance",
    "description": "strokeText function.",
    "memberof": "Konva.Context",
    "meta": {
      "lineno": 1992,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 69
  },
  {
    "id": "Konva.Context#transform",
    "longname": "Konva.Context#transform",
    "name": "transform",
    "kind": "function",
    "scope": "instance",
    "description": "transform function.",
    "memberof": "Konva.Context",
    "meta": {
      "lineno": 2000,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 70
  },
  {
    "id": "Konva.Context#translate",
    "longname": "Konva.Context#translate",
    "name": "translate",
    "kind": "function",
    "scope": "instance",
    "description": "translate function.",
    "memberof": "Konva.Context",
    "meta": {
      "lineno": 2008,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 71
  },
  {
    "id": "Konva.Canvas#getContext",
    "longname": "Konva.Canvas#getContext",
    "name": "getContext",
    "kind": "function",
    "scope": "instance",
    "description": "get canvas context",
    "memberof": "Konva.Canvas",
    "returns": [
      {
        "type": {
          "names": [
            "CanvasContext"
          ]
        },
        "description": "context"
      }
    ],
    "meta": {
      "lineno": 2279,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 74
  },
  {
    "id": "Konva.Canvas#toDataURL",
    "longname": "Konva.Canvas#toDataURL",
    "name": "toDataURL",
    "kind": "function",
    "scope": "instance",
    "description": "to data url",
    "memberof": "Konva.Canvas",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1 for jpg mime types",
        "name": "quality"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "data url string"
      }
    ],
    "meta": {
      "lineno": 2320,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 75
  },
  {
    "id": "Konva.Canvas#pixelRatio",
    "longname": "Konva.Canvas#pixelRatio",
    "name": "pixelRatio",
    "kind": "function",
    "scope": "instance",
    "description": "get/set pixel ratio.\nKonvaJS automatically handles pixel ratio adustments in order to render crisp drawings\n on all devices. Most desktops, low end tablets, and low end phones, have device pixel ratios\n of 1.  Some high end tablets and phones, like iPhones and iPads have a device pixel ratio\n of 2.  Some Macbook Pros, and iMacs also have a device pixel ratio of 2.  Some high end Android devices have pixel\n ratios of 2 or 3.  Some browsers like Firefox allow you to configure the pixel ratio of the viewport.  Unless otherwise\n specificed, the pixel ratio will be defaulted to the actual device pixel ratio.  You can override the device pixel\n ratio for special situations, or, if you don't want the pixel ratio to be taken into account, you can set it to 1.",
    "memberof": "Konva.Canvas",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pixelRatio"
      }
    ],
    "examples": [
      "// get\nvar pixelRatio = layer.getCanvas.pixelRatio();\n\n// set\nlayer.getCanvas().pixelRatio(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2347,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 76
  },
  {
    "id": "Konva.Node#clearCache",
    "longname": "Konva.Node#clearCache",
    "name": "clearCache",
    "kind": "function",
    "scope": "instance",
    "description": "clear cached canvas",
    "memberof": "Konva.Node",
    "examples": [
      "node.clearCache();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2632,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 79
  },
  {
    "id": "Konva.Node#cache",
    "longname": "Konva.Node#cache",
    "name": "cache",
    "kind": "function",
    "scope": "instance",
    "description": "cache node to improve drawing performance, apply filters, or create more accurate\n hit regions. For all basic shapes size of cache canvas will be automatically detected.\n If you need to cache your custom `Konva.Shape` instance you have to pass shape's bounding box\n properties. Look at [https://konvajs.org/docs/performance/Shape_Caching.html](https://konvajs.org/docs/performance/Shape_Caching.html) for more information.",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "increase canvas size by `offset` pixel in all directions.",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "when set to true, a red border will be drawn around the cached\n region for debugging purposes",
        "name": "config.drawBorder"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "change quality (or pixel ratio) of cached image. pixelRatio = 2 will produce 2x sized cache.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "control imageSmoothingEnabled property of created canvas for cache",
        "name": "config.imageSmoothingEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "change quality (or pixel ratio) of cached hit canvas.",
        "name": "config.hitCanvasPixelRatio"
      }
    ],
    "examples": [
      "// cache a shape with the x,y position of the bounding box at the center and\n// the width and height of the bounding box equal to the width and height of\n// the shape obtained from shape.width() and shape.height()\nimage.cache();\n\n// cache a node and define the bounding box position and size\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200\n});\n\n// cache a node and draw a red border around the bounding box\n// for debugging purposes\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200,\n  offset : 10,\n  drawBorder: true\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2650,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 80
  },
  {
    "id": "Konva.Node#isCached",
    "longname": "Konva.Node#isCached",
    "name": "isCached",
    "kind": "function",
    "scope": "instance",
    "description": "determine if node is currently cached",
    "memberof": "Konva.Node",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2788,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 81
  },
  {
    "id": "Konva.Node#getClientRect",
    "longname": "Konva.Node#getClientRect",
    "name": "getClientRect",
    "kind": "function",
    "scope": "instance",
    "description": "Return client rectangle `{x, y, width, height}` of node. This rectangle also include all styling (strokes, shadows, etc).\nThe purpose of the method is similar to getBoundingClientRect API of the DOM.",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply transform to node for calculating rect?",
        "name": "config.skipTransform"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply shadow to the node for calculating bound box?",
        "name": "config.skipShadow"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply stroke to the node for calculating bound box?",
        "name": "config.skipStroke"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "calculate client rect relative to one of the parents",
        "name": "config.relativeTo"
      }
    ],
    "examples": [
      "var rect = new Konva.Rect({\n     width : 100,\n     height : 100,\n     x : 50,\n     y : 50,\n     strokeWidth : 4,\n     stroke : 'black',\n     offsetX : 50,\n     scaleY : 2\n});\n\n// get client rect without think off transformations (position, rotation, scale, offset, etc)\nrect.getClientRect({ skipTransform: true});\n// returns {\n//     x : -2,   // two pixels for stroke / 2\n//     y : -2,\n//     width : 104, // increased by 4 for stroke\n//     height : 104\n//}\n\n// get client rect with transformation applied\nrect.getClientRect();\n// returns Object {x: -2, y: 46, width: 104, height: 208}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "rect with `{x, y, width, height}` properties"
      }
    ],
    "meta": {
      "lineno": 2797,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 82
  },
  {
    "id": "Konva.Node#on",
    "longname": "Konva.Node#on",
    "name": "on",
    "kind": "function",
    "scope": "instance",
    "description": "bind events to the node. KonvaJS supports mouseover, mousemove,\n mouseout, mouseenter, mouseleave, mousedown, mouseup, wheel, contextmenu, click, dblclick, touchstart, touchmove,\n touchend, tap, dbltap, dragstart, dragmove, and dragend events.\n Pass in a string of events delimited by a space to bind multiple events at once\n such as 'mousedown mouseup mousemove'. Include a namespace to bind an\n event by name such as 'click.foobar'.",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'click', 'mousedown touchstart', 'mousedown.foo touchstart.foo'",
        "name": "evtStr"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The handler function. The first argument of that function is event object. Event object has `target` as main target of the event, `currentTarget` as current node listener and `evt` as native browser event.",
        "name": "handler"
      }
    ],
    "examples": [
      "// add click listener\nnode.on('click', function() {\n  console.log('you clicked me!');\n});\n\n// get the target node\nnode.on('click', function(evt) {\n  console.log(evt.target);\n});\n\n// stop event propagation\nnode.on('click', function(evt) {\n  evt.cancelBubble = true;\n});\n\n// bind multiple listeners\nnode.on('click touchstart', function() {\n  console.log('you clicked/touched me!');\n});\n\n// namespace listener\nnode.on('click.foo', function() {\n  console.log('you clicked/touched me!');\n});\n\n// get the event type\nnode.on('click tap', function(evt) {\n  var eventType = evt.type;\n});\n\n// get native event object\nnode.on('click tap', function(evt) {\n  var nativeEvent = evt.evt;\n});\n\n// for change events, get the old and new val\nnode.on('xChange', function(evt) {\n  var oldVal = evt.oldVal;\n  var newVal = evt.newVal;\n});\n\n// get event targets\n// with event delegations\nlayer.on('click', 'Group', function(evt) {\n  var shape = evt.target;\n  var group = evt.currentTarget;\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2919,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 83
  },
  {
    "id": "Konva.Node#off",
    "longname": "Konva.Node#off",
    "name": "off",
    "kind": "function",
    "scope": "instance",
    "description": "remove event bindings from the node. Pass in a string of\n event types delimmited by a space to remove multiple event\n bindings at once such as 'mousedown mouseup mousemove'.\n include a namespace to remove an event binding by name\n such as 'click.foobar'. If you only give a name like '.foobar',\n all events in that namespace will be removed.",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'click', 'mousedown touchstart', '.foobar'",
        "name": "evtStr"
      }
    ],
    "examples": [
      "// remove listener\nnode.off('click');\n\n// remove multiple listeners\nnode.off('click touchstart');\n\n// remove listener by name\nnode.off('click.foo');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3007,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 84
  },
  {
    "id": "Konva.Node#remove",
    "longname": "Konva.Node#remove",
    "name": "remove",
    "kind": "function",
    "scope": "instance",
    "description": "remove a node from parent, but don't destroy. You can reuse the node later.",
    "memberof": "Konva.Node",
    "examples": [
      "node.remove();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3088,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 85
  },
  {
    "id": "Konva.Node#destroy",
    "longname": "Konva.Node#destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "instance",
    "description": "remove and destroy a node. Kill it and delete forever! You should not reuse node after destroy().\nIf the node is a container (Group, Stage or Layer) it will destroy all children too.",
    "memberof": "Konva.Node",
    "examples": [
      "node.destroy();"
    ],
    "meta": {
      "lineno": 3125,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 86
  },
  {
    "id": "Konva.Node#getAttr",
    "longname": "Konva.Node#getAttr",
    "name": "getAttr",
    "kind": "function",
    "scope": "instance",
    "description": "get attr",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "attr"
      }
    ],
    "examples": [
      "var x = node.getAttr('x');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer",
            "String",
            "Object",
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3138,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 87
  },
  {
    "id": "Konva.Node#getAncestors",
    "longname": "Konva.Node#getAncestors",
    "name": "getAncestors",
    "kind": "function",
    "scope": "instance",
    "description": "get ancestors",
    "memberof": "Konva.Node",
    "examples": [
      "shape.getAncestors().forEach(function(node) {\n  console.log(node.getId());\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3155,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 88
  },
  {
    "id": "Konva.Node#getAttrs",
    "longname": "Konva.Node#getAttrs",
    "name": "getAttrs",
    "kind": "function",
    "scope": "instance",
    "description": "get attrs object literal",
    "memberof": "Konva.Node",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3173,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 89
  },
  {
    "id": "Konva.Node#setAttrs",
    "longname": "Konva.Node#setAttrs",
    "name": "setAttrs",
    "kind": "function",
    "scope": "instance",
    "description": "set multiple attrs at once using an object literal",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "object containing key value pairs",
        "name": "config"
      }
    ],
    "examples": [
      "node.setAttrs({\n  x: 5,\n  fill: 'red'\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3182,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 90
  },
  {
    "id": "Konva.Node#isListening",
    "longname": "Konva.Node#isListening",
    "name": "isListening",
    "kind": "function",
    "scope": "instance",
    "description": "determine if node is listening for events by taking into account ancestors.\n\nParent    | Self      | isListening\nlistening | listening |\n----------+-----------+------------\nT         | T         | T\nT         | F         | F\nF         | T         | F\nF         | F         | F",
    "memberof": "Konva.Node",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3217,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 91
  },
  {
    "id": "Konva.Node#isVisible",
    "longname": "Konva.Node#isVisible",
    "name": "isVisible",
    "kind": "function",
    "scope": "instance",
    "description": "determine if node is visible by taking into account ancestors.\n\nParent    | Self      | isVisible\nvisible   | visible   |\n----------+-----------+------------\nT         | T         | T\nT         | F         | F\nF         | T         | F\nF         | F         | F",
    "memberof": "Konva.Node",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3248,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 92
  },
  {
    "id": "Konva.Node#show",
    "longname": "Konva.Node#show",
    "name": "show",
    "kind": "function",
    "scope": "instance",
    "description": "show node. set visible = true",
    "memberof": "Konva.Node",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3300,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 93
  },
  {
    "id": "Konva.Node#hide",
    "longname": "Konva.Node#hide",
    "name": "hide",
    "kind": "function",
    "scope": "instance",
    "description": "hide node.  Hidden nodes are no longer detectable",
    "memberof": "Konva.Node",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3310,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 94
  },
  {
    "id": "Konva.Node#getAbsoluteZIndex",
    "longname": "Konva.Node#getAbsoluteZIndex",
    "name": "getAbsoluteZIndex",
    "kind": "function",
    "scope": "instance",
    "description": "get absolute z-index which takes into account sibling\n and ancestor indices",
    "memberof": "Konva.Node",
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3323,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 95
  },
  {
    "id": "Konva.Node#getDepth",
    "longname": "Konva.Node#getDepth",
    "name": "getDepth",
    "kind": "function",
    "scope": "instance",
    "description": "get node depth in node tree.  Returns an integer.\n e.g. Stage depth will always be 0.  Layers will always be 1.  Groups and Shapes will always\n be >= 2",
    "memberof": "Konva.Node",
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3355,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 96
  },
  {
    "id": "Konva.Node#getRelativePointerPosition",
    "longname": "Konva.Node#getRelativePointerPosition",
    "name": "getRelativePointerPosition",
    "kind": "function",
    "scope": "instance",
    "description": "get position of first pointer (like mouse or first touch) relative to local coordinates of current node",
    "memberof": "Konva.Node",
    "examples": [
      "// let's think we have a rectangle at position x = 10, y = 10\n// now we clicked at x = 15, y = 15 of the stage\n// if you want to know position of the click, related to the rectangle you can use\nrect.getRelativePointerPosition();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3398,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 97
  },
  {
    "id": "Konva.Node#getAbsolutePosition",
    "longname": "Konva.Node#getAbsolutePosition",
    "name": "getAbsolutePosition",
    "kind": "function",
    "scope": "instance",
    "description": "get absolute position of a node. That function can be used to calculate absolute position, but relative to any ancestor",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "optional ancestor node",
        "name": "Ancestor"
      }
    ],
    "examples": [
      "// returns absolute position relative to top-left corner of canvas\nnode.getAbsolutePosition();\n\n// calculate absolute position of node, inside stage\n// so stage transforms are ignored\nnode.getAbsolutePosition(stage)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3426,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 98
  },
  {
    "id": "Konva.Node#move",
    "longname": "Konva.Node#move",
    "name": "move",
    "kind": "function",
    "scope": "instance",
    "description": "move node by an amount relative to its current position",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "change"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "change.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "change.y"
      }
    ],
    "examples": [
      "// move node in x direction by 1px and y direction by 2px\nnode.move({\n  x: 1,\n  y: 2\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3514,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 99
  },
  {
    "id": "Konva.Node#rotate",
    "longname": "Konva.Node#rotate",
    "name": "rotate",
    "kind": "function",
    "scope": "instance",
    "description": "rotate node by an amount in degrees relative to its current rotation",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "theta"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3559,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 100
  },
  {
    "id": "Konva.Node#moveToTop",
    "longname": "Konva.Node#moveToTop",
    "name": "moveToTop",
    "kind": "function",
    "scope": "instance",
    "description": "move node to the top of its siblings",
    "memberof": "Konva.Node",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3570,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 101
  },
  {
    "id": "Konva.Node#moveUp",
    "longname": "Konva.Node#moveUp",
    "name": "moveUp",
    "kind": "function",
    "scope": "instance",
    "description": "move node up",
    "memberof": "Konva.Node",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "flag is moved or not"
      }
    ],
    "meta": {
      "lineno": 3590,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 102
  },
  {
    "id": "Konva.Node#moveDown",
    "longname": "Konva.Node#moveDown",
    "name": "moveDown",
    "kind": "function",
    "scope": "instance",
    "description": "move node down",
    "memberof": "Konva.Node",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3610,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 103
  },
  {
    "id": "Konva.Node#moveToBottom",
    "longname": "Konva.Node#moveToBottom",
    "name": "moveToBottom",
    "kind": "function",
    "scope": "instance",
    "description": "move node to the bottom of its siblings",
    "memberof": "Konva.Node",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3630,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 104
  },
  {
    "id": "Konva.Node#getAbsoluteOpacity",
    "longname": "Konva.Node#getAbsoluteOpacity",
    "name": "getAbsoluteOpacity",
    "kind": "function",
    "scope": "instance",
    "description": "get absolute opacity",
    "memberof": "Konva.Node",
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3668,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 105
  },
  {
    "id": "Konva.Node#moveTo",
    "longname": "Konva.Node#moveTo",
    "name": "moveTo",
    "kind": "function",
    "scope": "instance",
    "description": "move node to another container",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Container"
          ]
        },
        "name": "newContainer"
      }
    ],
    "examples": [
      "// move node from current layer into layer2\nnode.moveTo(layer2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3685,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 106
  },
  {
    "id": "Konva.Node#toObject",
    "longname": "Konva.Node#toObject",
    "name": "toObject",
    "kind": "function",
    "scope": "instance",
    "description": "convert Node into an object for serialization.  Returns an object.",
    "memberof": "Konva.Node",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3703,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 107
  },
  {
    "id": "Konva.Node#toJSON",
    "longname": "Konva.Node#toJSON",
    "name": "toJSON",
    "kind": "function",
    "scope": "instance",
    "description": "convert Node into a JSON string.  Returns a JSON string.",
    "memberof": "Konva.Node",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3736,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 108
  },
  {
    "id": "Konva.Node#getParent",
    "longname": "Konva.Node#getParent",
    "name": "getParent",
    "kind": "function",
    "scope": "instance",
    "description": "get parent container",
    "memberof": "Konva.Node",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3745,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 109
  },
  {
    "id": "Konva.Node#findAncestors",
    "longname": "Konva.Node#findAncestors",
    "name": "findAncestors",
    "kind": "function",
    "scope": "instance",
    "description": "get all ancestors (parent then parent of the parent, etc) of the node",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "selector for search",
        "name": "selector"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "show we think that node is ancestro itself?",
        "name": "includeSelf"
      },
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "optional": true,
        "description": "optional node where we need to stop searching (one of ancestors)",
        "name": "stopNode"
      }
    ],
    "examples": [
      "// get one of the parent group\nvar parentGroups = node.findAncestors('Group');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "[ancestors]"
      }
    ],
    "meta": {
      "lineno": 3754,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 110
  },
  {
    "id": "Konva.Node#findAncestor",
    "longname": "Konva.Node#findAncestor",
    "name": "findAncestor",
    "kind": "function",
    "scope": "instance",
    "description": "get ancestor (parent or parent of the parent, etc) of the node that match passed selector",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "selector for search",
        "name": "selector"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "show we think that node is ancestro itself?",
        "name": "includeSelf"
      },
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "optional": true,
        "description": "optional node where we need to stop searching (one of ancestors)",
        "name": "stopNode"
      }
    ],
    "examples": [
      "// get one of the parent group\nvar group = node.findAncestors('.mygroup');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "description": "ancestor"
      }
    ],
    "meta": {
      "lineno": 3786,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 111
  },
  {
    "id": "Konva.Node#getLayer",
    "longname": "Konva.Node#getLayer",
    "name": "getLayer",
    "kind": "function",
    "scope": "instance",
    "description": "get layer ancestor",
    "memberof": "Konva.Node",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Layer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3837,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 112
  },
  {
    "id": "Konva.Node#getStage",
    "longname": "Konva.Node#getStage",
    "name": "getStage",
    "kind": "function",
    "scope": "instance",
    "description": "get stage ancestor",
    "memberof": "Konva.Node",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Stage"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3847,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 113
  },
  {
    "id": "Konva.Node#fire",
    "longname": "Konva.Node#fire",
    "name": "fire",
    "kind": "function",
    "scope": "instance",
    "description": "fire event",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "event type.  can be a regular event, like click, mouseover, or mouseout, or it can be a custom event, like myCustomEvent",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "Event"
          ]
        },
        "optional": true,
        "description": "event object",
        "name": "evt"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "setting the value to false, or leaving it undefined, will result in the event\n not bubbling.  Setting the value to true will result in the event bubbling.",
        "name": "bubble"
      }
    ],
    "examples": [
      "// manually fire click event\nnode.fire('click');\n\n// fire custom event\nnode.fire('foo');\n\n// fire custom event with custom event object\nnode.fire('foo', {\n  bar: 10\n});\n\n// fire click event that bubbles\nnode.fire('click', null, true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3865,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 114
  },
  {
    "id": "Konva.Node#getAbsoluteTransform",
    "longname": "Konva.Node#getAbsoluteTransform",
    "name": "getAbsoluteTransform",
    "kind": "function",
    "scope": "instance",
    "description": "get absolute transform of the node which takes into\n account its ancestor transforms",
    "memberof": "Konva.Node",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3901,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 115
  },
  {
    "id": "Konva.Node#getAbsoluteScale",
    "longname": "Konva.Node#getAbsoluteScale",
    "name": "getAbsoluteScale",
    "kind": "function",
    "scope": "instance",
    "description": "get absolute scale of the node which takes into\n account its ancestor scales",
    "memberof": "Konva.Node",
    "examples": [
      "// get absolute scale x\nvar scaleX = node.getAbsoluteScale().x;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3961,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 116
  },
  {
    "id": "Konva.Node#getAbsoluteRotation",
    "longname": "Konva.Node#getAbsoluteRotation",
    "name": "getAbsoluteRotation",
    "kind": "function",
    "scope": "instance",
    "description": "get absolute rotation of the node which takes into\n account its ancestor rotations",
    "memberof": "Konva.Node",
    "examples": [
      "// get absolute rotation\nvar rotation = node.getAbsoluteRotation();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3989,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 117
  },
  {
    "id": "Konva.Node#getTransform",
    "longname": "Konva.Node#getTransform",
    "name": "getTransform",
    "kind": "function",
    "scope": "instance",
    "description": "get transform of the node",
    "memberof": "Konva.Node",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4009,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 118
  },
  {
    "id": "Konva.Node#clone",
    "longname": "Konva.Node#clone",
    "name": "clone",
    "kind": "function",
    "scope": "instance",
    "description": "clone node.  Returns a new Node instance with identical attributes.  You can also override\n the node properties with an object literal, enabling you to use an existing node as a template\n for another node",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "override attrs",
        "name": "obj"
      }
    ],
    "examples": [
      "// simple clone\nvar clone = node.clone();\n\n// clone a node and override the x position\nvar clone = rect.clone({\n  x: 5\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4044,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 119
  },
  {
    "id": "Konva.Node#toCanvas",
    "longname": "Konva.Node#toCanvas",
    "name": "toCanvas",
    "kind": "function",
    "scope": "instance",
    "description": "converts node into an canvas element.",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output canvas. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var canvas = node.toCanvas();"
    ],
    "meta": {
      "lineno": 4119,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 120
  },
  {
    "id": "Konva.Node#toDataURL",
    "longname": "Konva.Node#toDataURL",
    "name": "toDataURL",
    "kind": "function",
    "scope": "instance",
    "description": "Creates a composite data URL (base64 string). If MIME type is not\nspecified, then \"image/png\" will result. For \"image/jpeg\", specify a quality\nlevel as quality (range 0.0 - 1.0)",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"image/png\" or \"image/jpeg\".\n \"image/png\" is the default",
        "name": "config.mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "jpeg quality.  If using an \"image/jpeg\" mimeType,\n you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n is very high quality",
        "name": "config.quality"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output image url. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4140,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 121
  },
  {
    "id": "Konva.Node#toImage",
    "longname": "Konva.Node#toImage",
    "name": "toImage",
    "kind": "function",
    "scope": "instance",
    "description": "converts node into an image.  Since the toImage\n method is asynchronous, the resulting image can only be retrieved from the config callback\n or the returned Promise.  toImage is most commonly used\n to cache complex drawings as an image so that they don't have to constantly be redrawn",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"image/png\" or \"image/jpeg\".\n \"image/png\" is the default",
        "name": "config.mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "jpeg quality.  If using an \"image/jpeg\" mimeType,\n you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n is very high quality",
        "name": "config.quality"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output image. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var image = node.toImage({\n  callback(img) {\n    // do stuff with img\n  }\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Image>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4172,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 122
  },
  {
    "id": "Konva.Node#toBlob",
    "longname": "Konva.Node#toBlob",
    "name": "toBlob",
    "kind": "function",
    "scope": "instance",
    "description": "Converts node into a blob.  Since the toBlob method is asynchronous,\n the resulting blob can only be retrieved from the config callback\n or the returned Promise.",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output canvas. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var blob = await node.toBlob({});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Blob>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4219,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 123
  },
  {
    "id": "Konva.Node#getClassName",
    "longname": "Konva.Node#getClassName",
    "name": "getClassName",
    "kind": "function",
    "scope": "instance",
    "description": "get class name, which may return Stage, Layer, Group, or shape class names like Rect, Circle, Text, etc.",
    "memberof": "Konva.Node",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4267,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 124
  },
  {
    "id": "Konva.Node#getType",
    "longname": "Konva.Node#getType",
    "name": "getType",
    "kind": "function",
    "scope": "instance",
    "description": "get the node type, which may return Stage, Layer, Group, or Shape",
    "memberof": "Konva.Node",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4276,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 125
  },
  {
    "id": "Konva.Node#addName",
    "longname": "Konva.Node#addName",
    "name": "addName",
    "kind": "function",
    "scope": "instance",
    "description": "add name to node",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red');\nnode.addName('selected');\nnode.name(); // return 'red selected'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4324,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 126
  },
  {
    "id": "Konva.Node#hasName",
    "longname": "Konva.Node#hasName",
    "name": "hasName",
    "kind": "function",
    "scope": "instance",
    "description": "check is node has name",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red');\nnode.hasName('red');   // return true\nnode.hasName('selected'); // return false\nnode.hasName(''); // return false"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4343,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 127
  },
  {
    "id": "Konva.Node#removeName",
    "longname": "Konva.Node#removeName",
    "name": "removeName",
    "kind": "function",
    "scope": "instance",
    "description": "remove name from node",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red selected');\nnode.removeName('selected');\nnode.hasName('selected'); // return false\nnode.name(); // return 'red'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4367,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 128
  },
  {
    "id": "Konva.Node#setAttr",
    "longname": "Konva.Node#setAttr",
    "name": "setAttr",
    "kind": "function",
    "scope": "instance",
    "description": "set attr",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "attr"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "name": "val"
      }
    ],
    "examples": [
      "node.setAttr('x', 5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4388,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 129
  },
  {
    "id": "Konva.Node#draw",
    "longname": "Konva.Node#draw",
    "name": "draw",
    "kind": "function",
    "scope": "instance",
    "description": "draw both scene and hit graphs.  If the node being drawn is the stage, all of the layers will be cleared and redrawn",
    "memberof": "Konva.Node",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4511,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 130
  },
  {
    "id": "Konva.Node#startDrag",
    "longname": "Konva.Node#startDrag",
    "name": "startDrag",
    "kind": "function",
    "scope": "instance",
    "description": "initiate drag and drop.",
    "memberof": "Konva.Node",
    "meta": {
      "lineno": 4544,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 131
  },
  {
    "id": "Konva.Node#stopDrag",
    "longname": "Konva.Node#stopDrag",
    "name": "stopDrag",
    "kind": "function",
    "scope": "instance",
    "description": "stop drag and drop",
    "memberof": "Konva.Node",
    "meta": {
      "lineno": 4590,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 132
  },
  {
    "id": "Konva.Node#isDragging",
    "longname": "Konva.Node#isDragging",
    "name": "isDragging",
    "kind": "function",
    "scope": "instance",
    "description": "determine if node is currently in drag and drop mode",
    "memberof": "Konva.Node",
    "meta": {
      "lineno": 4607,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 133
  },
  {
    "id": "Konva.Node#isClientRectOnScreen",
    "longname": "Konva.Node#isClientRectOnScreen",
    "name": "isClientRectOnScreen",
    "kind": "function",
    "scope": "instance",
    "description": "determine if node (at least partially) is currently in user-visible area",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Number",
            "Object"
          ]
        },
        "description": "optional margin in pixels",
        "name": "margin"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "margin.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "margin.y"
      }
    ],
    "examples": [
      "// get index\n// default calculations\nvar isOnScreen = node.isClientRectOnScreen()\n// increase object size (or screen size) for cases when objects close to the screen still need to be marked as \"visible\"\nvar isOnScreen = node.isClientRectOnScreen({ x: stage.width(), y: stage.height() })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4671,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 134
  },
  {
    "id": "Konva.Node#zIndex",
    "longname": "Konva.Node#zIndex",
    "name": "zIndex",
    "kind": "function",
    "scope": "instance",
    "description": "get/set zIndex relative to the node's siblings who share the same parent.\nPlease remember that zIndex is not absolute (like in CSS). It is relative to parent element only.",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "index"
      }
    ],
    "examples": [
      "// get index\nvar index = node.zIndex();\n\n// set index\nnode.zIndex(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4764,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 136
  },
  {
    "id": "Konva.Node#absolutePosition",
    "longname": "Konva.Node#absolutePosition",
    "name": "absolutePosition",
    "kind": "function",
    "scope": "instance",
    "description": "get/set node absolute position",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "// get position\nvar position = node.absolutePosition();\n\n// set position\nnode.absolutePosition({\n  x: 5,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4779,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 137
  },
  {
    "id": "Konva.Node#position",
    "longname": "Konva.Node#position",
    "name": "position",
    "kind": "function",
    "scope": "instance",
    "description": "get/set node position relative to parent",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "// get position\nvar position = node.position();\n\n// set position\nnode.position({\n  x: 5,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4799,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 138
  },
  {
    "id": "Konva.Node#x",
    "longname": "Konva.Node#x",
    "name": "x",
    "kind": "function",
    "scope": "instance",
    "description": "get/set x position",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get x\nvar x = node.x();\n\n// set x\nnode.x(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4818,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 139
  },
  {
    "id": "Konva.Node#y",
    "longname": "Konva.Node#y",
    "name": "y",
    "kind": "function",
    "scope": "instance",
    "description": "get/set y position",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get y\nvar y = node.y();\n\n// set y\nnode.y(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4832,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 140
  },
  {
    "id": "Konva.Node#globalCompositeOperation",
    "longname": "Konva.Node#globalCompositeOperation",
    "name": "globalCompositeOperation",
    "kind": "function",
    "scope": "instance",
    "description": "get/set globalCompositeOperation of a node. globalCompositeOperation DOESN'T affect hit graph of nodes. So they are still trigger to events as they have default \"source-over\" globalCompositeOperation.",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "type"
      }
    ],
    "examples": [
      "// get globalCompositeOperation\nvar globalCompositeOperation = shape.globalCompositeOperation();\n\n// set globalCompositeOperation\nshape.globalCompositeOperation('source-in');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4846,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 141
  },
  {
    "id": "Konva.Node#opacity",
    "longname": "Konva.Node#opacity",
    "name": "opacity",
    "kind": "function",
    "scope": "instance",
    "description": "get/set opacity.  Opacity values range from 0 to 1.\n A node with an opacity of 0 is fully transparent, and a node\n with an opacity of 1 is fully opaque",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "opacity"
      }
    ],
    "examples": [
      "// get opacity\nvar opacity = node.opacity();\n\n// set opacity\nnode.opacity(0.5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4860,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 142
  },
  {
    "id": "Konva.Node#name",
    "longname": "Konva.Node#name",
    "name": "name",
    "kind": "function",
    "scope": "instance",
    "description": "get/set name.",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "// get name\nvar name = node.name();\n\n// set name\nnode.name('foo');\n\n// also node may have multiple names (as css classes)\nnode.name('foo bar');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4876,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 143
  },
  {
    "id": "Konva.Node#id",
    "longname": "Konva.Node#id",
    "name": "id",
    "kind": "function",
    "scope": "instance",
    "description": "get/set id. Id is global for whole page.",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "id"
      }
    ],
    "examples": [
      "// get id\nvar name = node.id();\n\n// set id\nnode.id('foo');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4893,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 144
  },
  {
    "id": "Konva.Node#rotation",
    "longname": "Konva.Node#rotation",
    "name": "rotation",
    "kind": "function",
    "scope": "instance",
    "description": "get/set rotation in degrees",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get rotation in degrees\nvar rotation = node.rotation();\n\n// set rotation in degrees\nnode.rotation(45);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4907,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 145
  },
  {
    "id": "Konva.Node#scale",
    "longname": "Konva.Node#scale",
    "name": "scale",
    "kind": "function",
    "scope": "instance",
    "description": "get/set scale",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.y"
      }
    ],
    "examples": [
      "// get scale\nvar scale = node.scale();\n\n// set scale\nshape.scale({\n  x: 2,\n  y: 3\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4921,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 146
  },
  {
    "id": "Konva.Node#scaleX",
    "longname": "Konva.Node#scaleX",
    "name": "scaleX",
    "kind": "function",
    "scope": "instance",
    "description": "get/set scale x",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get scale x\nvar scaleX = node.scaleX();\n\n// set scale x\nnode.scaleX(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4940,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 147
  },
  {
    "id": "Konva.Node#scaleY",
    "longname": "Konva.Node#scaleY",
    "name": "scaleY",
    "kind": "function",
    "scope": "instance",
    "description": "get/set scale y",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get scale y\nvar scaleY = node.scaleY();\n\n// set scale y\nnode.scaleY(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4954,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 148
  },
  {
    "id": "Konva.Node#skew",
    "longname": "Konva.Node#skew",
    "name": "skew",
    "kind": "function",
    "scope": "instance",
    "description": "get/set skew",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "skew"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "skew.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "skew.y"
      }
    ],
    "examples": [
      "// get skew\nvar skew = node.skew();\n\n// set skew\nnode.skew({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4968,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 149
  },
  {
    "id": "Konva.Node#skewX",
    "longname": "Konva.Node#skewX",
    "name": "skewX",
    "kind": "function",
    "scope": "instance",
    "description": "get/set skew x",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get skew x\nvar skewX = node.skewX();\n\n// set skew x\nnode.skewX(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4987,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 150
  },
  {
    "id": "Konva.Node#skewY",
    "longname": "Konva.Node#skewY",
    "name": "skewY",
    "kind": "function",
    "scope": "instance",
    "description": "get/set skew y",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get skew y\nvar skewY = node.skewY();\n\n// set skew y\nnode.skewY(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5001,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 151
  },
  {
    "id": "Konva.Node#offsetX",
    "longname": "Konva.Node#offsetX",
    "name": "offsetX",
    "kind": "function",
    "scope": "instance",
    "description": "get/set offset x",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get offset x\nvar offsetX = node.offsetX();\n\n// set offset x\nnode.offsetX(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5033,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 152
  },
  {
    "id": "Konva.Node#offsetY",
    "longname": "Konva.Node#offsetY",
    "name": "offsetY",
    "kind": "function",
    "scope": "instance",
    "description": "get/set offset y",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get offset y\nvar offsetY = node.offsetY();\n\n// set offset y\nnode.offsetY(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5047,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 153
  },
  {
    "id": "Konva.Node#dragDistance",
    "longname": "Konva.Node#dragDistance",
    "name": "dragDistance",
    "kind": "function",
    "scope": "instance",
    "description": "get/set drag distance",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "distance"
      }
    ],
    "examples": [
      "// get drag distance\nvar dragDistance = node.dragDistance();\n\n// set distance\n// node starts dragging only if pointer moved more then 3 pixels\nnode.dragDistance(3);\n// or set globally\nKonva.dragDistance = 3;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5061,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 154
  },
  {
    "id": "Konva.Node#width",
    "longname": "Konva.Node#width",
    "name": "width",
    "kind": "function",
    "scope": "instance",
    "description": "get/set width",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "width"
      }
    ],
    "examples": [
      "// get width\nvar width = node.width();\n\n// set width\nnode.width(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5078,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 155
  },
  {
    "id": "Konva.Node#height",
    "longname": "Konva.Node#height",
    "name": "height",
    "kind": "function",
    "scope": "instance",
    "description": "get/set height",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "height"
      }
    ],
    "examples": [
      "// get height\nvar height = node.height();\n\n// set height\nnode.height(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5092,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 156
  },
  {
    "id": "Konva.Node#listening",
    "longname": "Konva.Node#listening",
    "name": "listening",
    "kind": "function",
    "scope": "instance",
    "description": "get/set listening attr.  If you need to determine if a node is listening or not\n  by taking into account its parents, use the isListening() method\n  nodes with listening set to false will not be detected in hit graph\n  so they will be ignored in container.getIntersection() method",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "Can be true, or false.  The default is true.",
        "name": "listening"
      }
    ],
    "examples": [
      "// get listening attr\nvar listening = node.listening();\n\n// stop listening for events, remove node and all its children from hit graph\nnode.listening(false);\n\n// listen to events according to the parent\nnode.listening(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5106,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 157
  },
  {
    "id": "Konva.Node#preventDefault",
    "longname": "Konva.Node#preventDefault",
    "name": "preventDefault",
    "kind": "function",
    "scope": "instance",
    "description": "get/set preventDefault\nBy default all shapes will prevent default behavior\nof a browser on a pointer move or tap.\nthat will prevent native scrolling when you are trying to drag&drop a node\nbut sometimes you may need to enable default actions\nin that case you can set the property to false",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "preventDefault"
      }
    ],
    "examples": [
      "// get preventDefault\nvar shouldPrevent = shape.preventDefault();\n\n// set preventDefault\nshape.preventDefault(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5125,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 158
  },
  {
    "id": "Konva.Node#filters",
    "longname": "Konva.Node#filters",
    "name": "filters",
    "kind": "function",
    "scope": "instance",
    "description": "get/set filters.  Filters are applied to cached canvases",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "array of filters",
        "name": "filters"
      }
    ],
    "examples": [
      "// get filters\nvar filters = node.filters();\n\n// set a single filter\nnode.cache();\nnode.filters([Konva.Filters.Blur]);\n\n// set multiple filters\nnode.cache();\nnode.filters([\n  Konva.Filters.Blur,\n  Konva.Filters.Sepia,\n  Konva.Filters.Invert\n]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5148,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 159
  },
  {
    "id": "Konva.Node#visible",
    "longname": "Konva.Node#visible",
    "name": "visible",
    "kind": "function",
    "scope": "instance",
    "description": "get/set visible attr.  Can be true, or false.  The default is true.\n  If you need to determine if a node is visible or not\n  by taking into account its parents, use the isVisible() method",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "visible"
      }
    ],
    "examples": [
      "// get visible attr\nvar visible = node.visible();\n\n// make invisible\nnode.visible(false);\n\n// make visible (according to the parent)\nnode.visible(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5171,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 160
  },
  {
    "id": "Konva.Node#transformsEnabled",
    "longname": "Konva.Node#transformsEnabled",
    "name": "transformsEnabled",
    "kind": "function",
    "scope": "instance",
    "description": "get/set transforms that are enabled.  Can be \"all\", \"none\", or \"position\".  The default\n is \"all\"",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// enable position transform only to improve draw performance\nnode.transformsEnabled('position');\n\n// enable all transforms\nnode.transformsEnabled('all');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5191,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 161
  },
  {
    "id": "Konva.Node#size",
    "longname": "Konva.Node#size",
    "name": "size",
    "kind": "function",
    "scope": "instance",
    "description": "get/set node size",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "size"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size.height"
      }
    ],
    "examples": [
      "// get node size\nvar size = node.size();\nvar width = size.width;\nvar height = size.height;\n\n// set size\nnode.size({\n  width: 100,\n  height: 200\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5205,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 162
  },
  {
    "id": "Konva.Node#dragBoundFunc",
    "longname": "Konva.Node#dragBoundFunc",
    "name": "dragBoundFunc",
    "kind": "function",
    "scope": "instance",
    "description": "get/set drag bound function.  This is used to override the default\n drag and drop position.",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "name": "dragBoundFunc"
      }
    ],
    "examples": [
      "// get drag bound function\nvar dragBoundFunc = node.dragBoundFunc();\n\n// create vertical drag and drop\nnode.dragBoundFunc(function(pos){\n  // important pos - is absolute position of the node\n  // you should return absolute position too\n  return {\n    x: this.absolutePosition().x,\n    y: pos.y\n  };\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5226,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 163
  },
  {
    "id": "Konva.Node#draggable",
    "longname": "Konva.Node#draggable",
    "name": "draggable",
    "kind": "function",
    "scope": "instance",
    "description": "get/set draggable flag",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "draggable"
      }
    ],
    "examples": [
      "// get draggable flag\nvar draggable = node.draggable();\n\n// enable drag and drop\nnode.draggable(true);\n\n// disable drag and drop\nnode.draggable(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5248,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 164
  },
  {
    "id": "Konva.Container#getChildren",
    "longname": "Konva.Container#getChildren",
    "name": "getChildren",
    "kind": "function",
    "scope": "instance",
    "description": "returns an array of direct descendant nodes",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "filter function",
        "name": "filterFunc"
      }
    ],
    "examples": [
      "// get all children\nvar children = layer.getChildren();\n\n// get only circles\nvar circles = layer.getChildren(function(node){\n   return node.getClassName() === 'Circle';\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5311,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 167
  },
  {
    "id": "Konva.Container#hasChildren",
    "longname": "Konva.Container#hasChildren",
    "name": "hasChildren",
    "kind": "function",
    "scope": "instance",
    "description": "determine if node has children",
    "memberof": "Konva.Container",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5339,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 168
  },
  {
    "id": "Konva.Container#removeChildren",
    "longname": "Konva.Container#removeChildren",
    "name": "removeChildren",
    "kind": "function",
    "scope": "instance",
    "description": "remove all children. Children will be still in memory.\nIf you want to completely destroy all children please use \"destroyChildren\" method instead",
    "memberof": "Konva.Container",
    "meta": {
      "lineno": 5348,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 169
  },
  {
    "id": "Konva.Container#destroyChildren",
    "longname": "Konva.Container#destroyChildren",
    "name": "destroyChildren",
    "kind": "function",
    "scope": "instance",
    "description": "destroy all children nodes.",
    "memberof": "Konva.Container",
    "meta": {
      "lineno": 5366,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 170
  },
  {
    "id": "Konva.Container#add",
    "longname": "Konva.Container#add",
    "name": "add",
    "kind": "function",
    "scope": "instance",
    "description": "add a child and children into container",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "variable": true,
        "name": "children"
      }
    ],
    "examples": [
      "layer.add(rect);\nlayer.add(shape1, shape2, shape3);\n// empty arrays are accepted, though each individual child must be defined\nlayer.add(...shapes);\n// remember to redraw layer if you changed something\nlayer.draw();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Container"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5383,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 171
  },
  {
    "id": "Konva.Container#find",
    "longname": "Konva.Container#find",
    "name": "find",
    "kind": "function",
    "scope": "instance",
    "description": "return an array of nodes that match the selector.\nYou can provide a string with '#' for id selections and '.' for name selections.\nOr a function that will return true/false when a node is passed through.  See example below.\nWith strings you can also select by type or class name. Pass multiple selectors\nseparated by a comma.",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "String",
            "function"
          ]
        },
        "name": "selector"
      }
    ],
    "examples": [
      "Passing a string as a selector\n// select node with id foo\nvar node = stage.find('#foo');\n\n// select nodes with name bar inside layer\nvar nodes = layer.find('.bar');\n\n// select all groups inside layer\nvar nodes = layer.find('Group');\n\n// select all rectangles inside layer\nvar nodes = layer.find('Rect');\n\n// select node with an id of foo or a name of bar inside layer\nvar nodes = layer.find('#foo, .bar');\n\nPassing a function as a selector\n\n// get all groups with a function\nvar groups = stage.find(node => {\n return node.getType() === 'Group';\n});\n\n// get only Nodes with partial opacity\nvar alphaNodes = layer.find(node => {\n return node.getType() === 'Node' && node.getAbsoluteOpacity() < 1;\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5431,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 172
  },
  {
    "id": "Konva.Container#findOne",
    "longname": "Konva.Container#findOne",
    "name": "findOne",
    "kind": "function",
    "scope": "instance",
    "description": "return a first node from `find` method",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "String",
            "function"
          ]
        },
        "name": "selector"
      }
    ],
    "examples": [
      "// select node with id foo\nvar node = stage.findOne('#foo');\n\n// select node with name bar inside layer\nvar nodes = layer.findOne('.bar');\n\n// select the first node to return true in a function\nvar node = stage.findOne(node => {\n return node.getType() === 'Shape'\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node",
            "Undefined"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5476,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 173
  },
  {
    "id": "Konva.Container#isAncestorOf",
    "longname": "Konva.Container#isAncestorOf",
    "name": "isAncestorOf",
    "kind": "function",
    "scope": "instance",
    "description": "determine if node is an ancestor\nof descendant",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "name": "node"
      }
    ],
    "meta": {
      "lineno": 5539,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 174
  },
  {
    "id": "Konva.Container#getAllIntersections",
    "longname": "Konva.Container#getAllIntersections",
    "name": "getAllIntersections",
    "kind": "function",
    "scope": "instance",
    "description": "get all shapes that intersect a point.  Note: because this method must clear a temporary\ncanvas and redraw every shape inside the container, it should only be used for special situations\nbecause it performs very poorly.  Please use the {@link Konva.Stage#getIntersection} method if at all possible\nbecause it performs much better\nnodes with listening set to false will not be detected",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "array of shapes"
      }
    ],
    "meta": {
      "lineno": 5564,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 175
  },
  {
    "id": "Konva.Container#clip",
    "longname": "Konva.Container#clip",
    "name": "clip",
    "kind": "function",
    "scope": "instance",
    "description": "get/set clip",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "clip"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "clip.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "clip.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "clip.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "clip.height"
      }
    ],
    "examples": [
      "// get clip\nvar clip = container.clip();\n\n// set clip\ncontainer.clip({\n  x: 20,\n  y: 20,\n  width: 20,\n  height: 20\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5760,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 176
  },
  {
    "id": "Konva.Container#clipX",
    "longname": "Konva.Container#clipX",
    "name": "clipX",
    "kind": "function",
    "scope": "instance",
    "description": "get/set clip x",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get clip x\nvar clipX = container.clipX();\n\n// set clip x\ncontainer.clipX(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5783,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 177
  },
  {
    "id": "Konva.Container#clipY",
    "longname": "Konva.Container#clipY",
    "name": "clipY",
    "kind": "function",
    "scope": "instance",
    "description": "get/set clip y",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get clip y\nvar clipY = container.clipY();\n\n// set clip y\ncontainer.clipY(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5797,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 178
  },
  {
    "id": "Konva.Container#clipWidth",
    "longname": "Konva.Container#clipWidth",
    "name": "clipWidth",
    "kind": "function",
    "scope": "instance",
    "description": "get/set clip width",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "width"
      }
    ],
    "examples": [
      "// get clip width\nvar clipWidth = container.clipWidth();\n\n// set clip width\ncontainer.clipWidth(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5811,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 179
  },
  {
    "id": "Konva.Container#clipHeight",
    "longname": "Konva.Container#clipHeight",
    "name": "clipHeight",
    "kind": "function",
    "scope": "instance",
    "description": "get/set clip height",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "height"
      }
    ],
    "examples": [
      "// get clip height\nvar clipHeight = container.clipHeight();\n\n// set clip height\ncontainer.clipHeight(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5825,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 180
  },
  {
    "id": "Konva.Container#clipFunc",
    "longname": "Konva.Container#clipFunc",
    "name": "clipFunc",
    "kind": "function",
    "scope": "instance",
    "description": "get/set clip function",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "name": "function"
      }
    ],
    "examples": [
      "// get clip function\nvar clipFunction = container.clipFunc();\n\n// set clip function\ncontainer.clipFunc(function(ctx) {\n  ctx.rect(0, 0, 100, 100);\n});\n\ncontainer.clipFunc(function(ctx) {\n  // optionally return a clip Path2D and clip-rule or just the clip-rule\n  return [new Path2D('M0 0v50h50Z'), 'evenodd']\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5839,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 181
  },
  {
    "id": "Konva.Stage#setContainer",
    "longname": "Konva.Stage#setContainer",
    "name": "setContainer",
    "kind": "function",
    "scope": "instance",
    "description": "set container dom element which contains the stage wrapper div element",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "DomElement"
          ]
        },
        "description": "can pass in a dom element or id string",
        "name": "container"
      }
    ],
    "meta": {
      "lineno": 6049,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 184
  },
  {
    "id": "Konva.Stage#clear",
    "longname": "Konva.Stage#clear",
    "name": "clear",
    "kind": "function",
    "scope": "instance",
    "description": "clear all layers",
    "memberof": "Konva.Stage",
    "meta": {
      "lineno": 6087,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 185
  },
  {
    "id": "Konva.Stage#getPointerPosition",
    "longname": "Konva.Stage#getPointerPosition",
    "name": "getPointerPosition",
    "kind": "function",
    "scope": "instance",
    "description": "returns ABSOLUTE pointer position which can be a touch position or mouse position\npointer position doesn't include any transforms (such as scale) of the stage\nit is just a plain position of pointer relative to top-left corner of the canvas",
    "memberof": "Konva.Stage",
    "returns": [
      {
        "type": {
          "names": [
            "Vector2d",
            "null"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 6120,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 186
  },
  {
    "id": "Konva.Stage#getIntersection",
    "longname": "Konva.Stage#getIntersection",
    "name": "getIntersection",
    "kind": "function",
    "scope": "instance",
    "description": "get visible intersection shape. This is the preferred\n method for determining if a point intersects a shape or not\nnodes with listening set to false will not be detected",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "var shape = stage.getIntersection({x: 50, y: 50});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 6176,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 187
  },
  {
    "id": "Konva.Stage#getLayers",
    "longname": "Konva.Stage#getLayers",
    "name": "getLayers",
    "kind": "function",
    "scope": "instance",
    "description": "returns an array of layers",
    "memberof": "Konva.Stage",
    "meta": {
      "lineno": 6256,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 188
  },
  {
    "id": "Konva.Stage#setPointersPositions",
    "longname": "Konva.Stage#setPointersPositions",
    "name": "setPointersPositions",
    "kind": "function",
    "scope": "instance",
    "description": "manually register pointers positions (mouse/touch) in the stage.\nSo you can use stage.getPointerPosition(). Usually you don't need to use that method\nbecause all internal events are automatically registered. It may be useful if event\nis triggered outside of the stage, but you still want to use Konva methods to get pointers position.",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Event object",
        "name": "event"
      }
    ],
    "examples": [
      "window.addEventListener('mousemove', (e) => {\n  stage.setPointersPositions(e);\n});"
    ],
    "meta": {
      "lineno": 6573,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 189
  },
  {
    "id": "Konva.Stage#batchDraw",
    "longname": "Konva.Stage#batchDraw",
    "name": "batchDraw",
    "kind": "function",
    "scope": "instance",
    "description": "batch draw",
    "memberof": "Konva.Stage",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Stage"
          ]
        },
        "description": "this"
      }
    ],
    "meta": {
      "lineno": 6684,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 190
  },
  {
    "id": "Konva.Stage#container",
    "longname": "Konva.Stage#container",
    "name": "container",
    "kind": "function",
    "scope": "instance",
    "description": "get/set container DOM element",
    "memberof": "Konva.Stage",
    "examples": [
      "// get container\nvar container = stage.container();\n// set container\nvar container = document.createElement('div');\nbody.appendChild(container);\nstage.container(container);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "DomElement"
          ]
        },
        "description": "container"
      }
    ],
    "meta": {
      "lineno": 6699,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 191
  },
  {
    "id": "Konva.Shape#hasShadow",
    "longname": "Konva.Shape#hasShadow",
    "name": "hasShadow",
    "kind": "function",
    "scope": "instance",
    "description": "returns whether or not a shadow will be rendered",
    "memberof": "Konva.Shape",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 6909,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 194
  },
  {
    "id": "Konva.Shape#hasFill",
    "longname": "Konva.Shape#hasFill",
    "name": "hasFill",
    "kind": "function",
    "scope": "instance",
    "description": "returns whether or not the shape will be filled",
    "memberof": "Konva.Shape",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7009,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 195
  },
  {
    "id": "Konva.Shape#hasStroke",
    "longname": "Konva.Shape#hasStroke",
    "name": "hasStroke",
    "kind": "function",
    "scope": "instance",
    "description": "returns whether or not the shape will be stroked",
    "memberof": "Konva.Shape",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7030,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 196
  },
  {
    "id": "Konva.Shape#intersects",
    "longname": "Konva.Shape#intersects",
    "name": "intersects",
    "kind": "function",
    "scope": "instance",
    "description": "determines if point is in the shape, regardless if other shapes are on top of it.  Note: because\n this method clears a temporary canvas and then redraws the shape, it performs very poorly if executed many times\n consecutively.  Please use the {@link Konva.Stage#getIntersection} method if at all possible\n because it performs much better",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "point"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "point.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "point.y"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7066,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 197
  },
  {
    "id": "Konva.Shape#getSelfRect",
    "longname": "Konva.Shape#getSelfRect",
    "name": "getSelfRect",
    "kind": "function",
    "scope": "instance",
    "description": "return self rectangle (x, y, width, height) of shape.\nThis method are not taken into account transformation and styles.",
    "memberof": "Konva.Shape",
    "examples": [
      "rect.getSelfRect();  // return {x:0, y:0, width:rect.width(), height:rect.height()}\ncircle.getSelfRect();  // return {x: - circle.width() / 2, y: - circle.height() / 2, width:circle.width(), height:circle.height()}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "rect with `{x, y, width, height}` properties"
      }
    ],
    "meta": {
      "lineno": 7138,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 198
  },
  {
    "id": "Konva.Shape#drawHitFromCache",
    "longname": "Konva.Shape#drawHitFromCache",
    "name": "drawHitFromCache",
    "kind": "function",
    "scope": "instance",
    "description": "draw hit graph using the cached scene canvas",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "alpha channel threshold that determines whether or not\n a pixel should be drawn onto the hit graph.  Must be a value between 0 and 255.\n The default is 0",
        "name": "alphaThreshold"
      }
    ],
    "examples": [
      "shape.cache();\nshape.drawHitFromCache();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7294,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 199
  },
  {
    "id": "Konva.Shape#stroke",
    "longname": "Konva.Shape#stroke",
    "name": "stroke",
    "kind": "function",
    "scope": "instance",
    "description": "get/set stroke color",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get stroke color\nvar stroke = shape.stroke();\n\n// set stroke color with color string\nshape.stroke('green');\n\n// set stroke color with hex\nshape.stroke('#00ff00');\n\n// set stroke color with rgb\nshape.stroke('rgb(0,255,0)');\n\n// set stroke color with rgba and make it 50% opaque\nshape.stroke('rgba(0,255,0,0.5');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7360,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 200
  },
  {
    "id": "Konva.Shape#strokeWidth",
    "longname": "Konva.Shape#strokeWidth",
    "name": "strokeWidth",
    "kind": "function",
    "scope": "instance",
    "description": "get/set stroke width",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "strokeWidth"
      }
    ],
    "examples": [
      "// get stroke width\nvar strokeWidth = shape.strokeWidth();\n\n// set stroke width\nshape.strokeWidth(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7383,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 201
  },
  {
    "id": "Konva.Shape#fillAfterStrokeEnabled",
    "longname": "Konva.Shape#fillAfterStrokeEnabled",
    "name": "fillAfterStrokeEnabled",
    "kind": "function",
    "scope": "instance",
    "description": "get/set fillAfterStrokeEnabled property. By default Konva is drawing filling first, then stroke on top of the fill.\nIn rare situations you may want a different behavior. When you have a stroke first then fill on top of it.\nEspecially useful for Text objects.\nDefault is false.",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "fillAfterStrokeEnabled"
      }
    ],
    "examples": [
      "// get stroke width\nvar fillAfterStrokeEnabled = shape.fillAfterStrokeEnabled();\n\n// set stroke width\nshape.fillAfterStrokeEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7397,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 202
  },
  {
    "id": "Konva.Shape#hitStrokeWidth",
    "longname": "Konva.Shape#hitStrokeWidth",
    "name": "hitStrokeWidth",
    "kind": "function",
    "scope": "instance",
    "description": "get/set stroke width for hit detection. Default value is \"auto\", it means it will be equals to strokeWidth",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "hitStrokeWidth"
      }
    ],
    "examples": [
      "// get stroke width\nvar hitStrokeWidth = shape.hitStrokeWidth();\n\n// set hit stroke width\nshape.hitStrokeWidth(20);\n// set hit stroke width always equals to scene stroke width\nshape.hitStrokeWidth('auto');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7414,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 203
  },
  {
    "id": "Konva.Shape#strokeHitEnabled",
    "longname": "Konva.Shape#strokeHitEnabled",
    "name": "strokeHitEnabled",
    "kind": "function",
    "scope": "instance",
    "description": "**deprecated, use hitStrokeWidth instead!** get/set strokeHitEnabled property. Useful for performance optimization.\nYou may set `shape.strokeHitEnabled(false)`. In this case stroke will be no draw on hit canvas, so hit area\nof shape will be decreased (by lineWidth / 2). Remember that non closed line with `strokeHitEnabled = false`\nwill be not drawn on hit canvas, that is mean line will no trigger pointer events (like mouseover)\nDefault value is true.",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "strokeHitEnabled"
      }
    ],
    "examples": [
      "// get strokeHitEnabled\nvar strokeHitEnabled = shape.strokeHitEnabled();\n\n// set strokeHitEnabled\nshape.strokeHitEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7430,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 204
  },
  {
    "id": "Konva.Shape#perfectDrawEnabled",
    "longname": "Konva.Shape#perfectDrawEnabled",
    "name": "perfectDrawEnabled",
    "kind": "function",
    "scope": "instance",
    "description": "get/set perfectDrawEnabled. If a shape has fill, stroke and opacity you may set `perfectDrawEnabled` to false to improve performance.\nSee http://konvajs.org/docs/performance/Disable_Perfect_Draw.html for more information.\nDefault value is true",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "perfectDrawEnabled"
      }
    ],
    "examples": [
      "// get perfectDrawEnabled\nvar perfectDrawEnabled = shape.perfectDrawEnabled();\n\n// set perfectDrawEnabled\nshape.perfectDrawEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7448,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 205
  },
  {
    "id": "Konva.Shape#shadowForStrokeEnabled",
    "longname": "Konva.Shape#shadowForStrokeEnabled",
    "name": "shadowForStrokeEnabled",
    "kind": "function",
    "scope": "instance",
    "description": "get/set shadowForStrokeEnabled. Useful for performance optimization.\nYou may set `shape.shadowForStrokeEnabled(false)`. In this case stroke will no effect shadow.\nRemember if you set `shadowForStrokeEnabled = false` for non closed line - that line will have no shadow!.\nDefault value is true",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "shadowForStrokeEnabled"
      }
    ],
    "examples": [
      "// get shadowForStrokeEnabled\nvar shadowForStrokeEnabled = shape.shadowForStrokeEnabled();\n\n// set shadowForStrokeEnabled\nshape.shadowForStrokeEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7464,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 206
  },
  {
    "id": "Konva.Shape#lineJoin",
    "longname": "Konva.Shape#lineJoin",
    "name": "lineJoin",
    "kind": "function",
    "scope": "instance",
    "description": "get/set line join.  Can be miter, round, or bevel.  The\n default is miter",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "lineJoin"
      }
    ],
    "examples": [
      "// get line join\nvar lineJoin = shape.lineJoin();\n\n// set line join\nshape.lineJoin('round');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7481,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 207
  },
  {
    "id": "Konva.Shape#lineCap",
    "longname": "Konva.Shape#lineCap",
    "name": "lineCap",
    "kind": "function",
    "scope": "instance",
    "description": "get/set line cap.  Can be butt, round, or square",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "lineCap"
      }
    ],
    "examples": [
      "// get line cap\nvar lineCap = shape.lineCap();\n\n// set line cap\nshape.lineCap('round');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7496,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 208
  },
  {
    "id": "Konva.Shape#sceneFunc",
    "longname": "Konva.Shape#sceneFunc",
    "name": "sceneFunc",
    "kind": "function",
    "scope": "instance",
    "description": "get/set scene draw function. That function is used to draw the shape on a canvas.\nAlso that function will be used to draw hit area of the shape, in case if hitFunc is not defined.",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "drawing function",
        "name": "drawFunc"
      }
    ],
    "examples": [
      "// get scene draw function\nvar sceneFunc = shape.sceneFunc();\n\n// set scene draw function\nshape.sceneFunc(function(context, shape) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  // like stroke and fill\n  context.fillStrokeShape(shape);\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7510,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 209
  },
  {
    "id": "Konva.Shape#hitFunc",
    "longname": "Konva.Shape#hitFunc",
    "name": "hitFunc",
    "kind": "function",
    "scope": "instance",
    "description": "get/set hit draw function. That function is used to draw custom hit area of a shape.",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "drawing function",
        "name": "drawFunc"
      }
    ],
    "examples": [
      "// get hit draw function\nvar hitFunc = shape.hitFunc();\n\n// set hit draw function\nshape.hitFunc(function(context) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  context.fillStrokeShape(shape);\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7532,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 210
  },
  {
    "id": "Konva.Shape#dash",
    "longname": "Konva.Shape#dash",
    "name": "dash",
    "kind": "function",
    "scope": "instance",
    "description": "get/set dash array for stroke.",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "dash"
      }
    ],
    "examples": [
      "// apply dashed stroke that is 10px long and 5 pixels apart\n line.dash([10, 5]);\n // apply dashed stroke that is made up of alternating dashed\n // lines that are 10px long and 20px apart, and dots that have\n // a radius of 5px and are 20px apart\n line.dash([10, 20, 0.001, 20]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7552,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 211
  },
  {
    "id": "Konva.Shape#dash",
    "longname": "Konva.Shape#dash",
    "name": "dash",
    "kind": "function",
    "scope": "instance",
    "description": "get/set dash offset for stroke.",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "offset",
        "name": "dash"
      }
    ],
    "examples": [
      "// apply dashed stroke that is 10px long and 5 pixels apart with an offset of 5px\n line.dash([10, 5]);\n line.dashOffset(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7567,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 212
  },
  {
    "id": "Konva.Shape#shadowColor",
    "longname": "Konva.Shape#shadowColor",
    "name": "shadowColor",
    "kind": "function",
    "scope": "instance",
    "description": "get/set shadow color",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get shadow color\nvar shadow = shape.shadowColor();\n\n// set shadow color with color string\nshape.shadowColor('green');\n\n// set shadow color with hex\nshape.shadowColor('#00ff00');\n\n// set shadow color with rgb\nshape.shadowColor('rgb(0,255,0)');\n\n// set shadow color with rgba and make it 50% opaque\nshape.shadowColor('rgba(0,255,0,0.5');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7579,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 213
  },
  {
    "id": "Konva.Shape#shadowBlur",
    "longname": "Konva.Shape#shadowBlur",
    "name": "shadowBlur",
    "kind": "function",
    "scope": "instance",
    "description": "get/set shadow blur",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "blur"
      }
    ],
    "examples": [
      "// get shadow blur\nvar shadowBlur = shape.shadowBlur();\n\n// set shadow blur\nshape.shadowBlur(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7602,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 214
  },
  {
    "id": "Konva.Shape#shadowOpacity",
    "longname": "Konva.Shape#shadowOpacity",
    "name": "shadowOpacity",
    "kind": "function",
    "scope": "instance",
    "description": "get/set shadow opacity.  must be a value between 0 and 1",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "opacity"
      }
    ],
    "examples": [
      "// get shadow opacity\nvar shadowOpacity = shape.shadowOpacity();\n\n// set shadow opacity\nshape.shadowOpacity(0.5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7616,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 215
  },
  {
    "id": "Konva.Shape#shadowOffset",
    "longname": "Konva.Shape#shadowOffset",
    "name": "shadowOffset",
    "kind": "function",
    "scope": "instance",
    "description": "get/set shadow offset",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.y"
      }
    ],
    "examples": [
      "// get shadow offset\nvar shadowOffset = shape.shadowOffset();\n\n// set shadow offset\nshape.shadowOffset({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7630,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 216
  },
  {
    "id": "Konva.Shape#shadowOffsetX",
    "longname": "Konva.Shape#shadowOffsetX",
    "name": "shadowOffsetX",
    "kind": "function",
    "scope": "instance",
    "description": "get/set shadow offset x",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get shadow offset x\nvar shadowOffsetX = shape.shadowOffsetX();\n\n// set shadow offset x\nshape.shadowOffsetX(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7649,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 217
  },
  {
    "id": "Konva.Shape#shadowOffsetY",
    "longname": "Konva.Shape#shadowOffsetY",
    "name": "shadowOffsetY",
    "kind": "function",
    "scope": "instance",
    "description": "get/set shadow offset y",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get shadow offset y\nvar shadowOffsetY = shape.shadowOffsetY();\n\n// set shadow offset y\nshape.shadowOffsetY(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7663,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 218
  },
  {
    "id": "Konva.Shape#fillPatternImage",
    "longname": "Konva.Shape#fillPatternImage",
    "name": "fillPatternImage",
    "kind": "function",
    "scope": "instance",
    "description": "get/set fill pattern image",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Image"
          ]
        },
        "description": "object",
        "name": "image"
      }
    ],
    "examples": [
      "// get fill pattern image\nvar fillPatternImage = shape.fillPatternImage();\n\n// set fill pattern image\nvar imageObj = new Image();\nimageObj.onload = function() {\n  shape.fillPatternImage(imageObj);\n};\nimageObj.src = 'path/to/image/jpg';"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Image"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7677,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 219
  },
  {
    "id": "Konva.Shape#fill",
    "longname": "Konva.Shape#fill",
    "name": "fill",
    "kind": "function",
    "scope": "instance",
    "description": "get/set fill color",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get fill color\nvar fill = shape.fill();\n\n// set fill color with color string\nshape.fill('green');\n\n// set fill color with hex\nshape.fill('#00ff00');\n\n// set fill color with rgb\nshape.fill('rgb(0,255,0)');\n\n// set fill color with rgba and make it 50% opaque\nshape.fill('rgba(0,255,0,0.5');\n\n// shape without fill\nshape.fill(null);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7695,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 220
  },
  {
    "id": "Konva.Shape#fillPatternX",
    "longname": "Konva.Shape#fillPatternX",
    "name": "fillPatternX",
    "kind": "function",
    "scope": "instance",
    "description": "get/set fill pattern x",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern x\nvar fillPatternX = shape.fillPatternX();\n// set fill pattern x\nshape.fillPatternX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7721,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 221
  },
  {
    "id": "Konva.Shape#fillPatternY",
    "longname": "Konva.Shape#fillPatternY",
    "name": "fillPatternY",
    "kind": "function",
    "scope": "instance",
    "description": "get/set fill pattern y",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern y\nvar fillPatternY = shape.fillPatternY();\n// set fill pattern y\nshape.fillPatternY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7734,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 222
  },
  {
    "id": "Konva.Shape#fillLinearGradientColorStops",
    "longname": "Konva.Shape#fillLinearGradientColorStops",
    "name": "fillLinearGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "description": "get/set fill linear gradient color stops",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get fill linear gradient color stops\nvar colorStops = shape.fillLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillLinearGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "colorStops"
      }
    ],
    "meta": {
      "lineno": 7747,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 223
  },
  {
    "id": "Konva.Shape#strokeLinearGradientColorStops",
    "longname": "Konva.Shape#strokeLinearGradientColorStops",
    "name": "strokeLinearGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "description": "get/set stroke linear gradient color stops",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get stroke linear gradient color stops\nvar colorStops = shape.strokeLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.strokeLinearGradientColorStops([0, 'red', 0.5, 'blue', 1, 'green']);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "colorStops"
      }
    ],
    "meta": {
      "lineno": 7762,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 224
  },
  {
    "id": "Konva.Shape#fillRadialGradientStartRadius",
    "longname": "Konva.Shape#fillRadialGradientStartRadius",
    "name": "fillRadialGradientStartRadius",
    "kind": "function",
    "scope": "instance",
    "description": "get/set fill radial gradient start radius",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "radius"
      }
    ],
    "examples": [
      "// get radial gradient start radius\nvar startRadius = shape.fillRadialGradientStartRadius();\n\n// set radial gradient start radius\nshape.fillRadialGradientStartRadius(0);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7777,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 225
  },
  {
    "id": "Konva.Shape#fillRadialGradientEndRadius",
    "longname": "Konva.Shape#fillRadialGradientEndRadius",
    "name": "fillRadialGradientEndRadius",
    "kind": "function",
    "scope": "instance",
    "description": "get/set fill radial gradient end radius",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "radius"
      }
    ],
    "examples": [
      "// get radial gradient end radius\nvar endRadius = shape.fillRadialGradientEndRadius();\n\n// set radial gradient end radius\nshape.fillRadialGradientEndRadius(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7791,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 226
  },
  {
    "id": "Konva.Shape#fillRadialGradientColorStops",
    "longname": "Konva.Shape#fillRadialGradientColorStops",
    "name": "fillRadialGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "description": "get/set fill radial gradient color stops",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get fill radial gradient color stops\nvar colorStops = shape.fillRadialGradientColorStops();\n\n// create a radial gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillRadialGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7805,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 227
  },
  {
    "id": "Konva.Shape#fillPatternRepeat",
    "longname": "Konva.Shape#fillPatternRepeat",
    "name": "fillPatternRepeat",
    "kind": "function",
    "scope": "instance",
    "description": "get/set fill pattern repeat.  Can be 'repeat', 'repeat-x', 'repeat-y', or 'no-repeat'.  The default is 'repeat'",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "repeat"
      }
    ],
    "examples": [
      "// get fill pattern repeat\nvar repeat = shape.fillPatternRepeat();\n\n// repeat pattern in x direction only\nshape.fillPatternRepeat('repeat-x');\n\n// do not repeat the pattern\nshape.fillPatternRepeat('no-repeat');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7820,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 228
  },
  {
    "id": "Konva.Shape#fillEnabled",
    "longname": "Konva.Shape#fillEnabled",
    "name": "fillEnabled",
    "kind": "function",
    "scope": "instance",
    "description": "get/set fill enabled flag",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get fill enabled flag\nvar fillEnabled = shape.fillEnabled();\n\n// disable fill\nshape.fillEnabled(false);\n\n// enable fill\nshape.fillEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7837,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 229
  },
  {
    "id": "Konva.Shape#strokeEnabled",
    "longname": "Konva.Shape#strokeEnabled",
    "name": "strokeEnabled",
    "kind": "function",
    "scope": "instance",
    "description": "get/set stroke enabled flag",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get stroke enabled flag\nvar strokeEnabled = shape.strokeEnabled();\n\n// disable stroke\nshape.strokeEnabled(false);\n\n// enable stroke\nshape.strokeEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7854,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 230
  },
  {
    "id": "Konva.Shape#shadowEnabled",
    "longname": "Konva.Shape#shadowEnabled",
    "name": "shadowEnabled",
    "kind": "function",
    "scope": "instance",
    "description": "get/set shadow enabled flag",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get shadow enabled flag\nvar shadowEnabled = shape.shadowEnabled();\n\n// disable shadow\nshape.shadowEnabled(false);\n\n// enable shadow\nshape.shadowEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7871,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 231
  },
  {
    "id": "Konva.Shape#dashEnabled",
    "longname": "Konva.Shape#dashEnabled",
    "name": "dashEnabled",
    "kind": "function",
    "scope": "instance",
    "description": "get/set dash enabled flag",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get dash enabled flag\nvar dashEnabled = shape.dashEnabled();\n\n// disable dash\nshape.dashEnabled(false);\n\n// enable dash\nshape.dashEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7888,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 232
  },
  {
    "id": "Konva.Shape#strokeScaleEnabled",
    "longname": "Konva.Shape#strokeScaleEnabled",
    "name": "strokeScaleEnabled",
    "kind": "function",
    "scope": "instance",
    "description": "get/set strokeScale enabled flag",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get stroke scale enabled flag\nvar strokeScaleEnabled = shape.strokeScaleEnabled();\n\n// disable stroke scale\nshape.strokeScaleEnabled(false);\n\n// enable stroke scale\nshape.strokeScaleEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7905,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 233
  },
  {
    "id": "Konva.Shape#fillPriority",
    "longname": "Konva.Shape#fillPriority",
    "name": "fillPriority",
    "kind": "function",
    "scope": "instance",
    "description": "get/set fill priority.  can be color, pattern, linear-gradient, or radial-gradient.  The default is color.\n  This is handy if you want to toggle between different fill types.",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "priority"
      }
    ],
    "examples": [
      "// get fill priority\nvar fillPriority = shape.fillPriority();\n\n// set fill priority\nshape.fillPriority('linear-gradient');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7922,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 234
  },
  {
    "id": "Konva.Shape#fillPatternOffset",
    "longname": "Konva.Shape#fillPatternOffset",
    "name": "fillPatternOffset",
    "kind": "function",
    "scope": "instance",
    "description": "get/set fill pattern offset",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.y"
      }
    ],
    "examples": [
      "// get fill pattern offset\nvar patternOffset = shape.fillPatternOffset();\n\n// set fill pattern offset\nshape.fillPatternOffset({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7937,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 235
  },
  {
    "id": "Konva.Shape#fillPatternOffsetX",
    "longname": "Konva.Shape#fillPatternOffsetX",
    "name": "fillPatternOffsetX",
    "kind": "function",
    "scope": "instance",
    "description": "get/set fill pattern offset x",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern offset x\nvar patternOffsetX = shape.fillPatternOffsetX();\n\n// set fill pattern offset x\nshape.fillPatternOffsetX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7956,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 236
  },
  {
    "id": "Konva.Shape#fillPatternOffsetY",
    "longname": "Konva.Shape#fillPatternOffsetY",
    "name": "fillPatternOffsetY",
    "kind": "function",
    "scope": "instance",
    "description": "get/set fill pattern offset y",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern offset y\nvar patternOffsetY = shape.fillPatternOffsetY();\n\n// set fill pattern offset y\nshape.fillPatternOffsetY(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7970,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 237
  },
  {
    "id": "Konva.Shape#fillPatternScale",
    "longname": "Konva.Shape#fillPatternScale",
    "name": "fillPatternScale",
    "kind": "function",
    "scope": "instance",
    "description": "get/set fill pattern scale",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.y"
      }
    ],
    "examples": [
      "// get fill pattern scale\nvar patternScale = shape.fillPatternScale();\n\n// set fill pattern scale\nshape.fillPatternScale({\n  x: 2,\n  y: 2\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7984,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 238
  },
  {
    "id": "Konva.Shape#fillPatternScaleX",
    "longname": "Konva.Shape#fillPatternScaleX",
    "name": "fillPatternScaleX",
    "kind": "function",
    "scope": "instance",
    "description": "get/set fill pattern scale x",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern scale x\nvar patternScaleX = shape.fillPatternScaleX();\n\n// set fill pattern scale x\nshape.fillPatternScaleX(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8003,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 239
  },
  {
    "id": "Konva.Shape#fillPatternScaleY",
    "longname": "Konva.Shape#fillPatternScaleY",
    "name": "fillPatternScaleY",
    "kind": "function",
    "scope": "instance",
    "description": "get/set fill pattern scale y",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern scale y\nvar patternScaleY = shape.fillPatternScaleY();\n\n// set fill pattern scale y\nshape.fillPatternScaleY(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8017,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 240
  },
  {
    "id": "Konva.Shape#fillLinearGradientStartPoint",
    "longname": "Konva.Shape#fillLinearGradientStartPoint",
    "name": "fillLinearGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "description": "get/set fill linear gradient start point",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get fill linear gradient start point\nvar startPoint = shape.fillLinearGradientStartPoint();\n\n// set fill linear gradient start point\nshape.fillLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8034,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 241
  },
  {
    "id": "Konva.Shape#strokeLinearGradientStartPoint",
    "longname": "Konva.Shape#strokeLinearGradientStartPoint",
    "name": "strokeLinearGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "description": "get/set stroke linear gradient start point",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point\nvar startPoint = shape.strokeLinearGradientStartPoint();\n\n// set stroke linear gradient start point\nshape.strokeLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8056,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 242
  },
  {
    "id": "Konva.Shape#fillLinearGradientStartPointX",
    "longname": "Konva.Shape#fillLinearGradientStartPointX",
    "name": "fillLinearGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "description": "get/set fill linear gradient start point x",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill linear gradient start point x\nvar startPointX = shape.fillLinearGradientStartPointX();\n\n// set fill linear gradient start point x\nshape.fillLinearGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8075,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 243
  },
  {
    "id": "Konva.Shape#linearLinearGradientStartPointX",
    "longname": "Konva.Shape#linearLinearGradientStartPointX",
    "name": "linearLinearGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "description": "get/set stroke linear gradient start point x",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point x\nvar startPointX = shape.strokeLinearGradientStartPointX();\n\n// set stroke linear gradient start point x\nshape.strokeLinearGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8089,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 244
  },
  {
    "id": "Konva.Shape#fillLinearGradientStartPointY",
    "longname": "Konva.Shape#fillLinearGradientStartPointY",
    "name": "fillLinearGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "description": "get/set fill linear gradient start point y",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill linear gradient start point y\nvar startPointY = shape.fillLinearGradientStartPointY();\n\n// set fill linear gradient start point y\nshape.fillLinearGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8103,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 245
  },
  {
    "id": "Konva.Shape#strokeLinearGradientStartPointY",
    "longname": "Konva.Shape#strokeLinearGradientStartPointY",
    "name": "strokeLinearGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "description": "get/set stroke linear gradient start point y",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point y\nvar startPointY = shape.strokeLinearGradientStartPointY();\n\n// set stroke linear gradient start point y\nshape.strokeLinearGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8117,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 246
  },
  {
    "id": "Konva.Shape#fillLinearGradientEndPoint",
    "longname": "Konva.Shape#fillLinearGradientEndPoint",
    "name": "fillLinearGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "description": "get/set fill linear gradient end point",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get fill linear gradient end point\nvar endPoint = shape.fillLinearGradientEndPoint();\n\n// set fill linear gradient end point\nshape.fillLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8134,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 247
  },
  {
    "id": "Konva.Shape#strokeLinearGradientEndPoint",
    "longname": "Konva.Shape#strokeLinearGradientEndPoint",
    "name": "strokeLinearGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "description": "get/set stroke linear gradient end point",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point\nvar endPoint = shape.strokeLinearGradientEndPoint();\n\n// set stroke linear gradient end point\nshape.strokeLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8156,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 248
  },
  {
    "id": "Konva.Shape#fillLinearGradientEndPointX",
    "longname": "Konva.Shape#fillLinearGradientEndPointX",
    "name": "fillLinearGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "description": "get/set fill linear gradient end point x",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill linear gradient end point x\nvar endPointX = shape.fillLinearGradientEndPointX();\n\n// set fill linear gradient end point x\nshape.fillLinearGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8175,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 249
  },
  {
    "id": "Konva.Shape#strokeLinearGradientEndPointX",
    "longname": "Konva.Shape#strokeLinearGradientEndPointX",
    "name": "strokeLinearGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "description": "get/set fill linear gradient end point x",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point x\nvar endPointX = shape.strokeLinearGradientEndPointX();\n\n// set stroke linear gradient end point x\nshape.strokeLinearGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8189,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 250
  },
  {
    "id": "Konva.Shape#fillLinearGradientEndPointY",
    "longname": "Konva.Shape#fillLinearGradientEndPointY",
    "name": "fillLinearGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "description": "get/set fill linear gradient end point y",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill linear gradient end point y\nvar endPointY = shape.fillLinearGradientEndPointY();\n\n// set fill linear gradient end point y\nshape.fillLinearGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8203,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 251
  },
  {
    "id": "Konva.Shape#strokeLinearGradientEndPointY",
    "longname": "Konva.Shape#strokeLinearGradientEndPointY",
    "name": "strokeLinearGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "description": "get/set stroke linear gradient end point y",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point y\nvar endPointY = shape.strokeLinearGradientEndPointY();\n\n// set stroke linear gradient end point y\nshape.strokeLinearGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8217,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 252
  },
  {
    "id": "Konva.Shape#fillRadialGradientStartPoint",
    "longname": "Konva.Shape#fillRadialGradientStartPoint",
    "name": "fillRadialGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "description": "get/set fill radial gradient start point",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get fill radial gradient start point\nvar startPoint = shape.fillRadialGradientStartPoint();\n\n// set fill radial gradient start point\nshape.fillRadialGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8234,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 253
  },
  {
    "id": "Konva.Shape#fillRadialGradientStartPointX",
    "longname": "Konva.Shape#fillRadialGradientStartPointX",
    "name": "fillRadialGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "description": "get/set fill radial gradient start point x",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill radial gradient start point x\nvar startPointX = shape.fillRadialGradientStartPointX();\n\n// set fill radial gradient start point x\nshape.fillRadialGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8253,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 254
  },
  {
    "id": "Konva.Shape#fillRadialGradientStartPointY",
    "longname": "Konva.Shape#fillRadialGradientStartPointY",
    "name": "fillRadialGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "description": "get/set fill radial gradient start point y",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill radial gradient start point y\nvar startPointY = shape.fillRadialGradientStartPointY();\n\n// set fill radial gradient start point y\nshape.fillRadialGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8267,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 255
  },
  {
    "id": "Konva.Shape#fillRadialGradientEndPoint",
    "longname": "Konva.Shape#fillRadialGradientEndPoint",
    "name": "fillRadialGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "description": "get/set fill radial gradient end point",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get fill radial gradient end point\nvar endPoint = shape.fillRadialGradientEndPoint();\n\n// set fill radial gradient end point\nshape.fillRadialGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8284,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 256
  },
  {
    "id": "Konva.Shape#fillRadialGradientEndPointX",
    "longname": "Konva.Shape#fillRadialGradientEndPointX",
    "name": "fillRadialGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "description": "get/set fill radial gradient end point x",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill radial gradient end point x\nvar endPointX = shape.fillRadialGradientEndPointX();\n\n// set fill radial gradient end point x\nshape.fillRadialGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8303,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 257
  },
  {
    "id": "Konva.Shape#fillRadialGradientEndPointY",
    "longname": "Konva.Shape#fillRadialGradientEndPointY",
    "name": "fillRadialGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "description": "get/set fill radial gradient end point y",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill radial gradient end point y\nvar endPointY = shape.fillRadialGradientEndPointY();\n\n// set fill radial gradient end point y\nshape.fillRadialGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8317,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 258
  },
  {
    "id": "Konva.Shape#fillPatternRotation",
    "longname": "Konva.Shape#fillPatternRotation",
    "name": "fillPatternRotation",
    "kind": "function",
    "scope": "instance",
    "description": "get/set fill pattern rotation in degrees",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get fill pattern rotation\nvar patternRotation = shape.fillPatternRotation();\n\n// set fill pattern rotation\nshape.fillPatternRotation(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8331,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 259
  },
  {
    "id": "Konva.Shape#fillRule",
    "longname": "Konva.Shape#fillRule",
    "name": "fillRule",
    "kind": "function",
    "scope": "instance",
    "description": "get/set fill rule",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "CanvasFillRule"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get fill rule\nvar fillRule = shape.fillRule();\n\n// set fill rule\nshape.fillRule('evenodd');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8345,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 260
  },
  {
    "id": "Konva.Layer#getCanvas",
    "longname": "Konva.Layer#getCanvas",
    "name": "getCanvas",
    "kind": "function",
    "scope": "instance",
    "description": "get layer canvas wrapper",
    "memberof": "Konva.Layer",
    "meta": {
      "lineno": 8445,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 263
  },
  {
    "id": "Konva.Layer#getNativeCanvasElement",
    "longname": "Konva.Layer#getNativeCanvasElement",
    "name": "getNativeCanvasElement",
    "kind": "function",
    "scope": "instance",
    "description": "get native canvas element",
    "memberof": "Konva.Layer",
    "meta": {
      "lineno": 8453,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 264
  },
  {
    "id": "Konva.Layer#getHitCanvas",
    "longname": "Konva.Layer#getHitCanvas",
    "name": "getHitCanvas",
    "kind": "function",
    "scope": "instance",
    "description": "get layer hit canvas",
    "memberof": "Konva.Layer",
    "meta": {
      "lineno": 8461,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 265
  },
  {
    "id": "Konva.Layer#getContext",
    "longname": "Konva.Layer#getContext",
    "name": "getContext",
    "kind": "function",
    "scope": "instance",
    "description": "get layer canvas context",
    "memberof": "Konva.Layer",
    "meta": {
      "lineno": 8469,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 266
  },
  {
    "id": "Konva.Layer#width",
    "longname": "Konva.Layer#width",
    "name": "width",
    "kind": "function",
    "scope": "instance",
    "overrides": "Konva.Container#width",
    "description": "get/set width of layer. getter return width of stage. setter doing nothing.\nif you want change width use `stage.width(value);`",
    "memberof": "Konva.Layer",
    "examples": [
      "var width = layer.width();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8602,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 267
  },
  {
    "id": "Konva.Layer#height",
    "longname": "Konva.Layer#height",
    "name": "height",
    "kind": "function",
    "scope": "instance",
    "overrides": "Konva.Container#height",
    "description": "get/set height of layer.getter return height of stage. setter doing nothing.\nif you want change height use `stage.height(value);`",
    "memberof": "Konva.Layer",
    "examples": [
      "var height = layer.height();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8619,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 268
  },
  {
    "id": "Konva.Layer#batchDraw",
    "longname": "Konva.Layer#batchDraw",
    "name": "batchDraw",
    "kind": "function",
    "scope": "instance",
    "description": "batch draw. this function will not do immediate draw\nbut it will schedule drawing to next tick (requestAnimFrame)",
    "memberof": "Konva.Layer",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Layer"
          ]
        },
        "description": "this"
      }
    ],
    "meta": {
      "lineno": 8636,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 269
  },
  {
    "id": "Konva.Layer#getIntersection",
    "longname": "Konva.Layer#getIntersection",
    "name": "getIntersection",
    "kind": "function",
    "scope": "instance",
    "description": "get visible intersection shape. This is the preferred\nmethod for determining if a point intersects a shape or not\nalso you may pass optional selector parameter to return ancestor of intersected shape\nnodes with listening set to false will not be detected",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "var shape = layer.getIntersection({x: 50, y: 50});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8653,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 270
  },
  {
    "id": "Konva.Layer#enableHitGraph",
    "longname": "Konva.Layer#enableHitGraph",
    "name": "enableHitGraph",
    "kind": "function",
    "scope": "instance",
    "description": "enable hit graph. **DEPRECATED!** Use `layer.listening(true)` instead.",
    "memberof": "Konva.Layer",
    "returns": [
      {
        "type": {
          "names": [
            "Layer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8751,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 271
  },
  {
    "id": "Konva.Layer#disableHitGraph",
    "longname": "Konva.Layer#disableHitGraph",
    "name": "disableHitGraph",
    "kind": "function",
    "scope": "instance",
    "description": "disable hit graph. **DEPRECATED!** Use `layer.listening(false)` instead.",
    "memberof": "Konva.Layer",
    "returns": [
      {
        "type": {
          "names": [
            "Layer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8761,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 272
  },
  {
    "id": "Konva.Layer#toggleHitCanvas",
    "longname": "Konva.Layer#toggleHitCanvas",
    "name": "toggleHitCanvas",
    "kind": "function",
    "scope": "instance",
    "description": "Show or hide hit canvas over the stage. May be useful for debugging custom hitFunc",
    "memberof": "Konva.Layer",
    "meta": {
      "lineno": 8779,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 273
  },
  {
    "id": "Konva.Layer#imageSmoothingEnabled",
    "longname": "Konva.Layer#imageSmoothingEnabled",
    "name": "imageSmoothingEnabled",
    "kind": "function",
    "scope": "instance",
    "description": "get/set imageSmoothingEnabled flag\nFor more info see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/imageSmoothingEnabled",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "imageSmoothingEnabled"
      }
    ],
    "examples": [
      "// get imageSmoothingEnabled flag\nvar imageSmoothingEnabled = layer.imageSmoothingEnabled();\n\nlayer.imageSmoothingEnabled(false);\n\nlayer.imageSmoothingEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8804,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 274
  },
  {
    "id": "Konva.Layer#clearBeforeDraw",
    "longname": "Konva.Layer#clearBeforeDraw",
    "name": "clearBeforeDraw",
    "kind": "function",
    "scope": "instance",
    "description": "get/set clearBeforeDraw flag which determines if the layer is cleared or not\n before drawing",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "clearBeforeDraw"
      }
    ],
    "examples": [
      "// get clearBeforeDraw flag\nvar clearBeforeDraw = layer.clearBeforeDraw();\n\n// disable clear before draw\nlayer.clearBeforeDraw(false);\n\n// enable clear before draw\nlayer.clearBeforeDraw(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8820,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 275
  },
  {
    "id": "Konva.Layer#hitGraphEnabled",
    "longname": "Konva.Layer#hitGraphEnabled",
    "name": "hitGraphEnabled",
    "kind": "function",
    "scope": "instance",
    "description": "get/set hitGraphEnabled flag.  **DEPRECATED!** Use `layer.listening(false)` instead.\n Disabling the hit graph will greatly increase\n draw performance because the hit graph will not be redrawn each time the layer is\n drawn.  This, however, also disables mouse/touch event detection",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get hitGraphEnabled flag\nvar hitGraphEnabled = layer.hitGraphEnabled();\n\n// disable hit graph\nlayer.hitGraphEnabled(false);\n\n// enable hit graph\nlayer.hitGraphEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8839,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 276
  },
  {
    "id": "Konva.Animation#setLayers",
    "longname": "Konva.Animation#setLayers",
    "name": "setLayers",
    "kind": "function",
    "scope": "instance",
    "description": "set layers to be redrawn on each animation frame",
    "memberof": "Konva.Animation",
    "params": [
      {
        "type": {
          "names": [
            "Konva.Layer",
            "Array"
          ]
        },
        "optional": true,
        "description": "layer(s) to be redrawn. Can be a layer, an array of layers, or null.  Not specifying a node will result in no redraw.",
        "name": "layers"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Animation"
          ]
        },
        "description": "this"
      }
    ],
    "meta": {
      "lineno": 8979,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 283
  },
  {
    "id": "Konva.Animation#getLayers",
    "longname": "Konva.Animation#getLayers",
    "name": "getLayers",
    "kind": "function",
    "scope": "instance",
    "description": "get layers",
    "memberof": "Konva.Animation",
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Array of Konva.Layer"
      }
    ],
    "meta": {
      "lineno": 8995,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 284
  },
  {
    "id": "Konva.Animation#addLayer",
    "longname": "Konva.Animation#addLayer",
    "name": "addLayer",
    "kind": "function",
    "scope": "instance",
    "description": "add layer.  Returns true if the layer was added, and false if it was not",
    "memberof": "Konva.Animation",
    "params": [
      {
        "type": {
          "names": [
            "Konva.Layer"
          ]
        },
        "description": "to add",
        "name": "layer"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Bool"
          ]
        },
        "description": "true if layer is added to animation, otherwise false"
      }
    ],
    "meta": {
      "lineno": 9004,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 285
  },
  {
    "id": "Konva.Animation#isRunning",
    "longname": "Konva.Animation#isRunning",
    "name": "isRunning",
    "kind": "function",
    "scope": "instance",
    "description": "determine if animation is running or not.  returns true or false",
    "memberof": "Konva.Animation",
    "returns": [
      {
        "type": {
          "names": [
            "Bool"
          ]
        },
        "description": "is animation running?"
      }
    ],
    "meta": {
      "lineno": 9023,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 286
  },
  {
    "id": "Konva.Animation#start",
    "longname": "Konva.Animation#start",
    "name": "start",
    "kind": "function",
    "scope": "instance",
    "description": "start animation",
    "memberof": "Konva.Animation",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Animation"
          ]
        },
        "description": "this"
      }
    ],
    "meta": {
      "lineno": 9040,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 287
  },
  {
    "id": "Konva.Animation#stop",
    "longname": "Konva.Animation#stop",
    "name": "stop",
    "kind": "function",
    "scope": "instance",
    "description": "stop animation",
    "memberof": "Konva.Animation",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Animation"
          ]
        },
        "description": "this"
      }
    ],
    "meta": {
      "lineno": 9053,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 288
  },
  {
    "id": "Konva.Tween#play",
    "longname": "Konva.Tween#play",
    "name": "play",
    "kind": "function",
    "scope": "instance",
    "description": "play",
    "memberof": "Konva.Tween",
    "returns": [
      {
        "type": {
          "names": [
            "Tween"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 9511,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 291
  },
  {
    "id": "Konva.Tween#reverse",
    "longname": "Konva.Tween#reverse",
    "name": "reverse",
    "kind": "function",
    "scope": "instance",
    "description": "reverse",
    "memberof": "Konva.Tween",
    "returns": [
      {
        "type": {
          "names": [
            "Tween"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 9521,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 292
  },
  {
    "id": "Konva.Tween#reset",
    "longname": "Konva.Tween#reset",
    "name": "reset",
    "kind": "function",
    "scope": "instance",
    "description": "reset",
    "memberof": "Konva.Tween",
    "returns": [
      {
        "type": {
          "names": [
            "Tween"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 9531,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 293
  },
  {
    "id": "Konva.Tween#seek(",
    "longname": "Konva.Tween#seek(",
    "name": "seek(",
    "kind": "function",
    "scope": "instance",
    "description": "seek",
    "memberof": "Konva.Tween",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "time in seconds between 0 and the duration",
        "name": "t"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Tween"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 9541,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 294
  },
  {
    "id": "Konva.Tween#pause",
    "longname": "Konva.Tween#pause",
    "name": "pause",
    "kind": "function",
    "scope": "instance",
    "description": "pause",
    "memberof": "Konva.Tween",
    "returns": [
      {
        "type": {
          "names": [
            "Tween"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 9552,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 295
  },
  {
    "id": "Konva.Tween#finish",
    "longname": "Konva.Tween#finish",
    "name": "finish",
    "kind": "function",
    "scope": "instance",
    "description": "finish",
    "memberof": "Konva.Tween",
    "returns": [
      {
        "type": {
          "names": [
            "Tween"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 9562,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 296
  },
  {
    "id": "Konva.Tween#destroy",
    "longname": "Konva.Tween#destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "instance",
    "description": "destroy",
    "memberof": "Konva.Tween",
    "meta": {
      "lineno": 9572,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 297
  },
  {
    "id": "Konva.Node#to",
    "longname": "Konva.Node#to",
    "name": "to",
    "kind": "function",
    "scope": "instance",
    "description": "Tween node properties. Shorter usage of {@link Konva.Tween} object.",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "tween params",
        "name": "params"
      }
    ],
    "examples": [
      "circle.to({\n  x : 50,\n  duration : 0.5,\n  onUpdate: () => console.log('props updated'),\n  onFinish: () => console.log('finished'),\n});"
    ],
    "meta": {
      "lineno": 9588,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 298
  },
  {
    "id": "Konva.Arc#innerRadius",
    "longname": "Konva.Arc#innerRadius",
    "name": "innerRadius",
    "kind": "function",
    "scope": "instance",
    "description": "get/set innerRadius",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "innerRadius"
      }
    ],
    "examples": [
      "// get inner radius\nvar innerRadius = arc.innerRadius();\n\n// set inner radius\narc.innerRadius(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 10016,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 318
  },
  {
    "id": "Konva.Arc#outerRadius",
    "longname": "Konva.Arc#outerRadius",
    "name": "outerRadius",
    "kind": "function",
    "scope": "instance",
    "description": "get/set outerRadius",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "outerRadius"
      }
    ],
    "examples": [
      "// get outer radius\nvar outerRadius = arc.outerRadius();\n\n// set outer radius\narc.outerRadius(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 10030,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 319
  },
  {
    "id": "Konva.Arc#angle",
    "longname": "Konva.Arc#angle",
    "name": "angle",
    "kind": "function",
    "scope": "instance",
    "description": "get/set angle in degrees",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "angle"
      }
    ],
    "examples": [
      "// get angle\nvar angle = arc.angle();\n\n// set angle\narc.angle(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 10044,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 320
  },
  {
    "id": "Konva.Arc#clockwise",
    "longname": "Konva.Arc#clockwise",
    "name": "clockwise",
    "kind": "function",
    "scope": "instance",
    "description": "get/set clockwise flag",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "clockwise"
      }
    ],
    "examples": [
      "// get clockwise flag\nvar clockwise = arc.clockwise();\n\n// draw arc counter-clockwise\narc.clockwise(false);\n\n// draw arc clockwise\narc.clockwise(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 10058,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 321
  },
  {
    "id": "Konva.Line#closed",
    "longname": "Konva.Line#closed",
    "name": "closed",
    "kind": "function",
    "scope": "instance",
    "description": "get/set closed flag.  The default is false",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "closed"
      }
    ],
    "examples": [
      "// get closed flag\nvar closed = line.closed();\n\n// close the shape\nline.closed(true);\n\n// open the shape\nline.closed(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 10325,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 324
  },
  {
    "id": "Konva.Line#bezier",
    "longname": "Konva.Line#bezier",
    "name": "bezier",
    "kind": "function",
    "scope": "instance",
    "description": "get/set bezier flag.  The default is false",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "bezier"
      }
    ],
    "examples": [
      "// get whether the line is a bezier\nvar isBezier = line.bezier();\n\n// set whether the line is a bezier\nline.bezier(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 10342,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 325
  },
  {
    "id": "Konva.Line#tension",
    "longname": "Konva.Line#tension",
    "name": "tension",
    "kind": "function",
    "scope": "instance",
    "description": "get/set tension",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "Higher values will result in a more curvy line.  A value of 0 will result in no interpolation. The default is 0",
        "name": "tension"
      }
    ],
    "examples": [
      "// get tension\nvar tension = line.tension();\n\n// set tension\nline.tension(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 10356,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 326
  },
  {
    "id": "Konva.Line#points",
    "longname": "Konva.Line#points",
    "name": "points",
    "kind": "function",
    "scope": "instance",
    "description": "get/set points array. Points is a flat array [x1, y1, x2, y2]. It is flat for performance reasons.",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "points"
      }
    ],
    "examples": [
      "// get points\nvar points = line.points();\n\n// set points\nline.points([10, 20, 30, 40, 50, 60]);\n\n// push a new point\nline.points(line.points().concat([70, 80]));"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 10370,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 327
  },
  {
    "id": "Konva.Path#getLength",
    "longname": "Konva.Path#getLength",
    "name": "getLength",
    "kind": "function",
    "scope": "instance",
    "description": "Return length of the path.",
    "memberof": "Konva.Path",
    "examples": [
      "var length = path.getLength();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "length"
      }
    ],
    "meta": {
      "lineno": 11407,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 331
  },
  {
    "id": "Konva.Path#getPointAtLength",
    "longname": "Konva.Path#getPointAtLength",
    "name": "getPointAtLength",
    "kind": "function",
    "scope": "instance",
    "description": "Get point on path at specific length of the path",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "length",
        "name": "length"
      }
    ],
    "examples": [
      "var point = path.getPointAtLength(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "point {x,y} point"
      }
    ],
    "meta": {
      "lineno": 11418,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 332
  },
  {
    "id": "Konva.Path#data",
    "longname": "Konva.Path#data",
    "name": "data",
    "kind": "function",
    "scope": "instance",
    "description": "get/set SVG path data string.  This method\n also automatically parses the data string\n into a data array.  Currently supported SVG data:\n M, m, L, l, H, h, V, v, Q, q, T, t, C, c, S, s, A, a, Z, z",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "svg path string",
        "name": "data"
      }
    ],
    "examples": [
      "// get data\nvar data = path.data();\n\n// set data\npath.data('M200,100h100v50z');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 11959,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 333
  },
  {
    "id": "Konva.Arrow#pointerLength",
    "longname": "Konva.Arrow#pointerLength",
    "name": "pointerLength",
    "kind": "function",
    "scope": "instance",
    "description": "get/set pointerLength",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "of pointer of arrow. The default is 10.",
        "name": "Length"
      }
    ],
    "examples": [
      "// get length\nvar pointerLength = line.pointerLength();\n\n// set length\nline.pointerLength(15);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 12169,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 336
  },
  {
    "id": "Konva.Arrow#pointerWidth",
    "longname": "Konva.Arrow#pointerWidth",
    "name": "pointerWidth",
    "kind": "function",
    "scope": "instance",
    "description": "get/set pointerWidth",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "of pointer of arrow.\n  The default is 10.",
        "name": "Width"
      }
    ],
    "examples": [
      "// get width\nvar pointerWidth = line.pointerWidth();\n\n// set width\nline.pointerWidth(15);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 12183,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 337
  },
  {
    "id": "Konva.Arrow#pointerAtBeginning",
    "longname": "Konva.Arrow#pointerAtBeginning",
    "name": "pointerAtBeginning",
    "kind": "function",
    "scope": "instance",
    "description": "get/set pointerAtBeginning",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "pointer displayed at beginning of arrow. The default is false.",
        "name": "Should"
      }
    ],
    "examples": [
      "// get value\nvar pointerAtBeginning = line.pointerAtBeginning();\n\n// set value\nline.pointerAtBeginning(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 12198,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 338
  },
  {
    "id": "Konva.Arrow#pointerAtEnding",
    "longname": "Konva.Arrow#pointerAtEnding",
    "name": "pointerAtEnding",
    "kind": "function",
    "scope": "instance",
    "description": "get/set pointerAtEnding",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "pointer displayed at ending of arrow. The default is true.",
        "name": "Should"
      }
    ],
    "examples": [
      "// get value\nvar pointerAtEnding = line.pointerAtEnding();\n\n// set value\nline.pointerAtEnding(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 12212,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 339
  },
  {
    "id": "Konva.Circle#radius",
    "longname": "Konva.Circle#radius",
    "name": "radius",
    "kind": "function",
    "scope": "instance",
    "description": "get/set radius",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "radius"
      }
    ],
    "examples": [
      "// get radius\nvar radius = circle.radius();\n\n// set radius\ncircle.radius(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 12345,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 342
  },
  {
    "id": "Konva.Ellipse#radius",
    "longname": "Konva.Ellipse#radius",
    "name": "radius",
    "kind": "function",
    "scope": "instance",
    "description": "get/set radius",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "radius"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "radius.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "radius.y"
      }
    ],
    "examples": [
      "// get radius\nvar radius = ellipse.radius();\n\n// set radius\nellipse.radius({\n  x: 200,\n  y: 100\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 12482,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 345
  },
  {
    "id": "Konva.Ellipse#radiusX",
    "longname": "Konva.Ellipse#radiusX",
    "name": "radiusX",
    "kind": "function",
    "scope": "instance",
    "description": "get/set radius x",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get radius x\nvar radiusX = ellipse.radiusX();\n\n// set radius x\nellipse.radiusX(200);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 12501,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 346
  },
  {
    "id": "Konva.Ellipse#radiusY",
    "longname": "Konva.Ellipse#radiusY",
    "name": "radiusY",
    "kind": "function",
    "scope": "instance",
    "description": "get/set radius y",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get radius y\nvar radiusY = ellipse.radiusY();\n\n// set radius y\nellipse.radiusY(200);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 12515,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 347
  },
  {
    "id": "Konva.Image#cornerRadius",
    "longname": "Konva.Image#cornerRadius",
    "name": "cornerRadius",
    "kind": "function",
    "scope": "instance",
    "description": "get/set corner radius",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "cornerRadius"
      }
    ],
    "examples": [
      "// get corner radius\nvar cornerRadius = image.cornerRadius();\n\n// set corner radius\nimage.cornerRadius(10);\n\n// set different corner radius values\n// top-left, top-right, bottom-right, bottom-left\nimage.cornerRadius([0, 10, 20, 30]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 12747,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 351
  },
  {
    "id": "Konva.Image#image",
    "longname": "Konva.Image#image",
    "name": "image",
    "kind": "function",
    "scope": "instance",
    "description": "get/set image source. It can be image, canvas or video element",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "source",
        "name": "image"
      }
    ],
    "examples": [
      "// get value\nvar image = shape.image();\n\n// set value\nshape.image(img);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 12765,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 352
  },
  {
    "id": "Konva.Image#crop",
    "longname": "Konva.Image#crop",
    "name": "crop",
    "kind": "function",
    "scope": "instance",
    "description": "get/set crop",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "crop"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "crop.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "crop.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "crop.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "crop.height"
      }
    ],
    "examples": [
      "// get crop\nvar crop = image.crop();\n\n// set crop\nimage.crop({\n  x: 20,\n  y: 20,\n  width: 20,\n  height: 20\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 12780,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 353
  },
  {
    "id": "Konva.Image#cropX",
    "longname": "Konva.Image#cropX",
    "name": "cropX",
    "kind": "function",
    "scope": "instance",
    "description": "get/set crop x",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get crop x\nvar cropX = image.cropX();\n\n// set crop x\nimage.cropX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 12803,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 354
  },
  {
    "id": "Konva.Image#cropY",
    "longname": "Konva.Image#cropY",
    "name": "cropY",
    "kind": "function",
    "scope": "instance",
    "description": "get/set crop y",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get crop y\nvar cropY = image.cropY();\n\n// set crop y\nimage.cropY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 12817,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 355
  },
  {
    "id": "Konva.Image#cropWidth",
    "longname": "Konva.Image#cropWidth",
    "name": "cropWidth",
    "kind": "function",
    "scope": "instance",
    "description": "get/set crop width",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "width"
      }
    ],
    "examples": [
      "// get crop width\nvar cropWidth = image.cropWidth();\n\n// set crop width\nimage.cropWidth(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 12831,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 356
  },
  {
    "id": "Konva.Image#cropHeight",
    "longname": "Konva.Image#cropHeight",
    "name": "cropHeight",
    "kind": "function",
    "scope": "instance",
    "description": "get/set crop height",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "height"
      }
    ],
    "examples": [
      "// get crop height\nvar cropHeight = image.cropHeight();\n\n// set crop height\nimage.cropHeight(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 12845,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 357
  },
  {
    "id": "Konva.Label#getText",
    "longname": "Konva.Label#getText",
    "name": "getText",
    "kind": "function",
    "scope": "instance",
    "description": "get Text shape for the label.  You need to access the Text shape in order to update\nthe text properties",
    "memberof": "Konva.Label",
    "examples": [
      "label.getText().fill('red')"
    ],
    "meta": {
      "lineno": 12940,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 360
  },
  {
    "id": "Konva.Label#getTag",
    "longname": "Konva.Label#getTag",
    "name": "getTag",
    "kind": "function",
    "scope": "instance",
    "description": "get Tag shape for the label.  You need to access the Tag shape in order to update\nthe pointer properties and the corner radius",
    "memberof": "Konva.Label",
    "meta": {
      "lineno": 12951,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 361
  },
  {
    "id": "Konva.Tag#pointerDirection",
    "longname": "Konva.Tag#pointerDirection",
    "name": "pointerDirection",
    "kind": "function",
    "scope": "instance",
    "description": "get/set pointer direction",
    "memberof": "Konva.Tag",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "can be up, right, down, left, or none.  The default is none.",
        "name": "pointerDirection"
      }
    ],
    "examples": [
      "tag.pointerDirection('right');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 13111,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 364
  },
  {
    "id": "Konva.Tag#pointerWidth",
    "longname": "Konva.Tag#pointerWidth",
    "name": "pointerWidth",
    "kind": "function",
    "scope": "instance",
    "description": "get/set pointer width",
    "memberof": "Konva.Tag",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pointerWidth"
      }
    ],
    "examples": [
      "tag.pointerWidth(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 13121,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 365
  },
  {
    "id": "Konva.Tag#pointerHeight",
    "longname": "Konva.Tag#pointerHeight",
    "name": "pointerHeight",
    "kind": "function",
    "scope": "instance",
    "description": "get/set pointer height",
    "memberof": "Konva.Tag",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pointerHeight"
      }
    ],
    "examples": [
      "tag.pointerHeight(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 13131,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 366
  },
  {
    "id": "Konva.Tag#cornerRadius",
    "longname": "Konva.Tag#cornerRadius",
    "name": "cornerRadius",
    "kind": "function",
    "scope": "instance",
    "description": "get/set cornerRadius",
    "memberof": "Konva.Tag",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "cornerRadius"
      }
    ],
    "examples": [
      "tag.cornerRadius(20);\n\n// set different corner radius values\n// top-left, top-right, bottom-right, bottom-left\ntag.cornerRadius([0, 10, 20, 30]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 13141,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 367
  },
  {
    "id": "Konva.Rect#cornerRadius",
    "longname": "Konva.Rect#cornerRadius",
    "name": "cornerRadius",
    "kind": "function",
    "scope": "instance",
    "description": "get/set corner radius",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "cornerRadius"
      }
    ],
    "examples": [
      "// get corner radius\nvar cornerRadius = rect.cornerRadius();\n\n// set corner radius\nrect.cornerRadius(10);\n\n// set different corner radius values\n// top-left, top-right, bottom-right, bottom-left\nrect.cornerRadius([0, 10, 20, 30]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 13263,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 370
  },
  {
    "id": "Konva.RegularPolygon#radius",
    "longname": "Konva.RegularPolygon#radius",
    "name": "radius",
    "kind": "function",
    "scope": "instance",
    "description": "get/set radius",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "radius"
      }
    ],
    "examples": [
      "// get radius\nvar radius = shape.radius();\n\n// set radius\nshape.radius(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 13434,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 373
  },
  {
    "id": "Konva.RegularPolygon#sides",
    "longname": "Konva.RegularPolygon#sides",
    "name": "sides",
    "kind": "function",
    "scope": "instance",
    "description": "get/set sides",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "sides"
      }
    ],
    "examples": [
      "// get sides\nvar sides = shape.sides();\n\n// set sides\nshape.sides(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 13448,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 374
  },
  {
    "id": "Konva.Ring#innerRadius",
    "longname": "Konva.Ring#innerRadius",
    "name": "innerRadius",
    "kind": "function",
    "scope": "instance",
    "description": "get/set innerRadius",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "innerRadius"
      }
    ],
    "examples": [
      "// get inner radius\nvar innerRadius = ring.innerRadius();\n\n// set inner radius\nring.innerRadius(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 13581,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 377
  },
  {
    "id": "Konva.Ring#outerRadius",
    "longname": "Konva.Ring#outerRadius",
    "name": "outerRadius",
    "kind": "function",
    "scope": "instance",
    "description": "get/set outerRadius",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "outerRadius"
      }
    ],
    "examples": [
      "// get outer radius\nvar outerRadius = ring.outerRadius();\n\n// set outer radius\nring.outerRadius(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 13595,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 378
  },
  {
    "id": "Konva.Sprite#start",
    "longname": "Konva.Sprite#start",
    "name": "start",
    "kind": "function",
    "scope": "instance",
    "description": "start sprite animation",
    "memberof": "Konva.Sprite",
    "meta": {
      "lineno": 13796,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 381
  },
  {
    "id": "Konva.Sprite#stop",
    "longname": "Konva.Sprite#stop",
    "name": "stop",
    "kind": "function",
    "scope": "instance",
    "description": "stop sprite animation",
    "memberof": "Konva.Sprite",
    "meta": {
      "lineno": 13816,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 382
  },
  {
    "id": "Konva.Sprite#isRunning",
    "longname": "Konva.Sprite#isRunning",
    "name": "isRunning",
    "kind": "function",
    "scope": "instance",
    "description": "determine if animation of sprite is running or not.  returns true or false",
    "memberof": "Konva.Sprite",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 13825,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 383
  },
  {
    "id": "Konva.Sprite#animation",
    "longname": "Konva.Sprite#animation",
    "name": "animation",
    "kind": "function",
    "scope": "instance",
    "description": "get/set animation key",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "animation key",
        "name": "anim"
      }
    ],
    "examples": [
      "// get animation key\nvar animation = sprite.animation();\n\n// set animation key\nsprite.animation('kicking');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 13848,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 384
  },
  {
    "id": "Konva.Sprite#animations",
    "longname": "Konva.Sprite#animations",
    "name": "animations",
    "kind": "function",
    "scope": "instance",
    "description": "get/set animations map",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "animations"
      }
    ],
    "examples": [
      "// get animations map\nvar animations = sprite.animations();\n\n// set animations map\nsprite.animations({\n  standing: [\n    // x, y, width, height (6 frames)\n    0, 0, 49, 109,\n    52, 0, 49, 109,\n    105, 0, 49, 109,\n    158, 0, 49, 109,\n    210, 0, 49, 109,\n    262, 0, 49, 109\n  ],\n  kicking: [\n    // x, y, width, height (6 frames)\n    0, 109, 45, 98,\n    45, 109, 45, 98,\n    95, 109, 63, 98,\n    156, 109, 70, 98,\n    229, 109, 60, 98,\n    287, 109, 41, 98\n  ]\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 13862,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 385
  },
  {
    "id": "Konva.Sprite#offsets",
    "longname": "Konva.Sprite#offsets",
    "name": "offsets",
    "kind": "function",
    "scope": "instance",
    "description": "get/set offsets map",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "offsets"
      }
    ],
    "examples": [
      "// get offsets map\nvar offsets = sprite.offsets();\n\n// set offsets map\nsprite.offsets({\n  standing: [\n    // x, y (6 frames)\n    0, 0,\n    0, 0,\n    5, 0,\n    0, 0,\n    0, 3,\n    2, 0\n  ],\n  kicking: [\n    // x, y (6 frames)\n    0, 5,\n    5, 0,\n    10, 0,\n    0, 0,\n    2, 1,\n    0, 0\n  ]\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 13895,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 386
  },
  {
    "id": "Konva.Sprite#image",
    "longname": "Konva.Sprite#image",
    "name": "image",
    "kind": "function",
    "scope": "instance",
    "description": "get/set image",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Image"
          ]
        },
        "name": "image"
      }
    ],
    "examples": [
      "// get image\nvar image = sprite.image();\n\n// set image\nsprite.image(imageObj);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Image"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 13928,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 387
  },
  {
    "id": "Konva.Sprite#frameIndex",
    "longname": "Konva.Sprite#frameIndex",
    "name": "frameIndex",
    "kind": "function",
    "scope": "instance",
    "description": "set/set animation frame index",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "frameIndex"
      }
    ],
    "examples": [
      "// get animation frame index\nvar frameIndex = sprite.frameIndex();\n\n// set animation frame index\nsprite.frameIndex(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 13942,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 388
  },
  {
    "id": "Konva.Sprite#frameRate",
    "longname": "Konva.Sprite#frameRate",
    "name": "frameRate",
    "kind": "function",
    "scope": "instance",
    "description": "get/set frame rate in frames per second.  Increase this number to make the sprite\n animation run faster, and decrease the number to make the sprite animation run slower\n The default is 17 frames per second",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "frameRate"
      }
    ],
    "examples": [
      "// get frame rate\nvar frameRate = sprite.frameRate();\n\n// set frame rate to 2 frames per second\nsprite.frameRate(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 13956,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 389
  },
  {
    "id": "Konva.Star#numPoints",
    "longname": "Konva.Star#numPoints",
    "name": "numPoints",
    "kind": "function",
    "scope": "instance",
    "description": "get/set number of points",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "numPoints"
      }
    ],
    "examples": [
      "// get inner radius\nvar numPoints = star.numPoints();\n\n// set inner radius\nstar.numPoints(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 14103,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 392
  },
  {
    "id": "Konva.Star#innerRadius",
    "longname": "Konva.Star#innerRadius",
    "name": "innerRadius",
    "kind": "function",
    "scope": "instance",
    "description": "get/set innerRadius",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "innerRadius"
      }
    ],
    "examples": [
      "// get inner radius\nvar innerRadius = star.innerRadius();\n\n// set inner radius\nstar.innerRadius(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 14117,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 393
  },
  {
    "id": "Konva.Star#outerRadius",
    "longname": "Konva.Star#outerRadius",
    "name": "outerRadius",
    "kind": "function",
    "scope": "instance",
    "description": "get/set outerRadius",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "outerRadius"
      }
    ],
    "examples": [
      "// get inner radius\nvar outerRadius = star.outerRadius();\n\n// set inner radius\nstar.outerRadius(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 14131,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 394
  },
  {
    "id": "Konva.Text#getTextWidth",
    "longname": "Konva.Text#getTextWidth",
    "name": "getTextWidth",
    "kind": "function",
    "scope": "instance",
    "description": "get pure text width without padding",
    "memberof": "Konva.Text",
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 14494,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 397
  },
  {
    "id": "Konva.Text#measureSize",
    "longname": "Konva.Text#measureSize",
    "name": "measureSize",
    "kind": "function",
    "scope": "instance",
    "description": "measure string with the font of current text shape.\nThat method can't handle multiline text.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "text to measure",
        "name": "text"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "{ width , height } of measured text"
      }
    ],
    "meta": {
      "lineno": 14507,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 398
  },
  {
    "id": "Konva.Text#_shouldHandleEllipsis",
    "longname": "Konva.Text#_shouldHandleEllipsis",
    "name": "_shouldHandleEllipsis",
    "kind": "function",
    "scope": "instance",
    "description": "whether to handle ellipsis, there are two cases:\n1. the current line is the last line\n2. wrap is NONE",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "currentHeightPx"
      }
    ],
    "meta": {
      "lineno": 14692,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 399
  },
  {
    "id": "Konva.Text#width",
    "longname": "Konva.Text#width",
    "name": "width",
    "kind": "function",
    "scope": "instance",
    "overrides": "Konva.Shape#width",
    "description": "get/set width of text area, which includes padding.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "width"
      }
    ],
    "examples": [
      "// get width\nvar width = text.width();\n\n// set width\ntext.width(20);\n\n// set to auto\ntext.width('auto');\ntext.width() // will return calculated width, and not \"auto\""
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 14739,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 400
  },
  {
    "id": "Konva.Text#height",
    "longname": "Konva.Text#height",
    "name": "height",
    "kind": "function",
    "scope": "instance",
    "overrides": "Konva.Shape#height",
    "description": "get/set the height of the text area, which takes into account multi-line text, line heights, and padding.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "height"
      }
    ],
    "examples": [
      "// get height\nvar height = text.height();\n\n// set height\ntext.height(20);\n\n// set to auto\ntext.height('auto');\ntext.height() // will return calculated height, and not \"auto\""
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 14757,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 401
  },
  {
    "id": "Konva.Text#direction",
    "longname": "Konva.Text#direction",
    "name": "direction",
    "kind": "function",
    "scope": "instance",
    "description": "get/set direction",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "direction"
      }
    ],
    "examples": [
      "// get direction\nvar direction = text.direction();\n\n// set direction\ntext.direction('rtl');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 14775,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 402
  },
  {
    "id": "Konva.Text#fontFamily",
    "longname": "Konva.Text#fontFamily",
    "name": "fontFamily",
    "kind": "function",
    "scope": "instance",
    "description": "get/set font family",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "fontFamily"
      }
    ],
    "examples": [
      "// get font family\nvar fontFamily = text.fontFamily();\n\n// set font family\ntext.fontFamily('Arial');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 14789,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 403
  },
  {
    "id": "Konva.Text#fontSize",
    "longname": "Konva.Text#fontSize",
    "name": "fontSize",
    "kind": "function",
    "scope": "instance",
    "description": "get/set font size in pixels",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "fontSize"
      }
    ],
    "examples": [
      "// get font size\nvar fontSize = text.fontSize();\n\n// set font size to 22px\ntext.fontSize(22);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 14803,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 404
  },
  {
    "id": "Konva.Text#fontStyle",
    "longname": "Konva.Text#fontStyle",
    "name": "fontStyle",
    "kind": "function",
    "scope": "instance",
    "description": "get/set font style.  Can be 'normal', 'italic', or 'bold', '500' or even 'italic bold'.  'normal' is the default.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "fontStyle"
      }
    ],
    "examples": [
      "// get font style\nvar fontStyle = text.fontStyle();\n\n// set font style\ntext.fontStyle('bold');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 14817,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 405
  },
  {
    "id": "Konva.Text#fontVariant",
    "longname": "Konva.Text#fontVariant",
    "name": "fontVariant",
    "kind": "function",
    "scope": "instance",
    "description": "get/set font variant.  Can be 'normal' or 'small-caps'.  'normal' is the default.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "fontVariant"
      }
    ],
    "examples": [
      "// get font variant\nvar fontVariant = text.fontVariant();\n\n// set font variant\ntext.fontVariant('small-caps');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 14831,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 406
  },
  {
    "id": "Konva.Text#padding",
    "longname": "Konva.Text#padding",
    "name": "padding",
    "kind": "function",
    "scope": "instance",
    "description": "get/set padding",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "padding"
      }
    ],
    "examples": [
      "// get padding\nvar padding = text.padding();\n\n// set padding to 10 pixels\ntext.padding(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 14845,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 407
  },
  {
    "id": "Konva.Text#align",
    "longname": "Konva.Text#align",
    "name": "align",
    "kind": "function",
    "scope": "instance",
    "description": "get/set horizontal align of text.  Can be 'left', 'center', 'right' or 'justify'",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "align"
      }
    ],
    "examples": [
      "// get text align\nvar align = text.align();\n\n// center text\ntext.align('center');\n\n// align text to right\ntext.align('right');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 14859,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 408
  },
  {
    "id": "Konva.Text#verticalAlign",
    "longname": "Konva.Text#verticalAlign",
    "name": "verticalAlign",
    "kind": "function",
    "scope": "instance",
    "description": "get/set vertical align of text.  Can be 'top', 'middle', 'bottom'.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "verticalAlign"
      }
    ],
    "examples": [
      "// get text vertical align\nvar verticalAlign = text.verticalAlign();\n\n// center text\ntext.verticalAlign('middle');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 14876,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 409
  },
  {
    "id": "Konva.Text#lineHeight",
    "longname": "Konva.Text#lineHeight",
    "name": "lineHeight",
    "kind": "function",
    "scope": "instance",
    "description": "get/set line height.  The default is 1.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "lineHeight"
      }
    ],
    "examples": [
      "// get line height\nvar lineHeight = text.lineHeight();\n\n// set the line height\ntext.lineHeight(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 14890,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 410
  },
  {
    "id": "Konva.Text#wrap",
    "longname": "Konva.Text#wrap",
    "name": "wrap",
    "kind": "function",
    "scope": "instance",
    "description": "get/set wrap.  Can be \"word\", \"char\", or \"none\". Default is \"word\".\nIn \"word\" wrapping any word still can be wrapped if it can't be placed in the required width\nwithout breaks.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "wrap"
      }
    ],
    "examples": [
      "// get wrap\nvar wrap = text.wrap();\n\n// set wrap\ntext.wrap('word');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 14904,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 411
  },
  {
    "id": "Konva.Text#ellipsis",
    "longname": "Konva.Text#ellipsis",
    "name": "ellipsis",
    "kind": "function",
    "scope": "instance",
    "description": "get/set ellipsis. Can be true or false. Default is false. If ellipses is true,\nKonva will add \"...\" at the end of the text if it doesn't have enough space to write characters.\nThat is possible only when you limit both width and height of the text",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "ellipsis"
      }
    ],
    "examples": [
      "// get ellipsis param, returns true or false\nvar ellipsis = text.ellipsis();\n\n// set ellipsis\ntext.ellipsis(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 14920,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 412
  },
  {
    "id": "Konva.Text#letterSpacing",
    "longname": "Konva.Text#letterSpacing",
    "name": "letterSpacing",
    "kind": "function",
    "scope": "instance",
    "description": "set letter spacing property. Default value is 0.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "letterSpacing"
      }
    ],
    "meta": {
      "lineno": 14936,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 413
  },
  {
    "id": "Konva.Text#text",
    "longname": "Konva.Text#text",
    "name": "text",
    "kind": "function",
    "scope": "instance",
    "description": "get/set text",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "text"
      }
    ],
    "examples": [
      "// get text\nvar text = text.text();\n\n// set text\ntext.text('Hello world!');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 14943,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 414
  },
  {
    "id": "Konva.Text#textDecoration",
    "longname": "Konva.Text#textDecoration",
    "name": "textDecoration",
    "kind": "function",
    "scope": "instance",
    "description": "get/set text decoration of a text.  Possible values are 'underline', 'line-through' or combination of these values separated by space",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "textDecoration"
      }
    ],
    "examples": [
      "// get text decoration\nvar textDecoration = text.textDecoration();\n\n// underline text\ntext.textDecoration('underline');\n\n// strike text\ntext.textDecoration('line-through');\n\n// underline and strike text\ntext.textDecoration('underline line-through');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 14957,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 415
  },
  {
    "id": "Konva.TextPath#getTextWidth",
    "longname": "Konva.TextPath#getTextWidth",
    "name": "getTextWidth",
    "kind": "function",
    "scope": "instance",
    "description": "get text width in pixels",
    "memberof": "Konva.TextPath",
    "meta": {
      "lineno": 15192,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 418
  },
  {
    "id": "Konva.TextPath#data",
    "longname": "Konva.TextPath#data",
    "name": "data",
    "kind": "function",
    "scope": "instance",
    "description": "get/set SVG path data string.  This method\n also automatically parses the data string\n into a data array.  Currently supported SVG data:\n M, m, L, l, H, h, V, v, Q, q, T, t, C, c, S, s, A, a, Z, z",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "svg path string",
        "name": "data"
      }
    ],
    "examples": [
      "// get data\nvar data = shape.data();\n\n// set data\nshape.data('M200,100h100v50z');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 15337,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 419
  },
  {
    "id": "Konva.TextPath#fontFamily",
    "longname": "Konva.TextPath#fontFamily",
    "name": "fontFamily",
    "kind": "function",
    "scope": "instance",
    "description": "get/set font family",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "fontFamily"
      }
    ],
    "examples": [
      "// get font family\nvar fontFamily = shape.fontFamily();\n\n// set font family\nshape.fontFamily('Arial');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 15354,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 420
  },
  {
    "id": "Konva.TextPath#fontSize",
    "longname": "Konva.TextPath#fontSize",
    "name": "fontSize",
    "kind": "function",
    "scope": "instance",
    "description": "get/set font size in pixels",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "fontSize"
      }
    ],
    "examples": [
      "// get font size\nvar fontSize = shape.fontSize();\n\n// set font size to 22px\nshape.fontSize(22);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 15368,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 421
  },
  {
    "id": "Konva.TextPath#fontStyle",
    "longname": "Konva.TextPath#fontStyle",
    "name": "fontStyle",
    "kind": "function",
    "scope": "instance",
    "description": "get/set font style.  Can be 'normal', 'italic', or 'bold', '500' or even 'italic bold'.  'normal' is the default.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "fontStyle"
      }
    ],
    "examples": [
      "// get font style\nvar fontStyle = shape.fontStyle();\n\n// set font style\nshape.fontStyle('bold');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 15382,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 422
  },
  {
    "id": "Konva.TextPath#align",
    "longname": "Konva.TextPath#align",
    "name": "align",
    "kind": "function",
    "scope": "instance",
    "description": "get/set horizontal align of text.  Can be 'left', 'center', 'right' or 'justify'",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "align"
      }
    ],
    "examples": [
      "// get text align\nvar align = text.align();\n\n// center text\ntext.align('center');\n\n// align text to right\ntext.align('right');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 15396,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 423
  },
  {
    "id": "Konva.TextPath#letterSpacing",
    "longname": "Konva.TextPath#letterSpacing",
    "name": "letterSpacing",
    "kind": "function",
    "scope": "instance",
    "description": "get/set letter spacing.  The default is 0.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "letterSpacing"
      }
    ],
    "examples": [
      "// get letter spacing value\nvar letterSpacing = shape.letterSpacing();\n\n// set the letter spacing value\nshape.letterSpacing(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 15413,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 424
  },
  {
    "id": "Konva.TextPath#textBaseline",
    "longname": "Konva.TextPath#textBaseline",
    "name": "textBaseline",
    "kind": "function",
    "scope": "instance",
    "description": "get/set text baseline.  The default is 'middle'. Can be 'top', 'bottom', 'middle', 'alphabetic', 'hanging'",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "textBaseline"
      }
    ],
    "examples": [
      "// get current text baseline\nvar textBaseline = shape.textBaseline();\n\n// set new text baseline\nshape.textBaseline('top');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 15427,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 425
  },
  {
    "id": "Konva.TextPath#fontVariant",
    "longname": "Konva.TextPath#fontVariant",
    "name": "fontVariant",
    "kind": "function",
    "scope": "instance",
    "description": "get/set font variant.  Can be 'normal' or 'small-caps'.  'normal' is the default.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "fontVariant"
      }
    ],
    "examples": [
      "// get font variant\nvar fontVariant = shape.fontVariant();\n\n// set font variant\nshape.fontVariant('small-caps');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 15441,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 426
  },
  {
    "id": "Konva.TextPath#getText",
    "longname": "Konva.TextPath#getText",
    "name": "getText",
    "kind": "function",
    "scope": "instance",
    "description": "get/set text",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "text"
      }
    ],
    "examples": [
      "// get text\nvar text = text.text();\n\n// set text\ntext.text('Hello world!');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 15455,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 427
  },
  {
    "id": "Konva.TextPath#textDecoration",
    "longname": "Konva.TextPath#textDecoration",
    "name": "textDecoration",
    "kind": "function",
    "scope": "instance",
    "description": "get/set text decoration of a text.  Can be '' or 'underline'.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "textDecoration"
      }
    ],
    "examples": [
      "// get text decoration\nvar textDecoration = shape.textDecoration();\n\n// underline text\nshape.textDecoration('underline');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 15469,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 428
  },
  {
    "id": "Konva.TextPath#kerningFunc",
    "longname": "Konva.TextPath#kerningFunc",
    "name": "kerningFunc",
    "kind": "function",
    "scope": "instance",
    "description": "get/set kerning function.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "kerningFunc"
      }
    ],
    "examples": [
      "// get text decoration\nvar kerningFunc = text.kerningFunc();\n\n// center text\ntext.kerningFunc(function(leftChar, rightChar) {\n  return 1;\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 15483,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 429
  },
  {
    "id": "Konva.Transformer#attachTo",
    "longname": "Konva.Transformer#attachTo",
    "name": "attachTo",
    "kind": "function",
    "scope": "instance",
    "description": "alias to `tr.nodes([shape])`/ This method is deprecated and will be removed soon.",
    "memberof": "Konva.Transformer",
    "examples": [
      "transformer.attachTo(shape);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transformer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 15699,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 432
  },
  {
    "id": "Konva.Transformer#getActiveAnchor",
    "longname": "Konva.Transformer#getActiveAnchor",
    "name": "getActiveAnchor",
    "kind": "function",
    "scope": "instance",
    "description": "return the name of current active anchor",
    "memberof": "Konva.Transformer",
    "examples": [
      "transformer.getActiveAnchor();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String",
            "Null"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 15804,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 433
  },
  {
    "id": "Konva.Transformer#detach",
    "longname": "Konva.Transformer#detach",
    "name": "detach",
    "kind": "function",
    "scope": "instance",
    "description": "detach transformer from an attached node",
    "memberof": "Konva.Transformer",
    "examples": [
      "transformer.detach();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transformer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 15815,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 434
  },
  {
    "id": "Konva.Transformer#on",
    "longname": "Konva.Transformer#on",
    "name": "on",
    "kind": "function",
    "scope": "instance",
    "description": "bind events to the Transformer. You can use events: `transform`, `transformstart`, `transformend`, `dragstart`, `dragmove`, `dragend`",
    "memberof": "Konva.Transformer",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'transform'",
        "name": "evtStr"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The handler function. The first argument of that function is event object. Event object has `target` as main target of the event, `currentTarget` as current node listener and `evt` as native browser event.",
        "name": "handler"
      }
    ],
    "examples": [
      "// add click listener\ntr.on('transformstart', function() {\n  console.log('transform started');\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transformer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 15833,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 435
  },
  {
    "id": "Konva.Transformer#forceUpdate",
    "longname": "Konva.Transformer#forceUpdate",
    "name": "forceUpdate",
    "kind": "function",
    "scope": "instance",
    "description": "force update of Konva.Transformer.\nUse it when you updated attached Konva.Group and now you need to reset transformer size",
    "memberof": "Konva.Transformer",
    "meta": {
      "lineno": 16432,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 436
  },
  {
    "id": "Konva.Transformer#isTransforming",
    "longname": "Konva.Transformer#isTransforming",
    "name": "isTransforming",
    "kind": "function",
    "scope": "instance",
    "description": "determine if transformer is in active transform",
    "memberof": "Konva.Transformer",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 16544,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 437
  },
  {
    "id": "Konva.Transformer#stopTransform",
    "longname": "Konva.Transformer#stopTransform",
    "name": "stopTransform",
    "kind": "function",
    "scope": "instance",
    "description": "Stop active transform action",
    "memberof": "Konva.Transformer",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 16553,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 438
  },
  {
    "id": "Konva.Transformer#enabledAnchors",
    "longname": "Konva.Transformer#enabledAnchors",
    "name": "enabledAnchors",
    "kind": "function",
    "scope": "instance",
    "description": "get/set enabled handlers",
    "memberof": "Konva.Transformer",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "array"
      }
    ],
    "examples": [
      "// get list of handlers\nvar enabledAnchors = transformer.enabledAnchors();\n\n// set handlers\ntransformer.enabledAnchors(['top-left', 'top-center', 'top-right', 'middle-right', 'middle-left', 'bottom-left', 'bottom-center', 'bottom-right']);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 16619,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 439
  },
  {
    "id": "Konva.Transformer#flipEnabled",
    "longname": "Konva.Transformer#flipEnabled",
    "name": "flipEnabled",
    "kind": "function",
    "scope": "instance",
    "description": "get/set flip enabled",
    "memberof": "Konva.Transformer",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "flag"
      }
    ],
    "examples": [
      "// get flip enabled property\nvar flipEnabled = transformer.flipEnabled();\n\n// set flip enabled property\ntransformer.flipEnabled(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 16633,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 440
  },
  {
    "id": "Konva.Transformer#resizeEnabled",
    "longname": "Konva.Transformer#resizeEnabled",
    "name": "resizeEnabled",
    "kind": "function",
    "scope": "instance",
    "description": "get/set resize ability. If false it will automatically hide resizing handlers",
    "memberof": "Konva.Transformer",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get\nvar resizeEnabled = transformer.resizeEnabled();\n\n// set\ntransformer.resizeEnabled(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 16647,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 441
  },
  {
    "id": "Konva.Transformer#anchorSize",
    "longname": "Konva.Transformer#anchorSize",
    "name": "anchorSize",
    "kind": "function",
    "scope": "instance",
    "description": "get/set anchor size. Default is 10",
    "memberof": "Konva.Transformer",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size"
      }
    ],
    "examples": [
      "// get\nvar anchorSize = transformer.anchorSize();\n\n// set\ntransformer.anchorSize(20)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 16661,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 442
  },
  {
    "id": "Konva.Transformer#rotateEnabled",
    "longname": "Konva.Transformer#rotateEnabled",
    "name": "rotateEnabled",
    "kind": "function",
    "scope": "instance",
    "description": "get/set ability to rotate.",
    "memberof": "Konva.Transformer",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get\nvar rotateEnabled = transformer.rotateEnabled();\n\n// set\ntransformer.rotateEnabled(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 16675,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 443
  },
  {
    "id": "Konva.Transformer#rotateLineVisible",
    "longname": "Konva.Transformer#rotateLineVisible",
    "name": "rotateLineVisible",
    "kind": "function",
    "scope": "instance",
    "description": "get/set visibility of a little line that connects transformer and rotate anchor.",
    "memberof": "Konva.Transformer",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get\nvar rotateLineVisible = transformer.rotateLineVisible();\n\n// set\ntransformer.rotateLineVisible(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 16689,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 444
  },
  {
    "id": "Konva.Transformer#rotationSnaps",
    "longname": "Konva.Transformer#rotationSnaps",
    "name": "rotationSnaps",
    "kind": "function",
    "scope": "instance",
    "description": "get/set rotation snaps angles.",
    "memberof": "Konva.Transformer",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "array"
      }
    ],
    "examples": [
      "// get\nvar rotationSnaps = transformer.rotationSnaps();\n\n// set\ntransformer.rotationSnaps([0, 90, 180, 270]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 16703,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 445
  },
  {
    "id": "Konva.Transformer#rotateAnchorOffset",
    "longname": "Konva.Transformer#rotateAnchorOffset",
    "name": "rotateAnchorOffset",
    "kind": "function",
    "scope": "instance",
    "description": "get/set distance for rotation handler",
    "memberof": "Konva.Transformer",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset"
      }
    ],
    "examples": [
      "// get\nvar rotateAnchorOffset = transformer.rotateAnchorOffset();\n\n// set\ntransformer.rotateAnchorOffset(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 16717,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 446
  },
  {
    "id": "Konva.Transformer#rotateAnchorCursor",
    "longname": "Konva.Transformer#rotateAnchorCursor",
    "name": "rotateAnchorCursor",
    "kind": "function",
    "scope": "instance",
    "description": "get/set rotation anchor cursor",
    "memberof": "Konva.Transformer",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "cursorName"
      }
    ],
    "examples": [
      "// get\nvar currentRotationAnchorCursor = transformer.rotateAnchorCursor();\n\n// set\ntransformer.rotateAnchorCursor('grab');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 16731,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 447
  },
  {
    "id": "Konva.Transformer#rotationSnapTolerance",
    "longname": "Konva.Transformer#rotationSnapTolerance",
    "name": "rotationSnapTolerance",
    "kind": "function",
    "scope": "instance",
    "description": "get/set distance for rotation tolerance",
    "memberof": "Konva.Transformer",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "tolerance"
      }
    ],
    "examples": [
      "// get\nvar rotationSnapTolerance = transformer.rotationSnapTolerance();\n\n// set\ntransformer.rotationSnapTolerance(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 16745,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 448
  },
  {
    "id": "Konva.Transformer#borderEnabled",
    "longname": "Konva.Transformer#borderEnabled",
    "name": "borderEnabled",
    "kind": "function",
    "scope": "instance",
    "description": "get/set visibility of border",
    "memberof": "Konva.Transformer",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get\nvar borderEnabled = transformer.borderEnabled();\n\n// set\ntransformer.borderEnabled(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 16759,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 449
  },
  {
    "id": "Konva.Transformer#anchorStroke",
    "longname": "Konva.Transformer#anchorStroke",
    "name": "anchorStroke",
    "kind": "function",
    "scope": "instance",
    "description": "get/set anchor stroke color",
    "memberof": "Konva.Transformer",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "strokeColor"
      }
    ],
    "examples": [
      "// get\nvar anchorStroke = transformer.anchorStroke();\n\n// set\ntransformer.anchorStroke('red');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 16773,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 450
  },
  {
    "id": "Konva.Transformer#anchorStrokeWidth",
    "longname": "Konva.Transformer#anchorStrokeWidth",
    "name": "anchorStrokeWidth",
    "kind": "function",
    "scope": "instance",
    "description": "get/set anchor stroke width",
    "memberof": "Konva.Transformer",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "anchorStrokeWidth"
      }
    ],
    "examples": [
      "// get\nvar anchorStrokeWidth = transformer.anchorStrokeWidth();\n\n// set\ntransformer.anchorStrokeWidth(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 16787,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 451
  },
  {
    "id": "Konva.Transformer#anchorFill",
    "longname": "Konva.Transformer#anchorFill",
    "name": "anchorFill",
    "kind": "function",
    "scope": "instance",
    "description": "get/set anchor fill color",
    "memberof": "Konva.Transformer",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "anchorFill"
      }
    ],
    "examples": [
      "// get\nvar anchorFill = transformer.anchorFill();\n\n// set\ntransformer.anchorFill('red');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 16801,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 452
  },
  {
    "id": "Konva.Transformer#anchorCornerRadius",
    "longname": "Konva.Transformer#anchorCornerRadius",
    "name": "anchorCornerRadius",
    "kind": "function",
    "scope": "instance",
    "description": "get/set anchor corner radius",
    "memberof": "Konva.Transformer",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "radius"
      }
    ],
    "examples": [
      "// get\nvar anchorCornerRadius = transformer.anchorCornerRadius();\n\n// set\ntransformer.anchorCornerRadius(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 16815,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 453
  },
  {
    "id": "Konva.Transformer#borderStroke",
    "longname": "Konva.Transformer#borderStroke",
    "name": "borderStroke",
    "kind": "function",
    "scope": "instance",
    "description": "get/set border stroke color",
    "memberof": "Konva.Transformer",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get\nvar borderStroke = transformer.borderStroke();\n\n// set\ntransformer.borderStroke('red');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 16829,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 454
  },
  {
    "id": "Konva.Transformer#borderStrokeWidth",
    "longname": "Konva.Transformer#borderStrokeWidth",
    "name": "borderStrokeWidth",
    "kind": "function",
    "scope": "instance",
    "description": "get/set border stroke width",
    "memberof": "Konva.Transformer",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "strokeWidth"
      }
    ],
    "examples": [
      "// get\nvar borderStrokeWidth = transformer.borderStrokeWidth();\n\n// set\ntransformer.borderStrokeWidth(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 16843,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 455
  },
  {
    "id": "Konva.Transformer#borderDash",
    "longname": "Konva.Transformer#borderDash",
    "name": "borderDash",
    "kind": "function",
    "scope": "instance",
    "description": "get/set border dash array",
    "memberof": "Konva.Transformer",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "array",
        "name": "dash"
      }
    ],
    "examples": [
      "// get\nvar borderDash = transformer.borderDash();\n\n// set\ntransformer.borderDash([2, 2]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 16857,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 456
  },
  {
    "id": "Konva.Transformer#keepRatio",
    "longname": "Konva.Transformer#keepRatio",
    "name": "keepRatio",
    "kind": "function",
    "scope": "instance",
    "description": "get/set should we keep ratio while resize anchors at corners",
    "memberof": "Konva.Transformer",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "keepRatio"
      }
    ],
    "examples": [
      "// get\nvar keepRatio = transformer.keepRatio();\n\n// set\ntransformer.keepRatio(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 16871,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 457
  },
  {
    "id": "Konva.Transformer#shiftBehavior",
    "longname": "Konva.Transformer#shiftBehavior",
    "name": "shiftBehavior",
    "kind": "function",
    "scope": "instance",
    "description": "get/set how to react on skift key while resizing anchors at corners",
    "memberof": "Konva.Transformer",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "shiftBehavior"
      }
    ],
    "examples": [
      "// get\nvar shiftBehavior = transformer.shiftBehavior();\n\n// set\ntransformer.shiftBehavior('none');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 16885,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 458
  },
  {
    "id": "Konva.Transformer#centeredScaling",
    "longname": "Konva.Transformer#centeredScaling",
    "name": "centeredScaling",
    "kind": "function",
    "scope": "instance",
    "description": "get/set should we resize relative to node's center?",
    "memberof": "Konva.Transformer",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "centeredScaling"
      }
    ],
    "examples": [
      "// get\nvar centeredScaling = transformer.centeredScaling();\n\n// set\ntransformer.centeredScaling(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 16899,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 459
  },
  {
    "id": "Konva.Transformer#ignoreStroke",
    "longname": "Konva.Transformer#ignoreStroke",
    "name": "ignoreStroke",
    "kind": "function",
    "scope": "instance",
    "description": "get/set should we think about stroke while resize? Good to use when a shape has strokeScaleEnabled = false\ndefault is false",
    "memberof": "Konva.Transformer",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "ignoreStroke"
      }
    ],
    "examples": [
      "// get\nvar ignoreStroke = transformer.ignoreStroke();\n\n// set\ntransformer.ignoreStroke(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 16913,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 460
  },
  {
    "id": "Konva.Transformer#padding",
    "longname": "Konva.Transformer#padding",
    "name": "padding",
    "kind": "function",
    "scope": "instance",
    "description": "get/set padding",
    "memberof": "Konva.Transformer",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "padding"
      }
    ],
    "examples": [
      "// get\nvar padding = transformer.padding();\n\n// set\ntransformer.padding(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 16928,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 461
  },
  {
    "id": "Konva.Transformer#nodes",
    "longname": "Konva.Transformer#nodes",
    "name": "nodes",
    "kind": "function",
    "scope": "instance",
    "description": "get/set attached nodes of the Transformer. Transformer will adapt to their size and listen to their events",
    "memberof": "Konva.Transformer",
    "examples": [
      "// get\nconst nodes = transformer.nodes();\n\n// set\ntransformer.nodes([rect, circle]);\n\n// push new item:\nconst oldNodes = transformer.nodes();\nconst newNodes = oldNodes.concat([newShape]);\n// it is important to set new array instance (and concat method above will create it)\ntransformer.nodes(newNodes);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 16943,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 462
  },
  {
    "id": "Konva.Transformer#boundBoxFunc",
    "longname": "Konva.Transformer#boundBoxFunc",
    "name": "boundBoxFunc",
    "kind": "function",
    "scope": "instance",
    "description": "get/set bounding box function. **IMPORTANT!** boundBondFunc operates in absolute coordinates.",
    "memberof": "Konva.Transformer",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "name": "func"
      }
    ],
    "examples": [
      "// get\nvar boundBoxFunc = transformer.boundBoxFunc();\n\n// set\ntransformer.boundBoxFunc(function(oldBox, newBox) {\n  // width and height of the boxes are corresponding to total absolute width and height of all nodes combined\n  // so it includes scale of the node.\n  if (newBox.width > 200) {\n    return oldBox;\n  }\n  return newBox;\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 16962,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 463
  },
  {
    "id": "Konva.Transformer#anchorDragBoundFunc",
    "longname": "Konva.Transformer#anchorDragBoundFunc",
    "name": "anchorDragBoundFunc",
    "kind": "function",
    "scope": "instance",
    "description": "get/set dragging func for transformer anchors",
    "memberof": "Konva.Transformer",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "name": "func"
      }
    ],
    "examples": [
      "// get\nvar anchorDragBoundFunc = transformer.anchorDragBoundFunc();\n\n// set\ntransformer.anchorDragBoundFunc(function(oldAbsPos, newAbsPos, event) {\n return {\n  x: 0,\n  y: newAbsolutePosition.y\n }\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 16983,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 464
  },
  {
    "id": "Konva.Transformer#anchorStyleFunc",
    "longname": "Konva.Transformer#anchorStyleFunc",
    "name": "anchorStyleFunc",
    "kind": "function",
    "scope": "instance",
    "description": "get/set styling function for transformer anchors to overwrite default styles",
    "memberof": "Konva.Transformer",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "name": "func"
      }
    ],
    "examples": [
      "// get\nvar anchorStyleFunc = transformer.anchorStyleFunc();\n\n// set\ntransformer.anchorStyleFunc(function(anchor) {\n // anchor is a simple Konva.Rect instance\n // it will be executed AFTER all attributes are set, like 'anchorStrokeWidth' or 'anchorFill'\n if (anchor.hasName('.rotater')) {\n   // make rotater anchor filled black and looks like a circle\n   anchor.fill('black');\n   anchor.cornerRadius(anchor.width() / 2);\n }\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17002,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 465
  },
  {
    "id": "Konva.Transformer#shouldOverdrawWholeArea",
    "longname": "Konva.Transformer#shouldOverdrawWholeArea",
    "name": "shouldOverdrawWholeArea",
    "kind": "function",
    "scope": "instance",
    "description": "using this setting you can drag transformer group by dragging empty space between attached nodes\nshouldOverdrawWholeArea = true may temporary disable all events on attached nodes",
    "memberof": "Konva.Transformer",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "shouldOverdrawWholeArea"
      }
    ],
    "examples": [
      "// get\nvar shouldOverdrawWholeArea = transformer.shouldOverdrawWholeArea();\n\n// set\ntransformer.shouldOverdrawWholeArea(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17024,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 466
  },
  {
    "id": "Konva.Transformer#useSingleNodeRotation",
    "longname": "Konva.Transformer#useSingleNodeRotation",
    "name": "useSingleNodeRotation",
    "kind": "function",
    "scope": "instance",
    "description": "If you have just one attached node to Transformer it will set its initial rotation to the rotation of that node.\nIn some cases you may need to set a different rotation.",
    "memberof": "Konva.Transformer",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "useSingleNodeRotation"
      }
    ],
    "examples": [
      "// set flag to false\ntransformer.useSingleNodeRotation(false);\n// attach a shape\ntransformer.nodes([shape]);\ntransformer.rotation(45);\ntransformer.update();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17039,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 467
  },
  {
    "id": "Konva.Wedge#radius",
    "longname": "Konva.Wedge#radius",
    "name": "radius",
    "kind": "function",
    "scope": "instance",
    "description": "get/set radius",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "radius"
      }
    ],
    "examples": [
      "// get radius\nvar radius = wedge.radius();\n\n// set radius\nwedge.radius(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17180,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 470
  },
  {
    "id": "Konva.Wedge#angle",
    "longname": "Konva.Wedge#angle",
    "name": "angle",
    "kind": "function",
    "scope": "instance",
    "description": "get/set angle in degrees",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "angle"
      }
    ],
    "examples": [
      "// get angle\nvar angle = wedge.angle();\n\n// set angle\nwedge.angle(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17194,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 471
  },
  {
    "id": "Konva.Wedge#clockwise",
    "longname": "Konva.Wedge#clockwise",
    "name": "clockwise",
    "kind": "function",
    "scope": "instance",
    "description": "get/set clockwise flag",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "clockwise"
      }
    ],
    "examples": [
      "// get clockwise flag\nvar clockwise = wedge.clockwise();\n\n// draw wedge counter-clockwise\nwedge.clockwise(false);\n\n// draw wedge clockwise\nwedge.clockwise(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17208,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 472
  },
  {
    "id": "Konva.Node#blurRadius",
    "longname": "Konva.Node#blurRadius",
    "name": "blurRadius",
    "kind": "function",
    "scope": "instance",
    "description": "get/set blur radius. Use with {@link Konva.Filters.Blur} filter",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "radius"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17517,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 474
  },
  {
    "id": "Konva.Node#brightness",
    "longname": "Konva.Node#brightness",
    "name": "brightness",
    "kind": "function",
    "scope": "instance",
    "description": "get/set filter brightness.  The brightness is a number between -1 and 1.&nbsp; Positive values\n brighten the pixels and negative values darken them. Use with {@link Konva.Filters.Brighten} filter.",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between -1 and 1",
        "name": "brightness"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17547,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 476
  },
  {
    "id": "Konva.Node#contrast",
    "longname": "Konva.Node#contrast",
    "name": "contrast",
    "kind": "function",
    "scope": "instance",
    "description": "get/set filter contrast.  The contrast is a number between -100 and 100.\nUse with {@link Konva.Filters.Contrast} filter.",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between -100 and 100",
        "name": "contrast"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17600,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 478
  },
  {
    "id": "Konva.Node#embossStrength",
    "longname": "Konva.Node#embossStrength",
    "name": "embossStrength",
    "kind": "function",
    "scope": "instance",
    "description": "get/set emboss strength. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1.  Default is 0.5",
        "name": "level"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17725,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 480
  },
  {
    "id": "Konva.Node#embossWhiteLevel",
    "longname": "Konva.Node#embossWhiteLevel",
    "name": "embossWhiteLevel",
    "kind": "function",
    "scope": "instance",
    "description": "get/set emboss white level. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1.  Default is 0.5",
        "name": "embossWhiteLevel"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17733,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 481
  },
  {
    "id": "Konva.Node#embossDirection",
    "longname": "Konva.Node#embossDirection",
    "name": "embossDirection",
    "kind": "function",
    "scope": "instance",
    "description": "get/set emboss direction. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "can be top-left, top, top-right, right, bottom-right, bottom, bottom-left or left\n  The default is top-left",
        "name": "embossDirection"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17741,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 482
  },
  {
    "id": "Konva.Node#embossBlend",
    "longname": "Konva.Node#embossBlend",
    "name": "embossBlend",
    "kind": "function",
    "scope": "instance",
    "description": "get/set emboss blend. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "embossBlend"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17750,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 483
  },
  {
    "id": "Konva.Node#enhance",
    "longname": "Konva.Node#enhance",
    "name": "enhance",
    "kind": "function",
    "scope": "instance",
    "description": "get/set enhance. Use with {@link Konva.Filters.Enhance} filter. -1 to 1 values",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Float"
          ]
        },
        "name": "amount"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Float"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17864,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 485
  },
  {
    "id": "Konva.Node#hue",
    "longname": "Konva.Node#hue",
    "name": "hue",
    "kind": "function",
    "scope": "instance",
    "description": "get/set hsv hue in degrees. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between 0 and 359",
        "name": "hue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17896,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 487
  },
  {
    "id": "Konva.Node#saturation",
    "longname": "Konva.Node#saturation",
    "name": "saturation",
    "kind": "function",
    "scope": "instance",
    "description": "get/set hsv saturation. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the saturation, 1.0 doubles, etc..",
        "name": "saturation"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17904,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 488
  },
  {
    "id": "Konva.Node#luminance",
    "longname": "Konva.Node#luminance",
    "name": "luminance",
    "kind": "function",
    "scope": "instance",
    "description": "get/set hsl luminance. Use with {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "from -1 to 1",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17912,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 489
  },
  {
    "id": "Konva.Node#hue",
    "longname": "Konva.Node#hue",
    "name": "hue",
    "kind": "function",
    "scope": "instance",
    "description": "get/set hsv hue in degrees. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between 0 and 359",
        "name": "hue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18002,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 492
  },
  {
    "id": "Konva.Node#saturation",
    "longname": "Konva.Node#saturation",
    "name": "saturation",
    "kind": "function",
    "scope": "instance",
    "description": "get/set hsv saturation. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the saturation, 1.0 doubles, etc..",
        "name": "saturation"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18010,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 493
  },
  {
    "id": "Konva.Node#value",
    "longname": "Konva.Node#value",
    "name": "value",
    "kind": "function",
    "scope": "instance",
    "description": "get/set hsv value. Use with {@link Konva.Filters.HSV} filter.",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the value, 1.0 doubles, etc..",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18018,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 494
  },
  {
    "id": "Konva.Node#kaleidoscopePower",
    "longname": "Konva.Node#kaleidoscopePower",
    "name": "kaleidoscopePower",
    "kind": "function",
    "scope": "instance",
    "description": "get/set kaleidoscope power. Use with {@link Konva.Filters.Kaleidoscope} filter.",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "of kaleidoscope",
        "name": "power"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18243,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 496
  },
  {
    "id": "Konva.Node#kaleidoscopeAngle",
    "longname": "Konva.Node#kaleidoscopeAngle",
    "name": "kaleidoscopeAngle",
    "kind": "function",
    "scope": "instance",
    "description": "get/set kaleidoscope angle. Use with {@link Konva.Filters.Kaleidoscope} filter.",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "degrees"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18251,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 497
  },
  {
    "id": "Konva.Node#noise",
    "longname": "Konva.Node#noise",
    "name": "noise",
    "kind": "function",
    "scope": "instance",
    "description": "get/set noise amount.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Noise} filter.",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "noise"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18437,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 500
  },
  {
    "id": "Konva.Node#pixelSize",
    "longname": "Konva.Node#pixelSize",
    "name": "pixelSize",
    "kind": "function",
    "scope": "instance",
    "description": "get/set pixel size. Use with {@link Konva.Filters.Pixelate} filter.",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "pixelSize"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18522,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 502
  },
  {
    "id": "Konva.Node#levels",
    "longname": "Konva.Node#levels",
    "name": "levels",
    "kind": "function",
    "scope": "instance",
    "description": "get/set levels.  Must be a number between 0 and 1.  Use with {@link Konva.Filters.Posterize} filter.",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1",
        "name": "level"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18552,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 504
  },
  {
    "id": "Konva.Node#red",
    "longname": "Konva.Node#red",
    "name": "red",
    "kind": "function",
    "scope": "instance",
    "description": "get/set filter red value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "red"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18596,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 506
  },
  {
    "id": "Konva.Node#green",
    "longname": "Konva.Node#green",
    "name": "green",
    "kind": "function",
    "scope": "instance",
    "description": "get/set filter green value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "green"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18616,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 507
  },
  {
    "id": "Konva.Node#blue",
    "longname": "Konva.Node#blue",
    "name": "blue",
    "kind": "function",
    "scope": "instance",
    "description": "get/set filter blue value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "blue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18625,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 508
  },
  {
    "id": "Konva.Node#red",
    "longname": "Konva.Node#red",
    "name": "red",
    "kind": "function",
    "scope": "instance",
    "description": "get/set filter red value. Use with {@link Konva.Filters.RGBA} filter.",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "red"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18669,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 510
  },
  {
    "id": "Konva.Node#green",
    "longname": "Konva.Node#green",
    "name": "green",
    "kind": "function",
    "scope": "instance",
    "description": "get/set filter green value. Use with {@link Konva.Filters.RGBA} filter.",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "green"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18689,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 511
  },
  {
    "id": "Konva.Node#blue",
    "longname": "Konva.Node#blue",
    "name": "blue",
    "kind": "function",
    "scope": "instance",
    "description": "get/set filter blue value. Use with {@link Konva.Filters.RGBA} filter.",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "blue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18698,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 512
  },
  {
    "id": "Konva.Node#alpha",
    "longname": "Konva.Node#alpha",
    "name": "alpha",
    "kind": "function",
    "scope": "instance",
    "description": "get/set filter alpha value. Use with {@link Konva.Filters.RGBA} filter.",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Float"
          ]
        },
        "description": "value between 0 and 1",
        "name": "alpha"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Float"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18718,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 513
  },
  {
    "id": "Konva.Node#threshold",
    "longname": "Konva.Node#threshold",
    "name": "threshold",
    "kind": "function",
    "scope": "instance",
    "description": "get/set threshold.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Threshold} or {@link Konva.Filters.Mask} filter.",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "threshold"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18809,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 517
  },
  {
    "id": "Konva.Container#clearCache",
    "longname": "Konva.Container#clearCache",
    "name": "clearCache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#clearCache",
    "inherited": true,
    "overrides": "Konva.Node#clearCache",
    "description": "clear cached canvas",
    "memberof": "Konva.Container",
    "examples": [
      "node.clearCache();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2632,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 519
  },
  {
    "id": "Konva.Container#cache",
    "longname": "Konva.Container#cache",
    "name": "cache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#cache",
    "inherited": true,
    "overrides": "Konva.Node#cache",
    "description": "cache node to improve drawing performance, apply filters, or create more accurate\n hit regions. For all basic shapes size of cache canvas will be automatically detected.\n If you need to cache your custom `Konva.Shape` instance you have to pass shape's bounding box\n properties. Look at [https://konvajs.org/docs/performance/Shape_Caching.html](https://konvajs.org/docs/performance/Shape_Caching.html) for more information.",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "increase canvas size by `offset` pixel in all directions.",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "when set to true, a red border will be drawn around the cached\n region for debugging purposes",
        "name": "config.drawBorder"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "change quality (or pixel ratio) of cached image. pixelRatio = 2 will produce 2x sized cache.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "control imageSmoothingEnabled property of created canvas for cache",
        "name": "config.imageSmoothingEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "change quality (or pixel ratio) of cached hit canvas.",
        "name": "config.hitCanvasPixelRatio"
      }
    ],
    "examples": [
      "// cache a shape with the x,y position of the bounding box at the center and\n// the width and height of the bounding box equal to the width and height of\n// the shape obtained from shape.width() and shape.height()\nimage.cache();\n\n// cache a node and define the bounding box position and size\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200\n});\n\n// cache a node and draw a red border around the bounding box\n// for debugging purposes\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200,\n  offset : 10,\n  drawBorder: true\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2650,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 520
  },
  {
    "id": "Konva.Container#isCached",
    "longname": "Konva.Container#isCached",
    "name": "isCached",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isCached",
    "inherited": true,
    "overrides": "Konva.Node#isCached",
    "description": "determine if node is currently cached",
    "memberof": "Konva.Container",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2788,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 521
  },
  {
    "id": "Konva.Container#getClientRect",
    "longname": "Konva.Container#getClientRect",
    "name": "getClientRect",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getClientRect",
    "inherited": true,
    "overrides": "Konva.Node#getClientRect",
    "description": "Return client rectangle `{x, y, width, height}` of node. This rectangle also include all styling (strokes, shadows, etc).\nThe purpose of the method is similar to getBoundingClientRect API of the DOM.",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply transform to node for calculating rect?",
        "name": "config.skipTransform"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply shadow to the node for calculating bound box?",
        "name": "config.skipShadow"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply stroke to the node for calculating bound box?",
        "name": "config.skipStroke"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "calculate client rect relative to one of the parents",
        "name": "config.relativeTo"
      }
    ],
    "examples": [
      "var rect = new Konva.Rect({\n     width : 100,\n     height : 100,\n     x : 50,\n     y : 50,\n     strokeWidth : 4,\n     stroke : 'black',\n     offsetX : 50,\n     scaleY : 2\n});\n\n// get client rect without think off transformations (position, rotation, scale, offset, etc)\nrect.getClientRect({ skipTransform: true});\n// returns {\n//     x : -2,   // two pixels for stroke / 2\n//     y : -2,\n//     width : 104, // increased by 4 for stroke\n//     height : 104\n//}\n\n// get client rect with transformation applied\nrect.getClientRect();\n// returns Object {x: -2, y: 46, width: 104, height: 208}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "rect with `{x, y, width, height}` properties"
      }
    ],
    "meta": {
      "lineno": 2797,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 522
  },
  {
    "id": "Konva.Container#on",
    "longname": "Konva.Container#on",
    "name": "on",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#on",
    "inherited": true,
    "overrides": "Konva.Node#on",
    "description": "bind events to the node. KonvaJS supports mouseover, mousemove,\n mouseout, mouseenter, mouseleave, mousedown, mouseup, wheel, contextmenu, click, dblclick, touchstart, touchmove,\n touchend, tap, dbltap, dragstart, dragmove, and dragend events.\n Pass in a string of events delimited by a space to bind multiple events at once\n such as 'mousedown mouseup mousemove'. Include a namespace to bind an\n event by name such as 'click.foobar'.",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'click', 'mousedown touchstart', 'mousedown.foo touchstart.foo'",
        "name": "evtStr"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The handler function. The first argument of that function is event object. Event object has `target` as main target of the event, `currentTarget` as current node listener and `evt` as native browser event.",
        "name": "handler"
      }
    ],
    "examples": [
      "// add click listener\nnode.on('click', function() {\n  console.log('you clicked me!');\n});\n\n// get the target node\nnode.on('click', function(evt) {\n  console.log(evt.target);\n});\n\n// stop event propagation\nnode.on('click', function(evt) {\n  evt.cancelBubble = true;\n});\n\n// bind multiple listeners\nnode.on('click touchstart', function() {\n  console.log('you clicked/touched me!');\n});\n\n// namespace listener\nnode.on('click.foo', function() {\n  console.log('you clicked/touched me!');\n});\n\n// get the event type\nnode.on('click tap', function(evt) {\n  var eventType = evt.type;\n});\n\n// get native event object\nnode.on('click tap', function(evt) {\n  var nativeEvent = evt.evt;\n});\n\n// for change events, get the old and new val\nnode.on('xChange', function(evt) {\n  var oldVal = evt.oldVal;\n  var newVal = evt.newVal;\n});\n\n// get event targets\n// with event delegations\nlayer.on('click', 'Group', function(evt) {\n  var shape = evt.target;\n  var group = evt.currentTarget;\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2919,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 523
  },
  {
    "id": "Konva.Container#off",
    "longname": "Konva.Container#off",
    "name": "off",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#off",
    "inherited": true,
    "overrides": "Konva.Node#off",
    "description": "remove event bindings from the node. Pass in a string of\n event types delimmited by a space to remove multiple event\n bindings at once such as 'mousedown mouseup mousemove'.\n include a namespace to remove an event binding by name\n such as 'click.foobar'. If you only give a name like '.foobar',\n all events in that namespace will be removed.",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'click', 'mousedown touchstart', '.foobar'",
        "name": "evtStr"
      }
    ],
    "examples": [
      "// remove listener\nnode.off('click');\n\n// remove multiple listeners\nnode.off('click touchstart');\n\n// remove listener by name\nnode.off('click.foo');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3007,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 524
  },
  {
    "id": "Konva.Container#remove",
    "longname": "Konva.Container#remove",
    "name": "remove",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#remove",
    "inherited": true,
    "overrides": "Konva.Node#remove",
    "description": "remove a node from parent, but don't destroy. You can reuse the node later.",
    "memberof": "Konva.Container",
    "examples": [
      "node.remove();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3088,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 525
  },
  {
    "id": "Konva.Container#destroy",
    "longname": "Konva.Container#destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#destroy",
    "inherited": true,
    "overrides": "Konva.Node#destroy",
    "description": "remove and destroy a node. Kill it and delete forever! You should not reuse node after destroy().\nIf the node is a container (Group, Stage or Layer) it will destroy all children too.",
    "memberof": "Konva.Container",
    "examples": [
      "node.destroy();"
    ],
    "meta": {
      "lineno": 3125,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 526
  },
  {
    "id": "Konva.Container#getAttr",
    "longname": "Konva.Container#getAttr",
    "name": "getAttr",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAttr",
    "inherited": true,
    "overrides": "Konva.Node#getAttr",
    "description": "get attr",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "attr"
      }
    ],
    "examples": [
      "var x = node.getAttr('x');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer",
            "String",
            "Object",
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3138,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 527
  },
  {
    "id": "Konva.Container#getAncestors",
    "longname": "Konva.Container#getAncestors",
    "name": "getAncestors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAncestors",
    "inherited": true,
    "overrides": "Konva.Node#getAncestors",
    "description": "get ancestors",
    "memberof": "Konva.Container",
    "examples": [
      "shape.getAncestors().forEach(function(node) {\n  console.log(node.getId());\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3155,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 528
  },
  {
    "id": "Konva.Container#getAttrs",
    "longname": "Konva.Container#getAttrs",
    "name": "getAttrs",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAttrs",
    "inherited": true,
    "overrides": "Konva.Node#getAttrs",
    "description": "get attrs object literal",
    "memberof": "Konva.Container",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3173,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 529
  },
  {
    "id": "Konva.Container#setAttrs",
    "longname": "Konva.Container#setAttrs",
    "name": "setAttrs",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#setAttrs",
    "inherited": true,
    "overrides": "Konva.Node#setAttrs",
    "description": "set multiple attrs at once using an object literal",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "object containing key value pairs",
        "name": "config"
      }
    ],
    "examples": [
      "node.setAttrs({\n  x: 5,\n  fill: 'red'\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3182,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 530
  },
  {
    "id": "Konva.Container#isListening",
    "longname": "Konva.Container#isListening",
    "name": "isListening",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isListening",
    "inherited": true,
    "overrides": "Konva.Node#isListening",
    "description": "determine if node is listening for events by taking into account ancestors.\n\nParent    | Self      | isListening\nlistening | listening |\n----------+-----------+------------\nT         | T         | T\nT         | F         | F\nF         | T         | F\nF         | F         | F",
    "memberof": "Konva.Container",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3217,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 531
  },
  {
    "id": "Konva.Container#isVisible",
    "longname": "Konva.Container#isVisible",
    "name": "isVisible",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isVisible",
    "inherited": true,
    "overrides": "Konva.Node#isVisible",
    "description": "determine if node is visible by taking into account ancestors.\n\nParent    | Self      | isVisible\nvisible   | visible   |\n----------+-----------+------------\nT         | T         | T\nT         | F         | F\nF         | T         | F\nF         | F         | F",
    "memberof": "Konva.Container",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3248,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 532
  },
  {
    "id": "Konva.Container#show",
    "longname": "Konva.Container#show",
    "name": "show",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#show",
    "inherited": true,
    "overrides": "Konva.Node#show",
    "description": "show node. set visible = true",
    "memberof": "Konva.Container",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3300,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 533
  },
  {
    "id": "Konva.Container#hide",
    "longname": "Konva.Container#hide",
    "name": "hide",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hide",
    "inherited": true,
    "overrides": "Konva.Node#hide",
    "description": "hide node.  Hidden nodes are no longer detectable",
    "memberof": "Konva.Container",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3310,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 534
  },
  {
    "id": "Konva.Container#getAbsoluteZIndex",
    "longname": "Konva.Container#getAbsoluteZIndex",
    "name": "getAbsoluteZIndex",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteZIndex",
    "inherited": true,
    "overrides": "Konva.Node#getAbsoluteZIndex",
    "description": "get absolute z-index which takes into account sibling\n and ancestor indices",
    "memberof": "Konva.Container",
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3323,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 535
  },
  {
    "id": "Konva.Container#getDepth",
    "longname": "Konva.Container#getDepth",
    "name": "getDepth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getDepth",
    "inherited": true,
    "overrides": "Konva.Node#getDepth",
    "description": "get node depth in node tree.  Returns an integer.\n e.g. Stage depth will always be 0.  Layers will always be 1.  Groups and Shapes will always\n be >= 2",
    "memberof": "Konva.Container",
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3355,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 536
  },
  {
    "id": "Konva.Container#getRelativePointerPosition",
    "longname": "Konva.Container#getRelativePointerPosition",
    "name": "getRelativePointerPosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getRelativePointerPosition",
    "inherited": true,
    "overrides": "Konva.Node#getRelativePointerPosition",
    "description": "get position of first pointer (like mouse or first touch) relative to local coordinates of current node",
    "memberof": "Konva.Container",
    "examples": [
      "// let's think we have a rectangle at position x = 10, y = 10\n// now we clicked at x = 15, y = 15 of the stage\n// if you want to know position of the click, related to the rectangle you can use\nrect.getRelativePointerPosition();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3398,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 537
  },
  {
    "id": "Konva.Container#getAbsolutePosition",
    "longname": "Konva.Container#getAbsolutePosition",
    "name": "getAbsolutePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsolutePosition",
    "inherited": true,
    "overrides": "Konva.Node#getAbsolutePosition",
    "description": "get absolute position of a node. That function can be used to calculate absolute position, but relative to any ancestor",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "optional ancestor node",
        "name": "Ancestor"
      }
    ],
    "examples": [
      "// returns absolute position relative to top-left corner of canvas\nnode.getAbsolutePosition();\n\n// calculate absolute position of node, inside stage\n// so stage transforms are ignored\nnode.getAbsolutePosition(stage)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3426,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 538
  },
  {
    "id": "Konva.Container#move",
    "longname": "Konva.Container#move",
    "name": "move",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#move",
    "inherited": true,
    "overrides": "Konva.Node#move",
    "description": "move node by an amount relative to its current position",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "change"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "change.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "change.y"
      }
    ],
    "examples": [
      "// move node in x direction by 1px and y direction by 2px\nnode.move({\n  x: 1,\n  y: 2\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3514,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 539
  },
  {
    "id": "Konva.Container#rotate",
    "longname": "Konva.Container#rotate",
    "name": "rotate",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#rotate",
    "inherited": true,
    "overrides": "Konva.Node#rotate",
    "description": "rotate node by an amount in degrees relative to its current rotation",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "theta"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3559,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 540
  },
  {
    "id": "Konva.Container#moveToTop",
    "longname": "Konva.Container#moveToTop",
    "name": "moveToTop",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveToTop",
    "inherited": true,
    "overrides": "Konva.Node#moveToTop",
    "description": "move node to the top of its siblings",
    "memberof": "Konva.Container",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3570,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 541
  },
  {
    "id": "Konva.Container#moveUp",
    "longname": "Konva.Container#moveUp",
    "name": "moveUp",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveUp",
    "inherited": true,
    "overrides": "Konva.Node#moveUp",
    "description": "move node up",
    "memberof": "Konva.Container",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "flag is moved or not"
      }
    ],
    "meta": {
      "lineno": 3590,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 542
  },
  {
    "id": "Konva.Container#moveDown",
    "longname": "Konva.Container#moveDown",
    "name": "moveDown",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveDown",
    "inherited": true,
    "overrides": "Konva.Node#moveDown",
    "description": "move node down",
    "memberof": "Konva.Container",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3610,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 543
  },
  {
    "id": "Konva.Container#moveToBottom",
    "longname": "Konva.Container#moveToBottom",
    "name": "moveToBottom",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveToBottom",
    "inherited": true,
    "overrides": "Konva.Node#moveToBottom",
    "description": "move node to the bottom of its siblings",
    "memberof": "Konva.Container",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3630,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 544
  },
  {
    "id": "Konva.Container#getAbsoluteOpacity",
    "longname": "Konva.Container#getAbsoluteOpacity",
    "name": "getAbsoluteOpacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteOpacity",
    "inherited": true,
    "overrides": "Konva.Node#getAbsoluteOpacity",
    "description": "get absolute opacity",
    "memberof": "Konva.Container",
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3668,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 545
  },
  {
    "id": "Konva.Container#moveTo",
    "longname": "Konva.Container#moveTo",
    "name": "moveTo",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveTo",
    "inherited": true,
    "overrides": "Konva.Node#moveTo",
    "description": "move node to another container",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Container"
          ]
        },
        "name": "newContainer"
      }
    ],
    "examples": [
      "// move node from current layer into layer2\nnode.moveTo(layer2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3685,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 546
  },
  {
    "id": "Konva.Container#toObject",
    "longname": "Konva.Container#toObject",
    "name": "toObject",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toObject",
    "inherited": true,
    "overrides": "Konva.Node#toObject",
    "description": "convert Node into an object for serialization.  Returns an object.",
    "memberof": "Konva.Container",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3703,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 547
  },
  {
    "id": "Konva.Container#toJSON",
    "longname": "Konva.Container#toJSON",
    "name": "toJSON",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toJSON",
    "inherited": true,
    "overrides": "Konva.Node#toJSON",
    "description": "convert Node into a JSON string.  Returns a JSON string.",
    "memberof": "Konva.Container",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3736,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 548
  },
  {
    "id": "Konva.Container#getParent",
    "longname": "Konva.Container#getParent",
    "name": "getParent",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getParent",
    "inherited": true,
    "overrides": "Konva.Node#getParent",
    "description": "get parent container",
    "memberof": "Konva.Container",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3745,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 549
  },
  {
    "id": "Konva.Container#findAncestors",
    "longname": "Konva.Container#findAncestors",
    "name": "findAncestors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#findAncestors",
    "inherited": true,
    "overrides": "Konva.Node#findAncestors",
    "description": "get all ancestors (parent then parent of the parent, etc) of the node",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "selector for search",
        "name": "selector"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "show we think that node is ancestro itself?",
        "name": "includeSelf"
      },
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "optional": true,
        "description": "optional node where we need to stop searching (one of ancestors)",
        "name": "stopNode"
      }
    ],
    "examples": [
      "// get one of the parent group\nvar parentGroups = node.findAncestors('Group');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "[ancestors]"
      }
    ],
    "meta": {
      "lineno": 3754,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 550
  },
  {
    "id": "Konva.Container#findAncestor",
    "longname": "Konva.Container#findAncestor",
    "name": "findAncestor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#findAncestor",
    "inherited": true,
    "overrides": "Konva.Node#findAncestor",
    "description": "get ancestor (parent or parent of the parent, etc) of the node that match passed selector",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "selector for search",
        "name": "selector"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "show we think that node is ancestro itself?",
        "name": "includeSelf"
      },
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "optional": true,
        "description": "optional node where we need to stop searching (one of ancestors)",
        "name": "stopNode"
      }
    ],
    "examples": [
      "// get one of the parent group\nvar group = node.findAncestors('.mygroup');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "description": "ancestor"
      }
    ],
    "meta": {
      "lineno": 3786,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 551
  },
  {
    "id": "Konva.Container#getLayer",
    "longname": "Konva.Container#getLayer",
    "name": "getLayer",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getLayer",
    "inherited": true,
    "overrides": "Konva.Node#getLayer",
    "description": "get layer ancestor",
    "memberof": "Konva.Container",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Layer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3837,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 552
  },
  {
    "id": "Konva.Container#getStage",
    "longname": "Konva.Container#getStage",
    "name": "getStage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getStage",
    "inherited": true,
    "overrides": "Konva.Node#getStage",
    "description": "get stage ancestor",
    "memberof": "Konva.Container",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Stage"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3847,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 553
  },
  {
    "id": "Konva.Container#fire",
    "longname": "Konva.Container#fire",
    "name": "fire",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#fire",
    "inherited": true,
    "overrides": "Konva.Node#fire",
    "description": "fire event",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "event type.  can be a regular event, like click, mouseover, or mouseout, or it can be a custom event, like myCustomEvent",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "Event"
          ]
        },
        "optional": true,
        "description": "event object",
        "name": "evt"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "setting the value to false, or leaving it undefined, will result in the event\n not bubbling.  Setting the value to true will result in the event bubbling.",
        "name": "bubble"
      }
    ],
    "examples": [
      "// manually fire click event\nnode.fire('click');\n\n// fire custom event\nnode.fire('foo');\n\n// fire custom event with custom event object\nnode.fire('foo', {\n  bar: 10\n});\n\n// fire click event that bubbles\nnode.fire('click', null, true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3865,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 554
  },
  {
    "id": "Konva.Container#getAbsoluteTransform",
    "longname": "Konva.Container#getAbsoluteTransform",
    "name": "getAbsoluteTransform",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteTransform",
    "inherited": true,
    "overrides": "Konva.Node#getAbsoluteTransform",
    "description": "get absolute transform of the node which takes into\n account its ancestor transforms",
    "memberof": "Konva.Container",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3901,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 555
  },
  {
    "id": "Konva.Container#getAbsoluteScale",
    "longname": "Konva.Container#getAbsoluteScale",
    "name": "getAbsoluteScale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteScale",
    "inherited": true,
    "overrides": "Konva.Node#getAbsoluteScale",
    "description": "get absolute scale of the node which takes into\n account its ancestor scales",
    "memberof": "Konva.Container",
    "examples": [
      "// get absolute scale x\nvar scaleX = node.getAbsoluteScale().x;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3961,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 556
  },
  {
    "id": "Konva.Container#getAbsoluteRotation",
    "longname": "Konva.Container#getAbsoluteRotation",
    "name": "getAbsoluteRotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteRotation",
    "inherited": true,
    "overrides": "Konva.Node#getAbsoluteRotation",
    "description": "get absolute rotation of the node which takes into\n account its ancestor rotations",
    "memberof": "Konva.Container",
    "examples": [
      "// get absolute rotation\nvar rotation = node.getAbsoluteRotation();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3989,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 557
  },
  {
    "id": "Konva.Container#getTransform",
    "longname": "Konva.Container#getTransform",
    "name": "getTransform",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getTransform",
    "inherited": true,
    "overrides": "Konva.Node#getTransform",
    "description": "get transform of the node",
    "memberof": "Konva.Container",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4009,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 558
  },
  {
    "id": "Konva.Container#clone",
    "longname": "Konva.Container#clone",
    "name": "clone",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#clone",
    "inherited": true,
    "overrides": "Konva.Node#clone",
    "description": "clone node.  Returns a new Node instance with identical attributes.  You can also override\n the node properties with an object literal, enabling you to use an existing node as a template\n for another node",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "override attrs",
        "name": "obj"
      }
    ],
    "examples": [
      "// simple clone\nvar clone = node.clone();\n\n// clone a node and override the x position\nvar clone = rect.clone({\n  x: 5\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4044,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 559
  },
  {
    "id": "Konva.Container#toCanvas",
    "longname": "Konva.Container#toCanvas",
    "name": "toCanvas",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toCanvas",
    "inherited": true,
    "overrides": "Konva.Node#toCanvas",
    "description": "converts node into an canvas element.",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output canvas. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var canvas = node.toCanvas();"
    ],
    "meta": {
      "lineno": 4119,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 560
  },
  {
    "id": "Konva.Container#toDataURL",
    "longname": "Konva.Container#toDataURL",
    "name": "toDataURL",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toDataURL",
    "inherited": true,
    "overrides": "Konva.Node#toDataURL",
    "description": "Creates a composite data URL (base64 string). If MIME type is not\nspecified, then \"image/png\" will result. For \"image/jpeg\", specify a quality\nlevel as quality (range 0.0 - 1.0)",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"image/png\" or \"image/jpeg\".\n \"image/png\" is the default",
        "name": "config.mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "jpeg quality.  If using an \"image/jpeg\" mimeType,\n you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n is very high quality",
        "name": "config.quality"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output image url. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4140,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 561
  },
  {
    "id": "Konva.Container#toImage",
    "longname": "Konva.Container#toImage",
    "name": "toImage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toImage",
    "inherited": true,
    "overrides": "Konva.Node#toImage",
    "description": "converts node into an image.  Since the toImage\n method is asynchronous, the resulting image can only be retrieved from the config callback\n or the returned Promise.  toImage is most commonly used\n to cache complex drawings as an image so that they don't have to constantly be redrawn",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"image/png\" or \"image/jpeg\".\n \"image/png\" is the default",
        "name": "config.mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "jpeg quality.  If using an \"image/jpeg\" mimeType,\n you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n is very high quality",
        "name": "config.quality"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output image. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var image = node.toImage({\n  callback(img) {\n    // do stuff with img\n  }\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Image>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4172,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 562
  },
  {
    "id": "Konva.Container#toBlob",
    "longname": "Konva.Container#toBlob",
    "name": "toBlob",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toBlob",
    "inherited": true,
    "overrides": "Konva.Node#toBlob",
    "description": "Converts node into a blob.  Since the toBlob method is asynchronous,\n the resulting blob can only be retrieved from the config callback\n or the returned Promise.",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output canvas. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var blob = await node.toBlob({});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Blob>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4219,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 563
  },
  {
    "id": "Konva.Container#getClassName",
    "longname": "Konva.Container#getClassName",
    "name": "getClassName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getClassName",
    "inherited": true,
    "overrides": "Konva.Node#getClassName",
    "description": "get class name, which may return Stage, Layer, Group, or shape class names like Rect, Circle, Text, etc.",
    "memberof": "Konva.Container",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4267,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 564
  },
  {
    "id": "Konva.Container#getType",
    "longname": "Konva.Container#getType",
    "name": "getType",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getType",
    "inherited": true,
    "overrides": "Konva.Node#getType",
    "description": "get the node type, which may return Stage, Layer, Group, or Shape",
    "memberof": "Konva.Container",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4276,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 565
  },
  {
    "id": "Konva.Container#addName",
    "longname": "Konva.Container#addName",
    "name": "addName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#addName",
    "inherited": true,
    "overrides": "Konva.Node#addName",
    "description": "add name to node",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red');\nnode.addName('selected');\nnode.name(); // return 'red selected'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4324,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 566
  },
  {
    "id": "Konva.Container#hasName",
    "longname": "Konva.Container#hasName",
    "name": "hasName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hasName",
    "inherited": true,
    "overrides": "Konva.Node#hasName",
    "description": "check is node has name",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red');\nnode.hasName('red');   // return true\nnode.hasName('selected'); // return false\nnode.hasName(''); // return false"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4343,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 567
  },
  {
    "id": "Konva.Container#removeName",
    "longname": "Konva.Container#removeName",
    "name": "removeName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#removeName",
    "inherited": true,
    "overrides": "Konva.Node#removeName",
    "description": "remove name from node",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red selected');\nnode.removeName('selected');\nnode.hasName('selected'); // return false\nnode.name(); // return 'red'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4367,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 568
  },
  {
    "id": "Konva.Container#setAttr",
    "longname": "Konva.Container#setAttr",
    "name": "setAttr",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#setAttr",
    "inherited": true,
    "overrides": "Konva.Node#setAttr",
    "description": "set attr",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "attr"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "name": "val"
      }
    ],
    "examples": [
      "node.setAttr('x', 5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4388,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 569
  },
  {
    "id": "Konva.Container#draw",
    "longname": "Konva.Container#draw",
    "name": "draw",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#draw",
    "inherited": true,
    "overrides": "Konva.Node#draw",
    "description": "draw both scene and hit graphs.  If the node being drawn is the stage, all of the layers will be cleared and redrawn",
    "memberof": "Konva.Container",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4511,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 570
  },
  {
    "id": "Konva.Container#startDrag",
    "longname": "Konva.Container#startDrag",
    "name": "startDrag",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#startDrag",
    "inherited": true,
    "overrides": "Konva.Node#startDrag",
    "description": "initiate drag and drop.",
    "memberof": "Konva.Container",
    "meta": {
      "lineno": 4544,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 571
  },
  {
    "id": "Konva.Container#stopDrag",
    "longname": "Konva.Container#stopDrag",
    "name": "stopDrag",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#stopDrag",
    "inherited": true,
    "overrides": "Konva.Node#stopDrag",
    "description": "stop drag and drop",
    "memberof": "Konva.Container",
    "meta": {
      "lineno": 4590,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 572
  },
  {
    "id": "Konva.Container#isDragging",
    "longname": "Konva.Container#isDragging",
    "name": "isDragging",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isDragging",
    "inherited": true,
    "overrides": "Konva.Node#isDragging",
    "description": "determine if node is currently in drag and drop mode",
    "memberof": "Konva.Container",
    "meta": {
      "lineno": 4607,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 573
  },
  {
    "id": "Konva.Container#isClientRectOnScreen",
    "longname": "Konva.Container#isClientRectOnScreen",
    "name": "isClientRectOnScreen",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isClientRectOnScreen",
    "inherited": true,
    "overrides": "Konva.Node#isClientRectOnScreen",
    "description": "determine if node (at least partially) is currently in user-visible area",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Number",
            "Object"
          ]
        },
        "description": "optional margin in pixels",
        "name": "margin"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "margin.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "margin.y"
      }
    ],
    "examples": [
      "// get index\n// default calculations\nvar isOnScreen = node.isClientRectOnScreen()\n// increase object size (or screen size) for cases when objects close to the screen still need to be marked as \"visible\"\nvar isOnScreen = node.isClientRectOnScreen({ x: stage.width(), y: stage.height() })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4671,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 574
  },
  {
    "id": "Konva.Container#zIndex",
    "longname": "Konva.Container#zIndex",
    "name": "zIndex",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#zIndex",
    "inherited": true,
    "overrides": "Konva.Node#zIndex",
    "description": "get/set zIndex relative to the node's siblings who share the same parent.\nPlease remember that zIndex is not absolute (like in CSS). It is relative to parent element only.",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "index"
      }
    ],
    "examples": [
      "// get index\nvar index = node.zIndex();\n\n// set index\nnode.zIndex(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4764,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 575
  },
  {
    "id": "Konva.Container#absolutePosition",
    "longname": "Konva.Container#absolutePosition",
    "name": "absolutePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#absolutePosition",
    "inherited": true,
    "overrides": "Konva.Node#absolutePosition",
    "description": "get/set node absolute position",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "// get position\nvar position = node.absolutePosition();\n\n// set position\nnode.absolutePosition({\n  x: 5,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4779,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 576
  },
  {
    "id": "Konva.Container#position",
    "longname": "Konva.Container#position",
    "name": "position",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#position",
    "inherited": true,
    "overrides": "Konva.Node#position",
    "description": "get/set node position relative to parent",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "// get position\nvar position = node.position();\n\n// set position\nnode.position({\n  x: 5,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4799,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 577
  },
  {
    "id": "Konva.Container#x",
    "longname": "Konva.Container#x",
    "name": "x",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#x",
    "inherited": true,
    "overrides": "Konva.Node#x",
    "description": "get/set x position",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get x\nvar x = node.x();\n\n// set x\nnode.x(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4818,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 578
  },
  {
    "id": "Konva.Container#y",
    "longname": "Konva.Container#y",
    "name": "y",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#y",
    "inherited": true,
    "overrides": "Konva.Node#y",
    "description": "get/set y position",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get y\nvar y = node.y();\n\n// set y\nnode.y(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4832,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 579
  },
  {
    "id": "Konva.Container#globalCompositeOperation",
    "longname": "Konva.Container#globalCompositeOperation",
    "name": "globalCompositeOperation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#globalCompositeOperation",
    "inherited": true,
    "overrides": "Konva.Node#globalCompositeOperation",
    "description": "get/set globalCompositeOperation of a node. globalCompositeOperation DOESN'T affect hit graph of nodes. So they are still trigger to events as they have default \"source-over\" globalCompositeOperation.",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "type"
      }
    ],
    "examples": [
      "// get globalCompositeOperation\nvar globalCompositeOperation = shape.globalCompositeOperation();\n\n// set globalCompositeOperation\nshape.globalCompositeOperation('source-in');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4846,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 580
  },
  {
    "id": "Konva.Container#opacity",
    "longname": "Konva.Container#opacity",
    "name": "opacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#opacity",
    "inherited": true,
    "overrides": "Konva.Node#opacity",
    "description": "get/set opacity.  Opacity values range from 0 to 1.\n A node with an opacity of 0 is fully transparent, and a node\n with an opacity of 1 is fully opaque",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "opacity"
      }
    ],
    "examples": [
      "// get opacity\nvar opacity = node.opacity();\n\n// set opacity\nnode.opacity(0.5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4860,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 581
  },
  {
    "id": "Konva.Container#name",
    "longname": "Konva.Container#name",
    "name": "name",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#name",
    "inherited": true,
    "overrides": "Konva.Node#name",
    "description": "get/set name.",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "// get name\nvar name = node.name();\n\n// set name\nnode.name('foo');\n\n// also node may have multiple names (as css classes)\nnode.name('foo bar');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4876,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 582
  },
  {
    "id": "Konva.Container#id",
    "longname": "Konva.Container#id",
    "name": "id",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#id",
    "inherited": true,
    "overrides": "Konva.Node#id",
    "description": "get/set id. Id is global for whole page.",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "id"
      }
    ],
    "examples": [
      "// get id\nvar name = node.id();\n\n// set id\nnode.id('foo');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4893,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 583
  },
  {
    "id": "Konva.Container#rotation",
    "longname": "Konva.Container#rotation",
    "name": "rotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#rotation",
    "inherited": true,
    "overrides": "Konva.Node#rotation",
    "description": "get/set rotation in degrees",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get rotation in degrees\nvar rotation = node.rotation();\n\n// set rotation in degrees\nnode.rotation(45);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4907,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 584
  },
  {
    "id": "Konva.Container#scale",
    "longname": "Konva.Container#scale",
    "name": "scale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scale",
    "inherited": true,
    "overrides": "Konva.Node#scale",
    "description": "get/set scale",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.y"
      }
    ],
    "examples": [
      "// get scale\nvar scale = node.scale();\n\n// set scale\nshape.scale({\n  x: 2,\n  y: 3\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4921,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 585
  },
  {
    "id": "Konva.Container#scaleX",
    "longname": "Konva.Container#scaleX",
    "name": "scaleX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scaleX",
    "inherited": true,
    "overrides": "Konva.Node#scaleX",
    "description": "get/set scale x",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get scale x\nvar scaleX = node.scaleX();\n\n// set scale x\nnode.scaleX(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4940,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 586
  },
  {
    "id": "Konva.Container#scaleY",
    "longname": "Konva.Container#scaleY",
    "name": "scaleY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scaleY",
    "inherited": true,
    "overrides": "Konva.Node#scaleY",
    "description": "get/set scale y",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get scale y\nvar scaleY = node.scaleY();\n\n// set scale y\nnode.scaleY(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4954,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 587
  },
  {
    "id": "Konva.Container#skew",
    "longname": "Konva.Container#skew",
    "name": "skew",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skew",
    "inherited": true,
    "overrides": "Konva.Node#skew",
    "description": "get/set skew",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "skew"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "skew.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "skew.y"
      }
    ],
    "examples": [
      "// get skew\nvar skew = node.skew();\n\n// set skew\nnode.skew({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4968,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 588
  },
  {
    "id": "Konva.Container#skewX",
    "longname": "Konva.Container#skewX",
    "name": "skewX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skewX",
    "inherited": true,
    "overrides": "Konva.Node#skewX",
    "description": "get/set skew x",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get skew x\nvar skewX = node.skewX();\n\n// set skew x\nnode.skewX(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4987,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 589
  },
  {
    "id": "Konva.Container#skewY",
    "longname": "Konva.Container#skewY",
    "name": "skewY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skewY",
    "inherited": true,
    "overrides": "Konva.Node#skewY",
    "description": "get/set skew y",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get skew y\nvar skewY = node.skewY();\n\n// set skew y\nnode.skewY(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5001,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 590
  },
  {
    "id": "Konva.Container#offsetX",
    "longname": "Konva.Container#offsetX",
    "name": "offsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#offsetX",
    "inherited": true,
    "overrides": "Konva.Node#offsetX",
    "description": "get/set offset x",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get offset x\nvar offsetX = node.offsetX();\n\n// set offset x\nnode.offsetX(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5033,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 591
  },
  {
    "id": "Konva.Container#offsetY",
    "longname": "Konva.Container#offsetY",
    "name": "offsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#offsetY",
    "inherited": true,
    "overrides": "Konva.Node#offsetY",
    "description": "get/set offset y",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get offset y\nvar offsetY = node.offsetY();\n\n// set offset y\nnode.offsetY(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5047,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 592
  },
  {
    "id": "Konva.Container#dragDistance",
    "longname": "Konva.Container#dragDistance",
    "name": "dragDistance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#dragDistance",
    "inherited": true,
    "overrides": "Konva.Node#dragDistance",
    "description": "get/set drag distance",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "distance"
      }
    ],
    "examples": [
      "// get drag distance\nvar dragDistance = node.dragDistance();\n\n// set distance\n// node starts dragging only if pointer moved more then 3 pixels\nnode.dragDistance(3);\n// or set globally\nKonva.dragDistance = 3;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5061,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 593
  },
  {
    "id": "Konva.Container#width",
    "longname": "Konva.Container#width",
    "name": "width",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#width",
    "inherited": true,
    "overrides": "Konva.Node#width",
    "description": "get/set width",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "width"
      }
    ],
    "examples": [
      "// get width\nvar width = node.width();\n\n// set width\nnode.width(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5078,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 594
  },
  {
    "id": "Konva.Container#height",
    "longname": "Konva.Container#height",
    "name": "height",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#height",
    "inherited": true,
    "overrides": "Konva.Node#height",
    "description": "get/set height",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "height"
      }
    ],
    "examples": [
      "// get height\nvar height = node.height();\n\n// set height\nnode.height(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5092,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 595
  },
  {
    "id": "Konva.Container#listening",
    "longname": "Konva.Container#listening",
    "name": "listening",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#listening",
    "inherited": true,
    "overrides": "Konva.Node#listening",
    "description": "get/set listening attr.  If you need to determine if a node is listening or not\n  by taking into account its parents, use the isListening() method\n  nodes with listening set to false will not be detected in hit graph\n  so they will be ignored in container.getIntersection() method",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "Can be true, or false.  The default is true.",
        "name": "listening"
      }
    ],
    "examples": [
      "// get listening attr\nvar listening = node.listening();\n\n// stop listening for events, remove node and all its children from hit graph\nnode.listening(false);\n\n// listen to events according to the parent\nnode.listening(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5106,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 596
  },
  {
    "id": "Konva.Container#preventDefault",
    "longname": "Konva.Container#preventDefault",
    "name": "preventDefault",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#preventDefault",
    "inherited": true,
    "overrides": "Konva.Node#preventDefault",
    "description": "get/set preventDefault\nBy default all shapes will prevent default behavior\nof a browser on a pointer move or tap.\nthat will prevent native scrolling when you are trying to drag&drop a node\nbut sometimes you may need to enable default actions\nin that case you can set the property to false",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "preventDefault"
      }
    ],
    "examples": [
      "// get preventDefault\nvar shouldPrevent = shape.preventDefault();\n\n// set preventDefault\nshape.preventDefault(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5125,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 597
  },
  {
    "id": "Konva.Container#filters",
    "longname": "Konva.Container#filters",
    "name": "filters",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#filters",
    "inherited": true,
    "overrides": "Konva.Node#filters",
    "description": "get/set filters.  Filters are applied to cached canvases",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "array of filters",
        "name": "filters"
      }
    ],
    "examples": [
      "// get filters\nvar filters = node.filters();\n\n// set a single filter\nnode.cache();\nnode.filters([Konva.Filters.Blur]);\n\n// set multiple filters\nnode.cache();\nnode.filters([\n  Konva.Filters.Blur,\n  Konva.Filters.Sepia,\n  Konva.Filters.Invert\n]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5148,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 598
  },
  {
    "id": "Konva.Container#visible",
    "longname": "Konva.Container#visible",
    "name": "visible",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#visible",
    "inherited": true,
    "overrides": "Konva.Node#visible",
    "description": "get/set visible attr.  Can be true, or false.  The default is true.\n  If you need to determine if a node is visible or not\n  by taking into account its parents, use the isVisible() method",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "visible"
      }
    ],
    "examples": [
      "// get visible attr\nvar visible = node.visible();\n\n// make invisible\nnode.visible(false);\n\n// make visible (according to the parent)\nnode.visible(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5171,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 599
  },
  {
    "id": "Konva.Container#transformsEnabled",
    "longname": "Konva.Container#transformsEnabled",
    "name": "transformsEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#transformsEnabled",
    "inherited": true,
    "overrides": "Konva.Node#transformsEnabled",
    "description": "get/set transforms that are enabled.  Can be \"all\", \"none\", or \"position\".  The default\n is \"all\"",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// enable position transform only to improve draw performance\nnode.transformsEnabled('position');\n\n// enable all transforms\nnode.transformsEnabled('all');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5191,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 600
  },
  {
    "id": "Konva.Container#size",
    "longname": "Konva.Container#size",
    "name": "size",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#size",
    "inherited": true,
    "overrides": "Konva.Node#size",
    "description": "get/set node size",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "size"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size.height"
      }
    ],
    "examples": [
      "// get node size\nvar size = node.size();\nvar width = size.width;\nvar height = size.height;\n\n// set size\nnode.size({\n  width: 100,\n  height: 200\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5205,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 601
  },
  {
    "id": "Konva.Container#dragBoundFunc",
    "longname": "Konva.Container#dragBoundFunc",
    "name": "dragBoundFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#dragBoundFunc",
    "inherited": true,
    "overrides": "Konva.Node#dragBoundFunc",
    "description": "get/set drag bound function.  This is used to override the default\n drag and drop position.",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "name": "dragBoundFunc"
      }
    ],
    "examples": [
      "// get drag bound function\nvar dragBoundFunc = node.dragBoundFunc();\n\n// create vertical drag and drop\nnode.dragBoundFunc(function(pos){\n  // important pos - is absolute position of the node\n  // you should return absolute position too\n  return {\n    x: this.absolutePosition().x,\n    y: pos.y\n  };\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5226,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 602
  },
  {
    "id": "Konva.Container#draggable",
    "longname": "Konva.Container#draggable",
    "name": "draggable",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#draggable",
    "inherited": true,
    "overrides": "Konva.Node#draggable",
    "description": "get/set draggable flag",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "draggable"
      }
    ],
    "examples": [
      "// get draggable flag\nvar draggable = node.draggable();\n\n// enable drag and drop\nnode.draggable(true);\n\n// disable drag and drop\nnode.draggable(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5248,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 603
  },
  {
    "id": "Konva.Container#to",
    "longname": "Konva.Container#to",
    "name": "to",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#to",
    "inherited": true,
    "overrides": "Konva.Node#to",
    "description": "Tween node properties. Shorter usage of {@link Konva.Tween} object.",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "tween params",
        "name": "params"
      }
    ],
    "examples": [
      "circle.to({\n  x : 50,\n  duration : 0.5,\n  onUpdate: () => console.log('props updated'),\n  onFinish: () => console.log('finished'),\n});"
    ],
    "meta": {
      "lineno": 9588,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 604
  },
  {
    "id": "Konva.Container#blurRadius",
    "longname": "Konva.Container#blurRadius",
    "name": "blurRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#blurRadius",
    "inherited": true,
    "overrides": "Konva.Node#blurRadius",
    "description": "get/set blur radius. Use with {@link Konva.Filters.Blur} filter",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "radius"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17517,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 605
  },
  {
    "id": "Konva.Container#brightness",
    "longname": "Konva.Container#brightness",
    "name": "brightness",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#brightness",
    "inherited": true,
    "overrides": "Konva.Node#brightness",
    "description": "get/set filter brightness.  The brightness is a number between -1 and 1.&nbsp; Positive values\n brighten the pixels and negative values darken them. Use with {@link Konva.Filters.Brighten} filter.",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between -1 and 1",
        "name": "brightness"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17547,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 606
  },
  {
    "id": "Konva.Container#contrast",
    "longname": "Konva.Container#contrast",
    "name": "contrast",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#contrast",
    "inherited": true,
    "overrides": "Konva.Node#contrast",
    "description": "get/set filter contrast.  The contrast is a number between -100 and 100.\nUse with {@link Konva.Filters.Contrast} filter.",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between -100 and 100",
        "name": "contrast"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17600,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 607
  },
  {
    "id": "Konva.Container#embossStrength",
    "longname": "Konva.Container#embossStrength",
    "name": "embossStrength",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossStrength",
    "inherited": true,
    "overrides": "Konva.Node#embossStrength",
    "description": "get/set emboss strength. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1.  Default is 0.5",
        "name": "level"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17725,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 608
  },
  {
    "id": "Konva.Container#embossWhiteLevel",
    "longname": "Konva.Container#embossWhiteLevel",
    "name": "embossWhiteLevel",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossWhiteLevel",
    "inherited": true,
    "overrides": "Konva.Node#embossWhiteLevel",
    "description": "get/set emboss white level. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1.  Default is 0.5",
        "name": "embossWhiteLevel"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17733,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 609
  },
  {
    "id": "Konva.Container#embossDirection",
    "longname": "Konva.Container#embossDirection",
    "name": "embossDirection",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossDirection",
    "inherited": true,
    "overrides": "Konva.Node#embossDirection",
    "description": "get/set emboss direction. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "can be top-left, top, top-right, right, bottom-right, bottom, bottom-left or left\n  The default is top-left",
        "name": "embossDirection"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17741,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 610
  },
  {
    "id": "Konva.Container#embossBlend",
    "longname": "Konva.Container#embossBlend",
    "name": "embossBlend",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossBlend",
    "inherited": true,
    "overrides": "Konva.Node#embossBlend",
    "description": "get/set emboss blend. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "embossBlend"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17750,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 611
  },
  {
    "id": "Konva.Container#enhance",
    "longname": "Konva.Container#enhance",
    "name": "enhance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#enhance",
    "inherited": true,
    "overrides": "Konva.Node#enhance",
    "description": "get/set enhance. Use with {@link Konva.Filters.Enhance} filter. -1 to 1 values",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Float"
          ]
        },
        "name": "amount"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Float"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17864,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 612
  },
  {
    "id": "Konva.Container#hue",
    "longname": "Konva.Container#hue",
    "name": "hue",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hue",
    "inherited": true,
    "overrides": "Konva.Node#hue",
    "description": "get/set hsv hue in degrees. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between 0 and 359",
        "name": "hue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17896,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 613
  },
  {
    "id": "Konva.Container#saturation",
    "longname": "Konva.Container#saturation",
    "name": "saturation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#saturation",
    "inherited": true,
    "overrides": "Konva.Node#saturation",
    "description": "get/set hsv saturation. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the saturation, 1.0 doubles, etc..",
        "name": "saturation"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17904,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 614
  },
  {
    "id": "Konva.Container#luminance",
    "longname": "Konva.Container#luminance",
    "name": "luminance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#luminance",
    "inherited": true,
    "overrides": "Konva.Node#luminance",
    "description": "get/set hsl luminance. Use with {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "from -1 to 1",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17912,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 615
  },
  {
    "id": "Konva.Container#value",
    "longname": "Konva.Container#value",
    "name": "value",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#value",
    "inherited": true,
    "overrides": "Konva.Node#value",
    "description": "get/set hsv value. Use with {@link Konva.Filters.HSV} filter.",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the value, 1.0 doubles, etc..",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18018,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 616
  },
  {
    "id": "Konva.Container#kaleidoscopePower",
    "longname": "Konva.Container#kaleidoscopePower",
    "name": "kaleidoscopePower",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#kaleidoscopePower",
    "inherited": true,
    "overrides": "Konva.Node#kaleidoscopePower",
    "description": "get/set kaleidoscope power. Use with {@link Konva.Filters.Kaleidoscope} filter.",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "of kaleidoscope",
        "name": "power"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18243,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 617
  },
  {
    "id": "Konva.Container#kaleidoscopeAngle",
    "longname": "Konva.Container#kaleidoscopeAngle",
    "name": "kaleidoscopeAngle",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#kaleidoscopeAngle",
    "inherited": true,
    "overrides": "Konva.Node#kaleidoscopeAngle",
    "description": "get/set kaleidoscope angle. Use with {@link Konva.Filters.Kaleidoscope} filter.",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "degrees"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18251,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 618
  },
  {
    "id": "Konva.Container#noise",
    "longname": "Konva.Container#noise",
    "name": "noise",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#noise",
    "inherited": true,
    "overrides": "Konva.Node#noise",
    "description": "get/set noise amount.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Noise} filter.",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "noise"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18437,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 619
  },
  {
    "id": "Konva.Container#pixelSize",
    "longname": "Konva.Container#pixelSize",
    "name": "pixelSize",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#pixelSize",
    "inherited": true,
    "overrides": "Konva.Node#pixelSize",
    "description": "get/set pixel size. Use with {@link Konva.Filters.Pixelate} filter.",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "pixelSize"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18522,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 620
  },
  {
    "id": "Konva.Container#levels",
    "longname": "Konva.Container#levels",
    "name": "levels",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#levels",
    "inherited": true,
    "overrides": "Konva.Node#levels",
    "description": "get/set levels.  Must be a number between 0 and 1.  Use with {@link Konva.Filters.Posterize} filter.",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1",
        "name": "level"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18552,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 621
  },
  {
    "id": "Konva.Container#red",
    "longname": "Konva.Container#red",
    "name": "red",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#red",
    "inherited": true,
    "overrides": "Konva.Node#red",
    "description": "get/set filter red value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "red"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18596,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 622
  },
  {
    "id": "Konva.Container#green",
    "longname": "Konva.Container#green",
    "name": "green",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#green",
    "inherited": true,
    "overrides": "Konva.Node#green",
    "description": "get/set filter green value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "green"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18616,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 623
  },
  {
    "id": "Konva.Container#blue",
    "longname": "Konva.Container#blue",
    "name": "blue",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#blue",
    "inherited": true,
    "overrides": "Konva.Node#blue",
    "description": "get/set filter blue value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "blue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18625,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 624
  },
  {
    "id": "Konva.Container#alpha",
    "longname": "Konva.Container#alpha",
    "name": "alpha",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#alpha",
    "inherited": true,
    "overrides": "Konva.Node#alpha",
    "description": "get/set filter alpha value. Use with {@link Konva.Filters.RGBA} filter.",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Float"
          ]
        },
        "description": "value between 0 and 1",
        "name": "alpha"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Float"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18718,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 625
  },
  {
    "id": "Konva.Container#threshold",
    "longname": "Konva.Container#threshold",
    "name": "threshold",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#threshold",
    "inherited": true,
    "overrides": "Konva.Node#threshold",
    "description": "get/set threshold.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Threshold} or {@link Konva.Filters.Mask} filter.",
    "memberof": "Konva.Container",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "threshold"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18809,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 626
  },
  {
    "id": "Konva.Stage#getChildren",
    "longname": "Konva.Stage#getChildren",
    "name": "getChildren",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#getChildren",
    "inherited": true,
    "overrides": "Konva.Container#getChildren",
    "description": "returns an array of direct descendant nodes",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "filter function",
        "name": "filterFunc"
      }
    ],
    "examples": [
      "// get all children\nvar children = layer.getChildren();\n\n// get only circles\nvar circles = layer.getChildren(function(node){\n   return node.getClassName() === 'Circle';\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5311,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 627
  },
  {
    "id": "Konva.Stage#hasChildren",
    "longname": "Konva.Stage#hasChildren",
    "name": "hasChildren",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#hasChildren",
    "inherited": true,
    "overrides": "Konva.Container#hasChildren",
    "description": "determine if node has children",
    "memberof": "Konva.Stage",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5339,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 628
  },
  {
    "id": "Konva.Stage#removeChildren",
    "longname": "Konva.Stage#removeChildren",
    "name": "removeChildren",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#removeChildren",
    "inherited": true,
    "overrides": "Konva.Container#removeChildren",
    "description": "remove all children. Children will be still in memory.\nIf you want to completely destroy all children please use \"destroyChildren\" method instead",
    "memberof": "Konva.Stage",
    "meta": {
      "lineno": 5348,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 629
  },
  {
    "id": "Konva.Stage#destroyChildren",
    "longname": "Konva.Stage#destroyChildren",
    "name": "destroyChildren",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#destroyChildren",
    "inherited": true,
    "overrides": "Konva.Container#destroyChildren",
    "description": "destroy all children nodes.",
    "memberof": "Konva.Stage",
    "meta": {
      "lineno": 5366,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 630
  },
  {
    "id": "Konva.Stage#add",
    "longname": "Konva.Stage#add",
    "name": "add",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#add",
    "inherited": true,
    "overrides": "Konva.Container#add",
    "description": "add a child and children into container",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "variable": true,
        "name": "children"
      }
    ],
    "examples": [
      "layer.add(rect);\nlayer.add(shape1, shape2, shape3);\n// empty arrays are accepted, though each individual child must be defined\nlayer.add(...shapes);\n// remember to redraw layer if you changed something\nlayer.draw();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Container"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5383,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 631
  },
  {
    "id": "Konva.Stage#find",
    "longname": "Konva.Stage#find",
    "name": "find",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#find",
    "inherited": true,
    "overrides": "Konva.Container#find",
    "description": "return an array of nodes that match the selector.\nYou can provide a string with '#' for id selections and '.' for name selections.\nOr a function that will return true/false when a node is passed through.  See example below.\nWith strings you can also select by type or class name. Pass multiple selectors\nseparated by a comma.",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "String",
            "function"
          ]
        },
        "name": "selector"
      }
    ],
    "examples": [
      "Passing a string as a selector\n// select node with id foo\nvar node = stage.find('#foo');\n\n// select nodes with name bar inside layer\nvar nodes = layer.find('.bar');\n\n// select all groups inside layer\nvar nodes = layer.find('Group');\n\n// select all rectangles inside layer\nvar nodes = layer.find('Rect');\n\n// select node with an id of foo or a name of bar inside layer\nvar nodes = layer.find('#foo, .bar');\n\nPassing a function as a selector\n\n// get all groups with a function\nvar groups = stage.find(node => {\n return node.getType() === 'Group';\n});\n\n// get only Nodes with partial opacity\nvar alphaNodes = layer.find(node => {\n return node.getType() === 'Node' && node.getAbsoluteOpacity() < 1;\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5431,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 632
  },
  {
    "id": "Konva.Stage#findOne",
    "longname": "Konva.Stage#findOne",
    "name": "findOne",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#findOne",
    "inherited": true,
    "overrides": "Konva.Container#findOne",
    "description": "return a first node from `find` method",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "String",
            "function"
          ]
        },
        "name": "selector"
      }
    ],
    "examples": [
      "// select node with id foo\nvar node = stage.findOne('#foo');\n\n// select node with name bar inside layer\nvar nodes = layer.findOne('.bar');\n\n// select the first node to return true in a function\nvar node = stage.findOne(node => {\n return node.getType() === 'Shape'\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node",
            "Undefined"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5476,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 633
  },
  {
    "id": "Konva.Stage#isAncestorOf",
    "longname": "Konva.Stage#isAncestorOf",
    "name": "isAncestorOf",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#isAncestorOf",
    "inherited": true,
    "overrides": "Konva.Container#isAncestorOf",
    "description": "determine if node is an ancestor\nof descendant",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "name": "node"
      }
    ],
    "meta": {
      "lineno": 5539,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 634
  },
  {
    "id": "Konva.Stage#getAllIntersections",
    "longname": "Konva.Stage#getAllIntersections",
    "name": "getAllIntersections",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#getAllIntersections",
    "inherited": true,
    "overrides": "Konva.Container#getAllIntersections",
    "description": "get all shapes that intersect a point.  Note: because this method must clear a temporary\ncanvas and redraw every shape inside the container, it should only be used for special situations\nbecause it performs very poorly.  Please use the {@link Konva.Stage#getIntersection} method if at all possible\nbecause it performs much better\nnodes with listening set to false will not be detected",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "array of shapes"
      }
    ],
    "meta": {
      "lineno": 5564,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 635
  },
  {
    "id": "Konva.Stage#clip",
    "longname": "Konva.Stage#clip",
    "name": "clip",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#clip",
    "inherited": true,
    "overrides": "Konva.Container#clip",
    "description": "get/set clip",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "clip"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "clip.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "clip.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "clip.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "clip.height"
      }
    ],
    "examples": [
      "// get clip\nvar clip = container.clip();\n\n// set clip\ncontainer.clip({\n  x: 20,\n  y: 20,\n  width: 20,\n  height: 20\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5760,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 636
  },
  {
    "id": "Konva.Stage#clipX",
    "longname": "Konva.Stage#clipX",
    "name": "clipX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#clipX",
    "inherited": true,
    "overrides": "Konva.Container#clipX",
    "description": "get/set clip x",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get clip x\nvar clipX = container.clipX();\n\n// set clip x\ncontainer.clipX(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5783,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 637
  },
  {
    "id": "Konva.Stage#clipY",
    "longname": "Konva.Stage#clipY",
    "name": "clipY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#clipY",
    "inherited": true,
    "overrides": "Konva.Container#clipY",
    "description": "get/set clip y",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get clip y\nvar clipY = container.clipY();\n\n// set clip y\ncontainer.clipY(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5797,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 638
  },
  {
    "id": "Konva.Stage#clipWidth",
    "longname": "Konva.Stage#clipWidth",
    "name": "clipWidth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#clipWidth",
    "inherited": true,
    "overrides": "Konva.Container#clipWidth",
    "description": "get/set clip width",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "width"
      }
    ],
    "examples": [
      "// get clip width\nvar clipWidth = container.clipWidth();\n\n// set clip width\ncontainer.clipWidth(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5811,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 639
  },
  {
    "id": "Konva.Stage#clipHeight",
    "longname": "Konva.Stage#clipHeight",
    "name": "clipHeight",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#clipHeight",
    "inherited": true,
    "overrides": "Konva.Container#clipHeight",
    "description": "get/set clip height",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "height"
      }
    ],
    "examples": [
      "// get clip height\nvar clipHeight = container.clipHeight();\n\n// set clip height\ncontainer.clipHeight(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5825,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 640
  },
  {
    "id": "Konva.Stage#clipFunc",
    "longname": "Konva.Stage#clipFunc",
    "name": "clipFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#clipFunc",
    "inherited": true,
    "overrides": "Konva.Container#clipFunc",
    "description": "get/set clip function",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "name": "function"
      }
    ],
    "examples": [
      "// get clip function\nvar clipFunction = container.clipFunc();\n\n// set clip function\ncontainer.clipFunc(function(ctx) {\n  ctx.rect(0, 0, 100, 100);\n});\n\ncontainer.clipFunc(function(ctx) {\n  // optionally return a clip Path2D and clip-rule or just the clip-rule\n  return [new Path2D('M0 0v50h50Z'), 'evenodd']\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5839,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 641
  },
  {
    "id": "Konva.Stage#clearCache",
    "longname": "Konva.Stage#clearCache",
    "name": "clearCache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#clearCache",
    "inherited": true,
    "overrides": "Konva.Container#clearCache",
    "description": "clear cached canvas",
    "memberof": "Konva.Stage",
    "examples": [
      "node.clearCache();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2632,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 642
  },
  {
    "id": "Konva.Stage#cache",
    "longname": "Konva.Stage#cache",
    "name": "cache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#cache",
    "inherited": true,
    "overrides": "Konva.Container#cache",
    "description": "cache node to improve drawing performance, apply filters, or create more accurate\n hit regions. For all basic shapes size of cache canvas will be automatically detected.\n If you need to cache your custom `Konva.Shape` instance you have to pass shape's bounding box\n properties. Look at [https://konvajs.org/docs/performance/Shape_Caching.html](https://konvajs.org/docs/performance/Shape_Caching.html) for more information.",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "increase canvas size by `offset` pixel in all directions.",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "when set to true, a red border will be drawn around the cached\n region for debugging purposes",
        "name": "config.drawBorder"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "change quality (or pixel ratio) of cached image. pixelRatio = 2 will produce 2x sized cache.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "control imageSmoothingEnabled property of created canvas for cache",
        "name": "config.imageSmoothingEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "change quality (or pixel ratio) of cached hit canvas.",
        "name": "config.hitCanvasPixelRatio"
      }
    ],
    "examples": [
      "// cache a shape with the x,y position of the bounding box at the center and\n// the width and height of the bounding box equal to the width and height of\n// the shape obtained from shape.width() and shape.height()\nimage.cache();\n\n// cache a node and define the bounding box position and size\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200\n});\n\n// cache a node and draw a red border around the bounding box\n// for debugging purposes\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200,\n  offset : 10,\n  drawBorder: true\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2650,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 643
  },
  {
    "id": "Konva.Stage#isCached",
    "longname": "Konva.Stage#isCached",
    "name": "isCached",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isCached",
    "inherited": true,
    "overrides": "Konva.Container#isCached",
    "description": "determine if node is currently cached",
    "memberof": "Konva.Stage",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2788,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 644
  },
  {
    "id": "Konva.Stage#getClientRect",
    "longname": "Konva.Stage#getClientRect",
    "name": "getClientRect",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getClientRect",
    "inherited": true,
    "overrides": "Konva.Container#getClientRect",
    "description": "Return client rectangle `{x, y, width, height}` of node. This rectangle also include all styling (strokes, shadows, etc).\nThe purpose of the method is similar to getBoundingClientRect API of the DOM.",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply transform to node for calculating rect?",
        "name": "config.skipTransform"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply shadow to the node for calculating bound box?",
        "name": "config.skipShadow"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply stroke to the node for calculating bound box?",
        "name": "config.skipStroke"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "calculate client rect relative to one of the parents",
        "name": "config.relativeTo"
      }
    ],
    "examples": [
      "var rect = new Konva.Rect({\n     width : 100,\n     height : 100,\n     x : 50,\n     y : 50,\n     strokeWidth : 4,\n     stroke : 'black',\n     offsetX : 50,\n     scaleY : 2\n});\n\n// get client rect without think off transformations (position, rotation, scale, offset, etc)\nrect.getClientRect({ skipTransform: true});\n// returns {\n//     x : -2,   // two pixels for stroke / 2\n//     y : -2,\n//     width : 104, // increased by 4 for stroke\n//     height : 104\n//}\n\n// get client rect with transformation applied\nrect.getClientRect();\n// returns Object {x: -2, y: 46, width: 104, height: 208}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "rect with `{x, y, width, height}` properties"
      }
    ],
    "meta": {
      "lineno": 2797,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 645
  },
  {
    "id": "Konva.Stage#on",
    "longname": "Konva.Stage#on",
    "name": "on",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#on",
    "inherited": true,
    "overrides": "Konva.Container#on",
    "description": "bind events to the node. KonvaJS supports mouseover, mousemove,\n mouseout, mouseenter, mouseleave, mousedown, mouseup, wheel, contextmenu, click, dblclick, touchstart, touchmove,\n touchend, tap, dbltap, dragstart, dragmove, and dragend events.\n Pass in a string of events delimited by a space to bind multiple events at once\n such as 'mousedown mouseup mousemove'. Include a namespace to bind an\n event by name such as 'click.foobar'.",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'click', 'mousedown touchstart', 'mousedown.foo touchstart.foo'",
        "name": "evtStr"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The handler function. The first argument of that function is event object. Event object has `target` as main target of the event, `currentTarget` as current node listener and `evt` as native browser event.",
        "name": "handler"
      }
    ],
    "examples": [
      "// add click listener\nnode.on('click', function() {\n  console.log('you clicked me!');\n});\n\n// get the target node\nnode.on('click', function(evt) {\n  console.log(evt.target);\n});\n\n// stop event propagation\nnode.on('click', function(evt) {\n  evt.cancelBubble = true;\n});\n\n// bind multiple listeners\nnode.on('click touchstart', function() {\n  console.log('you clicked/touched me!');\n});\n\n// namespace listener\nnode.on('click.foo', function() {\n  console.log('you clicked/touched me!');\n});\n\n// get the event type\nnode.on('click tap', function(evt) {\n  var eventType = evt.type;\n});\n\n// get native event object\nnode.on('click tap', function(evt) {\n  var nativeEvent = evt.evt;\n});\n\n// for change events, get the old and new val\nnode.on('xChange', function(evt) {\n  var oldVal = evt.oldVal;\n  var newVal = evt.newVal;\n});\n\n// get event targets\n// with event delegations\nlayer.on('click', 'Group', function(evt) {\n  var shape = evt.target;\n  var group = evt.currentTarget;\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2919,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 646
  },
  {
    "id": "Konva.Stage#off",
    "longname": "Konva.Stage#off",
    "name": "off",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#off",
    "inherited": true,
    "overrides": "Konva.Container#off",
    "description": "remove event bindings from the node. Pass in a string of\n event types delimmited by a space to remove multiple event\n bindings at once such as 'mousedown mouseup mousemove'.\n include a namespace to remove an event binding by name\n such as 'click.foobar'. If you only give a name like '.foobar',\n all events in that namespace will be removed.",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'click', 'mousedown touchstart', '.foobar'",
        "name": "evtStr"
      }
    ],
    "examples": [
      "// remove listener\nnode.off('click');\n\n// remove multiple listeners\nnode.off('click touchstart');\n\n// remove listener by name\nnode.off('click.foo');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3007,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 647
  },
  {
    "id": "Konva.Stage#remove",
    "longname": "Konva.Stage#remove",
    "name": "remove",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#remove",
    "inherited": true,
    "overrides": "Konva.Container#remove",
    "description": "remove a node from parent, but don't destroy. You can reuse the node later.",
    "memberof": "Konva.Stage",
    "examples": [
      "node.remove();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3088,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 648
  },
  {
    "id": "Konva.Stage#destroy",
    "longname": "Konva.Stage#destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#destroy",
    "inherited": true,
    "overrides": "Konva.Container#destroy",
    "description": "remove and destroy a node. Kill it and delete forever! You should not reuse node after destroy().\nIf the node is a container (Group, Stage or Layer) it will destroy all children too.",
    "memberof": "Konva.Stage",
    "examples": [
      "node.destroy();"
    ],
    "meta": {
      "lineno": 3125,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 649
  },
  {
    "id": "Konva.Stage#getAttr",
    "longname": "Konva.Stage#getAttr",
    "name": "getAttr",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAttr",
    "inherited": true,
    "overrides": "Konva.Container#getAttr",
    "description": "get attr",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "attr"
      }
    ],
    "examples": [
      "var x = node.getAttr('x');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer",
            "String",
            "Object",
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3138,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 650
  },
  {
    "id": "Konva.Stage#getAncestors",
    "longname": "Konva.Stage#getAncestors",
    "name": "getAncestors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAncestors",
    "inherited": true,
    "overrides": "Konva.Container#getAncestors",
    "description": "get ancestors",
    "memberof": "Konva.Stage",
    "examples": [
      "shape.getAncestors().forEach(function(node) {\n  console.log(node.getId());\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3155,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 651
  },
  {
    "id": "Konva.Stage#getAttrs",
    "longname": "Konva.Stage#getAttrs",
    "name": "getAttrs",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAttrs",
    "inherited": true,
    "overrides": "Konva.Container#getAttrs",
    "description": "get attrs object literal",
    "memberof": "Konva.Stage",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3173,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 652
  },
  {
    "id": "Konva.Stage#setAttrs",
    "longname": "Konva.Stage#setAttrs",
    "name": "setAttrs",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#setAttrs",
    "inherited": true,
    "overrides": "Konva.Container#setAttrs",
    "description": "set multiple attrs at once using an object literal",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "object containing key value pairs",
        "name": "config"
      }
    ],
    "examples": [
      "node.setAttrs({\n  x: 5,\n  fill: 'red'\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3182,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 653
  },
  {
    "id": "Konva.Stage#isListening",
    "longname": "Konva.Stage#isListening",
    "name": "isListening",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isListening",
    "inherited": true,
    "overrides": "Konva.Container#isListening",
    "description": "determine if node is listening for events by taking into account ancestors.\n\nParent    | Self      | isListening\nlistening | listening |\n----------+-----------+------------\nT         | T         | T\nT         | F         | F\nF         | T         | F\nF         | F         | F",
    "memberof": "Konva.Stage",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3217,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 654
  },
  {
    "id": "Konva.Stage#isVisible",
    "longname": "Konva.Stage#isVisible",
    "name": "isVisible",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isVisible",
    "inherited": true,
    "overrides": "Konva.Container#isVisible",
    "description": "determine if node is visible by taking into account ancestors.\n\nParent    | Self      | isVisible\nvisible   | visible   |\n----------+-----------+------------\nT         | T         | T\nT         | F         | F\nF         | T         | F\nF         | F         | F",
    "memberof": "Konva.Stage",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3248,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 655
  },
  {
    "id": "Konva.Stage#show",
    "longname": "Konva.Stage#show",
    "name": "show",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#show",
    "inherited": true,
    "overrides": "Konva.Container#show",
    "description": "show node. set visible = true",
    "memberof": "Konva.Stage",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3300,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 656
  },
  {
    "id": "Konva.Stage#hide",
    "longname": "Konva.Stage#hide",
    "name": "hide",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hide",
    "inherited": true,
    "overrides": "Konva.Container#hide",
    "description": "hide node.  Hidden nodes are no longer detectable",
    "memberof": "Konva.Stage",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3310,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 657
  },
  {
    "id": "Konva.Stage#getAbsoluteZIndex",
    "longname": "Konva.Stage#getAbsoluteZIndex",
    "name": "getAbsoluteZIndex",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteZIndex",
    "inherited": true,
    "overrides": "Konva.Container#getAbsoluteZIndex",
    "description": "get absolute z-index which takes into account sibling\n and ancestor indices",
    "memberof": "Konva.Stage",
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3323,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 658
  },
  {
    "id": "Konva.Stage#getDepth",
    "longname": "Konva.Stage#getDepth",
    "name": "getDepth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getDepth",
    "inherited": true,
    "overrides": "Konva.Container#getDepth",
    "description": "get node depth in node tree.  Returns an integer.\n e.g. Stage depth will always be 0.  Layers will always be 1.  Groups and Shapes will always\n be >= 2",
    "memberof": "Konva.Stage",
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3355,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 659
  },
  {
    "id": "Konva.Stage#getRelativePointerPosition",
    "longname": "Konva.Stage#getRelativePointerPosition",
    "name": "getRelativePointerPosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getRelativePointerPosition",
    "inherited": true,
    "overrides": "Konva.Container#getRelativePointerPosition",
    "description": "get position of first pointer (like mouse or first touch) relative to local coordinates of current node",
    "memberof": "Konva.Stage",
    "examples": [
      "// let's think we have a rectangle at position x = 10, y = 10\n// now we clicked at x = 15, y = 15 of the stage\n// if you want to know position of the click, related to the rectangle you can use\nrect.getRelativePointerPosition();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3398,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 660
  },
  {
    "id": "Konva.Stage#getAbsolutePosition",
    "longname": "Konva.Stage#getAbsolutePosition",
    "name": "getAbsolutePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsolutePosition",
    "inherited": true,
    "overrides": "Konva.Container#getAbsolutePosition",
    "description": "get absolute position of a node. That function can be used to calculate absolute position, but relative to any ancestor",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "optional ancestor node",
        "name": "Ancestor"
      }
    ],
    "examples": [
      "// returns absolute position relative to top-left corner of canvas\nnode.getAbsolutePosition();\n\n// calculate absolute position of node, inside stage\n// so stage transforms are ignored\nnode.getAbsolutePosition(stage)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3426,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 661
  },
  {
    "id": "Konva.Stage#move",
    "longname": "Konva.Stage#move",
    "name": "move",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#move",
    "inherited": true,
    "overrides": "Konva.Container#move",
    "description": "move node by an amount relative to its current position",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "change"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "change.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "change.y"
      }
    ],
    "examples": [
      "// move node in x direction by 1px and y direction by 2px\nnode.move({\n  x: 1,\n  y: 2\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3514,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 662
  },
  {
    "id": "Konva.Stage#rotate",
    "longname": "Konva.Stage#rotate",
    "name": "rotate",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#rotate",
    "inherited": true,
    "overrides": "Konva.Container#rotate",
    "description": "rotate node by an amount in degrees relative to its current rotation",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "theta"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3559,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 663
  },
  {
    "id": "Konva.Stage#moveToTop",
    "longname": "Konva.Stage#moveToTop",
    "name": "moveToTop",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveToTop",
    "inherited": true,
    "overrides": "Konva.Container#moveToTop",
    "description": "move node to the top of its siblings",
    "memberof": "Konva.Stage",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3570,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 664
  },
  {
    "id": "Konva.Stage#moveUp",
    "longname": "Konva.Stage#moveUp",
    "name": "moveUp",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveUp",
    "inherited": true,
    "overrides": "Konva.Container#moveUp",
    "description": "move node up",
    "memberof": "Konva.Stage",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "flag is moved or not"
      }
    ],
    "meta": {
      "lineno": 3590,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 665
  },
  {
    "id": "Konva.Stage#moveDown",
    "longname": "Konva.Stage#moveDown",
    "name": "moveDown",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveDown",
    "inherited": true,
    "overrides": "Konva.Container#moveDown",
    "description": "move node down",
    "memberof": "Konva.Stage",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3610,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 666
  },
  {
    "id": "Konva.Stage#moveToBottom",
    "longname": "Konva.Stage#moveToBottom",
    "name": "moveToBottom",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveToBottom",
    "inherited": true,
    "overrides": "Konva.Container#moveToBottom",
    "description": "move node to the bottom of its siblings",
    "memberof": "Konva.Stage",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3630,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 667
  },
  {
    "id": "Konva.Stage#getAbsoluteOpacity",
    "longname": "Konva.Stage#getAbsoluteOpacity",
    "name": "getAbsoluteOpacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteOpacity",
    "inherited": true,
    "overrides": "Konva.Container#getAbsoluteOpacity",
    "description": "get absolute opacity",
    "memberof": "Konva.Stage",
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3668,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 668
  },
  {
    "id": "Konva.Stage#moveTo",
    "longname": "Konva.Stage#moveTo",
    "name": "moveTo",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveTo",
    "inherited": true,
    "overrides": "Konva.Container#moveTo",
    "description": "move node to another container",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Container"
          ]
        },
        "name": "newContainer"
      }
    ],
    "examples": [
      "// move node from current layer into layer2\nnode.moveTo(layer2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3685,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 669
  },
  {
    "id": "Konva.Stage#toObject",
    "longname": "Konva.Stage#toObject",
    "name": "toObject",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toObject",
    "inherited": true,
    "overrides": "Konva.Container#toObject",
    "description": "convert Node into an object for serialization.  Returns an object.",
    "memberof": "Konva.Stage",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3703,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 670
  },
  {
    "id": "Konva.Stage#toJSON",
    "longname": "Konva.Stage#toJSON",
    "name": "toJSON",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toJSON",
    "inherited": true,
    "overrides": "Konva.Container#toJSON",
    "description": "convert Node into a JSON string.  Returns a JSON string.",
    "memberof": "Konva.Stage",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3736,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 671
  },
  {
    "id": "Konva.Stage#getParent",
    "longname": "Konva.Stage#getParent",
    "name": "getParent",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getParent",
    "inherited": true,
    "overrides": "Konva.Container#getParent",
    "description": "get parent container",
    "memberof": "Konva.Stage",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3745,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 672
  },
  {
    "id": "Konva.Stage#findAncestors",
    "longname": "Konva.Stage#findAncestors",
    "name": "findAncestors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#findAncestors",
    "inherited": true,
    "overrides": "Konva.Container#findAncestors",
    "description": "get all ancestors (parent then parent of the parent, etc) of the node",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "selector for search",
        "name": "selector"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "show we think that node is ancestro itself?",
        "name": "includeSelf"
      },
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "optional": true,
        "description": "optional node where we need to stop searching (one of ancestors)",
        "name": "stopNode"
      }
    ],
    "examples": [
      "// get one of the parent group\nvar parentGroups = node.findAncestors('Group');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "[ancestors]"
      }
    ],
    "meta": {
      "lineno": 3754,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 673
  },
  {
    "id": "Konva.Stage#findAncestor",
    "longname": "Konva.Stage#findAncestor",
    "name": "findAncestor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#findAncestor",
    "inherited": true,
    "overrides": "Konva.Container#findAncestor",
    "description": "get ancestor (parent or parent of the parent, etc) of the node that match passed selector",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "selector for search",
        "name": "selector"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "show we think that node is ancestro itself?",
        "name": "includeSelf"
      },
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "optional": true,
        "description": "optional node where we need to stop searching (one of ancestors)",
        "name": "stopNode"
      }
    ],
    "examples": [
      "// get one of the parent group\nvar group = node.findAncestors('.mygroup');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "description": "ancestor"
      }
    ],
    "meta": {
      "lineno": 3786,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 674
  },
  {
    "id": "Konva.Stage#getLayer",
    "longname": "Konva.Stage#getLayer",
    "name": "getLayer",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getLayer",
    "inherited": true,
    "overrides": "Konva.Container#getLayer",
    "description": "get layer ancestor",
    "memberof": "Konva.Stage",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Layer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3837,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 675
  },
  {
    "id": "Konva.Stage#getStage",
    "longname": "Konva.Stage#getStage",
    "name": "getStage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getStage",
    "inherited": true,
    "overrides": "Konva.Container#getStage",
    "description": "get stage ancestor",
    "memberof": "Konva.Stage",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Stage"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3847,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 676
  },
  {
    "id": "Konva.Stage#fire",
    "longname": "Konva.Stage#fire",
    "name": "fire",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#fire",
    "inherited": true,
    "overrides": "Konva.Container#fire",
    "description": "fire event",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "event type.  can be a regular event, like click, mouseover, or mouseout, or it can be a custom event, like myCustomEvent",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "Event"
          ]
        },
        "optional": true,
        "description": "event object",
        "name": "evt"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "setting the value to false, or leaving it undefined, will result in the event\n not bubbling.  Setting the value to true will result in the event bubbling.",
        "name": "bubble"
      }
    ],
    "examples": [
      "// manually fire click event\nnode.fire('click');\n\n// fire custom event\nnode.fire('foo');\n\n// fire custom event with custom event object\nnode.fire('foo', {\n  bar: 10\n});\n\n// fire click event that bubbles\nnode.fire('click', null, true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3865,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 677
  },
  {
    "id": "Konva.Stage#getAbsoluteTransform",
    "longname": "Konva.Stage#getAbsoluteTransform",
    "name": "getAbsoluteTransform",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteTransform",
    "inherited": true,
    "overrides": "Konva.Container#getAbsoluteTransform",
    "description": "get absolute transform of the node which takes into\n account its ancestor transforms",
    "memberof": "Konva.Stage",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3901,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 678
  },
  {
    "id": "Konva.Stage#getAbsoluteScale",
    "longname": "Konva.Stage#getAbsoluteScale",
    "name": "getAbsoluteScale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteScale",
    "inherited": true,
    "overrides": "Konva.Container#getAbsoluteScale",
    "description": "get absolute scale of the node which takes into\n account its ancestor scales",
    "memberof": "Konva.Stage",
    "examples": [
      "// get absolute scale x\nvar scaleX = node.getAbsoluteScale().x;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3961,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 679
  },
  {
    "id": "Konva.Stage#getAbsoluteRotation",
    "longname": "Konva.Stage#getAbsoluteRotation",
    "name": "getAbsoluteRotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteRotation",
    "inherited": true,
    "overrides": "Konva.Container#getAbsoluteRotation",
    "description": "get absolute rotation of the node which takes into\n account its ancestor rotations",
    "memberof": "Konva.Stage",
    "examples": [
      "// get absolute rotation\nvar rotation = node.getAbsoluteRotation();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3989,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 680
  },
  {
    "id": "Konva.Stage#getTransform",
    "longname": "Konva.Stage#getTransform",
    "name": "getTransform",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getTransform",
    "inherited": true,
    "overrides": "Konva.Container#getTransform",
    "description": "get transform of the node",
    "memberof": "Konva.Stage",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4009,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 681
  },
  {
    "id": "Konva.Stage#clone",
    "longname": "Konva.Stage#clone",
    "name": "clone",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#clone",
    "inherited": true,
    "overrides": "Konva.Container#clone",
    "description": "clone node.  Returns a new Node instance with identical attributes.  You can also override\n the node properties with an object literal, enabling you to use an existing node as a template\n for another node",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "override attrs",
        "name": "obj"
      }
    ],
    "examples": [
      "// simple clone\nvar clone = node.clone();\n\n// clone a node and override the x position\nvar clone = rect.clone({\n  x: 5\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4044,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 682
  },
  {
    "id": "Konva.Stage#toCanvas",
    "longname": "Konva.Stage#toCanvas",
    "name": "toCanvas",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toCanvas",
    "inherited": true,
    "overrides": "Konva.Container#toCanvas",
    "description": "converts node into an canvas element.",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output canvas. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var canvas = node.toCanvas();"
    ],
    "meta": {
      "lineno": 4119,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 683
  },
  {
    "id": "Konva.Stage#toDataURL",
    "longname": "Konva.Stage#toDataURL",
    "name": "toDataURL",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toDataURL",
    "inherited": true,
    "overrides": "Konva.Container#toDataURL",
    "description": "Creates a composite data URL (base64 string). If MIME type is not\nspecified, then \"image/png\" will result. For \"image/jpeg\", specify a quality\nlevel as quality (range 0.0 - 1.0)",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"image/png\" or \"image/jpeg\".\n \"image/png\" is the default",
        "name": "config.mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "jpeg quality.  If using an \"image/jpeg\" mimeType,\n you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n is very high quality",
        "name": "config.quality"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output image url. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4140,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 684
  },
  {
    "id": "Konva.Stage#toImage",
    "longname": "Konva.Stage#toImage",
    "name": "toImage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toImage",
    "inherited": true,
    "overrides": "Konva.Container#toImage",
    "description": "converts node into an image.  Since the toImage\n method is asynchronous, the resulting image can only be retrieved from the config callback\n or the returned Promise.  toImage is most commonly used\n to cache complex drawings as an image so that they don't have to constantly be redrawn",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"image/png\" or \"image/jpeg\".\n \"image/png\" is the default",
        "name": "config.mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "jpeg quality.  If using an \"image/jpeg\" mimeType,\n you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n is very high quality",
        "name": "config.quality"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output image. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var image = node.toImage({\n  callback(img) {\n    // do stuff with img\n  }\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Image>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4172,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 685
  },
  {
    "id": "Konva.Stage#toBlob",
    "longname": "Konva.Stage#toBlob",
    "name": "toBlob",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toBlob",
    "inherited": true,
    "overrides": "Konva.Container#toBlob",
    "description": "Converts node into a blob.  Since the toBlob method is asynchronous,\n the resulting blob can only be retrieved from the config callback\n or the returned Promise.",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output canvas. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var blob = await node.toBlob({});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Blob>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4219,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 686
  },
  {
    "id": "Konva.Stage#getClassName",
    "longname": "Konva.Stage#getClassName",
    "name": "getClassName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getClassName",
    "inherited": true,
    "overrides": "Konva.Container#getClassName",
    "description": "get class name, which may return Stage, Layer, Group, or shape class names like Rect, Circle, Text, etc.",
    "memberof": "Konva.Stage",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4267,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 687
  },
  {
    "id": "Konva.Stage#getType",
    "longname": "Konva.Stage#getType",
    "name": "getType",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getType",
    "inherited": true,
    "overrides": "Konva.Container#getType",
    "description": "get the node type, which may return Stage, Layer, Group, or Shape",
    "memberof": "Konva.Stage",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4276,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 688
  },
  {
    "id": "Konva.Stage#addName",
    "longname": "Konva.Stage#addName",
    "name": "addName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#addName",
    "inherited": true,
    "overrides": "Konva.Container#addName",
    "description": "add name to node",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red');\nnode.addName('selected');\nnode.name(); // return 'red selected'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4324,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 689
  },
  {
    "id": "Konva.Stage#hasName",
    "longname": "Konva.Stage#hasName",
    "name": "hasName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hasName",
    "inherited": true,
    "overrides": "Konva.Container#hasName",
    "description": "check is node has name",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red');\nnode.hasName('red');   // return true\nnode.hasName('selected'); // return false\nnode.hasName(''); // return false"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4343,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 690
  },
  {
    "id": "Konva.Stage#removeName",
    "longname": "Konva.Stage#removeName",
    "name": "removeName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#removeName",
    "inherited": true,
    "overrides": "Konva.Container#removeName",
    "description": "remove name from node",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red selected');\nnode.removeName('selected');\nnode.hasName('selected'); // return false\nnode.name(); // return 'red'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4367,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 691
  },
  {
    "id": "Konva.Stage#setAttr",
    "longname": "Konva.Stage#setAttr",
    "name": "setAttr",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#setAttr",
    "inherited": true,
    "overrides": "Konva.Container#setAttr",
    "description": "set attr",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "attr"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "name": "val"
      }
    ],
    "examples": [
      "node.setAttr('x', 5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4388,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 692
  },
  {
    "id": "Konva.Stage#draw",
    "longname": "Konva.Stage#draw",
    "name": "draw",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#draw",
    "inherited": true,
    "overrides": "Konva.Container#draw",
    "description": "draw both scene and hit graphs.  If the node being drawn is the stage, all of the layers will be cleared and redrawn",
    "memberof": "Konva.Stage",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4511,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 693
  },
  {
    "id": "Konva.Stage#startDrag",
    "longname": "Konva.Stage#startDrag",
    "name": "startDrag",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#startDrag",
    "inherited": true,
    "overrides": "Konva.Container#startDrag",
    "description": "initiate drag and drop.",
    "memberof": "Konva.Stage",
    "meta": {
      "lineno": 4544,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 694
  },
  {
    "id": "Konva.Stage#stopDrag",
    "longname": "Konva.Stage#stopDrag",
    "name": "stopDrag",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#stopDrag",
    "inherited": true,
    "overrides": "Konva.Container#stopDrag",
    "description": "stop drag and drop",
    "memberof": "Konva.Stage",
    "meta": {
      "lineno": 4590,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 695
  },
  {
    "id": "Konva.Stage#isDragging",
    "longname": "Konva.Stage#isDragging",
    "name": "isDragging",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isDragging",
    "inherited": true,
    "overrides": "Konva.Container#isDragging",
    "description": "determine if node is currently in drag and drop mode",
    "memberof": "Konva.Stage",
    "meta": {
      "lineno": 4607,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 696
  },
  {
    "id": "Konva.Stage#isClientRectOnScreen",
    "longname": "Konva.Stage#isClientRectOnScreen",
    "name": "isClientRectOnScreen",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isClientRectOnScreen",
    "inherited": true,
    "overrides": "Konva.Container#isClientRectOnScreen",
    "description": "determine if node (at least partially) is currently in user-visible area",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Number",
            "Object"
          ]
        },
        "description": "optional margin in pixels",
        "name": "margin"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "margin.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "margin.y"
      }
    ],
    "examples": [
      "// get index\n// default calculations\nvar isOnScreen = node.isClientRectOnScreen()\n// increase object size (or screen size) for cases when objects close to the screen still need to be marked as \"visible\"\nvar isOnScreen = node.isClientRectOnScreen({ x: stage.width(), y: stage.height() })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4671,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 697
  },
  {
    "id": "Konva.Stage#zIndex",
    "longname": "Konva.Stage#zIndex",
    "name": "zIndex",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#zIndex",
    "inherited": true,
    "overrides": "Konva.Container#zIndex",
    "description": "get/set zIndex relative to the node's siblings who share the same parent.\nPlease remember that zIndex is not absolute (like in CSS). It is relative to parent element only.",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "index"
      }
    ],
    "examples": [
      "// get index\nvar index = node.zIndex();\n\n// set index\nnode.zIndex(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4764,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 698
  },
  {
    "id": "Konva.Stage#absolutePosition",
    "longname": "Konva.Stage#absolutePosition",
    "name": "absolutePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#absolutePosition",
    "inherited": true,
    "overrides": "Konva.Container#absolutePosition",
    "description": "get/set node absolute position",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "// get position\nvar position = node.absolutePosition();\n\n// set position\nnode.absolutePosition({\n  x: 5,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4779,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 699
  },
  {
    "id": "Konva.Stage#position",
    "longname": "Konva.Stage#position",
    "name": "position",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#position",
    "inherited": true,
    "overrides": "Konva.Container#position",
    "description": "get/set node position relative to parent",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "// get position\nvar position = node.position();\n\n// set position\nnode.position({\n  x: 5,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4799,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 700
  },
  {
    "id": "Konva.Stage#x",
    "longname": "Konva.Stage#x",
    "name": "x",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#x",
    "inherited": true,
    "overrides": "Konva.Container#x",
    "description": "get/set x position",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get x\nvar x = node.x();\n\n// set x\nnode.x(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4818,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 701
  },
  {
    "id": "Konva.Stage#y",
    "longname": "Konva.Stage#y",
    "name": "y",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#y",
    "inherited": true,
    "overrides": "Konva.Container#y",
    "description": "get/set y position",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get y\nvar y = node.y();\n\n// set y\nnode.y(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4832,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 702
  },
  {
    "id": "Konva.Stage#globalCompositeOperation",
    "longname": "Konva.Stage#globalCompositeOperation",
    "name": "globalCompositeOperation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#globalCompositeOperation",
    "inherited": true,
    "overrides": "Konva.Container#globalCompositeOperation",
    "description": "get/set globalCompositeOperation of a node. globalCompositeOperation DOESN'T affect hit graph of nodes. So they are still trigger to events as they have default \"source-over\" globalCompositeOperation.",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "type"
      }
    ],
    "examples": [
      "// get globalCompositeOperation\nvar globalCompositeOperation = shape.globalCompositeOperation();\n\n// set globalCompositeOperation\nshape.globalCompositeOperation('source-in');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4846,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 703
  },
  {
    "id": "Konva.Stage#opacity",
    "longname": "Konva.Stage#opacity",
    "name": "opacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#opacity",
    "inherited": true,
    "overrides": "Konva.Container#opacity",
    "description": "get/set opacity.  Opacity values range from 0 to 1.\n A node with an opacity of 0 is fully transparent, and a node\n with an opacity of 1 is fully opaque",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "opacity"
      }
    ],
    "examples": [
      "// get opacity\nvar opacity = node.opacity();\n\n// set opacity\nnode.opacity(0.5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4860,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 704
  },
  {
    "id": "Konva.Stage#name",
    "longname": "Konva.Stage#name",
    "name": "name",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#name",
    "inherited": true,
    "overrides": "Konva.Container#name",
    "description": "get/set name.",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "// get name\nvar name = node.name();\n\n// set name\nnode.name('foo');\n\n// also node may have multiple names (as css classes)\nnode.name('foo bar');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4876,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 705
  },
  {
    "id": "Konva.Stage#id",
    "longname": "Konva.Stage#id",
    "name": "id",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#id",
    "inherited": true,
    "overrides": "Konva.Container#id",
    "description": "get/set id. Id is global for whole page.",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "id"
      }
    ],
    "examples": [
      "// get id\nvar name = node.id();\n\n// set id\nnode.id('foo');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4893,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 706
  },
  {
    "id": "Konva.Stage#rotation",
    "longname": "Konva.Stage#rotation",
    "name": "rotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#rotation",
    "inherited": true,
    "overrides": "Konva.Container#rotation",
    "description": "get/set rotation in degrees",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get rotation in degrees\nvar rotation = node.rotation();\n\n// set rotation in degrees\nnode.rotation(45);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4907,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 707
  },
  {
    "id": "Konva.Stage#scale",
    "longname": "Konva.Stage#scale",
    "name": "scale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scale",
    "inherited": true,
    "overrides": "Konva.Container#scale",
    "description": "get/set scale",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.y"
      }
    ],
    "examples": [
      "// get scale\nvar scale = node.scale();\n\n// set scale\nshape.scale({\n  x: 2,\n  y: 3\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4921,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 708
  },
  {
    "id": "Konva.Stage#scaleX",
    "longname": "Konva.Stage#scaleX",
    "name": "scaleX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scaleX",
    "inherited": true,
    "overrides": "Konva.Container#scaleX",
    "description": "get/set scale x",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get scale x\nvar scaleX = node.scaleX();\n\n// set scale x\nnode.scaleX(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4940,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 709
  },
  {
    "id": "Konva.Stage#scaleY",
    "longname": "Konva.Stage#scaleY",
    "name": "scaleY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scaleY",
    "inherited": true,
    "overrides": "Konva.Container#scaleY",
    "description": "get/set scale y",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get scale y\nvar scaleY = node.scaleY();\n\n// set scale y\nnode.scaleY(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4954,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 710
  },
  {
    "id": "Konva.Stage#skew",
    "longname": "Konva.Stage#skew",
    "name": "skew",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skew",
    "inherited": true,
    "overrides": "Konva.Container#skew",
    "description": "get/set skew",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "skew"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "skew.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "skew.y"
      }
    ],
    "examples": [
      "// get skew\nvar skew = node.skew();\n\n// set skew\nnode.skew({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4968,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 711
  },
  {
    "id": "Konva.Stage#skewX",
    "longname": "Konva.Stage#skewX",
    "name": "skewX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skewX",
    "inherited": true,
    "overrides": "Konva.Container#skewX",
    "description": "get/set skew x",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get skew x\nvar skewX = node.skewX();\n\n// set skew x\nnode.skewX(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4987,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 712
  },
  {
    "id": "Konva.Stage#skewY",
    "longname": "Konva.Stage#skewY",
    "name": "skewY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skewY",
    "inherited": true,
    "overrides": "Konva.Container#skewY",
    "description": "get/set skew y",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get skew y\nvar skewY = node.skewY();\n\n// set skew y\nnode.skewY(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5001,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 713
  },
  {
    "id": "Konva.Stage#offsetX",
    "longname": "Konva.Stage#offsetX",
    "name": "offsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#offsetX",
    "inherited": true,
    "overrides": "Konva.Container#offsetX",
    "description": "get/set offset x",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get offset x\nvar offsetX = node.offsetX();\n\n// set offset x\nnode.offsetX(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5033,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 714
  },
  {
    "id": "Konva.Stage#offsetY",
    "longname": "Konva.Stage#offsetY",
    "name": "offsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#offsetY",
    "inherited": true,
    "overrides": "Konva.Container#offsetY",
    "description": "get/set offset y",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get offset y\nvar offsetY = node.offsetY();\n\n// set offset y\nnode.offsetY(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5047,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 715
  },
  {
    "id": "Konva.Stage#dragDistance",
    "longname": "Konva.Stage#dragDistance",
    "name": "dragDistance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#dragDistance",
    "inherited": true,
    "overrides": "Konva.Container#dragDistance",
    "description": "get/set drag distance",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "distance"
      }
    ],
    "examples": [
      "// get drag distance\nvar dragDistance = node.dragDistance();\n\n// set distance\n// node starts dragging only if pointer moved more then 3 pixels\nnode.dragDistance(3);\n// or set globally\nKonva.dragDistance = 3;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5061,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 716
  },
  {
    "id": "Konva.Stage#width",
    "longname": "Konva.Stage#width",
    "name": "width",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#width",
    "inherited": true,
    "overrides": "Konva.Container#width",
    "description": "get/set width",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "width"
      }
    ],
    "examples": [
      "// get width\nvar width = node.width();\n\n// set width\nnode.width(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5078,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 717
  },
  {
    "id": "Konva.Stage#height",
    "longname": "Konva.Stage#height",
    "name": "height",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#height",
    "inherited": true,
    "overrides": "Konva.Container#height",
    "description": "get/set height",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "height"
      }
    ],
    "examples": [
      "// get height\nvar height = node.height();\n\n// set height\nnode.height(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5092,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 718
  },
  {
    "id": "Konva.Stage#listening",
    "longname": "Konva.Stage#listening",
    "name": "listening",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#listening",
    "inherited": true,
    "overrides": "Konva.Container#listening",
    "description": "get/set listening attr.  If you need to determine if a node is listening or not\n  by taking into account its parents, use the isListening() method\n  nodes with listening set to false will not be detected in hit graph\n  so they will be ignored in container.getIntersection() method",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "Can be true, or false.  The default is true.",
        "name": "listening"
      }
    ],
    "examples": [
      "// get listening attr\nvar listening = node.listening();\n\n// stop listening for events, remove node and all its children from hit graph\nnode.listening(false);\n\n// listen to events according to the parent\nnode.listening(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5106,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 719
  },
  {
    "id": "Konva.Stage#preventDefault",
    "longname": "Konva.Stage#preventDefault",
    "name": "preventDefault",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#preventDefault",
    "inherited": true,
    "overrides": "Konva.Container#preventDefault",
    "description": "get/set preventDefault\nBy default all shapes will prevent default behavior\nof a browser on a pointer move or tap.\nthat will prevent native scrolling when you are trying to drag&drop a node\nbut sometimes you may need to enable default actions\nin that case you can set the property to false",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "preventDefault"
      }
    ],
    "examples": [
      "// get preventDefault\nvar shouldPrevent = shape.preventDefault();\n\n// set preventDefault\nshape.preventDefault(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5125,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 720
  },
  {
    "id": "Konva.Stage#filters",
    "longname": "Konva.Stage#filters",
    "name": "filters",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#filters",
    "inherited": true,
    "overrides": "Konva.Container#filters",
    "description": "get/set filters.  Filters are applied to cached canvases",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "array of filters",
        "name": "filters"
      }
    ],
    "examples": [
      "// get filters\nvar filters = node.filters();\n\n// set a single filter\nnode.cache();\nnode.filters([Konva.Filters.Blur]);\n\n// set multiple filters\nnode.cache();\nnode.filters([\n  Konva.Filters.Blur,\n  Konva.Filters.Sepia,\n  Konva.Filters.Invert\n]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5148,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 721
  },
  {
    "id": "Konva.Stage#visible",
    "longname": "Konva.Stage#visible",
    "name": "visible",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#visible",
    "inherited": true,
    "overrides": "Konva.Container#visible",
    "description": "get/set visible attr.  Can be true, or false.  The default is true.\n  If you need to determine if a node is visible or not\n  by taking into account its parents, use the isVisible() method",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "visible"
      }
    ],
    "examples": [
      "// get visible attr\nvar visible = node.visible();\n\n// make invisible\nnode.visible(false);\n\n// make visible (according to the parent)\nnode.visible(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5171,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 722
  },
  {
    "id": "Konva.Stage#transformsEnabled",
    "longname": "Konva.Stage#transformsEnabled",
    "name": "transformsEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#transformsEnabled",
    "inherited": true,
    "overrides": "Konva.Container#transformsEnabled",
    "description": "get/set transforms that are enabled.  Can be \"all\", \"none\", or \"position\".  The default\n is \"all\"",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// enable position transform only to improve draw performance\nnode.transformsEnabled('position');\n\n// enable all transforms\nnode.transformsEnabled('all');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5191,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 723
  },
  {
    "id": "Konva.Stage#size",
    "longname": "Konva.Stage#size",
    "name": "size",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#size",
    "inherited": true,
    "overrides": "Konva.Container#size",
    "description": "get/set node size",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "size"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size.height"
      }
    ],
    "examples": [
      "// get node size\nvar size = node.size();\nvar width = size.width;\nvar height = size.height;\n\n// set size\nnode.size({\n  width: 100,\n  height: 200\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5205,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 724
  },
  {
    "id": "Konva.Stage#dragBoundFunc",
    "longname": "Konva.Stage#dragBoundFunc",
    "name": "dragBoundFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#dragBoundFunc",
    "inherited": true,
    "overrides": "Konva.Container#dragBoundFunc",
    "description": "get/set drag bound function.  This is used to override the default\n drag and drop position.",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "name": "dragBoundFunc"
      }
    ],
    "examples": [
      "// get drag bound function\nvar dragBoundFunc = node.dragBoundFunc();\n\n// create vertical drag and drop\nnode.dragBoundFunc(function(pos){\n  // important pos - is absolute position of the node\n  // you should return absolute position too\n  return {\n    x: this.absolutePosition().x,\n    y: pos.y\n  };\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5226,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 725
  },
  {
    "id": "Konva.Stage#draggable",
    "longname": "Konva.Stage#draggable",
    "name": "draggable",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#draggable",
    "inherited": true,
    "overrides": "Konva.Container#draggable",
    "description": "get/set draggable flag",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "draggable"
      }
    ],
    "examples": [
      "// get draggable flag\nvar draggable = node.draggable();\n\n// enable drag and drop\nnode.draggable(true);\n\n// disable drag and drop\nnode.draggable(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5248,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 726
  },
  {
    "id": "Konva.Stage#to",
    "longname": "Konva.Stage#to",
    "name": "to",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#to",
    "inherited": true,
    "overrides": "Konva.Container#to",
    "description": "Tween node properties. Shorter usage of {@link Konva.Tween} object.",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "tween params",
        "name": "params"
      }
    ],
    "examples": [
      "circle.to({\n  x : 50,\n  duration : 0.5,\n  onUpdate: () => console.log('props updated'),\n  onFinish: () => console.log('finished'),\n});"
    ],
    "meta": {
      "lineno": 9588,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 727
  },
  {
    "id": "Konva.Stage#blurRadius",
    "longname": "Konva.Stage#blurRadius",
    "name": "blurRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#blurRadius",
    "inherited": true,
    "overrides": "Konva.Container#blurRadius",
    "description": "get/set blur radius. Use with {@link Konva.Filters.Blur} filter",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "radius"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17517,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 728
  },
  {
    "id": "Konva.Stage#brightness",
    "longname": "Konva.Stage#brightness",
    "name": "brightness",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#brightness",
    "inherited": true,
    "overrides": "Konva.Container#brightness",
    "description": "get/set filter brightness.  The brightness is a number between -1 and 1.&nbsp; Positive values\n brighten the pixels and negative values darken them. Use with {@link Konva.Filters.Brighten} filter.",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between -1 and 1",
        "name": "brightness"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17547,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 729
  },
  {
    "id": "Konva.Stage#contrast",
    "longname": "Konva.Stage#contrast",
    "name": "contrast",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#contrast",
    "inherited": true,
    "overrides": "Konva.Container#contrast",
    "description": "get/set filter contrast.  The contrast is a number between -100 and 100.\nUse with {@link Konva.Filters.Contrast} filter.",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between -100 and 100",
        "name": "contrast"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17600,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 730
  },
  {
    "id": "Konva.Stage#embossStrength",
    "longname": "Konva.Stage#embossStrength",
    "name": "embossStrength",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossStrength",
    "inherited": true,
    "overrides": "Konva.Container#embossStrength",
    "description": "get/set emboss strength. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1.  Default is 0.5",
        "name": "level"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17725,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 731
  },
  {
    "id": "Konva.Stage#embossWhiteLevel",
    "longname": "Konva.Stage#embossWhiteLevel",
    "name": "embossWhiteLevel",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossWhiteLevel",
    "inherited": true,
    "overrides": "Konva.Container#embossWhiteLevel",
    "description": "get/set emboss white level. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1.  Default is 0.5",
        "name": "embossWhiteLevel"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17733,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 732
  },
  {
    "id": "Konva.Stage#embossDirection",
    "longname": "Konva.Stage#embossDirection",
    "name": "embossDirection",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossDirection",
    "inherited": true,
    "overrides": "Konva.Container#embossDirection",
    "description": "get/set emboss direction. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "can be top-left, top, top-right, right, bottom-right, bottom, bottom-left or left\n  The default is top-left",
        "name": "embossDirection"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17741,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 733
  },
  {
    "id": "Konva.Stage#embossBlend",
    "longname": "Konva.Stage#embossBlend",
    "name": "embossBlend",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossBlend",
    "inherited": true,
    "overrides": "Konva.Container#embossBlend",
    "description": "get/set emboss blend. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "embossBlend"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17750,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 734
  },
  {
    "id": "Konva.Stage#enhance",
    "longname": "Konva.Stage#enhance",
    "name": "enhance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#enhance",
    "inherited": true,
    "overrides": "Konva.Container#enhance",
    "description": "get/set enhance. Use with {@link Konva.Filters.Enhance} filter. -1 to 1 values",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Float"
          ]
        },
        "name": "amount"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Float"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17864,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 735
  },
  {
    "id": "Konva.Stage#hue",
    "longname": "Konva.Stage#hue",
    "name": "hue",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hue",
    "inherited": true,
    "overrides": "Konva.Container#hue",
    "description": "get/set hsv hue in degrees. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between 0 and 359",
        "name": "hue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17896,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 736
  },
  {
    "id": "Konva.Stage#saturation",
    "longname": "Konva.Stage#saturation",
    "name": "saturation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#saturation",
    "inherited": true,
    "overrides": "Konva.Container#saturation",
    "description": "get/set hsv saturation. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the saturation, 1.0 doubles, etc..",
        "name": "saturation"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17904,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 737
  },
  {
    "id": "Konva.Stage#luminance",
    "longname": "Konva.Stage#luminance",
    "name": "luminance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#luminance",
    "inherited": true,
    "overrides": "Konva.Container#luminance",
    "description": "get/set hsl luminance. Use with {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "from -1 to 1",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17912,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 738
  },
  {
    "id": "Konva.Stage#value",
    "longname": "Konva.Stage#value",
    "name": "value",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#value",
    "inherited": true,
    "overrides": "Konva.Container#value",
    "description": "get/set hsv value. Use with {@link Konva.Filters.HSV} filter.",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the value, 1.0 doubles, etc..",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18018,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 739
  },
  {
    "id": "Konva.Stage#kaleidoscopePower",
    "longname": "Konva.Stage#kaleidoscopePower",
    "name": "kaleidoscopePower",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#kaleidoscopePower",
    "inherited": true,
    "overrides": "Konva.Container#kaleidoscopePower",
    "description": "get/set kaleidoscope power. Use with {@link Konva.Filters.Kaleidoscope} filter.",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "of kaleidoscope",
        "name": "power"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18243,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 740
  },
  {
    "id": "Konva.Stage#kaleidoscopeAngle",
    "longname": "Konva.Stage#kaleidoscopeAngle",
    "name": "kaleidoscopeAngle",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#kaleidoscopeAngle",
    "inherited": true,
    "overrides": "Konva.Container#kaleidoscopeAngle",
    "description": "get/set kaleidoscope angle. Use with {@link Konva.Filters.Kaleidoscope} filter.",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "degrees"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18251,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 741
  },
  {
    "id": "Konva.Stage#noise",
    "longname": "Konva.Stage#noise",
    "name": "noise",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#noise",
    "inherited": true,
    "overrides": "Konva.Container#noise",
    "description": "get/set noise amount.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Noise} filter.",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "noise"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18437,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 742
  },
  {
    "id": "Konva.Stage#pixelSize",
    "longname": "Konva.Stage#pixelSize",
    "name": "pixelSize",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#pixelSize",
    "inherited": true,
    "overrides": "Konva.Container#pixelSize",
    "description": "get/set pixel size. Use with {@link Konva.Filters.Pixelate} filter.",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "pixelSize"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18522,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 743
  },
  {
    "id": "Konva.Stage#levels",
    "longname": "Konva.Stage#levels",
    "name": "levels",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#levels",
    "inherited": true,
    "overrides": "Konva.Container#levels",
    "description": "get/set levels.  Must be a number between 0 and 1.  Use with {@link Konva.Filters.Posterize} filter.",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1",
        "name": "level"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18552,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 744
  },
  {
    "id": "Konva.Stage#red",
    "longname": "Konva.Stage#red",
    "name": "red",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#red",
    "inherited": true,
    "overrides": "Konva.Container#red",
    "description": "get/set filter red value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "red"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18596,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 745
  },
  {
    "id": "Konva.Stage#green",
    "longname": "Konva.Stage#green",
    "name": "green",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#green",
    "inherited": true,
    "overrides": "Konva.Container#green",
    "description": "get/set filter green value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "green"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18616,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 746
  },
  {
    "id": "Konva.Stage#blue",
    "longname": "Konva.Stage#blue",
    "name": "blue",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#blue",
    "inherited": true,
    "overrides": "Konva.Container#blue",
    "description": "get/set filter blue value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "blue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18625,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 747
  },
  {
    "id": "Konva.Stage#alpha",
    "longname": "Konva.Stage#alpha",
    "name": "alpha",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#alpha",
    "inherited": true,
    "overrides": "Konva.Container#alpha",
    "description": "get/set filter alpha value. Use with {@link Konva.Filters.RGBA} filter.",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Float"
          ]
        },
        "description": "value between 0 and 1",
        "name": "alpha"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Float"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18718,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 748
  },
  {
    "id": "Konva.Stage#threshold",
    "longname": "Konva.Stage#threshold",
    "name": "threshold",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#threshold",
    "inherited": true,
    "overrides": "Konva.Container#threshold",
    "description": "get/set threshold.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Threshold} or {@link Konva.Filters.Mask} filter.",
    "memberof": "Konva.Stage",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "threshold"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18809,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 749
  },
  {
    "id": "Konva.Shape#clearCache",
    "longname": "Konva.Shape#clearCache",
    "name": "clearCache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#clearCache",
    "inherited": true,
    "overrides": "Konva.Node#clearCache",
    "description": "clear cached canvas",
    "memberof": "Konva.Shape",
    "examples": [
      "node.clearCache();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2632,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 750
  },
  {
    "id": "Konva.Shape#cache",
    "longname": "Konva.Shape#cache",
    "name": "cache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#cache",
    "inherited": true,
    "overrides": "Konva.Node#cache",
    "description": "cache node to improve drawing performance, apply filters, or create more accurate\n hit regions. For all basic shapes size of cache canvas will be automatically detected.\n If you need to cache your custom `Konva.Shape` instance you have to pass shape's bounding box\n properties. Look at [https://konvajs.org/docs/performance/Shape_Caching.html](https://konvajs.org/docs/performance/Shape_Caching.html) for more information.",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "increase canvas size by `offset` pixel in all directions.",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "when set to true, a red border will be drawn around the cached\n region for debugging purposes",
        "name": "config.drawBorder"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "change quality (or pixel ratio) of cached image. pixelRatio = 2 will produce 2x sized cache.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "control imageSmoothingEnabled property of created canvas for cache",
        "name": "config.imageSmoothingEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "change quality (or pixel ratio) of cached hit canvas.",
        "name": "config.hitCanvasPixelRatio"
      }
    ],
    "examples": [
      "// cache a shape with the x,y position of the bounding box at the center and\n// the width and height of the bounding box equal to the width and height of\n// the shape obtained from shape.width() and shape.height()\nimage.cache();\n\n// cache a node and define the bounding box position and size\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200\n});\n\n// cache a node and draw a red border around the bounding box\n// for debugging purposes\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200,\n  offset : 10,\n  drawBorder: true\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2650,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 751
  },
  {
    "id": "Konva.Shape#isCached",
    "longname": "Konva.Shape#isCached",
    "name": "isCached",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isCached",
    "inherited": true,
    "overrides": "Konva.Node#isCached",
    "description": "determine if node is currently cached",
    "memberof": "Konva.Shape",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2788,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 752
  },
  {
    "id": "Konva.Shape#getClientRect",
    "longname": "Konva.Shape#getClientRect",
    "name": "getClientRect",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getClientRect",
    "inherited": true,
    "overrides": "Konva.Node#getClientRect",
    "description": "Return client rectangle `{x, y, width, height}` of node. This rectangle also include all styling (strokes, shadows, etc).\nThe purpose of the method is similar to getBoundingClientRect API of the DOM.",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply transform to node for calculating rect?",
        "name": "config.skipTransform"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply shadow to the node for calculating bound box?",
        "name": "config.skipShadow"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply stroke to the node for calculating bound box?",
        "name": "config.skipStroke"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "calculate client rect relative to one of the parents",
        "name": "config.relativeTo"
      }
    ],
    "examples": [
      "var rect = new Konva.Rect({\n     width : 100,\n     height : 100,\n     x : 50,\n     y : 50,\n     strokeWidth : 4,\n     stroke : 'black',\n     offsetX : 50,\n     scaleY : 2\n});\n\n// get client rect without think off transformations (position, rotation, scale, offset, etc)\nrect.getClientRect({ skipTransform: true});\n// returns {\n//     x : -2,   // two pixels for stroke / 2\n//     y : -2,\n//     width : 104, // increased by 4 for stroke\n//     height : 104\n//}\n\n// get client rect with transformation applied\nrect.getClientRect();\n// returns Object {x: -2, y: 46, width: 104, height: 208}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "rect with `{x, y, width, height}` properties"
      }
    ],
    "meta": {
      "lineno": 2797,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 753
  },
  {
    "id": "Konva.Shape#on",
    "longname": "Konva.Shape#on",
    "name": "on",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#on",
    "inherited": true,
    "overrides": "Konva.Node#on",
    "description": "bind events to the node. KonvaJS supports mouseover, mousemove,\n mouseout, mouseenter, mouseleave, mousedown, mouseup, wheel, contextmenu, click, dblclick, touchstart, touchmove,\n touchend, tap, dbltap, dragstart, dragmove, and dragend events.\n Pass in a string of events delimited by a space to bind multiple events at once\n such as 'mousedown mouseup mousemove'. Include a namespace to bind an\n event by name such as 'click.foobar'.",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'click', 'mousedown touchstart', 'mousedown.foo touchstart.foo'",
        "name": "evtStr"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The handler function. The first argument of that function is event object. Event object has `target` as main target of the event, `currentTarget` as current node listener and `evt` as native browser event.",
        "name": "handler"
      }
    ],
    "examples": [
      "// add click listener\nnode.on('click', function() {\n  console.log('you clicked me!');\n});\n\n// get the target node\nnode.on('click', function(evt) {\n  console.log(evt.target);\n});\n\n// stop event propagation\nnode.on('click', function(evt) {\n  evt.cancelBubble = true;\n});\n\n// bind multiple listeners\nnode.on('click touchstart', function() {\n  console.log('you clicked/touched me!');\n});\n\n// namespace listener\nnode.on('click.foo', function() {\n  console.log('you clicked/touched me!');\n});\n\n// get the event type\nnode.on('click tap', function(evt) {\n  var eventType = evt.type;\n});\n\n// get native event object\nnode.on('click tap', function(evt) {\n  var nativeEvent = evt.evt;\n});\n\n// for change events, get the old and new val\nnode.on('xChange', function(evt) {\n  var oldVal = evt.oldVal;\n  var newVal = evt.newVal;\n});\n\n// get event targets\n// with event delegations\nlayer.on('click', 'Group', function(evt) {\n  var shape = evt.target;\n  var group = evt.currentTarget;\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2919,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 754
  },
  {
    "id": "Konva.Shape#off",
    "longname": "Konva.Shape#off",
    "name": "off",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#off",
    "inherited": true,
    "overrides": "Konva.Node#off",
    "description": "remove event bindings from the node. Pass in a string of\n event types delimmited by a space to remove multiple event\n bindings at once such as 'mousedown mouseup mousemove'.\n include a namespace to remove an event binding by name\n such as 'click.foobar'. If you only give a name like '.foobar',\n all events in that namespace will be removed.",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'click', 'mousedown touchstart', '.foobar'",
        "name": "evtStr"
      }
    ],
    "examples": [
      "// remove listener\nnode.off('click');\n\n// remove multiple listeners\nnode.off('click touchstart');\n\n// remove listener by name\nnode.off('click.foo');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3007,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 755
  },
  {
    "id": "Konva.Shape#remove",
    "longname": "Konva.Shape#remove",
    "name": "remove",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#remove",
    "inherited": true,
    "overrides": "Konva.Node#remove",
    "description": "remove a node from parent, but don't destroy. You can reuse the node later.",
    "memberof": "Konva.Shape",
    "examples": [
      "node.remove();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3088,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 756
  },
  {
    "id": "Konva.Shape#destroy",
    "longname": "Konva.Shape#destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#destroy",
    "inherited": true,
    "overrides": "Konva.Node#destroy",
    "description": "remove and destroy a node. Kill it and delete forever! You should not reuse node after destroy().\nIf the node is a container (Group, Stage or Layer) it will destroy all children too.",
    "memberof": "Konva.Shape",
    "examples": [
      "node.destroy();"
    ],
    "meta": {
      "lineno": 3125,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 757
  },
  {
    "id": "Konva.Shape#getAttr",
    "longname": "Konva.Shape#getAttr",
    "name": "getAttr",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAttr",
    "inherited": true,
    "overrides": "Konva.Node#getAttr",
    "description": "get attr",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "attr"
      }
    ],
    "examples": [
      "var x = node.getAttr('x');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer",
            "String",
            "Object",
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3138,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 758
  },
  {
    "id": "Konva.Shape#getAncestors",
    "longname": "Konva.Shape#getAncestors",
    "name": "getAncestors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAncestors",
    "inherited": true,
    "overrides": "Konva.Node#getAncestors",
    "description": "get ancestors",
    "memberof": "Konva.Shape",
    "examples": [
      "shape.getAncestors().forEach(function(node) {\n  console.log(node.getId());\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3155,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 759
  },
  {
    "id": "Konva.Shape#getAttrs",
    "longname": "Konva.Shape#getAttrs",
    "name": "getAttrs",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAttrs",
    "inherited": true,
    "overrides": "Konva.Node#getAttrs",
    "description": "get attrs object literal",
    "memberof": "Konva.Shape",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3173,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 760
  },
  {
    "id": "Konva.Shape#setAttrs",
    "longname": "Konva.Shape#setAttrs",
    "name": "setAttrs",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#setAttrs",
    "inherited": true,
    "overrides": "Konva.Node#setAttrs",
    "description": "set multiple attrs at once using an object literal",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "object containing key value pairs",
        "name": "config"
      }
    ],
    "examples": [
      "node.setAttrs({\n  x: 5,\n  fill: 'red'\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3182,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 761
  },
  {
    "id": "Konva.Shape#isListening",
    "longname": "Konva.Shape#isListening",
    "name": "isListening",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isListening",
    "inherited": true,
    "overrides": "Konva.Node#isListening",
    "description": "determine if node is listening for events by taking into account ancestors.\n\nParent    | Self      | isListening\nlistening | listening |\n----------+-----------+------------\nT         | T         | T\nT         | F         | F\nF         | T         | F\nF         | F         | F",
    "memberof": "Konva.Shape",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3217,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 762
  },
  {
    "id": "Konva.Shape#isVisible",
    "longname": "Konva.Shape#isVisible",
    "name": "isVisible",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isVisible",
    "inherited": true,
    "overrides": "Konva.Node#isVisible",
    "description": "determine if node is visible by taking into account ancestors.\n\nParent    | Self      | isVisible\nvisible   | visible   |\n----------+-----------+------------\nT         | T         | T\nT         | F         | F\nF         | T         | F\nF         | F         | F",
    "memberof": "Konva.Shape",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3248,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 763
  },
  {
    "id": "Konva.Shape#show",
    "longname": "Konva.Shape#show",
    "name": "show",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#show",
    "inherited": true,
    "overrides": "Konva.Node#show",
    "description": "show node. set visible = true",
    "memberof": "Konva.Shape",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3300,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 764
  },
  {
    "id": "Konva.Shape#hide",
    "longname": "Konva.Shape#hide",
    "name": "hide",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hide",
    "inherited": true,
    "overrides": "Konva.Node#hide",
    "description": "hide node.  Hidden nodes are no longer detectable",
    "memberof": "Konva.Shape",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3310,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 765
  },
  {
    "id": "Konva.Shape#getAbsoluteZIndex",
    "longname": "Konva.Shape#getAbsoluteZIndex",
    "name": "getAbsoluteZIndex",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteZIndex",
    "inherited": true,
    "overrides": "Konva.Node#getAbsoluteZIndex",
    "description": "get absolute z-index which takes into account sibling\n and ancestor indices",
    "memberof": "Konva.Shape",
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3323,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 766
  },
  {
    "id": "Konva.Shape#getDepth",
    "longname": "Konva.Shape#getDepth",
    "name": "getDepth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getDepth",
    "inherited": true,
    "overrides": "Konva.Node#getDepth",
    "description": "get node depth in node tree.  Returns an integer.\n e.g. Stage depth will always be 0.  Layers will always be 1.  Groups and Shapes will always\n be >= 2",
    "memberof": "Konva.Shape",
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3355,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 767
  },
  {
    "id": "Konva.Shape#getRelativePointerPosition",
    "longname": "Konva.Shape#getRelativePointerPosition",
    "name": "getRelativePointerPosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getRelativePointerPosition",
    "inherited": true,
    "overrides": "Konva.Node#getRelativePointerPosition",
    "description": "get position of first pointer (like mouse or first touch) relative to local coordinates of current node",
    "memberof": "Konva.Shape",
    "examples": [
      "// let's think we have a rectangle at position x = 10, y = 10\n// now we clicked at x = 15, y = 15 of the stage\n// if you want to know position of the click, related to the rectangle you can use\nrect.getRelativePointerPosition();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3398,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 768
  },
  {
    "id": "Konva.Shape#getAbsolutePosition",
    "longname": "Konva.Shape#getAbsolutePosition",
    "name": "getAbsolutePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsolutePosition",
    "inherited": true,
    "overrides": "Konva.Node#getAbsolutePosition",
    "description": "get absolute position of a node. That function can be used to calculate absolute position, but relative to any ancestor",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "optional ancestor node",
        "name": "Ancestor"
      }
    ],
    "examples": [
      "// returns absolute position relative to top-left corner of canvas\nnode.getAbsolutePosition();\n\n// calculate absolute position of node, inside stage\n// so stage transforms are ignored\nnode.getAbsolutePosition(stage)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3426,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 769
  },
  {
    "id": "Konva.Shape#move",
    "longname": "Konva.Shape#move",
    "name": "move",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#move",
    "inherited": true,
    "overrides": "Konva.Node#move",
    "description": "move node by an amount relative to its current position",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "change"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "change.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "change.y"
      }
    ],
    "examples": [
      "// move node in x direction by 1px and y direction by 2px\nnode.move({\n  x: 1,\n  y: 2\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3514,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 770
  },
  {
    "id": "Konva.Shape#rotate",
    "longname": "Konva.Shape#rotate",
    "name": "rotate",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#rotate",
    "inherited": true,
    "overrides": "Konva.Node#rotate",
    "description": "rotate node by an amount in degrees relative to its current rotation",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "theta"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3559,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 771
  },
  {
    "id": "Konva.Shape#moveToTop",
    "longname": "Konva.Shape#moveToTop",
    "name": "moveToTop",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveToTop",
    "inherited": true,
    "overrides": "Konva.Node#moveToTop",
    "description": "move node to the top of its siblings",
    "memberof": "Konva.Shape",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3570,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 772
  },
  {
    "id": "Konva.Shape#moveUp",
    "longname": "Konva.Shape#moveUp",
    "name": "moveUp",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveUp",
    "inherited": true,
    "overrides": "Konva.Node#moveUp",
    "description": "move node up",
    "memberof": "Konva.Shape",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "flag is moved or not"
      }
    ],
    "meta": {
      "lineno": 3590,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 773
  },
  {
    "id": "Konva.Shape#moveDown",
    "longname": "Konva.Shape#moveDown",
    "name": "moveDown",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveDown",
    "inherited": true,
    "overrides": "Konva.Node#moveDown",
    "description": "move node down",
    "memberof": "Konva.Shape",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3610,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 774
  },
  {
    "id": "Konva.Shape#moveToBottom",
    "longname": "Konva.Shape#moveToBottom",
    "name": "moveToBottom",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveToBottom",
    "inherited": true,
    "overrides": "Konva.Node#moveToBottom",
    "description": "move node to the bottom of its siblings",
    "memberof": "Konva.Shape",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3630,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 775
  },
  {
    "id": "Konva.Shape#getAbsoluteOpacity",
    "longname": "Konva.Shape#getAbsoluteOpacity",
    "name": "getAbsoluteOpacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteOpacity",
    "inherited": true,
    "overrides": "Konva.Node#getAbsoluteOpacity",
    "description": "get absolute opacity",
    "memberof": "Konva.Shape",
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3668,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 776
  },
  {
    "id": "Konva.Shape#moveTo",
    "longname": "Konva.Shape#moveTo",
    "name": "moveTo",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveTo",
    "inherited": true,
    "overrides": "Konva.Node#moveTo",
    "description": "move node to another container",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Container"
          ]
        },
        "name": "newContainer"
      }
    ],
    "examples": [
      "// move node from current layer into layer2\nnode.moveTo(layer2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3685,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 777
  },
  {
    "id": "Konva.Shape#toObject",
    "longname": "Konva.Shape#toObject",
    "name": "toObject",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toObject",
    "inherited": true,
    "overrides": "Konva.Node#toObject",
    "description": "convert Node into an object for serialization.  Returns an object.",
    "memberof": "Konva.Shape",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3703,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 778
  },
  {
    "id": "Konva.Shape#toJSON",
    "longname": "Konva.Shape#toJSON",
    "name": "toJSON",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toJSON",
    "inherited": true,
    "overrides": "Konva.Node#toJSON",
    "description": "convert Node into a JSON string.  Returns a JSON string.",
    "memberof": "Konva.Shape",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3736,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 779
  },
  {
    "id": "Konva.Shape#getParent",
    "longname": "Konva.Shape#getParent",
    "name": "getParent",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getParent",
    "inherited": true,
    "overrides": "Konva.Node#getParent",
    "description": "get parent container",
    "memberof": "Konva.Shape",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3745,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 780
  },
  {
    "id": "Konva.Shape#findAncestors",
    "longname": "Konva.Shape#findAncestors",
    "name": "findAncestors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#findAncestors",
    "inherited": true,
    "overrides": "Konva.Node#findAncestors",
    "description": "get all ancestors (parent then parent of the parent, etc) of the node",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "selector for search",
        "name": "selector"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "show we think that node is ancestro itself?",
        "name": "includeSelf"
      },
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "optional": true,
        "description": "optional node where we need to stop searching (one of ancestors)",
        "name": "stopNode"
      }
    ],
    "examples": [
      "// get one of the parent group\nvar parentGroups = node.findAncestors('Group');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "[ancestors]"
      }
    ],
    "meta": {
      "lineno": 3754,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 781
  },
  {
    "id": "Konva.Shape#findAncestor",
    "longname": "Konva.Shape#findAncestor",
    "name": "findAncestor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#findAncestor",
    "inherited": true,
    "overrides": "Konva.Node#findAncestor",
    "description": "get ancestor (parent or parent of the parent, etc) of the node that match passed selector",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "selector for search",
        "name": "selector"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "show we think that node is ancestro itself?",
        "name": "includeSelf"
      },
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "optional": true,
        "description": "optional node where we need to stop searching (one of ancestors)",
        "name": "stopNode"
      }
    ],
    "examples": [
      "// get one of the parent group\nvar group = node.findAncestors('.mygroup');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "description": "ancestor"
      }
    ],
    "meta": {
      "lineno": 3786,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 782
  },
  {
    "id": "Konva.Shape#getLayer",
    "longname": "Konva.Shape#getLayer",
    "name": "getLayer",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getLayer",
    "inherited": true,
    "overrides": "Konva.Node#getLayer",
    "description": "get layer ancestor",
    "memberof": "Konva.Shape",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Layer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3837,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 783
  },
  {
    "id": "Konva.Shape#getStage",
    "longname": "Konva.Shape#getStage",
    "name": "getStage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getStage",
    "inherited": true,
    "overrides": "Konva.Node#getStage",
    "description": "get stage ancestor",
    "memberof": "Konva.Shape",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Stage"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3847,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 784
  },
  {
    "id": "Konva.Shape#fire",
    "longname": "Konva.Shape#fire",
    "name": "fire",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#fire",
    "inherited": true,
    "overrides": "Konva.Node#fire",
    "description": "fire event",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "event type.  can be a regular event, like click, mouseover, or mouseout, or it can be a custom event, like myCustomEvent",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "Event"
          ]
        },
        "optional": true,
        "description": "event object",
        "name": "evt"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "setting the value to false, or leaving it undefined, will result in the event\n not bubbling.  Setting the value to true will result in the event bubbling.",
        "name": "bubble"
      }
    ],
    "examples": [
      "// manually fire click event\nnode.fire('click');\n\n// fire custom event\nnode.fire('foo');\n\n// fire custom event with custom event object\nnode.fire('foo', {\n  bar: 10\n});\n\n// fire click event that bubbles\nnode.fire('click', null, true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3865,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 785
  },
  {
    "id": "Konva.Shape#getAbsoluteTransform",
    "longname": "Konva.Shape#getAbsoluteTransform",
    "name": "getAbsoluteTransform",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteTransform",
    "inherited": true,
    "overrides": "Konva.Node#getAbsoluteTransform",
    "description": "get absolute transform of the node which takes into\n account its ancestor transforms",
    "memberof": "Konva.Shape",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3901,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 786
  },
  {
    "id": "Konva.Shape#getAbsoluteScale",
    "longname": "Konva.Shape#getAbsoluteScale",
    "name": "getAbsoluteScale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteScale",
    "inherited": true,
    "overrides": "Konva.Node#getAbsoluteScale",
    "description": "get absolute scale of the node which takes into\n account its ancestor scales",
    "memberof": "Konva.Shape",
    "examples": [
      "// get absolute scale x\nvar scaleX = node.getAbsoluteScale().x;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3961,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 787
  },
  {
    "id": "Konva.Shape#getAbsoluteRotation",
    "longname": "Konva.Shape#getAbsoluteRotation",
    "name": "getAbsoluteRotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteRotation",
    "inherited": true,
    "overrides": "Konva.Node#getAbsoluteRotation",
    "description": "get absolute rotation of the node which takes into\n account its ancestor rotations",
    "memberof": "Konva.Shape",
    "examples": [
      "// get absolute rotation\nvar rotation = node.getAbsoluteRotation();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3989,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 788
  },
  {
    "id": "Konva.Shape#getTransform",
    "longname": "Konva.Shape#getTransform",
    "name": "getTransform",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getTransform",
    "inherited": true,
    "overrides": "Konva.Node#getTransform",
    "description": "get transform of the node",
    "memberof": "Konva.Shape",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4009,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 789
  },
  {
    "id": "Konva.Shape#clone",
    "longname": "Konva.Shape#clone",
    "name": "clone",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#clone",
    "inherited": true,
    "overrides": "Konva.Node#clone",
    "description": "clone node.  Returns a new Node instance with identical attributes.  You can also override\n the node properties with an object literal, enabling you to use an existing node as a template\n for another node",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "override attrs",
        "name": "obj"
      }
    ],
    "examples": [
      "// simple clone\nvar clone = node.clone();\n\n// clone a node and override the x position\nvar clone = rect.clone({\n  x: 5\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4044,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 790
  },
  {
    "id": "Konva.Shape#toCanvas",
    "longname": "Konva.Shape#toCanvas",
    "name": "toCanvas",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toCanvas",
    "inherited": true,
    "overrides": "Konva.Node#toCanvas",
    "description": "converts node into an canvas element.",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output canvas. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var canvas = node.toCanvas();"
    ],
    "meta": {
      "lineno": 4119,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 791
  },
  {
    "id": "Konva.Shape#toDataURL",
    "longname": "Konva.Shape#toDataURL",
    "name": "toDataURL",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toDataURL",
    "inherited": true,
    "overrides": "Konva.Node#toDataURL",
    "description": "Creates a composite data URL (base64 string). If MIME type is not\nspecified, then \"image/png\" will result. For \"image/jpeg\", specify a quality\nlevel as quality (range 0.0 - 1.0)",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"image/png\" or \"image/jpeg\".\n \"image/png\" is the default",
        "name": "config.mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "jpeg quality.  If using an \"image/jpeg\" mimeType,\n you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n is very high quality",
        "name": "config.quality"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output image url. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4140,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 792
  },
  {
    "id": "Konva.Shape#toImage",
    "longname": "Konva.Shape#toImage",
    "name": "toImage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toImage",
    "inherited": true,
    "overrides": "Konva.Node#toImage",
    "description": "converts node into an image.  Since the toImage\n method is asynchronous, the resulting image can only be retrieved from the config callback\n or the returned Promise.  toImage is most commonly used\n to cache complex drawings as an image so that they don't have to constantly be redrawn",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"image/png\" or \"image/jpeg\".\n \"image/png\" is the default",
        "name": "config.mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "jpeg quality.  If using an \"image/jpeg\" mimeType,\n you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n is very high quality",
        "name": "config.quality"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output image. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var image = node.toImage({\n  callback(img) {\n    // do stuff with img\n  }\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Image>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4172,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 793
  },
  {
    "id": "Konva.Shape#toBlob",
    "longname": "Konva.Shape#toBlob",
    "name": "toBlob",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toBlob",
    "inherited": true,
    "overrides": "Konva.Node#toBlob",
    "description": "Converts node into a blob.  Since the toBlob method is asynchronous,\n the resulting blob can only be retrieved from the config callback\n or the returned Promise.",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output canvas. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var blob = await node.toBlob({});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Blob>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4219,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 794
  },
  {
    "id": "Konva.Shape#getClassName",
    "longname": "Konva.Shape#getClassName",
    "name": "getClassName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getClassName",
    "inherited": true,
    "overrides": "Konva.Node#getClassName",
    "description": "get class name, which may return Stage, Layer, Group, or shape class names like Rect, Circle, Text, etc.",
    "memberof": "Konva.Shape",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4267,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 795
  },
  {
    "id": "Konva.Shape#getType",
    "longname": "Konva.Shape#getType",
    "name": "getType",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getType",
    "inherited": true,
    "overrides": "Konva.Node#getType",
    "description": "get the node type, which may return Stage, Layer, Group, or Shape",
    "memberof": "Konva.Shape",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4276,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 796
  },
  {
    "id": "Konva.Shape#addName",
    "longname": "Konva.Shape#addName",
    "name": "addName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#addName",
    "inherited": true,
    "overrides": "Konva.Node#addName",
    "description": "add name to node",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red');\nnode.addName('selected');\nnode.name(); // return 'red selected'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4324,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 797
  },
  {
    "id": "Konva.Shape#hasName",
    "longname": "Konva.Shape#hasName",
    "name": "hasName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hasName",
    "inherited": true,
    "overrides": "Konva.Node#hasName",
    "description": "check is node has name",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red');\nnode.hasName('red');   // return true\nnode.hasName('selected'); // return false\nnode.hasName(''); // return false"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4343,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 798
  },
  {
    "id": "Konva.Shape#removeName",
    "longname": "Konva.Shape#removeName",
    "name": "removeName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#removeName",
    "inherited": true,
    "overrides": "Konva.Node#removeName",
    "description": "remove name from node",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red selected');\nnode.removeName('selected');\nnode.hasName('selected'); // return false\nnode.name(); // return 'red'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4367,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 799
  },
  {
    "id": "Konva.Shape#setAttr",
    "longname": "Konva.Shape#setAttr",
    "name": "setAttr",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#setAttr",
    "inherited": true,
    "overrides": "Konva.Node#setAttr",
    "description": "set attr",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "attr"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "name": "val"
      }
    ],
    "examples": [
      "node.setAttr('x', 5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4388,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 800
  },
  {
    "id": "Konva.Shape#draw",
    "longname": "Konva.Shape#draw",
    "name": "draw",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#draw",
    "inherited": true,
    "overrides": "Konva.Node#draw",
    "description": "draw both scene and hit graphs.  If the node being drawn is the stage, all of the layers will be cleared and redrawn",
    "memberof": "Konva.Shape",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4511,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 801
  },
  {
    "id": "Konva.Shape#startDrag",
    "longname": "Konva.Shape#startDrag",
    "name": "startDrag",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#startDrag",
    "inherited": true,
    "overrides": "Konva.Node#startDrag",
    "description": "initiate drag and drop.",
    "memberof": "Konva.Shape",
    "meta": {
      "lineno": 4544,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 802
  },
  {
    "id": "Konva.Shape#stopDrag",
    "longname": "Konva.Shape#stopDrag",
    "name": "stopDrag",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#stopDrag",
    "inherited": true,
    "overrides": "Konva.Node#stopDrag",
    "description": "stop drag and drop",
    "memberof": "Konva.Shape",
    "meta": {
      "lineno": 4590,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 803
  },
  {
    "id": "Konva.Shape#isDragging",
    "longname": "Konva.Shape#isDragging",
    "name": "isDragging",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isDragging",
    "inherited": true,
    "overrides": "Konva.Node#isDragging",
    "description": "determine if node is currently in drag and drop mode",
    "memberof": "Konva.Shape",
    "meta": {
      "lineno": 4607,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 804
  },
  {
    "id": "Konva.Shape#isClientRectOnScreen",
    "longname": "Konva.Shape#isClientRectOnScreen",
    "name": "isClientRectOnScreen",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isClientRectOnScreen",
    "inherited": true,
    "overrides": "Konva.Node#isClientRectOnScreen",
    "description": "determine if node (at least partially) is currently in user-visible area",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number",
            "Object"
          ]
        },
        "description": "optional margin in pixels",
        "name": "margin"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "margin.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "margin.y"
      }
    ],
    "examples": [
      "// get index\n// default calculations\nvar isOnScreen = node.isClientRectOnScreen()\n// increase object size (or screen size) for cases when objects close to the screen still need to be marked as \"visible\"\nvar isOnScreen = node.isClientRectOnScreen({ x: stage.width(), y: stage.height() })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4671,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 805
  },
  {
    "id": "Konva.Shape#zIndex",
    "longname": "Konva.Shape#zIndex",
    "name": "zIndex",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#zIndex",
    "inherited": true,
    "overrides": "Konva.Node#zIndex",
    "description": "get/set zIndex relative to the node's siblings who share the same parent.\nPlease remember that zIndex is not absolute (like in CSS). It is relative to parent element only.",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "index"
      }
    ],
    "examples": [
      "// get index\nvar index = node.zIndex();\n\n// set index\nnode.zIndex(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4764,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 806
  },
  {
    "id": "Konva.Shape#absolutePosition",
    "longname": "Konva.Shape#absolutePosition",
    "name": "absolutePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#absolutePosition",
    "inherited": true,
    "overrides": "Konva.Node#absolutePosition",
    "description": "get/set node absolute position",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "// get position\nvar position = node.absolutePosition();\n\n// set position\nnode.absolutePosition({\n  x: 5,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4779,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 807
  },
  {
    "id": "Konva.Shape#position",
    "longname": "Konva.Shape#position",
    "name": "position",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#position",
    "inherited": true,
    "overrides": "Konva.Node#position",
    "description": "get/set node position relative to parent",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "// get position\nvar position = node.position();\n\n// set position\nnode.position({\n  x: 5,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4799,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 808
  },
  {
    "id": "Konva.Shape#x",
    "longname": "Konva.Shape#x",
    "name": "x",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#x",
    "inherited": true,
    "overrides": "Konva.Node#x",
    "description": "get/set x position",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get x\nvar x = node.x();\n\n// set x\nnode.x(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4818,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 809
  },
  {
    "id": "Konva.Shape#y",
    "longname": "Konva.Shape#y",
    "name": "y",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#y",
    "inherited": true,
    "overrides": "Konva.Node#y",
    "description": "get/set y position",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get y\nvar y = node.y();\n\n// set y\nnode.y(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4832,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 810
  },
  {
    "id": "Konva.Shape#globalCompositeOperation",
    "longname": "Konva.Shape#globalCompositeOperation",
    "name": "globalCompositeOperation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#globalCompositeOperation",
    "inherited": true,
    "overrides": "Konva.Node#globalCompositeOperation",
    "description": "get/set globalCompositeOperation of a node. globalCompositeOperation DOESN'T affect hit graph of nodes. So they are still trigger to events as they have default \"source-over\" globalCompositeOperation.",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "type"
      }
    ],
    "examples": [
      "// get globalCompositeOperation\nvar globalCompositeOperation = shape.globalCompositeOperation();\n\n// set globalCompositeOperation\nshape.globalCompositeOperation('source-in');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4846,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 811
  },
  {
    "id": "Konva.Shape#opacity",
    "longname": "Konva.Shape#opacity",
    "name": "opacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#opacity",
    "inherited": true,
    "overrides": "Konva.Node#opacity",
    "description": "get/set opacity.  Opacity values range from 0 to 1.\n A node with an opacity of 0 is fully transparent, and a node\n with an opacity of 1 is fully opaque",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "opacity"
      }
    ],
    "examples": [
      "// get opacity\nvar opacity = node.opacity();\n\n// set opacity\nnode.opacity(0.5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4860,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 812
  },
  {
    "id": "Konva.Shape#name",
    "longname": "Konva.Shape#name",
    "name": "name",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#name",
    "inherited": true,
    "overrides": "Konva.Node#name",
    "description": "get/set name.",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "// get name\nvar name = node.name();\n\n// set name\nnode.name('foo');\n\n// also node may have multiple names (as css classes)\nnode.name('foo bar');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4876,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 813
  },
  {
    "id": "Konva.Shape#id",
    "longname": "Konva.Shape#id",
    "name": "id",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#id",
    "inherited": true,
    "overrides": "Konva.Node#id",
    "description": "get/set id. Id is global for whole page.",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "id"
      }
    ],
    "examples": [
      "// get id\nvar name = node.id();\n\n// set id\nnode.id('foo');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4893,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 814
  },
  {
    "id": "Konva.Shape#rotation",
    "longname": "Konva.Shape#rotation",
    "name": "rotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#rotation",
    "inherited": true,
    "overrides": "Konva.Node#rotation",
    "description": "get/set rotation in degrees",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get rotation in degrees\nvar rotation = node.rotation();\n\n// set rotation in degrees\nnode.rotation(45);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4907,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 815
  },
  {
    "id": "Konva.Shape#scale",
    "longname": "Konva.Shape#scale",
    "name": "scale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scale",
    "inherited": true,
    "overrides": "Konva.Node#scale",
    "description": "get/set scale",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.y"
      }
    ],
    "examples": [
      "// get scale\nvar scale = node.scale();\n\n// set scale\nshape.scale({\n  x: 2,\n  y: 3\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4921,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 816
  },
  {
    "id": "Konva.Shape#scaleX",
    "longname": "Konva.Shape#scaleX",
    "name": "scaleX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scaleX",
    "inherited": true,
    "overrides": "Konva.Node#scaleX",
    "description": "get/set scale x",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get scale x\nvar scaleX = node.scaleX();\n\n// set scale x\nnode.scaleX(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4940,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 817
  },
  {
    "id": "Konva.Shape#scaleY",
    "longname": "Konva.Shape#scaleY",
    "name": "scaleY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scaleY",
    "inherited": true,
    "overrides": "Konva.Node#scaleY",
    "description": "get/set scale y",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get scale y\nvar scaleY = node.scaleY();\n\n// set scale y\nnode.scaleY(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4954,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 818
  },
  {
    "id": "Konva.Shape#skew",
    "longname": "Konva.Shape#skew",
    "name": "skew",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skew",
    "inherited": true,
    "overrides": "Konva.Node#skew",
    "description": "get/set skew",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "skew"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "skew.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "skew.y"
      }
    ],
    "examples": [
      "// get skew\nvar skew = node.skew();\n\n// set skew\nnode.skew({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4968,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 819
  },
  {
    "id": "Konva.Shape#skewX",
    "longname": "Konva.Shape#skewX",
    "name": "skewX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skewX",
    "inherited": true,
    "overrides": "Konva.Node#skewX",
    "description": "get/set skew x",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get skew x\nvar skewX = node.skewX();\n\n// set skew x\nnode.skewX(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4987,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 820
  },
  {
    "id": "Konva.Shape#skewY",
    "longname": "Konva.Shape#skewY",
    "name": "skewY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skewY",
    "inherited": true,
    "overrides": "Konva.Node#skewY",
    "description": "get/set skew y",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get skew y\nvar skewY = node.skewY();\n\n// set skew y\nnode.skewY(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5001,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 821
  },
  {
    "id": "Konva.Shape#offsetX",
    "longname": "Konva.Shape#offsetX",
    "name": "offsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#offsetX",
    "inherited": true,
    "overrides": "Konva.Node#offsetX",
    "description": "get/set offset x",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get offset x\nvar offsetX = node.offsetX();\n\n// set offset x\nnode.offsetX(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5033,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 822
  },
  {
    "id": "Konva.Shape#offsetY",
    "longname": "Konva.Shape#offsetY",
    "name": "offsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#offsetY",
    "inherited": true,
    "overrides": "Konva.Node#offsetY",
    "description": "get/set offset y",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get offset y\nvar offsetY = node.offsetY();\n\n// set offset y\nnode.offsetY(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5047,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 823
  },
  {
    "id": "Konva.Shape#dragDistance",
    "longname": "Konva.Shape#dragDistance",
    "name": "dragDistance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#dragDistance",
    "inherited": true,
    "overrides": "Konva.Node#dragDistance",
    "description": "get/set drag distance",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "distance"
      }
    ],
    "examples": [
      "// get drag distance\nvar dragDistance = node.dragDistance();\n\n// set distance\n// node starts dragging only if pointer moved more then 3 pixels\nnode.dragDistance(3);\n// or set globally\nKonva.dragDistance = 3;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5061,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 824
  },
  {
    "id": "Konva.Shape#width",
    "longname": "Konva.Shape#width",
    "name": "width",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#width",
    "inherited": true,
    "overrides": "Konva.Node#width",
    "description": "get/set width",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "width"
      }
    ],
    "examples": [
      "// get width\nvar width = node.width();\n\n// set width\nnode.width(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5078,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 825
  },
  {
    "id": "Konva.Shape#height",
    "longname": "Konva.Shape#height",
    "name": "height",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#height",
    "inherited": true,
    "overrides": "Konva.Node#height",
    "description": "get/set height",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "height"
      }
    ],
    "examples": [
      "// get height\nvar height = node.height();\n\n// set height\nnode.height(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5092,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 826
  },
  {
    "id": "Konva.Shape#listening",
    "longname": "Konva.Shape#listening",
    "name": "listening",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#listening",
    "inherited": true,
    "overrides": "Konva.Node#listening",
    "description": "get/set listening attr.  If you need to determine if a node is listening or not\n  by taking into account its parents, use the isListening() method\n  nodes with listening set to false will not be detected in hit graph\n  so they will be ignored in container.getIntersection() method",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "Can be true, or false.  The default is true.",
        "name": "listening"
      }
    ],
    "examples": [
      "// get listening attr\nvar listening = node.listening();\n\n// stop listening for events, remove node and all its children from hit graph\nnode.listening(false);\n\n// listen to events according to the parent\nnode.listening(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5106,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 827
  },
  {
    "id": "Konva.Shape#preventDefault",
    "longname": "Konva.Shape#preventDefault",
    "name": "preventDefault",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#preventDefault",
    "inherited": true,
    "overrides": "Konva.Node#preventDefault",
    "description": "get/set preventDefault\nBy default all shapes will prevent default behavior\nof a browser on a pointer move or tap.\nthat will prevent native scrolling when you are trying to drag&drop a node\nbut sometimes you may need to enable default actions\nin that case you can set the property to false",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "preventDefault"
      }
    ],
    "examples": [
      "// get preventDefault\nvar shouldPrevent = shape.preventDefault();\n\n// set preventDefault\nshape.preventDefault(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5125,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 828
  },
  {
    "id": "Konva.Shape#filters",
    "longname": "Konva.Shape#filters",
    "name": "filters",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#filters",
    "inherited": true,
    "overrides": "Konva.Node#filters",
    "description": "get/set filters.  Filters are applied to cached canvases",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "array of filters",
        "name": "filters"
      }
    ],
    "examples": [
      "// get filters\nvar filters = node.filters();\n\n// set a single filter\nnode.cache();\nnode.filters([Konva.Filters.Blur]);\n\n// set multiple filters\nnode.cache();\nnode.filters([\n  Konva.Filters.Blur,\n  Konva.Filters.Sepia,\n  Konva.Filters.Invert\n]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5148,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 829
  },
  {
    "id": "Konva.Shape#visible",
    "longname": "Konva.Shape#visible",
    "name": "visible",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#visible",
    "inherited": true,
    "overrides": "Konva.Node#visible",
    "description": "get/set visible attr.  Can be true, or false.  The default is true.\n  If you need to determine if a node is visible or not\n  by taking into account its parents, use the isVisible() method",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "visible"
      }
    ],
    "examples": [
      "// get visible attr\nvar visible = node.visible();\n\n// make invisible\nnode.visible(false);\n\n// make visible (according to the parent)\nnode.visible(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5171,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 830
  },
  {
    "id": "Konva.Shape#transformsEnabled",
    "longname": "Konva.Shape#transformsEnabled",
    "name": "transformsEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#transformsEnabled",
    "inherited": true,
    "overrides": "Konva.Node#transformsEnabled",
    "description": "get/set transforms that are enabled.  Can be \"all\", \"none\", or \"position\".  The default\n is \"all\"",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// enable position transform only to improve draw performance\nnode.transformsEnabled('position');\n\n// enable all transforms\nnode.transformsEnabled('all');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5191,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 831
  },
  {
    "id": "Konva.Shape#size",
    "longname": "Konva.Shape#size",
    "name": "size",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#size",
    "inherited": true,
    "overrides": "Konva.Node#size",
    "description": "get/set node size",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "size"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size.height"
      }
    ],
    "examples": [
      "// get node size\nvar size = node.size();\nvar width = size.width;\nvar height = size.height;\n\n// set size\nnode.size({\n  width: 100,\n  height: 200\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5205,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 832
  },
  {
    "id": "Konva.Shape#dragBoundFunc",
    "longname": "Konva.Shape#dragBoundFunc",
    "name": "dragBoundFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#dragBoundFunc",
    "inherited": true,
    "overrides": "Konva.Node#dragBoundFunc",
    "description": "get/set drag bound function.  This is used to override the default\n drag and drop position.",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "name": "dragBoundFunc"
      }
    ],
    "examples": [
      "// get drag bound function\nvar dragBoundFunc = node.dragBoundFunc();\n\n// create vertical drag and drop\nnode.dragBoundFunc(function(pos){\n  // important pos - is absolute position of the node\n  // you should return absolute position too\n  return {\n    x: this.absolutePosition().x,\n    y: pos.y\n  };\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5226,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 833
  },
  {
    "id": "Konva.Shape#draggable",
    "longname": "Konva.Shape#draggable",
    "name": "draggable",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#draggable",
    "inherited": true,
    "overrides": "Konva.Node#draggable",
    "description": "get/set draggable flag",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "draggable"
      }
    ],
    "examples": [
      "// get draggable flag\nvar draggable = node.draggable();\n\n// enable drag and drop\nnode.draggable(true);\n\n// disable drag and drop\nnode.draggable(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5248,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 834
  },
  {
    "id": "Konva.Shape#to",
    "longname": "Konva.Shape#to",
    "name": "to",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#to",
    "inherited": true,
    "overrides": "Konva.Node#to",
    "description": "Tween node properties. Shorter usage of {@link Konva.Tween} object.",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "tween params",
        "name": "params"
      }
    ],
    "examples": [
      "circle.to({\n  x : 50,\n  duration : 0.5,\n  onUpdate: () => console.log('props updated'),\n  onFinish: () => console.log('finished'),\n});"
    ],
    "meta": {
      "lineno": 9588,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 835
  },
  {
    "id": "Konva.Shape#blurRadius",
    "longname": "Konva.Shape#blurRadius",
    "name": "blurRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#blurRadius",
    "inherited": true,
    "overrides": "Konva.Node#blurRadius",
    "description": "get/set blur radius. Use with {@link Konva.Filters.Blur} filter",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "radius"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17517,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 836
  },
  {
    "id": "Konva.Shape#brightness",
    "longname": "Konva.Shape#brightness",
    "name": "brightness",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#brightness",
    "inherited": true,
    "overrides": "Konva.Node#brightness",
    "description": "get/set filter brightness.  The brightness is a number between -1 and 1.&nbsp; Positive values\n brighten the pixels and negative values darken them. Use with {@link Konva.Filters.Brighten} filter.",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between -1 and 1",
        "name": "brightness"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17547,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 837
  },
  {
    "id": "Konva.Shape#contrast",
    "longname": "Konva.Shape#contrast",
    "name": "contrast",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#contrast",
    "inherited": true,
    "overrides": "Konva.Node#contrast",
    "description": "get/set filter contrast.  The contrast is a number between -100 and 100.\nUse with {@link Konva.Filters.Contrast} filter.",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between -100 and 100",
        "name": "contrast"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17600,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 838
  },
  {
    "id": "Konva.Shape#embossStrength",
    "longname": "Konva.Shape#embossStrength",
    "name": "embossStrength",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossStrength",
    "inherited": true,
    "overrides": "Konva.Node#embossStrength",
    "description": "get/set emboss strength. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1.  Default is 0.5",
        "name": "level"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17725,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 839
  },
  {
    "id": "Konva.Shape#embossWhiteLevel",
    "longname": "Konva.Shape#embossWhiteLevel",
    "name": "embossWhiteLevel",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossWhiteLevel",
    "inherited": true,
    "overrides": "Konva.Node#embossWhiteLevel",
    "description": "get/set emboss white level. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1.  Default is 0.5",
        "name": "embossWhiteLevel"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17733,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 840
  },
  {
    "id": "Konva.Shape#embossDirection",
    "longname": "Konva.Shape#embossDirection",
    "name": "embossDirection",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossDirection",
    "inherited": true,
    "overrides": "Konva.Node#embossDirection",
    "description": "get/set emboss direction. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "can be top-left, top, top-right, right, bottom-right, bottom, bottom-left or left\n  The default is top-left",
        "name": "embossDirection"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17741,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 841
  },
  {
    "id": "Konva.Shape#embossBlend",
    "longname": "Konva.Shape#embossBlend",
    "name": "embossBlend",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossBlend",
    "inherited": true,
    "overrides": "Konva.Node#embossBlend",
    "description": "get/set emboss blend. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "embossBlend"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17750,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 842
  },
  {
    "id": "Konva.Shape#enhance",
    "longname": "Konva.Shape#enhance",
    "name": "enhance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#enhance",
    "inherited": true,
    "overrides": "Konva.Node#enhance",
    "description": "get/set enhance. Use with {@link Konva.Filters.Enhance} filter. -1 to 1 values",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Float"
          ]
        },
        "name": "amount"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Float"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17864,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 843
  },
  {
    "id": "Konva.Shape#hue",
    "longname": "Konva.Shape#hue",
    "name": "hue",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hue",
    "inherited": true,
    "overrides": "Konva.Node#hue",
    "description": "get/set hsv hue in degrees. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between 0 and 359",
        "name": "hue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17896,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 844
  },
  {
    "id": "Konva.Shape#saturation",
    "longname": "Konva.Shape#saturation",
    "name": "saturation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#saturation",
    "inherited": true,
    "overrides": "Konva.Node#saturation",
    "description": "get/set hsv saturation. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the saturation, 1.0 doubles, etc..",
        "name": "saturation"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17904,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 845
  },
  {
    "id": "Konva.Shape#luminance",
    "longname": "Konva.Shape#luminance",
    "name": "luminance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#luminance",
    "inherited": true,
    "overrides": "Konva.Node#luminance",
    "description": "get/set hsl luminance. Use with {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "from -1 to 1",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17912,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 846
  },
  {
    "id": "Konva.Shape#value",
    "longname": "Konva.Shape#value",
    "name": "value",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#value",
    "inherited": true,
    "overrides": "Konva.Node#value",
    "description": "get/set hsv value. Use with {@link Konva.Filters.HSV} filter.",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the value, 1.0 doubles, etc..",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18018,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 847
  },
  {
    "id": "Konva.Shape#kaleidoscopePower",
    "longname": "Konva.Shape#kaleidoscopePower",
    "name": "kaleidoscopePower",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#kaleidoscopePower",
    "inherited": true,
    "overrides": "Konva.Node#kaleidoscopePower",
    "description": "get/set kaleidoscope power. Use with {@link Konva.Filters.Kaleidoscope} filter.",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "of kaleidoscope",
        "name": "power"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18243,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 848
  },
  {
    "id": "Konva.Shape#kaleidoscopeAngle",
    "longname": "Konva.Shape#kaleidoscopeAngle",
    "name": "kaleidoscopeAngle",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#kaleidoscopeAngle",
    "inherited": true,
    "overrides": "Konva.Node#kaleidoscopeAngle",
    "description": "get/set kaleidoscope angle. Use with {@link Konva.Filters.Kaleidoscope} filter.",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "degrees"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18251,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 849
  },
  {
    "id": "Konva.Shape#noise",
    "longname": "Konva.Shape#noise",
    "name": "noise",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#noise",
    "inherited": true,
    "overrides": "Konva.Node#noise",
    "description": "get/set noise amount.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Noise} filter.",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "noise"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18437,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 850
  },
  {
    "id": "Konva.Shape#pixelSize",
    "longname": "Konva.Shape#pixelSize",
    "name": "pixelSize",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#pixelSize",
    "inherited": true,
    "overrides": "Konva.Node#pixelSize",
    "description": "get/set pixel size. Use with {@link Konva.Filters.Pixelate} filter.",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "pixelSize"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18522,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 851
  },
  {
    "id": "Konva.Shape#levels",
    "longname": "Konva.Shape#levels",
    "name": "levels",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#levels",
    "inherited": true,
    "overrides": "Konva.Node#levels",
    "description": "get/set levels.  Must be a number between 0 and 1.  Use with {@link Konva.Filters.Posterize} filter.",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1",
        "name": "level"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18552,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 852
  },
  {
    "id": "Konva.Shape#red",
    "longname": "Konva.Shape#red",
    "name": "red",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#red",
    "inherited": true,
    "overrides": "Konva.Node#red",
    "description": "get/set filter red value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "red"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18596,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 853
  },
  {
    "id": "Konva.Shape#green",
    "longname": "Konva.Shape#green",
    "name": "green",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#green",
    "inherited": true,
    "overrides": "Konva.Node#green",
    "description": "get/set filter green value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "green"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18616,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 854
  },
  {
    "id": "Konva.Shape#blue",
    "longname": "Konva.Shape#blue",
    "name": "blue",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#blue",
    "inherited": true,
    "overrides": "Konva.Node#blue",
    "description": "get/set filter blue value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "blue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18625,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 855
  },
  {
    "id": "Konva.Shape#alpha",
    "longname": "Konva.Shape#alpha",
    "name": "alpha",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#alpha",
    "inherited": true,
    "overrides": "Konva.Node#alpha",
    "description": "get/set filter alpha value. Use with {@link Konva.Filters.RGBA} filter.",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Float"
          ]
        },
        "description": "value between 0 and 1",
        "name": "alpha"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Float"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18718,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 856
  },
  {
    "id": "Konva.Shape#threshold",
    "longname": "Konva.Shape#threshold",
    "name": "threshold",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#threshold",
    "inherited": true,
    "overrides": "Konva.Node#threshold",
    "description": "get/set threshold.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Threshold} or {@link Konva.Filters.Mask} filter.",
    "memberof": "Konva.Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "threshold"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18809,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 857
  },
  {
    "id": "Konva.Layer#getChildren",
    "longname": "Konva.Layer#getChildren",
    "name": "getChildren",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#getChildren",
    "inherited": true,
    "overrides": "Konva.Container#getChildren",
    "description": "returns an array of direct descendant nodes",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "filter function",
        "name": "filterFunc"
      }
    ],
    "examples": [
      "// get all children\nvar children = layer.getChildren();\n\n// get only circles\nvar circles = layer.getChildren(function(node){\n   return node.getClassName() === 'Circle';\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5311,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 858
  },
  {
    "id": "Konva.Layer#hasChildren",
    "longname": "Konva.Layer#hasChildren",
    "name": "hasChildren",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#hasChildren",
    "inherited": true,
    "overrides": "Konva.Container#hasChildren",
    "description": "determine if node has children",
    "memberof": "Konva.Layer",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5339,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 859
  },
  {
    "id": "Konva.Layer#removeChildren",
    "longname": "Konva.Layer#removeChildren",
    "name": "removeChildren",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#removeChildren",
    "inherited": true,
    "overrides": "Konva.Container#removeChildren",
    "description": "remove all children. Children will be still in memory.\nIf you want to completely destroy all children please use \"destroyChildren\" method instead",
    "memberof": "Konva.Layer",
    "meta": {
      "lineno": 5348,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 860
  },
  {
    "id": "Konva.Layer#destroyChildren",
    "longname": "Konva.Layer#destroyChildren",
    "name": "destroyChildren",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#destroyChildren",
    "inherited": true,
    "overrides": "Konva.Container#destroyChildren",
    "description": "destroy all children nodes.",
    "memberof": "Konva.Layer",
    "meta": {
      "lineno": 5366,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 861
  },
  {
    "id": "Konva.Layer#add",
    "longname": "Konva.Layer#add",
    "name": "add",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#add",
    "inherited": true,
    "overrides": "Konva.Container#add",
    "description": "add a child and children into container",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "variable": true,
        "name": "children"
      }
    ],
    "examples": [
      "layer.add(rect);\nlayer.add(shape1, shape2, shape3);\n// empty arrays are accepted, though each individual child must be defined\nlayer.add(...shapes);\n// remember to redraw layer if you changed something\nlayer.draw();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Container"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5383,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 862
  },
  {
    "id": "Konva.Layer#find",
    "longname": "Konva.Layer#find",
    "name": "find",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#find",
    "inherited": true,
    "overrides": "Konva.Container#find",
    "description": "return an array of nodes that match the selector.\nYou can provide a string with '#' for id selections and '.' for name selections.\nOr a function that will return true/false when a node is passed through.  See example below.\nWith strings you can also select by type or class name. Pass multiple selectors\nseparated by a comma.",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "String",
            "function"
          ]
        },
        "name": "selector"
      }
    ],
    "examples": [
      "Passing a string as a selector\n// select node with id foo\nvar node = stage.find('#foo');\n\n// select nodes with name bar inside layer\nvar nodes = layer.find('.bar');\n\n// select all groups inside layer\nvar nodes = layer.find('Group');\n\n// select all rectangles inside layer\nvar nodes = layer.find('Rect');\n\n// select node with an id of foo or a name of bar inside layer\nvar nodes = layer.find('#foo, .bar');\n\nPassing a function as a selector\n\n// get all groups with a function\nvar groups = stage.find(node => {\n return node.getType() === 'Group';\n});\n\n// get only Nodes with partial opacity\nvar alphaNodes = layer.find(node => {\n return node.getType() === 'Node' && node.getAbsoluteOpacity() < 1;\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5431,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 863
  },
  {
    "id": "Konva.Layer#findOne",
    "longname": "Konva.Layer#findOne",
    "name": "findOne",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#findOne",
    "inherited": true,
    "overrides": "Konva.Container#findOne",
    "description": "return a first node from `find` method",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "String",
            "function"
          ]
        },
        "name": "selector"
      }
    ],
    "examples": [
      "// select node with id foo\nvar node = stage.findOne('#foo');\n\n// select node with name bar inside layer\nvar nodes = layer.findOne('.bar');\n\n// select the first node to return true in a function\nvar node = stage.findOne(node => {\n return node.getType() === 'Shape'\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node",
            "Undefined"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5476,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 864
  },
  {
    "id": "Konva.Layer#isAncestorOf",
    "longname": "Konva.Layer#isAncestorOf",
    "name": "isAncestorOf",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#isAncestorOf",
    "inherited": true,
    "overrides": "Konva.Container#isAncestorOf",
    "description": "determine if node is an ancestor\nof descendant",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "name": "node"
      }
    ],
    "meta": {
      "lineno": 5539,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 865
  },
  {
    "id": "Konva.Layer#getAllIntersections",
    "longname": "Konva.Layer#getAllIntersections",
    "name": "getAllIntersections",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#getAllIntersections",
    "inherited": true,
    "overrides": "Konva.Container#getAllIntersections",
    "description": "get all shapes that intersect a point.  Note: because this method must clear a temporary\ncanvas and redraw every shape inside the container, it should only be used for special situations\nbecause it performs very poorly.  Please use the {@link Konva.Stage#getIntersection} method if at all possible\nbecause it performs much better\nnodes with listening set to false will not be detected",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "array of shapes"
      }
    ],
    "meta": {
      "lineno": 5564,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 866
  },
  {
    "id": "Konva.Layer#clip",
    "longname": "Konva.Layer#clip",
    "name": "clip",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#clip",
    "inherited": true,
    "overrides": "Konva.Container#clip",
    "description": "get/set clip",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "clip"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "clip.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "clip.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "clip.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "clip.height"
      }
    ],
    "examples": [
      "// get clip\nvar clip = container.clip();\n\n// set clip\ncontainer.clip({\n  x: 20,\n  y: 20,\n  width: 20,\n  height: 20\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5760,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 867
  },
  {
    "id": "Konva.Layer#clipX",
    "longname": "Konva.Layer#clipX",
    "name": "clipX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#clipX",
    "inherited": true,
    "overrides": "Konva.Container#clipX",
    "description": "get/set clip x",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get clip x\nvar clipX = container.clipX();\n\n// set clip x\ncontainer.clipX(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5783,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 868
  },
  {
    "id": "Konva.Layer#clipY",
    "longname": "Konva.Layer#clipY",
    "name": "clipY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#clipY",
    "inherited": true,
    "overrides": "Konva.Container#clipY",
    "description": "get/set clip y",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get clip y\nvar clipY = container.clipY();\n\n// set clip y\ncontainer.clipY(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5797,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 869
  },
  {
    "id": "Konva.Layer#clipWidth",
    "longname": "Konva.Layer#clipWidth",
    "name": "clipWidth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#clipWidth",
    "inherited": true,
    "overrides": "Konva.Container#clipWidth",
    "description": "get/set clip width",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "width"
      }
    ],
    "examples": [
      "// get clip width\nvar clipWidth = container.clipWidth();\n\n// set clip width\ncontainer.clipWidth(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5811,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 870
  },
  {
    "id": "Konva.Layer#clipHeight",
    "longname": "Konva.Layer#clipHeight",
    "name": "clipHeight",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#clipHeight",
    "inherited": true,
    "overrides": "Konva.Container#clipHeight",
    "description": "get/set clip height",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "height"
      }
    ],
    "examples": [
      "// get clip height\nvar clipHeight = container.clipHeight();\n\n// set clip height\ncontainer.clipHeight(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5825,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 871
  },
  {
    "id": "Konva.Layer#clipFunc",
    "longname": "Konva.Layer#clipFunc",
    "name": "clipFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#clipFunc",
    "inherited": true,
    "overrides": "Konva.Container#clipFunc",
    "description": "get/set clip function",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "name": "function"
      }
    ],
    "examples": [
      "// get clip function\nvar clipFunction = container.clipFunc();\n\n// set clip function\ncontainer.clipFunc(function(ctx) {\n  ctx.rect(0, 0, 100, 100);\n});\n\ncontainer.clipFunc(function(ctx) {\n  // optionally return a clip Path2D and clip-rule or just the clip-rule\n  return [new Path2D('M0 0v50h50Z'), 'evenodd']\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5839,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 872
  },
  {
    "id": "Konva.Layer#clearCache",
    "longname": "Konva.Layer#clearCache",
    "name": "clearCache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#clearCache",
    "inherited": true,
    "overrides": "Konva.Container#clearCache",
    "description": "clear cached canvas",
    "memberof": "Konva.Layer",
    "examples": [
      "node.clearCache();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2632,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 873
  },
  {
    "id": "Konva.Layer#cache",
    "longname": "Konva.Layer#cache",
    "name": "cache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#cache",
    "inherited": true,
    "overrides": "Konva.Container#cache",
    "description": "cache node to improve drawing performance, apply filters, or create more accurate\n hit regions. For all basic shapes size of cache canvas will be automatically detected.\n If you need to cache your custom `Konva.Shape` instance you have to pass shape's bounding box\n properties. Look at [https://konvajs.org/docs/performance/Shape_Caching.html](https://konvajs.org/docs/performance/Shape_Caching.html) for more information.",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "increase canvas size by `offset` pixel in all directions.",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "when set to true, a red border will be drawn around the cached\n region for debugging purposes",
        "name": "config.drawBorder"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "change quality (or pixel ratio) of cached image. pixelRatio = 2 will produce 2x sized cache.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "control imageSmoothingEnabled property of created canvas for cache",
        "name": "config.imageSmoothingEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "change quality (or pixel ratio) of cached hit canvas.",
        "name": "config.hitCanvasPixelRatio"
      }
    ],
    "examples": [
      "// cache a shape with the x,y position of the bounding box at the center and\n// the width and height of the bounding box equal to the width and height of\n// the shape obtained from shape.width() and shape.height()\nimage.cache();\n\n// cache a node and define the bounding box position and size\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200\n});\n\n// cache a node and draw a red border around the bounding box\n// for debugging purposes\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200,\n  offset : 10,\n  drawBorder: true\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2650,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 874
  },
  {
    "id": "Konva.Layer#isCached",
    "longname": "Konva.Layer#isCached",
    "name": "isCached",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isCached",
    "inherited": true,
    "overrides": "Konva.Container#isCached",
    "description": "determine if node is currently cached",
    "memberof": "Konva.Layer",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2788,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 875
  },
  {
    "id": "Konva.Layer#getClientRect",
    "longname": "Konva.Layer#getClientRect",
    "name": "getClientRect",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getClientRect",
    "inherited": true,
    "overrides": "Konva.Container#getClientRect",
    "description": "Return client rectangle `{x, y, width, height}` of node. This rectangle also include all styling (strokes, shadows, etc).\nThe purpose of the method is similar to getBoundingClientRect API of the DOM.",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply transform to node for calculating rect?",
        "name": "config.skipTransform"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply shadow to the node for calculating bound box?",
        "name": "config.skipShadow"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply stroke to the node for calculating bound box?",
        "name": "config.skipStroke"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "calculate client rect relative to one of the parents",
        "name": "config.relativeTo"
      }
    ],
    "examples": [
      "var rect = new Konva.Rect({\n     width : 100,\n     height : 100,\n     x : 50,\n     y : 50,\n     strokeWidth : 4,\n     stroke : 'black',\n     offsetX : 50,\n     scaleY : 2\n});\n\n// get client rect without think off transformations (position, rotation, scale, offset, etc)\nrect.getClientRect({ skipTransform: true});\n// returns {\n//     x : -2,   // two pixels for stroke / 2\n//     y : -2,\n//     width : 104, // increased by 4 for stroke\n//     height : 104\n//}\n\n// get client rect with transformation applied\nrect.getClientRect();\n// returns Object {x: -2, y: 46, width: 104, height: 208}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "rect with `{x, y, width, height}` properties"
      }
    ],
    "meta": {
      "lineno": 2797,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 876
  },
  {
    "id": "Konva.Layer#on",
    "longname": "Konva.Layer#on",
    "name": "on",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#on",
    "inherited": true,
    "overrides": "Konva.Container#on",
    "description": "bind events to the node. KonvaJS supports mouseover, mousemove,\n mouseout, mouseenter, mouseleave, mousedown, mouseup, wheel, contextmenu, click, dblclick, touchstart, touchmove,\n touchend, tap, dbltap, dragstart, dragmove, and dragend events.\n Pass in a string of events delimited by a space to bind multiple events at once\n such as 'mousedown mouseup mousemove'. Include a namespace to bind an\n event by name such as 'click.foobar'.",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'click', 'mousedown touchstart', 'mousedown.foo touchstart.foo'",
        "name": "evtStr"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The handler function. The first argument of that function is event object. Event object has `target` as main target of the event, `currentTarget` as current node listener and `evt` as native browser event.",
        "name": "handler"
      }
    ],
    "examples": [
      "// add click listener\nnode.on('click', function() {\n  console.log('you clicked me!');\n});\n\n// get the target node\nnode.on('click', function(evt) {\n  console.log(evt.target);\n});\n\n// stop event propagation\nnode.on('click', function(evt) {\n  evt.cancelBubble = true;\n});\n\n// bind multiple listeners\nnode.on('click touchstart', function() {\n  console.log('you clicked/touched me!');\n});\n\n// namespace listener\nnode.on('click.foo', function() {\n  console.log('you clicked/touched me!');\n});\n\n// get the event type\nnode.on('click tap', function(evt) {\n  var eventType = evt.type;\n});\n\n// get native event object\nnode.on('click tap', function(evt) {\n  var nativeEvent = evt.evt;\n});\n\n// for change events, get the old and new val\nnode.on('xChange', function(evt) {\n  var oldVal = evt.oldVal;\n  var newVal = evt.newVal;\n});\n\n// get event targets\n// with event delegations\nlayer.on('click', 'Group', function(evt) {\n  var shape = evt.target;\n  var group = evt.currentTarget;\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2919,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 877
  },
  {
    "id": "Konva.Layer#off",
    "longname": "Konva.Layer#off",
    "name": "off",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#off",
    "inherited": true,
    "overrides": "Konva.Container#off",
    "description": "remove event bindings from the node. Pass in a string of\n event types delimmited by a space to remove multiple event\n bindings at once such as 'mousedown mouseup mousemove'.\n include a namespace to remove an event binding by name\n such as 'click.foobar'. If you only give a name like '.foobar',\n all events in that namespace will be removed.",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'click', 'mousedown touchstart', '.foobar'",
        "name": "evtStr"
      }
    ],
    "examples": [
      "// remove listener\nnode.off('click');\n\n// remove multiple listeners\nnode.off('click touchstart');\n\n// remove listener by name\nnode.off('click.foo');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3007,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 878
  },
  {
    "id": "Konva.Layer#remove",
    "longname": "Konva.Layer#remove",
    "name": "remove",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#remove",
    "inherited": true,
    "overrides": "Konva.Container#remove",
    "description": "remove a node from parent, but don't destroy. You can reuse the node later.",
    "memberof": "Konva.Layer",
    "examples": [
      "node.remove();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3088,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 879
  },
  {
    "id": "Konva.Layer#destroy",
    "longname": "Konva.Layer#destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#destroy",
    "inherited": true,
    "overrides": "Konva.Container#destroy",
    "description": "remove and destroy a node. Kill it and delete forever! You should not reuse node after destroy().\nIf the node is a container (Group, Stage or Layer) it will destroy all children too.",
    "memberof": "Konva.Layer",
    "examples": [
      "node.destroy();"
    ],
    "meta": {
      "lineno": 3125,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 880
  },
  {
    "id": "Konva.Layer#getAttr",
    "longname": "Konva.Layer#getAttr",
    "name": "getAttr",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAttr",
    "inherited": true,
    "overrides": "Konva.Container#getAttr",
    "description": "get attr",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "attr"
      }
    ],
    "examples": [
      "var x = node.getAttr('x');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer",
            "String",
            "Object",
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3138,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 881
  },
  {
    "id": "Konva.Layer#getAncestors",
    "longname": "Konva.Layer#getAncestors",
    "name": "getAncestors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAncestors",
    "inherited": true,
    "overrides": "Konva.Container#getAncestors",
    "description": "get ancestors",
    "memberof": "Konva.Layer",
    "examples": [
      "shape.getAncestors().forEach(function(node) {\n  console.log(node.getId());\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3155,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 882
  },
  {
    "id": "Konva.Layer#getAttrs",
    "longname": "Konva.Layer#getAttrs",
    "name": "getAttrs",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAttrs",
    "inherited": true,
    "overrides": "Konva.Container#getAttrs",
    "description": "get attrs object literal",
    "memberof": "Konva.Layer",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3173,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 883
  },
  {
    "id": "Konva.Layer#setAttrs",
    "longname": "Konva.Layer#setAttrs",
    "name": "setAttrs",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#setAttrs",
    "inherited": true,
    "overrides": "Konva.Container#setAttrs",
    "description": "set multiple attrs at once using an object literal",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "object containing key value pairs",
        "name": "config"
      }
    ],
    "examples": [
      "node.setAttrs({\n  x: 5,\n  fill: 'red'\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3182,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 884
  },
  {
    "id": "Konva.Layer#isListening",
    "longname": "Konva.Layer#isListening",
    "name": "isListening",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isListening",
    "inherited": true,
    "overrides": "Konva.Container#isListening",
    "description": "determine if node is listening for events by taking into account ancestors.\n\nParent    | Self      | isListening\nlistening | listening |\n----------+-----------+------------\nT         | T         | T\nT         | F         | F\nF         | T         | F\nF         | F         | F",
    "memberof": "Konva.Layer",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3217,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 885
  },
  {
    "id": "Konva.Layer#isVisible",
    "longname": "Konva.Layer#isVisible",
    "name": "isVisible",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isVisible",
    "inherited": true,
    "overrides": "Konva.Container#isVisible",
    "description": "determine if node is visible by taking into account ancestors.\n\nParent    | Self      | isVisible\nvisible   | visible   |\n----------+-----------+------------\nT         | T         | T\nT         | F         | F\nF         | T         | F\nF         | F         | F",
    "memberof": "Konva.Layer",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3248,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 886
  },
  {
    "id": "Konva.Layer#show",
    "longname": "Konva.Layer#show",
    "name": "show",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#show",
    "inherited": true,
    "overrides": "Konva.Container#show",
    "description": "show node. set visible = true",
    "memberof": "Konva.Layer",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3300,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 887
  },
  {
    "id": "Konva.Layer#hide",
    "longname": "Konva.Layer#hide",
    "name": "hide",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hide",
    "inherited": true,
    "overrides": "Konva.Container#hide",
    "description": "hide node.  Hidden nodes are no longer detectable",
    "memberof": "Konva.Layer",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3310,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 888
  },
  {
    "id": "Konva.Layer#getAbsoluteZIndex",
    "longname": "Konva.Layer#getAbsoluteZIndex",
    "name": "getAbsoluteZIndex",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteZIndex",
    "inherited": true,
    "overrides": "Konva.Container#getAbsoluteZIndex",
    "description": "get absolute z-index which takes into account sibling\n and ancestor indices",
    "memberof": "Konva.Layer",
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3323,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 889
  },
  {
    "id": "Konva.Layer#getDepth",
    "longname": "Konva.Layer#getDepth",
    "name": "getDepth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getDepth",
    "inherited": true,
    "overrides": "Konva.Container#getDepth",
    "description": "get node depth in node tree.  Returns an integer.\n e.g. Stage depth will always be 0.  Layers will always be 1.  Groups and Shapes will always\n be >= 2",
    "memberof": "Konva.Layer",
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3355,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 890
  },
  {
    "id": "Konva.Layer#getRelativePointerPosition",
    "longname": "Konva.Layer#getRelativePointerPosition",
    "name": "getRelativePointerPosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getRelativePointerPosition",
    "inherited": true,
    "overrides": "Konva.Container#getRelativePointerPosition",
    "description": "get position of first pointer (like mouse or first touch) relative to local coordinates of current node",
    "memberof": "Konva.Layer",
    "examples": [
      "// let's think we have a rectangle at position x = 10, y = 10\n// now we clicked at x = 15, y = 15 of the stage\n// if you want to know position of the click, related to the rectangle you can use\nrect.getRelativePointerPosition();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3398,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 891
  },
  {
    "id": "Konva.Layer#getAbsolutePosition",
    "longname": "Konva.Layer#getAbsolutePosition",
    "name": "getAbsolutePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsolutePosition",
    "inherited": true,
    "overrides": "Konva.Container#getAbsolutePosition",
    "description": "get absolute position of a node. That function can be used to calculate absolute position, but relative to any ancestor",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "optional ancestor node",
        "name": "Ancestor"
      }
    ],
    "examples": [
      "// returns absolute position relative to top-left corner of canvas\nnode.getAbsolutePosition();\n\n// calculate absolute position of node, inside stage\n// so stage transforms are ignored\nnode.getAbsolutePosition(stage)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3426,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 892
  },
  {
    "id": "Konva.Layer#move",
    "longname": "Konva.Layer#move",
    "name": "move",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#move",
    "inherited": true,
    "overrides": "Konva.Container#move",
    "description": "move node by an amount relative to its current position",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "change"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "change.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "change.y"
      }
    ],
    "examples": [
      "// move node in x direction by 1px and y direction by 2px\nnode.move({\n  x: 1,\n  y: 2\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3514,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 893
  },
  {
    "id": "Konva.Layer#rotate",
    "longname": "Konva.Layer#rotate",
    "name": "rotate",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#rotate",
    "inherited": true,
    "overrides": "Konva.Container#rotate",
    "description": "rotate node by an amount in degrees relative to its current rotation",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "theta"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3559,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 894
  },
  {
    "id": "Konva.Layer#moveToTop",
    "longname": "Konva.Layer#moveToTop",
    "name": "moveToTop",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveToTop",
    "inherited": true,
    "overrides": "Konva.Container#moveToTop",
    "description": "move node to the top of its siblings",
    "memberof": "Konva.Layer",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3570,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 895
  },
  {
    "id": "Konva.Layer#moveUp",
    "longname": "Konva.Layer#moveUp",
    "name": "moveUp",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveUp",
    "inherited": true,
    "overrides": "Konva.Container#moveUp",
    "description": "move node up",
    "memberof": "Konva.Layer",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "flag is moved or not"
      }
    ],
    "meta": {
      "lineno": 3590,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 896
  },
  {
    "id": "Konva.Layer#moveDown",
    "longname": "Konva.Layer#moveDown",
    "name": "moveDown",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveDown",
    "inherited": true,
    "overrides": "Konva.Container#moveDown",
    "description": "move node down",
    "memberof": "Konva.Layer",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3610,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 897
  },
  {
    "id": "Konva.Layer#moveToBottom",
    "longname": "Konva.Layer#moveToBottom",
    "name": "moveToBottom",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveToBottom",
    "inherited": true,
    "overrides": "Konva.Container#moveToBottom",
    "description": "move node to the bottom of its siblings",
    "memberof": "Konva.Layer",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3630,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 898
  },
  {
    "id": "Konva.Layer#getAbsoluteOpacity",
    "longname": "Konva.Layer#getAbsoluteOpacity",
    "name": "getAbsoluteOpacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteOpacity",
    "inherited": true,
    "overrides": "Konva.Container#getAbsoluteOpacity",
    "description": "get absolute opacity",
    "memberof": "Konva.Layer",
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3668,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 899
  },
  {
    "id": "Konva.Layer#moveTo",
    "longname": "Konva.Layer#moveTo",
    "name": "moveTo",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveTo",
    "inherited": true,
    "overrides": "Konva.Container#moveTo",
    "description": "move node to another container",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Container"
          ]
        },
        "name": "newContainer"
      }
    ],
    "examples": [
      "// move node from current layer into layer2\nnode.moveTo(layer2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3685,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 900
  },
  {
    "id": "Konva.Layer#toObject",
    "longname": "Konva.Layer#toObject",
    "name": "toObject",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toObject",
    "inherited": true,
    "overrides": "Konva.Container#toObject",
    "description": "convert Node into an object for serialization.  Returns an object.",
    "memberof": "Konva.Layer",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3703,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 901
  },
  {
    "id": "Konva.Layer#toJSON",
    "longname": "Konva.Layer#toJSON",
    "name": "toJSON",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toJSON",
    "inherited": true,
    "overrides": "Konva.Container#toJSON",
    "description": "convert Node into a JSON string.  Returns a JSON string.",
    "memberof": "Konva.Layer",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3736,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 902
  },
  {
    "id": "Konva.Layer#getParent",
    "longname": "Konva.Layer#getParent",
    "name": "getParent",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getParent",
    "inherited": true,
    "overrides": "Konva.Container#getParent",
    "description": "get parent container",
    "memberof": "Konva.Layer",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3745,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 903
  },
  {
    "id": "Konva.Layer#findAncestors",
    "longname": "Konva.Layer#findAncestors",
    "name": "findAncestors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#findAncestors",
    "inherited": true,
    "overrides": "Konva.Container#findAncestors",
    "description": "get all ancestors (parent then parent of the parent, etc) of the node",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "selector for search",
        "name": "selector"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "show we think that node is ancestro itself?",
        "name": "includeSelf"
      },
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "optional": true,
        "description": "optional node where we need to stop searching (one of ancestors)",
        "name": "stopNode"
      }
    ],
    "examples": [
      "// get one of the parent group\nvar parentGroups = node.findAncestors('Group');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "[ancestors]"
      }
    ],
    "meta": {
      "lineno": 3754,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 904
  },
  {
    "id": "Konva.Layer#findAncestor",
    "longname": "Konva.Layer#findAncestor",
    "name": "findAncestor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#findAncestor",
    "inherited": true,
    "overrides": "Konva.Container#findAncestor",
    "description": "get ancestor (parent or parent of the parent, etc) of the node that match passed selector",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "selector for search",
        "name": "selector"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "show we think that node is ancestro itself?",
        "name": "includeSelf"
      },
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "optional": true,
        "description": "optional node where we need to stop searching (one of ancestors)",
        "name": "stopNode"
      }
    ],
    "examples": [
      "// get one of the parent group\nvar group = node.findAncestors('.mygroup');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "description": "ancestor"
      }
    ],
    "meta": {
      "lineno": 3786,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 905
  },
  {
    "id": "Konva.Layer#getLayer",
    "longname": "Konva.Layer#getLayer",
    "name": "getLayer",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getLayer",
    "inherited": true,
    "overrides": "Konva.Container#getLayer",
    "description": "get layer ancestor",
    "memberof": "Konva.Layer",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Layer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3837,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 906
  },
  {
    "id": "Konva.Layer#getStage",
    "longname": "Konva.Layer#getStage",
    "name": "getStage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getStage",
    "inherited": true,
    "overrides": "Konva.Container#getStage",
    "description": "get stage ancestor",
    "memberof": "Konva.Layer",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Stage"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3847,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 907
  },
  {
    "id": "Konva.Layer#fire",
    "longname": "Konva.Layer#fire",
    "name": "fire",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#fire",
    "inherited": true,
    "overrides": "Konva.Container#fire",
    "description": "fire event",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "event type.  can be a regular event, like click, mouseover, or mouseout, or it can be a custom event, like myCustomEvent",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "Event"
          ]
        },
        "optional": true,
        "description": "event object",
        "name": "evt"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "setting the value to false, or leaving it undefined, will result in the event\n not bubbling.  Setting the value to true will result in the event bubbling.",
        "name": "bubble"
      }
    ],
    "examples": [
      "// manually fire click event\nnode.fire('click');\n\n// fire custom event\nnode.fire('foo');\n\n// fire custom event with custom event object\nnode.fire('foo', {\n  bar: 10\n});\n\n// fire click event that bubbles\nnode.fire('click', null, true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3865,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 908
  },
  {
    "id": "Konva.Layer#getAbsoluteTransform",
    "longname": "Konva.Layer#getAbsoluteTransform",
    "name": "getAbsoluteTransform",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteTransform",
    "inherited": true,
    "overrides": "Konva.Container#getAbsoluteTransform",
    "description": "get absolute transform of the node which takes into\n account its ancestor transforms",
    "memberof": "Konva.Layer",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3901,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 909
  },
  {
    "id": "Konva.Layer#getAbsoluteScale",
    "longname": "Konva.Layer#getAbsoluteScale",
    "name": "getAbsoluteScale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteScale",
    "inherited": true,
    "overrides": "Konva.Container#getAbsoluteScale",
    "description": "get absolute scale of the node which takes into\n account its ancestor scales",
    "memberof": "Konva.Layer",
    "examples": [
      "// get absolute scale x\nvar scaleX = node.getAbsoluteScale().x;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3961,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 910
  },
  {
    "id": "Konva.Layer#getAbsoluteRotation",
    "longname": "Konva.Layer#getAbsoluteRotation",
    "name": "getAbsoluteRotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteRotation",
    "inherited": true,
    "overrides": "Konva.Container#getAbsoluteRotation",
    "description": "get absolute rotation of the node which takes into\n account its ancestor rotations",
    "memberof": "Konva.Layer",
    "examples": [
      "// get absolute rotation\nvar rotation = node.getAbsoluteRotation();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3989,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 911
  },
  {
    "id": "Konva.Layer#getTransform",
    "longname": "Konva.Layer#getTransform",
    "name": "getTransform",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getTransform",
    "inherited": true,
    "overrides": "Konva.Container#getTransform",
    "description": "get transform of the node",
    "memberof": "Konva.Layer",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4009,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 912
  },
  {
    "id": "Konva.Layer#clone",
    "longname": "Konva.Layer#clone",
    "name": "clone",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#clone",
    "inherited": true,
    "overrides": "Konva.Container#clone",
    "description": "clone node.  Returns a new Node instance with identical attributes.  You can also override\n the node properties with an object literal, enabling you to use an existing node as a template\n for another node",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "override attrs",
        "name": "obj"
      }
    ],
    "examples": [
      "// simple clone\nvar clone = node.clone();\n\n// clone a node and override the x position\nvar clone = rect.clone({\n  x: 5\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4044,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 913
  },
  {
    "id": "Konva.Layer#toCanvas",
    "longname": "Konva.Layer#toCanvas",
    "name": "toCanvas",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toCanvas",
    "inherited": true,
    "overrides": "Konva.Container#toCanvas",
    "description": "converts node into an canvas element.",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output canvas. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var canvas = node.toCanvas();"
    ],
    "meta": {
      "lineno": 4119,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 914
  },
  {
    "id": "Konva.Layer#toDataURL",
    "longname": "Konva.Layer#toDataURL",
    "name": "toDataURL",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toDataURL",
    "inherited": true,
    "overrides": "Konva.Container#toDataURL",
    "description": "Creates a composite data URL (base64 string). If MIME type is not\nspecified, then \"image/png\" will result. For \"image/jpeg\", specify a quality\nlevel as quality (range 0.0 - 1.0)",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"image/png\" or \"image/jpeg\".\n \"image/png\" is the default",
        "name": "config.mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "jpeg quality.  If using an \"image/jpeg\" mimeType,\n you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n is very high quality",
        "name": "config.quality"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output image url. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4140,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 915
  },
  {
    "id": "Konva.Layer#toImage",
    "longname": "Konva.Layer#toImage",
    "name": "toImage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toImage",
    "inherited": true,
    "overrides": "Konva.Container#toImage",
    "description": "converts node into an image.  Since the toImage\n method is asynchronous, the resulting image can only be retrieved from the config callback\n or the returned Promise.  toImage is most commonly used\n to cache complex drawings as an image so that they don't have to constantly be redrawn",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"image/png\" or \"image/jpeg\".\n \"image/png\" is the default",
        "name": "config.mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "jpeg quality.  If using an \"image/jpeg\" mimeType,\n you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n is very high quality",
        "name": "config.quality"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output image. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var image = node.toImage({\n  callback(img) {\n    // do stuff with img\n  }\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Image>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4172,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 916
  },
  {
    "id": "Konva.Layer#toBlob",
    "longname": "Konva.Layer#toBlob",
    "name": "toBlob",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toBlob",
    "inherited": true,
    "overrides": "Konva.Container#toBlob",
    "description": "Converts node into a blob.  Since the toBlob method is asynchronous,\n the resulting blob can only be retrieved from the config callback\n or the returned Promise.",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output canvas. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var blob = await node.toBlob({});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Blob>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4219,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 917
  },
  {
    "id": "Konva.Layer#getClassName",
    "longname": "Konva.Layer#getClassName",
    "name": "getClassName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getClassName",
    "inherited": true,
    "overrides": "Konva.Container#getClassName",
    "description": "get class name, which may return Stage, Layer, Group, or shape class names like Rect, Circle, Text, etc.",
    "memberof": "Konva.Layer",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4267,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 918
  },
  {
    "id": "Konva.Layer#getType",
    "longname": "Konva.Layer#getType",
    "name": "getType",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getType",
    "inherited": true,
    "overrides": "Konva.Container#getType",
    "description": "get the node type, which may return Stage, Layer, Group, or Shape",
    "memberof": "Konva.Layer",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4276,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 919
  },
  {
    "id": "Konva.Layer#addName",
    "longname": "Konva.Layer#addName",
    "name": "addName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#addName",
    "inherited": true,
    "overrides": "Konva.Container#addName",
    "description": "add name to node",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red');\nnode.addName('selected');\nnode.name(); // return 'red selected'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4324,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 920
  },
  {
    "id": "Konva.Layer#hasName",
    "longname": "Konva.Layer#hasName",
    "name": "hasName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hasName",
    "inherited": true,
    "overrides": "Konva.Container#hasName",
    "description": "check is node has name",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red');\nnode.hasName('red');   // return true\nnode.hasName('selected'); // return false\nnode.hasName(''); // return false"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4343,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 921
  },
  {
    "id": "Konva.Layer#removeName",
    "longname": "Konva.Layer#removeName",
    "name": "removeName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#removeName",
    "inherited": true,
    "overrides": "Konva.Container#removeName",
    "description": "remove name from node",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red selected');\nnode.removeName('selected');\nnode.hasName('selected'); // return false\nnode.name(); // return 'red'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4367,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 922
  },
  {
    "id": "Konva.Layer#setAttr",
    "longname": "Konva.Layer#setAttr",
    "name": "setAttr",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#setAttr",
    "inherited": true,
    "overrides": "Konva.Container#setAttr",
    "description": "set attr",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "attr"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "name": "val"
      }
    ],
    "examples": [
      "node.setAttr('x', 5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4388,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 923
  },
  {
    "id": "Konva.Layer#draw",
    "longname": "Konva.Layer#draw",
    "name": "draw",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#draw",
    "inherited": true,
    "overrides": "Konva.Container#draw",
    "description": "draw both scene and hit graphs.  If the node being drawn is the stage, all of the layers will be cleared and redrawn",
    "memberof": "Konva.Layer",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4511,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 924
  },
  {
    "id": "Konva.Layer#startDrag",
    "longname": "Konva.Layer#startDrag",
    "name": "startDrag",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#startDrag",
    "inherited": true,
    "overrides": "Konva.Container#startDrag",
    "description": "initiate drag and drop.",
    "memberof": "Konva.Layer",
    "meta": {
      "lineno": 4544,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 925
  },
  {
    "id": "Konva.Layer#stopDrag",
    "longname": "Konva.Layer#stopDrag",
    "name": "stopDrag",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#stopDrag",
    "inherited": true,
    "overrides": "Konva.Container#stopDrag",
    "description": "stop drag and drop",
    "memberof": "Konva.Layer",
    "meta": {
      "lineno": 4590,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 926
  },
  {
    "id": "Konva.Layer#isDragging",
    "longname": "Konva.Layer#isDragging",
    "name": "isDragging",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isDragging",
    "inherited": true,
    "overrides": "Konva.Container#isDragging",
    "description": "determine if node is currently in drag and drop mode",
    "memberof": "Konva.Layer",
    "meta": {
      "lineno": 4607,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 927
  },
  {
    "id": "Konva.Layer#isClientRectOnScreen",
    "longname": "Konva.Layer#isClientRectOnScreen",
    "name": "isClientRectOnScreen",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isClientRectOnScreen",
    "inherited": true,
    "overrides": "Konva.Container#isClientRectOnScreen",
    "description": "determine if node (at least partially) is currently in user-visible area",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Number",
            "Object"
          ]
        },
        "description": "optional margin in pixels",
        "name": "margin"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "margin.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "margin.y"
      }
    ],
    "examples": [
      "// get index\n// default calculations\nvar isOnScreen = node.isClientRectOnScreen()\n// increase object size (or screen size) for cases when objects close to the screen still need to be marked as \"visible\"\nvar isOnScreen = node.isClientRectOnScreen({ x: stage.width(), y: stage.height() })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4671,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 928
  },
  {
    "id": "Konva.Layer#zIndex",
    "longname": "Konva.Layer#zIndex",
    "name": "zIndex",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#zIndex",
    "inherited": true,
    "overrides": "Konva.Container#zIndex",
    "description": "get/set zIndex relative to the node's siblings who share the same parent.\nPlease remember that zIndex is not absolute (like in CSS). It is relative to parent element only.",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "index"
      }
    ],
    "examples": [
      "// get index\nvar index = node.zIndex();\n\n// set index\nnode.zIndex(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4764,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 929
  },
  {
    "id": "Konva.Layer#absolutePosition",
    "longname": "Konva.Layer#absolutePosition",
    "name": "absolutePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#absolutePosition",
    "inherited": true,
    "overrides": "Konva.Container#absolutePosition",
    "description": "get/set node absolute position",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "// get position\nvar position = node.absolutePosition();\n\n// set position\nnode.absolutePosition({\n  x: 5,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4779,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 930
  },
  {
    "id": "Konva.Layer#position",
    "longname": "Konva.Layer#position",
    "name": "position",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#position",
    "inherited": true,
    "overrides": "Konva.Container#position",
    "description": "get/set node position relative to parent",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "// get position\nvar position = node.position();\n\n// set position\nnode.position({\n  x: 5,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4799,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 931
  },
  {
    "id": "Konva.Layer#x",
    "longname": "Konva.Layer#x",
    "name": "x",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#x",
    "inherited": true,
    "overrides": "Konva.Container#x",
    "description": "get/set x position",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get x\nvar x = node.x();\n\n// set x\nnode.x(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4818,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 932
  },
  {
    "id": "Konva.Layer#y",
    "longname": "Konva.Layer#y",
    "name": "y",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#y",
    "inherited": true,
    "overrides": "Konva.Container#y",
    "description": "get/set y position",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get y\nvar y = node.y();\n\n// set y\nnode.y(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4832,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 933
  },
  {
    "id": "Konva.Layer#globalCompositeOperation",
    "longname": "Konva.Layer#globalCompositeOperation",
    "name": "globalCompositeOperation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#globalCompositeOperation",
    "inherited": true,
    "overrides": "Konva.Container#globalCompositeOperation",
    "description": "get/set globalCompositeOperation of a node. globalCompositeOperation DOESN'T affect hit graph of nodes. So they are still trigger to events as they have default \"source-over\" globalCompositeOperation.",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "type"
      }
    ],
    "examples": [
      "// get globalCompositeOperation\nvar globalCompositeOperation = shape.globalCompositeOperation();\n\n// set globalCompositeOperation\nshape.globalCompositeOperation('source-in');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4846,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 934
  },
  {
    "id": "Konva.Layer#opacity",
    "longname": "Konva.Layer#opacity",
    "name": "opacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#opacity",
    "inherited": true,
    "overrides": "Konva.Container#opacity",
    "description": "get/set opacity.  Opacity values range from 0 to 1.\n A node with an opacity of 0 is fully transparent, and a node\n with an opacity of 1 is fully opaque",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "opacity"
      }
    ],
    "examples": [
      "// get opacity\nvar opacity = node.opacity();\n\n// set opacity\nnode.opacity(0.5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4860,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 935
  },
  {
    "id": "Konva.Layer#name",
    "longname": "Konva.Layer#name",
    "name": "name",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#name",
    "inherited": true,
    "overrides": "Konva.Container#name",
    "description": "get/set name.",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "// get name\nvar name = node.name();\n\n// set name\nnode.name('foo');\n\n// also node may have multiple names (as css classes)\nnode.name('foo bar');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4876,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 936
  },
  {
    "id": "Konva.Layer#id",
    "longname": "Konva.Layer#id",
    "name": "id",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#id",
    "inherited": true,
    "overrides": "Konva.Container#id",
    "description": "get/set id. Id is global for whole page.",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "id"
      }
    ],
    "examples": [
      "// get id\nvar name = node.id();\n\n// set id\nnode.id('foo');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4893,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 937
  },
  {
    "id": "Konva.Layer#rotation",
    "longname": "Konva.Layer#rotation",
    "name": "rotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#rotation",
    "inherited": true,
    "overrides": "Konva.Container#rotation",
    "description": "get/set rotation in degrees",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get rotation in degrees\nvar rotation = node.rotation();\n\n// set rotation in degrees\nnode.rotation(45);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4907,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 938
  },
  {
    "id": "Konva.Layer#scale",
    "longname": "Konva.Layer#scale",
    "name": "scale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scale",
    "inherited": true,
    "overrides": "Konva.Container#scale",
    "description": "get/set scale",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.y"
      }
    ],
    "examples": [
      "// get scale\nvar scale = node.scale();\n\n// set scale\nshape.scale({\n  x: 2,\n  y: 3\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4921,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 939
  },
  {
    "id": "Konva.Layer#scaleX",
    "longname": "Konva.Layer#scaleX",
    "name": "scaleX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scaleX",
    "inherited": true,
    "overrides": "Konva.Container#scaleX",
    "description": "get/set scale x",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get scale x\nvar scaleX = node.scaleX();\n\n// set scale x\nnode.scaleX(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4940,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 940
  },
  {
    "id": "Konva.Layer#scaleY",
    "longname": "Konva.Layer#scaleY",
    "name": "scaleY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scaleY",
    "inherited": true,
    "overrides": "Konva.Container#scaleY",
    "description": "get/set scale y",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get scale y\nvar scaleY = node.scaleY();\n\n// set scale y\nnode.scaleY(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4954,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 941
  },
  {
    "id": "Konva.Layer#skew",
    "longname": "Konva.Layer#skew",
    "name": "skew",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skew",
    "inherited": true,
    "overrides": "Konva.Container#skew",
    "description": "get/set skew",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "skew"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "skew.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "skew.y"
      }
    ],
    "examples": [
      "// get skew\nvar skew = node.skew();\n\n// set skew\nnode.skew({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4968,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 942
  },
  {
    "id": "Konva.Layer#skewX",
    "longname": "Konva.Layer#skewX",
    "name": "skewX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skewX",
    "inherited": true,
    "overrides": "Konva.Container#skewX",
    "description": "get/set skew x",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get skew x\nvar skewX = node.skewX();\n\n// set skew x\nnode.skewX(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4987,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 943
  },
  {
    "id": "Konva.Layer#skewY",
    "longname": "Konva.Layer#skewY",
    "name": "skewY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skewY",
    "inherited": true,
    "overrides": "Konva.Container#skewY",
    "description": "get/set skew y",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get skew y\nvar skewY = node.skewY();\n\n// set skew y\nnode.skewY(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5001,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 944
  },
  {
    "id": "Konva.Layer#offsetX",
    "longname": "Konva.Layer#offsetX",
    "name": "offsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#offsetX",
    "inherited": true,
    "overrides": "Konva.Container#offsetX",
    "description": "get/set offset x",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get offset x\nvar offsetX = node.offsetX();\n\n// set offset x\nnode.offsetX(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5033,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 945
  },
  {
    "id": "Konva.Layer#offsetY",
    "longname": "Konva.Layer#offsetY",
    "name": "offsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#offsetY",
    "inherited": true,
    "overrides": "Konva.Container#offsetY",
    "description": "get/set offset y",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get offset y\nvar offsetY = node.offsetY();\n\n// set offset y\nnode.offsetY(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5047,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 946
  },
  {
    "id": "Konva.Layer#dragDistance",
    "longname": "Konva.Layer#dragDistance",
    "name": "dragDistance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#dragDistance",
    "inherited": true,
    "overrides": "Konva.Container#dragDistance",
    "description": "get/set drag distance",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "distance"
      }
    ],
    "examples": [
      "// get drag distance\nvar dragDistance = node.dragDistance();\n\n// set distance\n// node starts dragging only if pointer moved more then 3 pixels\nnode.dragDistance(3);\n// or set globally\nKonva.dragDistance = 3;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5061,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 947
  },
  {
    "id": "Konva.Layer#listening",
    "longname": "Konva.Layer#listening",
    "name": "listening",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#listening",
    "inherited": true,
    "overrides": "Konva.Container#listening",
    "description": "get/set listening attr.  If you need to determine if a node is listening or not\n  by taking into account its parents, use the isListening() method\n  nodes with listening set to false will not be detected in hit graph\n  so they will be ignored in container.getIntersection() method",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "Can be true, or false.  The default is true.",
        "name": "listening"
      }
    ],
    "examples": [
      "// get listening attr\nvar listening = node.listening();\n\n// stop listening for events, remove node and all its children from hit graph\nnode.listening(false);\n\n// listen to events according to the parent\nnode.listening(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5106,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 948
  },
  {
    "id": "Konva.Layer#preventDefault",
    "longname": "Konva.Layer#preventDefault",
    "name": "preventDefault",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#preventDefault",
    "inherited": true,
    "overrides": "Konva.Container#preventDefault",
    "description": "get/set preventDefault\nBy default all shapes will prevent default behavior\nof a browser on a pointer move or tap.\nthat will prevent native scrolling when you are trying to drag&drop a node\nbut sometimes you may need to enable default actions\nin that case you can set the property to false",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "preventDefault"
      }
    ],
    "examples": [
      "// get preventDefault\nvar shouldPrevent = shape.preventDefault();\n\n// set preventDefault\nshape.preventDefault(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5125,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 949
  },
  {
    "id": "Konva.Layer#filters",
    "longname": "Konva.Layer#filters",
    "name": "filters",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#filters",
    "inherited": true,
    "overrides": "Konva.Container#filters",
    "description": "get/set filters.  Filters are applied to cached canvases",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "array of filters",
        "name": "filters"
      }
    ],
    "examples": [
      "// get filters\nvar filters = node.filters();\n\n// set a single filter\nnode.cache();\nnode.filters([Konva.Filters.Blur]);\n\n// set multiple filters\nnode.cache();\nnode.filters([\n  Konva.Filters.Blur,\n  Konva.Filters.Sepia,\n  Konva.Filters.Invert\n]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5148,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 950
  },
  {
    "id": "Konva.Layer#visible",
    "longname": "Konva.Layer#visible",
    "name": "visible",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#visible",
    "inherited": true,
    "overrides": "Konva.Container#visible",
    "description": "get/set visible attr.  Can be true, or false.  The default is true.\n  If you need to determine if a node is visible or not\n  by taking into account its parents, use the isVisible() method",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "visible"
      }
    ],
    "examples": [
      "// get visible attr\nvar visible = node.visible();\n\n// make invisible\nnode.visible(false);\n\n// make visible (according to the parent)\nnode.visible(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5171,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 951
  },
  {
    "id": "Konva.Layer#transformsEnabled",
    "longname": "Konva.Layer#transformsEnabled",
    "name": "transformsEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#transformsEnabled",
    "inherited": true,
    "overrides": "Konva.Container#transformsEnabled",
    "description": "get/set transforms that are enabled.  Can be \"all\", \"none\", or \"position\".  The default\n is \"all\"",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// enable position transform only to improve draw performance\nnode.transformsEnabled('position');\n\n// enable all transforms\nnode.transformsEnabled('all');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5191,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 952
  },
  {
    "id": "Konva.Layer#size",
    "longname": "Konva.Layer#size",
    "name": "size",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#size",
    "inherited": true,
    "overrides": "Konva.Container#size",
    "description": "get/set node size",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "size"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size.height"
      }
    ],
    "examples": [
      "// get node size\nvar size = node.size();\nvar width = size.width;\nvar height = size.height;\n\n// set size\nnode.size({\n  width: 100,\n  height: 200\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5205,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 953
  },
  {
    "id": "Konva.Layer#dragBoundFunc",
    "longname": "Konva.Layer#dragBoundFunc",
    "name": "dragBoundFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#dragBoundFunc",
    "inherited": true,
    "overrides": "Konva.Container#dragBoundFunc",
    "description": "get/set drag bound function.  This is used to override the default\n drag and drop position.",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "name": "dragBoundFunc"
      }
    ],
    "examples": [
      "// get drag bound function\nvar dragBoundFunc = node.dragBoundFunc();\n\n// create vertical drag and drop\nnode.dragBoundFunc(function(pos){\n  // important pos - is absolute position of the node\n  // you should return absolute position too\n  return {\n    x: this.absolutePosition().x,\n    y: pos.y\n  };\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5226,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 954
  },
  {
    "id": "Konva.Layer#draggable",
    "longname": "Konva.Layer#draggable",
    "name": "draggable",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#draggable",
    "inherited": true,
    "overrides": "Konva.Container#draggable",
    "description": "get/set draggable flag",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "draggable"
      }
    ],
    "examples": [
      "// get draggable flag\nvar draggable = node.draggable();\n\n// enable drag and drop\nnode.draggable(true);\n\n// disable drag and drop\nnode.draggable(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5248,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 955
  },
  {
    "id": "Konva.Layer#to",
    "longname": "Konva.Layer#to",
    "name": "to",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#to",
    "inherited": true,
    "overrides": "Konva.Container#to",
    "description": "Tween node properties. Shorter usage of {@link Konva.Tween} object.",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "tween params",
        "name": "params"
      }
    ],
    "examples": [
      "circle.to({\n  x : 50,\n  duration : 0.5,\n  onUpdate: () => console.log('props updated'),\n  onFinish: () => console.log('finished'),\n});"
    ],
    "meta": {
      "lineno": 9588,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 956
  },
  {
    "id": "Konva.Layer#blurRadius",
    "longname": "Konva.Layer#blurRadius",
    "name": "blurRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#blurRadius",
    "inherited": true,
    "overrides": "Konva.Container#blurRadius",
    "description": "get/set blur radius. Use with {@link Konva.Filters.Blur} filter",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "radius"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17517,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 957
  },
  {
    "id": "Konva.Layer#brightness",
    "longname": "Konva.Layer#brightness",
    "name": "brightness",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#brightness",
    "inherited": true,
    "overrides": "Konva.Container#brightness",
    "description": "get/set filter brightness.  The brightness is a number between -1 and 1.&nbsp; Positive values\n brighten the pixels and negative values darken them. Use with {@link Konva.Filters.Brighten} filter.",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between -1 and 1",
        "name": "brightness"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17547,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 958
  },
  {
    "id": "Konva.Layer#contrast",
    "longname": "Konva.Layer#contrast",
    "name": "contrast",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#contrast",
    "inherited": true,
    "overrides": "Konva.Container#contrast",
    "description": "get/set filter contrast.  The contrast is a number between -100 and 100.\nUse with {@link Konva.Filters.Contrast} filter.",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between -100 and 100",
        "name": "contrast"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17600,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 959
  },
  {
    "id": "Konva.Layer#embossStrength",
    "longname": "Konva.Layer#embossStrength",
    "name": "embossStrength",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossStrength",
    "inherited": true,
    "overrides": "Konva.Container#embossStrength",
    "description": "get/set emboss strength. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1.  Default is 0.5",
        "name": "level"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17725,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 960
  },
  {
    "id": "Konva.Layer#embossWhiteLevel",
    "longname": "Konva.Layer#embossWhiteLevel",
    "name": "embossWhiteLevel",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossWhiteLevel",
    "inherited": true,
    "overrides": "Konva.Container#embossWhiteLevel",
    "description": "get/set emboss white level. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1.  Default is 0.5",
        "name": "embossWhiteLevel"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17733,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 961
  },
  {
    "id": "Konva.Layer#embossDirection",
    "longname": "Konva.Layer#embossDirection",
    "name": "embossDirection",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossDirection",
    "inherited": true,
    "overrides": "Konva.Container#embossDirection",
    "description": "get/set emboss direction. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "can be top-left, top, top-right, right, bottom-right, bottom, bottom-left or left\n  The default is top-left",
        "name": "embossDirection"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17741,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 962
  },
  {
    "id": "Konva.Layer#embossBlend",
    "longname": "Konva.Layer#embossBlend",
    "name": "embossBlend",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossBlend",
    "inherited": true,
    "overrides": "Konva.Container#embossBlend",
    "description": "get/set emboss blend. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "embossBlend"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17750,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 963
  },
  {
    "id": "Konva.Layer#enhance",
    "longname": "Konva.Layer#enhance",
    "name": "enhance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#enhance",
    "inherited": true,
    "overrides": "Konva.Container#enhance",
    "description": "get/set enhance. Use with {@link Konva.Filters.Enhance} filter. -1 to 1 values",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Float"
          ]
        },
        "name": "amount"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Float"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17864,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 964
  },
  {
    "id": "Konva.Layer#hue",
    "longname": "Konva.Layer#hue",
    "name": "hue",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hue",
    "inherited": true,
    "overrides": "Konva.Container#hue",
    "description": "get/set hsv hue in degrees. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between 0 and 359",
        "name": "hue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17896,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 965
  },
  {
    "id": "Konva.Layer#saturation",
    "longname": "Konva.Layer#saturation",
    "name": "saturation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#saturation",
    "inherited": true,
    "overrides": "Konva.Container#saturation",
    "description": "get/set hsv saturation. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the saturation, 1.0 doubles, etc..",
        "name": "saturation"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17904,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 966
  },
  {
    "id": "Konva.Layer#luminance",
    "longname": "Konva.Layer#luminance",
    "name": "luminance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#luminance",
    "inherited": true,
    "overrides": "Konva.Container#luminance",
    "description": "get/set hsl luminance. Use with {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "from -1 to 1",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17912,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 967
  },
  {
    "id": "Konva.Layer#value",
    "longname": "Konva.Layer#value",
    "name": "value",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#value",
    "inherited": true,
    "overrides": "Konva.Container#value",
    "description": "get/set hsv value. Use with {@link Konva.Filters.HSV} filter.",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the value, 1.0 doubles, etc..",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18018,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 968
  },
  {
    "id": "Konva.Layer#kaleidoscopePower",
    "longname": "Konva.Layer#kaleidoscopePower",
    "name": "kaleidoscopePower",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#kaleidoscopePower",
    "inherited": true,
    "overrides": "Konva.Container#kaleidoscopePower",
    "description": "get/set kaleidoscope power. Use with {@link Konva.Filters.Kaleidoscope} filter.",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "of kaleidoscope",
        "name": "power"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18243,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 969
  },
  {
    "id": "Konva.Layer#kaleidoscopeAngle",
    "longname": "Konva.Layer#kaleidoscopeAngle",
    "name": "kaleidoscopeAngle",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#kaleidoscopeAngle",
    "inherited": true,
    "overrides": "Konva.Container#kaleidoscopeAngle",
    "description": "get/set kaleidoscope angle. Use with {@link Konva.Filters.Kaleidoscope} filter.",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "degrees"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18251,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 970
  },
  {
    "id": "Konva.Layer#noise",
    "longname": "Konva.Layer#noise",
    "name": "noise",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#noise",
    "inherited": true,
    "overrides": "Konva.Container#noise",
    "description": "get/set noise amount.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Noise} filter.",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "noise"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18437,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 971
  },
  {
    "id": "Konva.Layer#pixelSize",
    "longname": "Konva.Layer#pixelSize",
    "name": "pixelSize",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#pixelSize",
    "inherited": true,
    "overrides": "Konva.Container#pixelSize",
    "description": "get/set pixel size. Use with {@link Konva.Filters.Pixelate} filter.",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "pixelSize"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18522,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 972
  },
  {
    "id": "Konva.Layer#levels",
    "longname": "Konva.Layer#levels",
    "name": "levels",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#levels",
    "inherited": true,
    "overrides": "Konva.Container#levels",
    "description": "get/set levels.  Must be a number between 0 and 1.  Use with {@link Konva.Filters.Posterize} filter.",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1",
        "name": "level"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18552,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 973
  },
  {
    "id": "Konva.Layer#red",
    "longname": "Konva.Layer#red",
    "name": "red",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#red",
    "inherited": true,
    "overrides": "Konva.Container#red",
    "description": "get/set filter red value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "red"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18596,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 974
  },
  {
    "id": "Konva.Layer#green",
    "longname": "Konva.Layer#green",
    "name": "green",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#green",
    "inherited": true,
    "overrides": "Konva.Container#green",
    "description": "get/set filter green value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "green"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18616,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 975
  },
  {
    "id": "Konva.Layer#blue",
    "longname": "Konva.Layer#blue",
    "name": "blue",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#blue",
    "inherited": true,
    "overrides": "Konva.Container#blue",
    "description": "get/set filter blue value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "blue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18625,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 976
  },
  {
    "id": "Konva.Layer#alpha",
    "longname": "Konva.Layer#alpha",
    "name": "alpha",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#alpha",
    "inherited": true,
    "overrides": "Konva.Container#alpha",
    "description": "get/set filter alpha value. Use with {@link Konva.Filters.RGBA} filter.",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Float"
          ]
        },
        "description": "value between 0 and 1",
        "name": "alpha"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Float"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18718,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 977
  },
  {
    "id": "Konva.Layer#threshold",
    "longname": "Konva.Layer#threshold",
    "name": "threshold",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#threshold",
    "inherited": true,
    "overrides": "Konva.Container#threshold",
    "description": "get/set threshold.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Threshold} or {@link Konva.Filters.Mask} filter.",
    "memberof": "Konva.Layer",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "threshold"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18809,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 978
  },
  {
    "id": "Konva.Group#getChildren",
    "longname": "Konva.Group#getChildren",
    "name": "getChildren",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#getChildren",
    "inherited": true,
    "description": "returns an array of direct descendant nodes",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "filter function",
        "name": "filterFunc"
      }
    ],
    "examples": [
      "// get all children\nvar children = layer.getChildren();\n\n// get only circles\nvar circles = layer.getChildren(function(node){\n   return node.getClassName() === 'Circle';\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5311,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 979
  },
  {
    "id": "Konva.Group#hasChildren",
    "longname": "Konva.Group#hasChildren",
    "name": "hasChildren",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#hasChildren",
    "inherited": true,
    "description": "determine if node has children",
    "memberof": "Konva.Group",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5339,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 980
  },
  {
    "id": "Konva.Group#removeChildren",
    "longname": "Konva.Group#removeChildren",
    "name": "removeChildren",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#removeChildren",
    "inherited": true,
    "description": "remove all children. Children will be still in memory.\nIf you want to completely destroy all children please use \"destroyChildren\" method instead",
    "memberof": "Konva.Group",
    "meta": {
      "lineno": 5348,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 981
  },
  {
    "id": "Konva.Group#destroyChildren",
    "longname": "Konva.Group#destroyChildren",
    "name": "destroyChildren",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#destroyChildren",
    "inherited": true,
    "description": "destroy all children nodes.",
    "memberof": "Konva.Group",
    "meta": {
      "lineno": 5366,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 982
  },
  {
    "id": "Konva.Group#add",
    "longname": "Konva.Group#add",
    "name": "add",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#add",
    "inherited": true,
    "description": "add a child and children into container",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "variable": true,
        "name": "children"
      }
    ],
    "examples": [
      "layer.add(rect);\nlayer.add(shape1, shape2, shape3);\n// empty arrays are accepted, though each individual child must be defined\nlayer.add(...shapes);\n// remember to redraw layer if you changed something\nlayer.draw();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Container"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5383,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 983
  },
  {
    "id": "Konva.Group#find",
    "longname": "Konva.Group#find",
    "name": "find",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#find",
    "inherited": true,
    "description": "return an array of nodes that match the selector.\nYou can provide a string with '#' for id selections and '.' for name selections.\nOr a function that will return true/false when a node is passed through.  See example below.\nWith strings you can also select by type or class name. Pass multiple selectors\nseparated by a comma.",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "String",
            "function"
          ]
        },
        "name": "selector"
      }
    ],
    "examples": [
      "Passing a string as a selector\n// select node with id foo\nvar node = stage.find('#foo');\n\n// select nodes with name bar inside layer\nvar nodes = layer.find('.bar');\n\n// select all groups inside layer\nvar nodes = layer.find('Group');\n\n// select all rectangles inside layer\nvar nodes = layer.find('Rect');\n\n// select node with an id of foo or a name of bar inside layer\nvar nodes = layer.find('#foo, .bar');\n\nPassing a function as a selector\n\n// get all groups with a function\nvar groups = stage.find(node => {\n return node.getType() === 'Group';\n});\n\n// get only Nodes with partial opacity\nvar alphaNodes = layer.find(node => {\n return node.getType() === 'Node' && node.getAbsoluteOpacity() < 1;\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5431,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 984
  },
  {
    "id": "Konva.Group#findOne",
    "longname": "Konva.Group#findOne",
    "name": "findOne",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#findOne",
    "inherited": true,
    "description": "return a first node from `find` method",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "String",
            "function"
          ]
        },
        "name": "selector"
      }
    ],
    "examples": [
      "// select node with id foo\nvar node = stage.findOne('#foo');\n\n// select node with name bar inside layer\nvar nodes = layer.findOne('.bar');\n\n// select the first node to return true in a function\nvar node = stage.findOne(node => {\n return node.getType() === 'Shape'\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node",
            "Undefined"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5476,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 985
  },
  {
    "id": "Konva.Group#isAncestorOf",
    "longname": "Konva.Group#isAncestorOf",
    "name": "isAncestorOf",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#isAncestorOf",
    "inherited": true,
    "description": "determine if node is an ancestor\nof descendant",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "name": "node"
      }
    ],
    "meta": {
      "lineno": 5539,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 986
  },
  {
    "id": "Konva.Group#getAllIntersections",
    "longname": "Konva.Group#getAllIntersections",
    "name": "getAllIntersections",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#getAllIntersections",
    "inherited": true,
    "description": "get all shapes that intersect a point.  Note: because this method must clear a temporary\ncanvas and redraw every shape inside the container, it should only be used for special situations\nbecause it performs very poorly.  Please use the {@link Konva.Stage#getIntersection} method if at all possible\nbecause it performs much better\nnodes with listening set to false will not be detected",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "array of shapes"
      }
    ],
    "meta": {
      "lineno": 5564,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 987
  },
  {
    "id": "Konva.Group#clip",
    "longname": "Konva.Group#clip",
    "name": "clip",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#clip",
    "inherited": true,
    "description": "get/set clip",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "clip"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "clip.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "clip.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "clip.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "clip.height"
      }
    ],
    "examples": [
      "// get clip\nvar clip = container.clip();\n\n// set clip\ncontainer.clip({\n  x: 20,\n  y: 20,\n  width: 20,\n  height: 20\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5760,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 988
  },
  {
    "id": "Konva.Group#clipX",
    "longname": "Konva.Group#clipX",
    "name": "clipX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#clipX",
    "inherited": true,
    "description": "get/set clip x",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get clip x\nvar clipX = container.clipX();\n\n// set clip x\ncontainer.clipX(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5783,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 989
  },
  {
    "id": "Konva.Group#clipY",
    "longname": "Konva.Group#clipY",
    "name": "clipY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#clipY",
    "inherited": true,
    "description": "get/set clip y",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get clip y\nvar clipY = container.clipY();\n\n// set clip y\ncontainer.clipY(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5797,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 990
  },
  {
    "id": "Konva.Group#clipWidth",
    "longname": "Konva.Group#clipWidth",
    "name": "clipWidth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#clipWidth",
    "inherited": true,
    "description": "get/set clip width",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "width"
      }
    ],
    "examples": [
      "// get clip width\nvar clipWidth = container.clipWidth();\n\n// set clip width\ncontainer.clipWidth(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5811,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 991
  },
  {
    "id": "Konva.Group#clipHeight",
    "longname": "Konva.Group#clipHeight",
    "name": "clipHeight",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#clipHeight",
    "inherited": true,
    "description": "get/set clip height",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "height"
      }
    ],
    "examples": [
      "// get clip height\nvar clipHeight = container.clipHeight();\n\n// set clip height\ncontainer.clipHeight(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5825,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 992
  },
  {
    "id": "Konva.Group#clipFunc",
    "longname": "Konva.Group#clipFunc",
    "name": "clipFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Container#clipFunc",
    "inherited": true,
    "description": "get/set clip function",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "name": "function"
      }
    ],
    "examples": [
      "// get clip function\nvar clipFunction = container.clipFunc();\n\n// set clip function\ncontainer.clipFunc(function(ctx) {\n  ctx.rect(0, 0, 100, 100);\n});\n\ncontainer.clipFunc(function(ctx) {\n  // optionally return a clip Path2D and clip-rule or just the clip-rule\n  return [new Path2D('M0 0v50h50Z'), 'evenodd']\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5839,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 993
  },
  {
    "id": "Konva.Group#clearCache",
    "longname": "Konva.Group#clearCache",
    "name": "clearCache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#clearCache",
    "inherited": true,
    "description": "clear cached canvas",
    "memberof": "Konva.Group",
    "examples": [
      "node.clearCache();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2632,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 994
  },
  {
    "id": "Konva.Group#cache",
    "longname": "Konva.Group#cache",
    "name": "cache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#cache",
    "inherited": true,
    "description": "cache node to improve drawing performance, apply filters, or create more accurate\n hit regions. For all basic shapes size of cache canvas will be automatically detected.\n If you need to cache your custom `Konva.Shape` instance you have to pass shape's bounding box\n properties. Look at [https://konvajs.org/docs/performance/Shape_Caching.html](https://konvajs.org/docs/performance/Shape_Caching.html) for more information.",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "increase canvas size by `offset` pixel in all directions.",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "when set to true, a red border will be drawn around the cached\n region for debugging purposes",
        "name": "config.drawBorder"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "change quality (or pixel ratio) of cached image. pixelRatio = 2 will produce 2x sized cache.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "control imageSmoothingEnabled property of created canvas for cache",
        "name": "config.imageSmoothingEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "change quality (or pixel ratio) of cached hit canvas.",
        "name": "config.hitCanvasPixelRatio"
      }
    ],
    "examples": [
      "// cache a shape with the x,y position of the bounding box at the center and\n// the width and height of the bounding box equal to the width and height of\n// the shape obtained from shape.width() and shape.height()\nimage.cache();\n\n// cache a node and define the bounding box position and size\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200\n});\n\n// cache a node and draw a red border around the bounding box\n// for debugging purposes\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200,\n  offset : 10,\n  drawBorder: true\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2650,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 995
  },
  {
    "id": "Konva.Group#isCached",
    "longname": "Konva.Group#isCached",
    "name": "isCached",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isCached",
    "inherited": true,
    "description": "determine if node is currently cached",
    "memberof": "Konva.Group",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2788,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 996
  },
  {
    "id": "Konva.Group#getClientRect",
    "longname": "Konva.Group#getClientRect",
    "name": "getClientRect",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getClientRect",
    "inherited": true,
    "description": "Return client rectangle `{x, y, width, height}` of node. This rectangle also include all styling (strokes, shadows, etc).\nThe purpose of the method is similar to getBoundingClientRect API of the DOM.",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply transform to node for calculating rect?",
        "name": "config.skipTransform"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply shadow to the node for calculating bound box?",
        "name": "config.skipShadow"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply stroke to the node for calculating bound box?",
        "name": "config.skipStroke"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "calculate client rect relative to one of the parents",
        "name": "config.relativeTo"
      }
    ],
    "examples": [
      "var rect = new Konva.Rect({\n     width : 100,\n     height : 100,\n     x : 50,\n     y : 50,\n     strokeWidth : 4,\n     stroke : 'black',\n     offsetX : 50,\n     scaleY : 2\n});\n\n// get client rect without think off transformations (position, rotation, scale, offset, etc)\nrect.getClientRect({ skipTransform: true});\n// returns {\n//     x : -2,   // two pixels for stroke / 2\n//     y : -2,\n//     width : 104, // increased by 4 for stroke\n//     height : 104\n//}\n\n// get client rect with transformation applied\nrect.getClientRect();\n// returns Object {x: -2, y: 46, width: 104, height: 208}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "rect with `{x, y, width, height}` properties"
      }
    ],
    "meta": {
      "lineno": 2797,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 997
  },
  {
    "id": "Konva.Group#on",
    "longname": "Konva.Group#on",
    "name": "on",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#on",
    "inherited": true,
    "description": "bind events to the node. KonvaJS supports mouseover, mousemove,\n mouseout, mouseenter, mouseleave, mousedown, mouseup, wheel, contextmenu, click, dblclick, touchstart, touchmove,\n touchend, tap, dbltap, dragstart, dragmove, and dragend events.\n Pass in a string of events delimited by a space to bind multiple events at once\n such as 'mousedown mouseup mousemove'. Include a namespace to bind an\n event by name such as 'click.foobar'.",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'click', 'mousedown touchstart', 'mousedown.foo touchstart.foo'",
        "name": "evtStr"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The handler function. The first argument of that function is event object. Event object has `target` as main target of the event, `currentTarget` as current node listener and `evt` as native browser event.",
        "name": "handler"
      }
    ],
    "examples": [
      "// add click listener\nnode.on('click', function() {\n  console.log('you clicked me!');\n});\n\n// get the target node\nnode.on('click', function(evt) {\n  console.log(evt.target);\n});\n\n// stop event propagation\nnode.on('click', function(evt) {\n  evt.cancelBubble = true;\n});\n\n// bind multiple listeners\nnode.on('click touchstart', function() {\n  console.log('you clicked/touched me!');\n});\n\n// namespace listener\nnode.on('click.foo', function() {\n  console.log('you clicked/touched me!');\n});\n\n// get the event type\nnode.on('click tap', function(evt) {\n  var eventType = evt.type;\n});\n\n// get native event object\nnode.on('click tap', function(evt) {\n  var nativeEvent = evt.evt;\n});\n\n// for change events, get the old and new val\nnode.on('xChange', function(evt) {\n  var oldVal = evt.oldVal;\n  var newVal = evt.newVal;\n});\n\n// get event targets\n// with event delegations\nlayer.on('click', 'Group', function(evt) {\n  var shape = evt.target;\n  var group = evt.currentTarget;\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2919,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 998
  },
  {
    "id": "Konva.Group#off",
    "longname": "Konva.Group#off",
    "name": "off",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#off",
    "inherited": true,
    "description": "remove event bindings from the node. Pass in a string of\n event types delimmited by a space to remove multiple event\n bindings at once such as 'mousedown mouseup mousemove'.\n include a namespace to remove an event binding by name\n such as 'click.foobar'. If you only give a name like '.foobar',\n all events in that namespace will be removed.",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'click', 'mousedown touchstart', '.foobar'",
        "name": "evtStr"
      }
    ],
    "examples": [
      "// remove listener\nnode.off('click');\n\n// remove multiple listeners\nnode.off('click touchstart');\n\n// remove listener by name\nnode.off('click.foo');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3007,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 999
  },
  {
    "id": "Konva.Group#remove",
    "longname": "Konva.Group#remove",
    "name": "remove",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#remove",
    "inherited": true,
    "description": "remove a node from parent, but don't destroy. You can reuse the node later.",
    "memberof": "Konva.Group",
    "examples": [
      "node.remove();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3088,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1000
  },
  {
    "id": "Konva.Group#destroy",
    "longname": "Konva.Group#destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#destroy",
    "inherited": true,
    "description": "remove and destroy a node. Kill it and delete forever! You should not reuse node after destroy().\nIf the node is a container (Group, Stage or Layer) it will destroy all children too.",
    "memberof": "Konva.Group",
    "examples": [
      "node.destroy();"
    ],
    "meta": {
      "lineno": 3125,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1001
  },
  {
    "id": "Konva.Group#getAttr",
    "longname": "Konva.Group#getAttr",
    "name": "getAttr",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAttr",
    "inherited": true,
    "description": "get attr",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "attr"
      }
    ],
    "examples": [
      "var x = node.getAttr('x');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer",
            "String",
            "Object",
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3138,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1002
  },
  {
    "id": "Konva.Group#getAncestors",
    "longname": "Konva.Group#getAncestors",
    "name": "getAncestors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAncestors",
    "inherited": true,
    "description": "get ancestors",
    "memberof": "Konva.Group",
    "examples": [
      "shape.getAncestors().forEach(function(node) {\n  console.log(node.getId());\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3155,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1003
  },
  {
    "id": "Konva.Group#getAttrs",
    "longname": "Konva.Group#getAttrs",
    "name": "getAttrs",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAttrs",
    "inherited": true,
    "description": "get attrs object literal",
    "memberof": "Konva.Group",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3173,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1004
  },
  {
    "id": "Konva.Group#setAttrs",
    "longname": "Konva.Group#setAttrs",
    "name": "setAttrs",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#setAttrs",
    "inherited": true,
    "description": "set multiple attrs at once using an object literal",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "object containing key value pairs",
        "name": "config"
      }
    ],
    "examples": [
      "node.setAttrs({\n  x: 5,\n  fill: 'red'\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3182,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1005
  },
  {
    "id": "Konva.Group#isListening",
    "longname": "Konva.Group#isListening",
    "name": "isListening",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isListening",
    "inherited": true,
    "description": "determine if node is listening for events by taking into account ancestors.\n\nParent    | Self      | isListening\nlistening | listening |\n----------+-----------+------------\nT         | T         | T\nT         | F         | F\nF         | T         | F\nF         | F         | F",
    "memberof": "Konva.Group",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3217,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1006
  },
  {
    "id": "Konva.Group#isVisible",
    "longname": "Konva.Group#isVisible",
    "name": "isVisible",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isVisible",
    "inherited": true,
    "description": "determine if node is visible by taking into account ancestors.\n\nParent    | Self      | isVisible\nvisible   | visible   |\n----------+-----------+------------\nT         | T         | T\nT         | F         | F\nF         | T         | F\nF         | F         | F",
    "memberof": "Konva.Group",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3248,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1007
  },
  {
    "id": "Konva.Group#show",
    "longname": "Konva.Group#show",
    "name": "show",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#show",
    "inherited": true,
    "description": "show node. set visible = true",
    "memberof": "Konva.Group",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3300,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1008
  },
  {
    "id": "Konva.Group#hide",
    "longname": "Konva.Group#hide",
    "name": "hide",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hide",
    "inherited": true,
    "description": "hide node.  Hidden nodes are no longer detectable",
    "memberof": "Konva.Group",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3310,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1009
  },
  {
    "id": "Konva.Group#getAbsoluteZIndex",
    "longname": "Konva.Group#getAbsoluteZIndex",
    "name": "getAbsoluteZIndex",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteZIndex",
    "inherited": true,
    "description": "get absolute z-index which takes into account sibling\n and ancestor indices",
    "memberof": "Konva.Group",
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3323,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1010
  },
  {
    "id": "Konva.Group#getDepth",
    "longname": "Konva.Group#getDepth",
    "name": "getDepth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getDepth",
    "inherited": true,
    "description": "get node depth in node tree.  Returns an integer.\n e.g. Stage depth will always be 0.  Layers will always be 1.  Groups and Shapes will always\n be >= 2",
    "memberof": "Konva.Group",
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3355,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1011
  },
  {
    "id": "Konva.Group#getRelativePointerPosition",
    "longname": "Konva.Group#getRelativePointerPosition",
    "name": "getRelativePointerPosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getRelativePointerPosition",
    "inherited": true,
    "description": "get position of first pointer (like mouse or first touch) relative to local coordinates of current node",
    "memberof": "Konva.Group",
    "examples": [
      "// let's think we have a rectangle at position x = 10, y = 10\n// now we clicked at x = 15, y = 15 of the stage\n// if you want to know position of the click, related to the rectangle you can use\nrect.getRelativePointerPosition();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3398,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1012
  },
  {
    "id": "Konva.Group#getAbsolutePosition",
    "longname": "Konva.Group#getAbsolutePosition",
    "name": "getAbsolutePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsolutePosition",
    "inherited": true,
    "description": "get absolute position of a node. That function can be used to calculate absolute position, but relative to any ancestor",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "optional ancestor node",
        "name": "Ancestor"
      }
    ],
    "examples": [
      "// returns absolute position relative to top-left corner of canvas\nnode.getAbsolutePosition();\n\n// calculate absolute position of node, inside stage\n// so stage transforms are ignored\nnode.getAbsolutePosition(stage)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3426,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1013
  },
  {
    "id": "Konva.Group#move",
    "longname": "Konva.Group#move",
    "name": "move",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#move",
    "inherited": true,
    "description": "move node by an amount relative to its current position",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "change"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "change.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "change.y"
      }
    ],
    "examples": [
      "// move node in x direction by 1px and y direction by 2px\nnode.move({\n  x: 1,\n  y: 2\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3514,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1014
  },
  {
    "id": "Konva.Group#rotate",
    "longname": "Konva.Group#rotate",
    "name": "rotate",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#rotate",
    "inherited": true,
    "description": "rotate node by an amount in degrees relative to its current rotation",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "theta"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3559,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1015
  },
  {
    "id": "Konva.Group#moveToTop",
    "longname": "Konva.Group#moveToTop",
    "name": "moveToTop",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveToTop",
    "inherited": true,
    "description": "move node to the top of its siblings",
    "memberof": "Konva.Group",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3570,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1016
  },
  {
    "id": "Konva.Group#moveUp",
    "longname": "Konva.Group#moveUp",
    "name": "moveUp",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveUp",
    "inherited": true,
    "description": "move node up",
    "memberof": "Konva.Group",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "flag is moved or not"
      }
    ],
    "meta": {
      "lineno": 3590,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1017
  },
  {
    "id": "Konva.Group#moveDown",
    "longname": "Konva.Group#moveDown",
    "name": "moveDown",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveDown",
    "inherited": true,
    "description": "move node down",
    "memberof": "Konva.Group",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3610,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1018
  },
  {
    "id": "Konva.Group#moveToBottom",
    "longname": "Konva.Group#moveToBottom",
    "name": "moveToBottom",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveToBottom",
    "inherited": true,
    "description": "move node to the bottom of its siblings",
    "memberof": "Konva.Group",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3630,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1019
  },
  {
    "id": "Konva.Group#getAbsoluteOpacity",
    "longname": "Konva.Group#getAbsoluteOpacity",
    "name": "getAbsoluteOpacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteOpacity",
    "inherited": true,
    "description": "get absolute opacity",
    "memberof": "Konva.Group",
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3668,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1020
  },
  {
    "id": "Konva.Group#moveTo",
    "longname": "Konva.Group#moveTo",
    "name": "moveTo",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveTo",
    "inherited": true,
    "description": "move node to another container",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Container"
          ]
        },
        "name": "newContainer"
      }
    ],
    "examples": [
      "// move node from current layer into layer2\nnode.moveTo(layer2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3685,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1021
  },
  {
    "id": "Konva.Group#toObject",
    "longname": "Konva.Group#toObject",
    "name": "toObject",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toObject",
    "inherited": true,
    "description": "convert Node into an object for serialization.  Returns an object.",
    "memberof": "Konva.Group",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3703,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1022
  },
  {
    "id": "Konva.Group#toJSON",
    "longname": "Konva.Group#toJSON",
    "name": "toJSON",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toJSON",
    "inherited": true,
    "description": "convert Node into a JSON string.  Returns a JSON string.",
    "memberof": "Konva.Group",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3736,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1023
  },
  {
    "id": "Konva.Group#getParent",
    "longname": "Konva.Group#getParent",
    "name": "getParent",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getParent",
    "inherited": true,
    "description": "get parent container",
    "memberof": "Konva.Group",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3745,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1024
  },
  {
    "id": "Konva.Group#findAncestors",
    "longname": "Konva.Group#findAncestors",
    "name": "findAncestors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#findAncestors",
    "inherited": true,
    "description": "get all ancestors (parent then parent of the parent, etc) of the node",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "selector for search",
        "name": "selector"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "show we think that node is ancestro itself?",
        "name": "includeSelf"
      },
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "optional": true,
        "description": "optional node where we need to stop searching (one of ancestors)",
        "name": "stopNode"
      }
    ],
    "examples": [
      "// get one of the parent group\nvar parentGroups = node.findAncestors('Group');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "[ancestors]"
      }
    ],
    "meta": {
      "lineno": 3754,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1025
  },
  {
    "id": "Konva.Group#findAncestor",
    "longname": "Konva.Group#findAncestor",
    "name": "findAncestor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#findAncestor",
    "inherited": true,
    "description": "get ancestor (parent or parent of the parent, etc) of the node that match passed selector",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "selector for search",
        "name": "selector"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "show we think that node is ancestro itself?",
        "name": "includeSelf"
      },
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "optional": true,
        "description": "optional node where we need to stop searching (one of ancestors)",
        "name": "stopNode"
      }
    ],
    "examples": [
      "// get one of the parent group\nvar group = node.findAncestors('.mygroup');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "description": "ancestor"
      }
    ],
    "meta": {
      "lineno": 3786,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1026
  },
  {
    "id": "Konva.Group#getLayer",
    "longname": "Konva.Group#getLayer",
    "name": "getLayer",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getLayer",
    "inherited": true,
    "description": "get layer ancestor",
    "memberof": "Konva.Group",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Layer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3837,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1027
  },
  {
    "id": "Konva.Group#getStage",
    "longname": "Konva.Group#getStage",
    "name": "getStage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getStage",
    "inherited": true,
    "description": "get stage ancestor",
    "memberof": "Konva.Group",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Stage"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3847,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1028
  },
  {
    "id": "Konva.Group#fire",
    "longname": "Konva.Group#fire",
    "name": "fire",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#fire",
    "inherited": true,
    "description": "fire event",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "event type.  can be a regular event, like click, mouseover, or mouseout, or it can be a custom event, like myCustomEvent",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "Event"
          ]
        },
        "optional": true,
        "description": "event object",
        "name": "evt"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "setting the value to false, or leaving it undefined, will result in the event\n not bubbling.  Setting the value to true will result in the event bubbling.",
        "name": "bubble"
      }
    ],
    "examples": [
      "// manually fire click event\nnode.fire('click');\n\n// fire custom event\nnode.fire('foo');\n\n// fire custom event with custom event object\nnode.fire('foo', {\n  bar: 10\n});\n\n// fire click event that bubbles\nnode.fire('click', null, true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3865,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1029
  },
  {
    "id": "Konva.Group#getAbsoluteTransform",
    "longname": "Konva.Group#getAbsoluteTransform",
    "name": "getAbsoluteTransform",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteTransform",
    "inherited": true,
    "description": "get absolute transform of the node which takes into\n account its ancestor transforms",
    "memberof": "Konva.Group",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3901,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1030
  },
  {
    "id": "Konva.Group#getAbsoluteScale",
    "longname": "Konva.Group#getAbsoluteScale",
    "name": "getAbsoluteScale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteScale",
    "inherited": true,
    "description": "get absolute scale of the node which takes into\n account its ancestor scales",
    "memberof": "Konva.Group",
    "examples": [
      "// get absolute scale x\nvar scaleX = node.getAbsoluteScale().x;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3961,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1031
  },
  {
    "id": "Konva.Group#getAbsoluteRotation",
    "longname": "Konva.Group#getAbsoluteRotation",
    "name": "getAbsoluteRotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteRotation",
    "inherited": true,
    "description": "get absolute rotation of the node which takes into\n account its ancestor rotations",
    "memberof": "Konva.Group",
    "examples": [
      "// get absolute rotation\nvar rotation = node.getAbsoluteRotation();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3989,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1032
  },
  {
    "id": "Konva.Group#getTransform",
    "longname": "Konva.Group#getTransform",
    "name": "getTransform",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getTransform",
    "inherited": true,
    "description": "get transform of the node",
    "memberof": "Konva.Group",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4009,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1033
  },
  {
    "id": "Konva.Group#clone",
    "longname": "Konva.Group#clone",
    "name": "clone",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#clone",
    "inherited": true,
    "description": "clone node.  Returns a new Node instance with identical attributes.  You can also override\n the node properties with an object literal, enabling you to use an existing node as a template\n for another node",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "override attrs",
        "name": "obj"
      }
    ],
    "examples": [
      "// simple clone\nvar clone = node.clone();\n\n// clone a node and override the x position\nvar clone = rect.clone({\n  x: 5\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4044,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1034
  },
  {
    "id": "Konva.Group#toCanvas",
    "longname": "Konva.Group#toCanvas",
    "name": "toCanvas",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toCanvas",
    "inherited": true,
    "description": "converts node into an canvas element.",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output canvas. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var canvas = node.toCanvas();"
    ],
    "meta": {
      "lineno": 4119,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1035
  },
  {
    "id": "Konva.Group#toDataURL",
    "longname": "Konva.Group#toDataURL",
    "name": "toDataURL",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toDataURL",
    "inherited": true,
    "description": "Creates a composite data URL (base64 string). If MIME type is not\nspecified, then \"image/png\" will result. For \"image/jpeg\", specify a quality\nlevel as quality (range 0.0 - 1.0)",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"image/png\" or \"image/jpeg\".\n \"image/png\" is the default",
        "name": "config.mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "jpeg quality.  If using an \"image/jpeg\" mimeType,\n you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n is very high quality",
        "name": "config.quality"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output image url. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4140,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1036
  },
  {
    "id": "Konva.Group#toImage",
    "longname": "Konva.Group#toImage",
    "name": "toImage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toImage",
    "inherited": true,
    "description": "converts node into an image.  Since the toImage\n method is asynchronous, the resulting image can only be retrieved from the config callback\n or the returned Promise.  toImage is most commonly used\n to cache complex drawings as an image so that they don't have to constantly be redrawn",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"image/png\" or \"image/jpeg\".\n \"image/png\" is the default",
        "name": "config.mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "jpeg quality.  If using an \"image/jpeg\" mimeType,\n you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n is very high quality",
        "name": "config.quality"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output image. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var image = node.toImage({\n  callback(img) {\n    // do stuff with img\n  }\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Image>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4172,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1037
  },
  {
    "id": "Konva.Group#toBlob",
    "longname": "Konva.Group#toBlob",
    "name": "toBlob",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toBlob",
    "inherited": true,
    "description": "Converts node into a blob.  Since the toBlob method is asynchronous,\n the resulting blob can only be retrieved from the config callback\n or the returned Promise.",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output canvas. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var blob = await node.toBlob({});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Blob>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4219,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1038
  },
  {
    "id": "Konva.Group#getClassName",
    "longname": "Konva.Group#getClassName",
    "name": "getClassName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getClassName",
    "inherited": true,
    "description": "get class name, which may return Stage, Layer, Group, or shape class names like Rect, Circle, Text, etc.",
    "memberof": "Konva.Group",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4267,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1039
  },
  {
    "id": "Konva.Group#getType",
    "longname": "Konva.Group#getType",
    "name": "getType",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getType",
    "inherited": true,
    "description": "get the node type, which may return Stage, Layer, Group, or Shape",
    "memberof": "Konva.Group",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4276,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1040
  },
  {
    "id": "Konva.Group#addName",
    "longname": "Konva.Group#addName",
    "name": "addName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#addName",
    "inherited": true,
    "description": "add name to node",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red');\nnode.addName('selected');\nnode.name(); // return 'red selected'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4324,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1041
  },
  {
    "id": "Konva.Group#hasName",
    "longname": "Konva.Group#hasName",
    "name": "hasName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hasName",
    "inherited": true,
    "description": "check is node has name",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red');\nnode.hasName('red');   // return true\nnode.hasName('selected'); // return false\nnode.hasName(''); // return false"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4343,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1042
  },
  {
    "id": "Konva.Group#removeName",
    "longname": "Konva.Group#removeName",
    "name": "removeName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#removeName",
    "inherited": true,
    "description": "remove name from node",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red selected');\nnode.removeName('selected');\nnode.hasName('selected'); // return false\nnode.name(); // return 'red'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4367,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1043
  },
  {
    "id": "Konva.Group#setAttr",
    "longname": "Konva.Group#setAttr",
    "name": "setAttr",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#setAttr",
    "inherited": true,
    "description": "set attr",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "attr"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "name": "val"
      }
    ],
    "examples": [
      "node.setAttr('x', 5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4388,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1044
  },
  {
    "id": "Konva.Group#draw",
    "longname": "Konva.Group#draw",
    "name": "draw",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#draw",
    "inherited": true,
    "description": "draw both scene and hit graphs.  If the node being drawn is the stage, all of the layers will be cleared and redrawn",
    "memberof": "Konva.Group",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4511,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1045
  },
  {
    "id": "Konva.Group#startDrag",
    "longname": "Konva.Group#startDrag",
    "name": "startDrag",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#startDrag",
    "inherited": true,
    "description": "initiate drag and drop.",
    "memberof": "Konva.Group",
    "meta": {
      "lineno": 4544,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1046
  },
  {
    "id": "Konva.Group#stopDrag",
    "longname": "Konva.Group#stopDrag",
    "name": "stopDrag",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#stopDrag",
    "inherited": true,
    "description": "stop drag and drop",
    "memberof": "Konva.Group",
    "meta": {
      "lineno": 4590,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1047
  },
  {
    "id": "Konva.Group#isDragging",
    "longname": "Konva.Group#isDragging",
    "name": "isDragging",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isDragging",
    "inherited": true,
    "description": "determine if node is currently in drag and drop mode",
    "memberof": "Konva.Group",
    "meta": {
      "lineno": 4607,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1048
  },
  {
    "id": "Konva.Group#isClientRectOnScreen",
    "longname": "Konva.Group#isClientRectOnScreen",
    "name": "isClientRectOnScreen",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isClientRectOnScreen",
    "inherited": true,
    "description": "determine if node (at least partially) is currently in user-visible area",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Number",
            "Object"
          ]
        },
        "description": "optional margin in pixels",
        "name": "margin"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "margin.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "margin.y"
      }
    ],
    "examples": [
      "// get index\n// default calculations\nvar isOnScreen = node.isClientRectOnScreen()\n// increase object size (or screen size) for cases when objects close to the screen still need to be marked as \"visible\"\nvar isOnScreen = node.isClientRectOnScreen({ x: stage.width(), y: stage.height() })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4671,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1049
  },
  {
    "id": "Konva.Group#zIndex",
    "longname": "Konva.Group#zIndex",
    "name": "zIndex",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#zIndex",
    "inherited": true,
    "description": "get/set zIndex relative to the node's siblings who share the same parent.\nPlease remember that zIndex is not absolute (like in CSS). It is relative to parent element only.",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "index"
      }
    ],
    "examples": [
      "// get index\nvar index = node.zIndex();\n\n// set index\nnode.zIndex(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4764,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1050
  },
  {
    "id": "Konva.Group#absolutePosition",
    "longname": "Konva.Group#absolutePosition",
    "name": "absolutePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#absolutePosition",
    "inherited": true,
    "description": "get/set node absolute position",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "// get position\nvar position = node.absolutePosition();\n\n// set position\nnode.absolutePosition({\n  x: 5,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4779,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1051
  },
  {
    "id": "Konva.Group#position",
    "longname": "Konva.Group#position",
    "name": "position",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#position",
    "inherited": true,
    "description": "get/set node position relative to parent",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "// get position\nvar position = node.position();\n\n// set position\nnode.position({\n  x: 5,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4799,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1052
  },
  {
    "id": "Konva.Group#x",
    "longname": "Konva.Group#x",
    "name": "x",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#x",
    "inherited": true,
    "description": "get/set x position",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get x\nvar x = node.x();\n\n// set x\nnode.x(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4818,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1053
  },
  {
    "id": "Konva.Group#y",
    "longname": "Konva.Group#y",
    "name": "y",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#y",
    "inherited": true,
    "description": "get/set y position",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get y\nvar y = node.y();\n\n// set y\nnode.y(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4832,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1054
  },
  {
    "id": "Konva.Group#globalCompositeOperation",
    "longname": "Konva.Group#globalCompositeOperation",
    "name": "globalCompositeOperation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#globalCompositeOperation",
    "inherited": true,
    "description": "get/set globalCompositeOperation of a node. globalCompositeOperation DOESN'T affect hit graph of nodes. So they are still trigger to events as they have default \"source-over\" globalCompositeOperation.",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "type"
      }
    ],
    "examples": [
      "// get globalCompositeOperation\nvar globalCompositeOperation = shape.globalCompositeOperation();\n\n// set globalCompositeOperation\nshape.globalCompositeOperation('source-in');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4846,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1055
  },
  {
    "id": "Konva.Group#opacity",
    "longname": "Konva.Group#opacity",
    "name": "opacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#opacity",
    "inherited": true,
    "description": "get/set opacity.  Opacity values range from 0 to 1.\n A node with an opacity of 0 is fully transparent, and a node\n with an opacity of 1 is fully opaque",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "opacity"
      }
    ],
    "examples": [
      "// get opacity\nvar opacity = node.opacity();\n\n// set opacity\nnode.opacity(0.5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4860,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1056
  },
  {
    "id": "Konva.Group#name",
    "longname": "Konva.Group#name",
    "name": "name",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#name",
    "inherited": true,
    "description": "get/set name.",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "// get name\nvar name = node.name();\n\n// set name\nnode.name('foo');\n\n// also node may have multiple names (as css classes)\nnode.name('foo bar');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4876,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1057
  },
  {
    "id": "Konva.Group#id",
    "longname": "Konva.Group#id",
    "name": "id",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#id",
    "inherited": true,
    "description": "get/set id. Id is global for whole page.",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "id"
      }
    ],
    "examples": [
      "// get id\nvar name = node.id();\n\n// set id\nnode.id('foo');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4893,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1058
  },
  {
    "id": "Konva.Group#rotation",
    "longname": "Konva.Group#rotation",
    "name": "rotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#rotation",
    "inherited": true,
    "description": "get/set rotation in degrees",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get rotation in degrees\nvar rotation = node.rotation();\n\n// set rotation in degrees\nnode.rotation(45);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4907,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1059
  },
  {
    "id": "Konva.Group#scale",
    "longname": "Konva.Group#scale",
    "name": "scale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scale",
    "inherited": true,
    "description": "get/set scale",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.y"
      }
    ],
    "examples": [
      "// get scale\nvar scale = node.scale();\n\n// set scale\nshape.scale({\n  x: 2,\n  y: 3\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4921,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1060
  },
  {
    "id": "Konva.Group#scaleX",
    "longname": "Konva.Group#scaleX",
    "name": "scaleX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scaleX",
    "inherited": true,
    "description": "get/set scale x",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get scale x\nvar scaleX = node.scaleX();\n\n// set scale x\nnode.scaleX(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4940,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1061
  },
  {
    "id": "Konva.Group#scaleY",
    "longname": "Konva.Group#scaleY",
    "name": "scaleY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scaleY",
    "inherited": true,
    "description": "get/set scale y",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get scale y\nvar scaleY = node.scaleY();\n\n// set scale y\nnode.scaleY(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4954,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1062
  },
  {
    "id": "Konva.Group#skew",
    "longname": "Konva.Group#skew",
    "name": "skew",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skew",
    "inherited": true,
    "description": "get/set skew",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "skew"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "skew.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "skew.y"
      }
    ],
    "examples": [
      "// get skew\nvar skew = node.skew();\n\n// set skew\nnode.skew({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4968,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1063
  },
  {
    "id": "Konva.Group#skewX",
    "longname": "Konva.Group#skewX",
    "name": "skewX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skewX",
    "inherited": true,
    "description": "get/set skew x",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get skew x\nvar skewX = node.skewX();\n\n// set skew x\nnode.skewX(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4987,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1064
  },
  {
    "id": "Konva.Group#skewY",
    "longname": "Konva.Group#skewY",
    "name": "skewY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skewY",
    "inherited": true,
    "description": "get/set skew y",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get skew y\nvar skewY = node.skewY();\n\n// set skew y\nnode.skewY(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5001,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1065
  },
  {
    "id": "Konva.Group#offsetX",
    "longname": "Konva.Group#offsetX",
    "name": "offsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#offsetX",
    "inherited": true,
    "description": "get/set offset x",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get offset x\nvar offsetX = node.offsetX();\n\n// set offset x\nnode.offsetX(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5033,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1066
  },
  {
    "id": "Konva.Group#offsetY",
    "longname": "Konva.Group#offsetY",
    "name": "offsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#offsetY",
    "inherited": true,
    "description": "get/set offset y",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get offset y\nvar offsetY = node.offsetY();\n\n// set offset y\nnode.offsetY(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5047,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1067
  },
  {
    "id": "Konva.Group#dragDistance",
    "longname": "Konva.Group#dragDistance",
    "name": "dragDistance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#dragDistance",
    "inherited": true,
    "description": "get/set drag distance",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "distance"
      }
    ],
    "examples": [
      "// get drag distance\nvar dragDistance = node.dragDistance();\n\n// set distance\n// node starts dragging only if pointer moved more then 3 pixels\nnode.dragDistance(3);\n// or set globally\nKonva.dragDistance = 3;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5061,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1068
  },
  {
    "id": "Konva.Group#width",
    "longname": "Konva.Group#width",
    "name": "width",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#width",
    "inherited": true,
    "description": "get/set width",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "width"
      }
    ],
    "examples": [
      "// get width\nvar width = node.width();\n\n// set width\nnode.width(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5078,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1069
  },
  {
    "id": "Konva.Group#height",
    "longname": "Konva.Group#height",
    "name": "height",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#height",
    "inherited": true,
    "description": "get/set height",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "height"
      }
    ],
    "examples": [
      "// get height\nvar height = node.height();\n\n// set height\nnode.height(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5092,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1070
  },
  {
    "id": "Konva.Group#listening",
    "longname": "Konva.Group#listening",
    "name": "listening",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#listening",
    "inherited": true,
    "description": "get/set listening attr.  If you need to determine if a node is listening or not\n  by taking into account its parents, use the isListening() method\n  nodes with listening set to false will not be detected in hit graph\n  so they will be ignored in container.getIntersection() method",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "Can be true, or false.  The default is true.",
        "name": "listening"
      }
    ],
    "examples": [
      "// get listening attr\nvar listening = node.listening();\n\n// stop listening for events, remove node and all its children from hit graph\nnode.listening(false);\n\n// listen to events according to the parent\nnode.listening(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5106,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1071
  },
  {
    "id": "Konva.Group#preventDefault",
    "longname": "Konva.Group#preventDefault",
    "name": "preventDefault",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#preventDefault",
    "inherited": true,
    "description": "get/set preventDefault\nBy default all shapes will prevent default behavior\nof a browser on a pointer move or tap.\nthat will prevent native scrolling when you are trying to drag&drop a node\nbut sometimes you may need to enable default actions\nin that case you can set the property to false",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "preventDefault"
      }
    ],
    "examples": [
      "// get preventDefault\nvar shouldPrevent = shape.preventDefault();\n\n// set preventDefault\nshape.preventDefault(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5125,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1072
  },
  {
    "id": "Konva.Group#filters",
    "longname": "Konva.Group#filters",
    "name": "filters",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#filters",
    "inherited": true,
    "description": "get/set filters.  Filters are applied to cached canvases",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "array of filters",
        "name": "filters"
      }
    ],
    "examples": [
      "// get filters\nvar filters = node.filters();\n\n// set a single filter\nnode.cache();\nnode.filters([Konva.Filters.Blur]);\n\n// set multiple filters\nnode.cache();\nnode.filters([\n  Konva.Filters.Blur,\n  Konva.Filters.Sepia,\n  Konva.Filters.Invert\n]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5148,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1073
  },
  {
    "id": "Konva.Group#visible",
    "longname": "Konva.Group#visible",
    "name": "visible",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#visible",
    "inherited": true,
    "description": "get/set visible attr.  Can be true, or false.  The default is true.\n  If you need to determine if a node is visible or not\n  by taking into account its parents, use the isVisible() method",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "visible"
      }
    ],
    "examples": [
      "// get visible attr\nvar visible = node.visible();\n\n// make invisible\nnode.visible(false);\n\n// make visible (according to the parent)\nnode.visible(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5171,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1074
  },
  {
    "id": "Konva.Group#transformsEnabled",
    "longname": "Konva.Group#transformsEnabled",
    "name": "transformsEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#transformsEnabled",
    "inherited": true,
    "description": "get/set transforms that are enabled.  Can be \"all\", \"none\", or \"position\".  The default\n is \"all\"",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// enable position transform only to improve draw performance\nnode.transformsEnabled('position');\n\n// enable all transforms\nnode.transformsEnabled('all');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5191,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1075
  },
  {
    "id": "Konva.Group#size",
    "longname": "Konva.Group#size",
    "name": "size",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#size",
    "inherited": true,
    "description": "get/set node size",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "size"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size.height"
      }
    ],
    "examples": [
      "// get node size\nvar size = node.size();\nvar width = size.width;\nvar height = size.height;\n\n// set size\nnode.size({\n  width: 100,\n  height: 200\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5205,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1076
  },
  {
    "id": "Konva.Group#dragBoundFunc",
    "longname": "Konva.Group#dragBoundFunc",
    "name": "dragBoundFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#dragBoundFunc",
    "inherited": true,
    "description": "get/set drag bound function.  This is used to override the default\n drag and drop position.",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "name": "dragBoundFunc"
      }
    ],
    "examples": [
      "// get drag bound function\nvar dragBoundFunc = node.dragBoundFunc();\n\n// create vertical drag and drop\nnode.dragBoundFunc(function(pos){\n  // important pos - is absolute position of the node\n  // you should return absolute position too\n  return {\n    x: this.absolutePosition().x,\n    y: pos.y\n  };\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5226,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1077
  },
  {
    "id": "Konva.Group#draggable",
    "longname": "Konva.Group#draggable",
    "name": "draggable",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#draggable",
    "inherited": true,
    "description": "get/set draggable flag",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "draggable"
      }
    ],
    "examples": [
      "// get draggable flag\nvar draggable = node.draggable();\n\n// enable drag and drop\nnode.draggable(true);\n\n// disable drag and drop\nnode.draggable(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5248,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1078
  },
  {
    "id": "Konva.Group#to",
    "longname": "Konva.Group#to",
    "name": "to",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#to",
    "inherited": true,
    "description": "Tween node properties. Shorter usage of {@link Konva.Tween} object.",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "tween params",
        "name": "params"
      }
    ],
    "examples": [
      "circle.to({\n  x : 50,\n  duration : 0.5,\n  onUpdate: () => console.log('props updated'),\n  onFinish: () => console.log('finished'),\n});"
    ],
    "meta": {
      "lineno": 9588,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1079
  },
  {
    "id": "Konva.Group#blurRadius",
    "longname": "Konva.Group#blurRadius",
    "name": "blurRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#blurRadius",
    "inherited": true,
    "description": "get/set blur radius. Use with {@link Konva.Filters.Blur} filter",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "radius"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17517,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1080
  },
  {
    "id": "Konva.Group#brightness",
    "longname": "Konva.Group#brightness",
    "name": "brightness",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#brightness",
    "inherited": true,
    "description": "get/set filter brightness.  The brightness is a number between -1 and 1.&nbsp; Positive values\n brighten the pixels and negative values darken them. Use with {@link Konva.Filters.Brighten} filter.",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between -1 and 1",
        "name": "brightness"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17547,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1081
  },
  {
    "id": "Konva.Group#contrast",
    "longname": "Konva.Group#contrast",
    "name": "contrast",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#contrast",
    "inherited": true,
    "description": "get/set filter contrast.  The contrast is a number between -100 and 100.\nUse with {@link Konva.Filters.Contrast} filter.",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between -100 and 100",
        "name": "contrast"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17600,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1082
  },
  {
    "id": "Konva.Group#embossStrength",
    "longname": "Konva.Group#embossStrength",
    "name": "embossStrength",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossStrength",
    "inherited": true,
    "description": "get/set emboss strength. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1.  Default is 0.5",
        "name": "level"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17725,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1083
  },
  {
    "id": "Konva.Group#embossWhiteLevel",
    "longname": "Konva.Group#embossWhiteLevel",
    "name": "embossWhiteLevel",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossWhiteLevel",
    "inherited": true,
    "description": "get/set emboss white level. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1.  Default is 0.5",
        "name": "embossWhiteLevel"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17733,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1084
  },
  {
    "id": "Konva.Group#embossDirection",
    "longname": "Konva.Group#embossDirection",
    "name": "embossDirection",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossDirection",
    "inherited": true,
    "description": "get/set emboss direction. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "can be top-left, top, top-right, right, bottom-right, bottom, bottom-left or left\n  The default is top-left",
        "name": "embossDirection"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17741,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1085
  },
  {
    "id": "Konva.Group#embossBlend",
    "longname": "Konva.Group#embossBlend",
    "name": "embossBlend",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossBlend",
    "inherited": true,
    "description": "get/set emboss blend. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "embossBlend"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17750,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1086
  },
  {
    "id": "Konva.Group#enhance",
    "longname": "Konva.Group#enhance",
    "name": "enhance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#enhance",
    "inherited": true,
    "description": "get/set enhance. Use with {@link Konva.Filters.Enhance} filter. -1 to 1 values",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Float"
          ]
        },
        "name": "amount"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Float"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17864,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1087
  },
  {
    "id": "Konva.Group#hue",
    "longname": "Konva.Group#hue",
    "name": "hue",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hue",
    "inherited": true,
    "description": "get/set hsv hue in degrees. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between 0 and 359",
        "name": "hue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17896,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1088
  },
  {
    "id": "Konva.Group#saturation",
    "longname": "Konva.Group#saturation",
    "name": "saturation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#saturation",
    "inherited": true,
    "description": "get/set hsv saturation. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the saturation, 1.0 doubles, etc..",
        "name": "saturation"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17904,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1089
  },
  {
    "id": "Konva.Group#luminance",
    "longname": "Konva.Group#luminance",
    "name": "luminance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#luminance",
    "inherited": true,
    "description": "get/set hsl luminance. Use with {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "from -1 to 1",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17912,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1090
  },
  {
    "id": "Konva.Group#value",
    "longname": "Konva.Group#value",
    "name": "value",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#value",
    "inherited": true,
    "description": "get/set hsv value. Use with {@link Konva.Filters.HSV} filter.",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the value, 1.0 doubles, etc..",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18018,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1091
  },
  {
    "id": "Konva.Group#kaleidoscopePower",
    "longname": "Konva.Group#kaleidoscopePower",
    "name": "kaleidoscopePower",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#kaleidoscopePower",
    "inherited": true,
    "description": "get/set kaleidoscope power. Use with {@link Konva.Filters.Kaleidoscope} filter.",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "of kaleidoscope",
        "name": "power"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18243,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1092
  },
  {
    "id": "Konva.Group#kaleidoscopeAngle",
    "longname": "Konva.Group#kaleidoscopeAngle",
    "name": "kaleidoscopeAngle",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#kaleidoscopeAngle",
    "inherited": true,
    "description": "get/set kaleidoscope angle. Use with {@link Konva.Filters.Kaleidoscope} filter.",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "degrees"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18251,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1093
  },
  {
    "id": "Konva.Group#noise",
    "longname": "Konva.Group#noise",
    "name": "noise",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#noise",
    "inherited": true,
    "description": "get/set noise amount.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Noise} filter.",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "noise"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18437,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1094
  },
  {
    "id": "Konva.Group#pixelSize",
    "longname": "Konva.Group#pixelSize",
    "name": "pixelSize",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#pixelSize",
    "inherited": true,
    "description": "get/set pixel size. Use with {@link Konva.Filters.Pixelate} filter.",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "pixelSize"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18522,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1095
  },
  {
    "id": "Konva.Group#levels",
    "longname": "Konva.Group#levels",
    "name": "levels",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#levels",
    "inherited": true,
    "description": "get/set levels.  Must be a number between 0 and 1.  Use with {@link Konva.Filters.Posterize} filter.",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1",
        "name": "level"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18552,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1096
  },
  {
    "id": "Konva.Group#red",
    "longname": "Konva.Group#red",
    "name": "red",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#red",
    "inherited": true,
    "description": "get/set filter red value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "red"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18596,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1097
  },
  {
    "id": "Konva.Group#green",
    "longname": "Konva.Group#green",
    "name": "green",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#green",
    "inherited": true,
    "description": "get/set filter green value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "green"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18616,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1098
  },
  {
    "id": "Konva.Group#blue",
    "longname": "Konva.Group#blue",
    "name": "blue",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#blue",
    "inherited": true,
    "description": "get/set filter blue value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "blue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18625,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1099
  },
  {
    "id": "Konva.Group#alpha",
    "longname": "Konva.Group#alpha",
    "name": "alpha",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#alpha",
    "inherited": true,
    "description": "get/set filter alpha value. Use with {@link Konva.Filters.RGBA} filter.",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Float"
          ]
        },
        "description": "value between 0 and 1",
        "name": "alpha"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Float"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18718,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1100
  },
  {
    "id": "Konva.Group#threshold",
    "longname": "Konva.Group#threshold",
    "name": "threshold",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#threshold",
    "inherited": true,
    "description": "get/set threshold.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Threshold} or {@link Konva.Filters.Mask} filter.",
    "memberof": "Konva.Group",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "threshold"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18809,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1101
  },
  {
    "id": "Konva.Arc#hasShadow",
    "longname": "Konva.Arc#hasShadow",
    "name": "hasShadow",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasShadow",
    "inherited": true,
    "description": "returns whether or not a shadow will be rendered",
    "memberof": "Konva.Arc",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 6909,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1102
  },
  {
    "id": "Konva.Arc#hasFill",
    "longname": "Konva.Arc#hasFill",
    "name": "hasFill",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasFill",
    "inherited": true,
    "description": "returns whether or not the shape will be filled",
    "memberof": "Konva.Arc",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7009,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1103
  },
  {
    "id": "Konva.Arc#hasStroke",
    "longname": "Konva.Arc#hasStroke",
    "name": "hasStroke",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasStroke",
    "inherited": true,
    "description": "returns whether or not the shape will be stroked",
    "memberof": "Konva.Arc",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7030,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1104
  },
  {
    "id": "Konva.Arc#intersects",
    "longname": "Konva.Arc#intersects",
    "name": "intersects",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#intersects",
    "inherited": true,
    "description": "determines if point is in the shape, regardless if other shapes are on top of it.  Note: because\n this method clears a temporary canvas and then redraws the shape, it performs very poorly if executed many times\n consecutively.  Please use the {@link Konva.Stage#getIntersection} method if at all possible\n because it performs much better",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "point"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "point.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "point.y"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7066,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1105
  },
  {
    "id": "Konva.Arc#getSelfRect",
    "longname": "Konva.Arc#getSelfRect",
    "name": "getSelfRect",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#getSelfRect",
    "inherited": true,
    "overrides": "Konva.Shape#getSelfRect",
    "description": "return self rectangle (x, y, width, height) of shape.\nThis method are not taken into account transformation and styles.",
    "memberof": "Konva.Arc",
    "examples": [
      "rect.getSelfRect();  // return {x:0, y:0, width:rect.width(), height:rect.height()}\ncircle.getSelfRect();  // return {x: - circle.width() / 2, y: - circle.height() / 2, width:circle.width(), height:circle.height()}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "rect with `{x, y, width, height}` properties"
      }
    ],
    "meta": {
      "lineno": 7138,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1106
  },
  {
    "id": "Konva.Arc#drawHitFromCache",
    "longname": "Konva.Arc#drawHitFromCache",
    "name": "drawHitFromCache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#drawHitFromCache",
    "inherited": true,
    "description": "draw hit graph using the cached scene canvas",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "alpha channel threshold that determines whether or not\n a pixel should be drawn onto the hit graph.  Must be a value between 0 and 255.\n The default is 0",
        "name": "alphaThreshold"
      }
    ],
    "examples": [
      "shape.cache();\nshape.drawHitFromCache();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7294,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1107
  },
  {
    "id": "Konva.Arc#stroke",
    "longname": "Konva.Arc#stroke",
    "name": "stroke",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#stroke",
    "inherited": true,
    "description": "get/set stroke color",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get stroke color\nvar stroke = shape.stroke();\n\n// set stroke color with color string\nshape.stroke('green');\n\n// set stroke color with hex\nshape.stroke('#00ff00');\n\n// set stroke color with rgb\nshape.stroke('rgb(0,255,0)');\n\n// set stroke color with rgba and make it 50% opaque\nshape.stroke('rgba(0,255,0,0.5');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7360,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1108
  },
  {
    "id": "Konva.Arc#strokeWidth",
    "longname": "Konva.Arc#strokeWidth",
    "name": "strokeWidth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeWidth",
    "inherited": true,
    "description": "get/set stroke width",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "strokeWidth"
      }
    ],
    "examples": [
      "// get stroke width\nvar strokeWidth = shape.strokeWidth();\n\n// set stroke width\nshape.strokeWidth(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7383,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1109
  },
  {
    "id": "Konva.Arc#fillAfterStrokeEnabled",
    "longname": "Konva.Arc#fillAfterStrokeEnabled",
    "name": "fillAfterStrokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillAfterStrokeEnabled",
    "inherited": true,
    "description": "get/set fillAfterStrokeEnabled property. By default Konva is drawing filling first, then stroke on top of the fill.\nIn rare situations you may want a different behavior. When you have a stroke first then fill on top of it.\nEspecially useful for Text objects.\nDefault is false.",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "fillAfterStrokeEnabled"
      }
    ],
    "examples": [
      "// get stroke width\nvar fillAfterStrokeEnabled = shape.fillAfterStrokeEnabled();\n\n// set stroke width\nshape.fillAfterStrokeEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7397,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1110
  },
  {
    "id": "Konva.Arc#hitStrokeWidth",
    "longname": "Konva.Arc#hitStrokeWidth",
    "name": "hitStrokeWidth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hitStrokeWidth",
    "inherited": true,
    "description": "get/set stroke width for hit detection. Default value is \"auto\", it means it will be equals to strokeWidth",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "hitStrokeWidth"
      }
    ],
    "examples": [
      "// get stroke width\nvar hitStrokeWidth = shape.hitStrokeWidth();\n\n// set hit stroke width\nshape.hitStrokeWidth(20);\n// set hit stroke width always equals to scene stroke width\nshape.hitStrokeWidth('auto');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7414,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1111
  },
  {
    "id": "Konva.Arc#strokeHitEnabled",
    "longname": "Konva.Arc#strokeHitEnabled",
    "name": "strokeHitEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeHitEnabled",
    "inherited": true,
    "description": "**deprecated, use hitStrokeWidth instead!** get/set strokeHitEnabled property. Useful for performance optimization.\nYou may set `shape.strokeHitEnabled(false)`. In this case stroke will be no draw on hit canvas, so hit area\nof shape will be decreased (by lineWidth / 2). Remember that non closed line with `strokeHitEnabled = false`\nwill be not drawn on hit canvas, that is mean line will no trigger pointer events (like mouseover)\nDefault value is true.",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "strokeHitEnabled"
      }
    ],
    "examples": [
      "// get strokeHitEnabled\nvar strokeHitEnabled = shape.strokeHitEnabled();\n\n// set strokeHitEnabled\nshape.strokeHitEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7430,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1112
  },
  {
    "id": "Konva.Arc#perfectDrawEnabled",
    "longname": "Konva.Arc#perfectDrawEnabled",
    "name": "perfectDrawEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#perfectDrawEnabled",
    "inherited": true,
    "description": "get/set perfectDrawEnabled. If a shape has fill, stroke and opacity you may set `perfectDrawEnabled` to false to improve performance.\nSee http://konvajs.org/docs/performance/Disable_Perfect_Draw.html for more information.\nDefault value is true",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "perfectDrawEnabled"
      }
    ],
    "examples": [
      "// get perfectDrawEnabled\nvar perfectDrawEnabled = shape.perfectDrawEnabled();\n\n// set perfectDrawEnabled\nshape.perfectDrawEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7448,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1113
  },
  {
    "id": "Konva.Arc#shadowForStrokeEnabled",
    "longname": "Konva.Arc#shadowForStrokeEnabled",
    "name": "shadowForStrokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowForStrokeEnabled",
    "inherited": true,
    "description": "get/set shadowForStrokeEnabled. Useful for performance optimization.\nYou may set `shape.shadowForStrokeEnabled(false)`. In this case stroke will no effect shadow.\nRemember if you set `shadowForStrokeEnabled = false` for non closed line - that line will have no shadow!.\nDefault value is true",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "shadowForStrokeEnabled"
      }
    ],
    "examples": [
      "// get shadowForStrokeEnabled\nvar shadowForStrokeEnabled = shape.shadowForStrokeEnabled();\n\n// set shadowForStrokeEnabled\nshape.shadowForStrokeEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7464,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1114
  },
  {
    "id": "Konva.Arc#lineJoin",
    "longname": "Konva.Arc#lineJoin",
    "name": "lineJoin",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#lineJoin",
    "inherited": true,
    "description": "get/set line join.  Can be miter, round, or bevel.  The\n default is miter",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "lineJoin"
      }
    ],
    "examples": [
      "// get line join\nvar lineJoin = shape.lineJoin();\n\n// set line join\nshape.lineJoin('round');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7481,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1115
  },
  {
    "id": "Konva.Arc#lineCap",
    "longname": "Konva.Arc#lineCap",
    "name": "lineCap",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#lineCap",
    "inherited": true,
    "description": "get/set line cap.  Can be butt, round, or square",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "lineCap"
      }
    ],
    "examples": [
      "// get line cap\nvar lineCap = shape.lineCap();\n\n// set line cap\nshape.lineCap('round');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7496,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1116
  },
  {
    "id": "Konva.Arc#sceneFunc",
    "longname": "Konva.Arc#sceneFunc",
    "name": "sceneFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#sceneFunc",
    "inherited": true,
    "description": "get/set scene draw function. That function is used to draw the shape on a canvas.\nAlso that function will be used to draw hit area of the shape, in case if hitFunc is not defined.",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "drawing function",
        "name": "drawFunc"
      }
    ],
    "examples": [
      "// get scene draw function\nvar sceneFunc = shape.sceneFunc();\n\n// set scene draw function\nshape.sceneFunc(function(context, shape) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  // like stroke and fill\n  context.fillStrokeShape(shape);\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7510,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1117
  },
  {
    "id": "Konva.Arc#hitFunc",
    "longname": "Konva.Arc#hitFunc",
    "name": "hitFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hitFunc",
    "inherited": true,
    "description": "get/set hit draw function. That function is used to draw custom hit area of a shape.",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "drawing function",
        "name": "drawFunc"
      }
    ],
    "examples": [
      "// get hit draw function\nvar hitFunc = shape.hitFunc();\n\n// set hit draw function\nshape.hitFunc(function(context) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  context.fillStrokeShape(shape);\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7532,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1118
  },
  {
    "id": "Konva.Arc#dash",
    "longname": "Konva.Arc#dash",
    "name": "dash",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#dash",
    "inherited": true,
    "overrides": "Konva.Shape#dash",
    "description": "get/set dash array for stroke.",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "dash"
      }
    ],
    "examples": [
      "// apply dashed stroke that is 10px long and 5 pixels apart\n line.dash([10, 5]);\n // apply dashed stroke that is made up of alternating dashed\n // lines that are 10px long and 20px apart, and dots that have\n // a radius of 5px and are 20px apart\n line.dash([10, 20, 0.001, 20]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7552,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1119
  },
  {
    "id": "Konva.Arc#shadowColor",
    "longname": "Konva.Arc#shadowColor",
    "name": "shadowColor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowColor",
    "inherited": true,
    "description": "get/set shadow color",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get shadow color\nvar shadow = shape.shadowColor();\n\n// set shadow color with color string\nshape.shadowColor('green');\n\n// set shadow color with hex\nshape.shadowColor('#00ff00');\n\n// set shadow color with rgb\nshape.shadowColor('rgb(0,255,0)');\n\n// set shadow color with rgba and make it 50% opaque\nshape.shadowColor('rgba(0,255,0,0.5');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7579,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1120
  },
  {
    "id": "Konva.Arc#shadowBlur",
    "longname": "Konva.Arc#shadowBlur",
    "name": "shadowBlur",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowBlur",
    "inherited": true,
    "description": "get/set shadow blur",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "blur"
      }
    ],
    "examples": [
      "// get shadow blur\nvar shadowBlur = shape.shadowBlur();\n\n// set shadow blur\nshape.shadowBlur(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7602,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1121
  },
  {
    "id": "Konva.Arc#shadowOpacity",
    "longname": "Konva.Arc#shadowOpacity",
    "name": "shadowOpacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOpacity",
    "inherited": true,
    "description": "get/set shadow opacity.  must be a value between 0 and 1",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "opacity"
      }
    ],
    "examples": [
      "// get shadow opacity\nvar shadowOpacity = shape.shadowOpacity();\n\n// set shadow opacity\nshape.shadowOpacity(0.5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7616,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1122
  },
  {
    "id": "Konva.Arc#shadowOffset",
    "longname": "Konva.Arc#shadowOffset",
    "name": "shadowOffset",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffset",
    "inherited": true,
    "description": "get/set shadow offset",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.y"
      }
    ],
    "examples": [
      "// get shadow offset\nvar shadowOffset = shape.shadowOffset();\n\n// set shadow offset\nshape.shadowOffset({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7630,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1123
  },
  {
    "id": "Konva.Arc#shadowOffsetX",
    "longname": "Konva.Arc#shadowOffsetX",
    "name": "shadowOffsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffsetX",
    "inherited": true,
    "description": "get/set shadow offset x",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get shadow offset x\nvar shadowOffsetX = shape.shadowOffsetX();\n\n// set shadow offset x\nshape.shadowOffsetX(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7649,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1124
  },
  {
    "id": "Konva.Arc#shadowOffsetY",
    "longname": "Konva.Arc#shadowOffsetY",
    "name": "shadowOffsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffsetY",
    "inherited": true,
    "description": "get/set shadow offset y",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get shadow offset y\nvar shadowOffsetY = shape.shadowOffsetY();\n\n// set shadow offset y\nshape.shadowOffsetY(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7663,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1125
  },
  {
    "id": "Konva.Arc#fillPatternImage",
    "longname": "Konva.Arc#fillPatternImage",
    "name": "fillPatternImage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternImage",
    "inherited": true,
    "description": "get/set fill pattern image",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Image"
          ]
        },
        "description": "object",
        "name": "image"
      }
    ],
    "examples": [
      "// get fill pattern image\nvar fillPatternImage = shape.fillPatternImage();\n\n// set fill pattern image\nvar imageObj = new Image();\nimageObj.onload = function() {\n  shape.fillPatternImage(imageObj);\n};\nimageObj.src = 'path/to/image/jpg';"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Image"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7677,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1126
  },
  {
    "id": "Konva.Arc#fill",
    "longname": "Konva.Arc#fill",
    "name": "fill",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fill",
    "inherited": true,
    "description": "get/set fill color",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get fill color\nvar fill = shape.fill();\n\n// set fill color with color string\nshape.fill('green');\n\n// set fill color with hex\nshape.fill('#00ff00');\n\n// set fill color with rgb\nshape.fill('rgb(0,255,0)');\n\n// set fill color with rgba and make it 50% opaque\nshape.fill('rgba(0,255,0,0.5');\n\n// shape without fill\nshape.fill(null);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7695,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1127
  },
  {
    "id": "Konva.Arc#fillPatternX",
    "longname": "Konva.Arc#fillPatternX",
    "name": "fillPatternX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternX",
    "inherited": true,
    "description": "get/set fill pattern x",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern x\nvar fillPatternX = shape.fillPatternX();\n// set fill pattern x\nshape.fillPatternX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7721,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1128
  },
  {
    "id": "Konva.Arc#fillPatternY",
    "longname": "Konva.Arc#fillPatternY",
    "name": "fillPatternY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternY",
    "inherited": true,
    "description": "get/set fill pattern y",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern y\nvar fillPatternY = shape.fillPatternY();\n// set fill pattern y\nshape.fillPatternY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7734,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1129
  },
  {
    "id": "Konva.Arc#fillLinearGradientColorStops",
    "longname": "Konva.Arc#fillLinearGradientColorStops",
    "name": "fillLinearGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientColorStops",
    "inherited": true,
    "description": "get/set fill linear gradient color stops",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get fill linear gradient color stops\nvar colorStops = shape.fillLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillLinearGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "colorStops"
      }
    ],
    "meta": {
      "lineno": 7747,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1130
  },
  {
    "id": "Konva.Arc#strokeLinearGradientColorStops",
    "longname": "Konva.Arc#strokeLinearGradientColorStops",
    "name": "strokeLinearGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientColorStops",
    "inherited": true,
    "description": "get/set stroke linear gradient color stops",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get stroke linear gradient color stops\nvar colorStops = shape.strokeLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.strokeLinearGradientColorStops([0, 'red', 0.5, 'blue', 1, 'green']);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "colorStops"
      }
    ],
    "meta": {
      "lineno": 7762,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1131
  },
  {
    "id": "Konva.Arc#fillRadialGradientStartRadius",
    "longname": "Konva.Arc#fillRadialGradientStartRadius",
    "name": "fillRadialGradientStartRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartRadius",
    "inherited": true,
    "description": "get/set fill radial gradient start radius",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "radius"
      }
    ],
    "examples": [
      "// get radial gradient start radius\nvar startRadius = shape.fillRadialGradientStartRadius();\n\n// set radial gradient start radius\nshape.fillRadialGradientStartRadius(0);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7777,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1132
  },
  {
    "id": "Konva.Arc#fillRadialGradientEndRadius",
    "longname": "Konva.Arc#fillRadialGradientEndRadius",
    "name": "fillRadialGradientEndRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndRadius",
    "inherited": true,
    "description": "get/set fill radial gradient end radius",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "radius"
      }
    ],
    "examples": [
      "// get radial gradient end radius\nvar endRadius = shape.fillRadialGradientEndRadius();\n\n// set radial gradient end radius\nshape.fillRadialGradientEndRadius(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7791,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1133
  },
  {
    "id": "Konva.Arc#fillRadialGradientColorStops",
    "longname": "Konva.Arc#fillRadialGradientColorStops",
    "name": "fillRadialGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientColorStops",
    "inherited": true,
    "description": "get/set fill radial gradient color stops",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get fill radial gradient color stops\nvar colorStops = shape.fillRadialGradientColorStops();\n\n// create a radial gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillRadialGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7805,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1134
  },
  {
    "id": "Konva.Arc#fillPatternRepeat",
    "longname": "Konva.Arc#fillPatternRepeat",
    "name": "fillPatternRepeat",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternRepeat",
    "inherited": true,
    "description": "get/set fill pattern repeat.  Can be 'repeat', 'repeat-x', 'repeat-y', or 'no-repeat'.  The default is 'repeat'",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "repeat"
      }
    ],
    "examples": [
      "// get fill pattern repeat\nvar repeat = shape.fillPatternRepeat();\n\n// repeat pattern in x direction only\nshape.fillPatternRepeat('repeat-x');\n\n// do not repeat the pattern\nshape.fillPatternRepeat('no-repeat');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7820,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1135
  },
  {
    "id": "Konva.Arc#fillEnabled",
    "longname": "Konva.Arc#fillEnabled",
    "name": "fillEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillEnabled",
    "inherited": true,
    "description": "get/set fill enabled flag",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get fill enabled flag\nvar fillEnabled = shape.fillEnabled();\n\n// disable fill\nshape.fillEnabled(false);\n\n// enable fill\nshape.fillEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7837,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1136
  },
  {
    "id": "Konva.Arc#strokeEnabled",
    "longname": "Konva.Arc#strokeEnabled",
    "name": "strokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeEnabled",
    "inherited": true,
    "description": "get/set stroke enabled flag",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get stroke enabled flag\nvar strokeEnabled = shape.strokeEnabled();\n\n// disable stroke\nshape.strokeEnabled(false);\n\n// enable stroke\nshape.strokeEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7854,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1137
  },
  {
    "id": "Konva.Arc#shadowEnabled",
    "longname": "Konva.Arc#shadowEnabled",
    "name": "shadowEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowEnabled",
    "inherited": true,
    "description": "get/set shadow enabled flag",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get shadow enabled flag\nvar shadowEnabled = shape.shadowEnabled();\n\n// disable shadow\nshape.shadowEnabled(false);\n\n// enable shadow\nshape.shadowEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7871,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1138
  },
  {
    "id": "Konva.Arc#dashEnabled",
    "longname": "Konva.Arc#dashEnabled",
    "name": "dashEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#dashEnabled",
    "inherited": true,
    "description": "get/set dash enabled flag",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get dash enabled flag\nvar dashEnabled = shape.dashEnabled();\n\n// disable dash\nshape.dashEnabled(false);\n\n// enable dash\nshape.dashEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7888,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1139
  },
  {
    "id": "Konva.Arc#strokeScaleEnabled",
    "longname": "Konva.Arc#strokeScaleEnabled",
    "name": "strokeScaleEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeScaleEnabled",
    "inherited": true,
    "description": "get/set strokeScale enabled flag",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get stroke scale enabled flag\nvar strokeScaleEnabled = shape.strokeScaleEnabled();\n\n// disable stroke scale\nshape.strokeScaleEnabled(false);\n\n// enable stroke scale\nshape.strokeScaleEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7905,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1140
  },
  {
    "id": "Konva.Arc#fillPriority",
    "longname": "Konva.Arc#fillPriority",
    "name": "fillPriority",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPriority",
    "inherited": true,
    "description": "get/set fill priority.  can be color, pattern, linear-gradient, or radial-gradient.  The default is color.\n  This is handy if you want to toggle between different fill types.",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "priority"
      }
    ],
    "examples": [
      "// get fill priority\nvar fillPriority = shape.fillPriority();\n\n// set fill priority\nshape.fillPriority('linear-gradient');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7922,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1141
  },
  {
    "id": "Konva.Arc#fillPatternOffset",
    "longname": "Konva.Arc#fillPatternOffset",
    "name": "fillPatternOffset",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffset",
    "inherited": true,
    "description": "get/set fill pattern offset",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.y"
      }
    ],
    "examples": [
      "// get fill pattern offset\nvar patternOffset = shape.fillPatternOffset();\n\n// set fill pattern offset\nshape.fillPatternOffset({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7937,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1142
  },
  {
    "id": "Konva.Arc#fillPatternOffsetX",
    "longname": "Konva.Arc#fillPatternOffsetX",
    "name": "fillPatternOffsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffsetX",
    "inherited": true,
    "description": "get/set fill pattern offset x",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern offset x\nvar patternOffsetX = shape.fillPatternOffsetX();\n\n// set fill pattern offset x\nshape.fillPatternOffsetX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7956,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1143
  },
  {
    "id": "Konva.Arc#fillPatternOffsetY",
    "longname": "Konva.Arc#fillPatternOffsetY",
    "name": "fillPatternOffsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffsetY",
    "inherited": true,
    "description": "get/set fill pattern offset y",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern offset y\nvar patternOffsetY = shape.fillPatternOffsetY();\n\n// set fill pattern offset y\nshape.fillPatternOffsetY(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7970,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1144
  },
  {
    "id": "Konva.Arc#fillPatternScale",
    "longname": "Konva.Arc#fillPatternScale",
    "name": "fillPatternScale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScale",
    "inherited": true,
    "description": "get/set fill pattern scale",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.y"
      }
    ],
    "examples": [
      "// get fill pattern scale\nvar patternScale = shape.fillPatternScale();\n\n// set fill pattern scale\nshape.fillPatternScale({\n  x: 2,\n  y: 2\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7984,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1145
  },
  {
    "id": "Konva.Arc#fillPatternScaleX",
    "longname": "Konva.Arc#fillPatternScaleX",
    "name": "fillPatternScaleX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScaleX",
    "inherited": true,
    "description": "get/set fill pattern scale x",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern scale x\nvar patternScaleX = shape.fillPatternScaleX();\n\n// set fill pattern scale x\nshape.fillPatternScaleX(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8003,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1146
  },
  {
    "id": "Konva.Arc#fillPatternScaleY",
    "longname": "Konva.Arc#fillPatternScaleY",
    "name": "fillPatternScaleY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScaleY",
    "inherited": true,
    "description": "get/set fill pattern scale y",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern scale y\nvar patternScaleY = shape.fillPatternScaleY();\n\n// set fill pattern scale y\nshape.fillPatternScaleY(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8017,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1147
  },
  {
    "id": "Konva.Arc#fillLinearGradientStartPoint",
    "longname": "Konva.Arc#fillLinearGradientStartPoint",
    "name": "fillLinearGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPoint",
    "inherited": true,
    "description": "get/set fill linear gradient start point",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get fill linear gradient start point\nvar startPoint = shape.fillLinearGradientStartPoint();\n\n// set fill linear gradient start point\nshape.fillLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8034,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1148
  },
  {
    "id": "Konva.Arc#strokeLinearGradientStartPoint",
    "longname": "Konva.Arc#strokeLinearGradientStartPoint",
    "name": "strokeLinearGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientStartPoint",
    "inherited": true,
    "description": "get/set stroke linear gradient start point",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point\nvar startPoint = shape.strokeLinearGradientStartPoint();\n\n// set stroke linear gradient start point\nshape.strokeLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8056,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1149
  },
  {
    "id": "Konva.Arc#fillLinearGradientStartPointX",
    "longname": "Konva.Arc#fillLinearGradientStartPointX",
    "name": "fillLinearGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPointX",
    "inherited": true,
    "description": "get/set fill linear gradient start point x",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill linear gradient start point x\nvar startPointX = shape.fillLinearGradientStartPointX();\n\n// set fill linear gradient start point x\nshape.fillLinearGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8075,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1150
  },
  {
    "id": "Konva.Arc#linearLinearGradientStartPointX",
    "longname": "Konva.Arc#linearLinearGradientStartPointX",
    "name": "linearLinearGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#linearLinearGradientStartPointX",
    "inherited": true,
    "description": "get/set stroke linear gradient start point x",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point x\nvar startPointX = shape.strokeLinearGradientStartPointX();\n\n// set stroke linear gradient start point x\nshape.strokeLinearGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8089,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1151
  },
  {
    "id": "Konva.Arc#fillLinearGradientStartPointY",
    "longname": "Konva.Arc#fillLinearGradientStartPointY",
    "name": "fillLinearGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPointY",
    "inherited": true,
    "description": "get/set fill linear gradient start point y",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill linear gradient start point y\nvar startPointY = shape.fillLinearGradientStartPointY();\n\n// set fill linear gradient start point y\nshape.fillLinearGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8103,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1152
  },
  {
    "id": "Konva.Arc#strokeLinearGradientStartPointY",
    "longname": "Konva.Arc#strokeLinearGradientStartPointY",
    "name": "strokeLinearGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientStartPointY",
    "inherited": true,
    "description": "get/set stroke linear gradient start point y",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point y\nvar startPointY = shape.strokeLinearGradientStartPointY();\n\n// set stroke linear gradient start point y\nshape.strokeLinearGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8117,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1153
  },
  {
    "id": "Konva.Arc#fillLinearGradientEndPoint",
    "longname": "Konva.Arc#fillLinearGradientEndPoint",
    "name": "fillLinearGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPoint",
    "inherited": true,
    "description": "get/set fill linear gradient end point",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get fill linear gradient end point\nvar endPoint = shape.fillLinearGradientEndPoint();\n\n// set fill linear gradient end point\nshape.fillLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8134,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1154
  },
  {
    "id": "Konva.Arc#strokeLinearGradientEndPoint",
    "longname": "Konva.Arc#strokeLinearGradientEndPoint",
    "name": "strokeLinearGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPoint",
    "inherited": true,
    "description": "get/set stroke linear gradient end point",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point\nvar endPoint = shape.strokeLinearGradientEndPoint();\n\n// set stroke linear gradient end point\nshape.strokeLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8156,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1155
  },
  {
    "id": "Konva.Arc#fillLinearGradientEndPointX",
    "longname": "Konva.Arc#fillLinearGradientEndPointX",
    "name": "fillLinearGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPointX",
    "inherited": true,
    "description": "get/set fill linear gradient end point x",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill linear gradient end point x\nvar endPointX = shape.fillLinearGradientEndPointX();\n\n// set fill linear gradient end point x\nshape.fillLinearGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8175,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1156
  },
  {
    "id": "Konva.Arc#strokeLinearGradientEndPointX",
    "longname": "Konva.Arc#strokeLinearGradientEndPointX",
    "name": "strokeLinearGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPointX",
    "inherited": true,
    "description": "get/set fill linear gradient end point x",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point x\nvar endPointX = shape.strokeLinearGradientEndPointX();\n\n// set stroke linear gradient end point x\nshape.strokeLinearGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8189,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1157
  },
  {
    "id": "Konva.Arc#fillLinearGradientEndPointY",
    "longname": "Konva.Arc#fillLinearGradientEndPointY",
    "name": "fillLinearGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPointY",
    "inherited": true,
    "description": "get/set fill linear gradient end point y",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill linear gradient end point y\nvar endPointY = shape.fillLinearGradientEndPointY();\n\n// set fill linear gradient end point y\nshape.fillLinearGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8203,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1158
  },
  {
    "id": "Konva.Arc#strokeLinearGradientEndPointY",
    "longname": "Konva.Arc#strokeLinearGradientEndPointY",
    "name": "strokeLinearGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPointY",
    "inherited": true,
    "description": "get/set stroke linear gradient end point y",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point y\nvar endPointY = shape.strokeLinearGradientEndPointY();\n\n// set stroke linear gradient end point y\nshape.strokeLinearGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8217,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1159
  },
  {
    "id": "Konva.Arc#fillRadialGradientStartPoint",
    "longname": "Konva.Arc#fillRadialGradientStartPoint",
    "name": "fillRadialGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPoint",
    "inherited": true,
    "description": "get/set fill radial gradient start point",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get fill radial gradient start point\nvar startPoint = shape.fillRadialGradientStartPoint();\n\n// set fill radial gradient start point\nshape.fillRadialGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8234,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1160
  },
  {
    "id": "Konva.Arc#fillRadialGradientStartPointX",
    "longname": "Konva.Arc#fillRadialGradientStartPointX",
    "name": "fillRadialGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPointX",
    "inherited": true,
    "description": "get/set fill radial gradient start point x",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill radial gradient start point x\nvar startPointX = shape.fillRadialGradientStartPointX();\n\n// set fill radial gradient start point x\nshape.fillRadialGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8253,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1161
  },
  {
    "id": "Konva.Arc#fillRadialGradientStartPointY",
    "longname": "Konva.Arc#fillRadialGradientStartPointY",
    "name": "fillRadialGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPointY",
    "inherited": true,
    "description": "get/set fill radial gradient start point y",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill radial gradient start point y\nvar startPointY = shape.fillRadialGradientStartPointY();\n\n// set fill radial gradient start point y\nshape.fillRadialGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8267,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1162
  },
  {
    "id": "Konva.Arc#fillRadialGradientEndPoint",
    "longname": "Konva.Arc#fillRadialGradientEndPoint",
    "name": "fillRadialGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPoint",
    "inherited": true,
    "description": "get/set fill radial gradient end point",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get fill radial gradient end point\nvar endPoint = shape.fillRadialGradientEndPoint();\n\n// set fill radial gradient end point\nshape.fillRadialGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8284,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1163
  },
  {
    "id": "Konva.Arc#fillRadialGradientEndPointX",
    "longname": "Konva.Arc#fillRadialGradientEndPointX",
    "name": "fillRadialGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPointX",
    "inherited": true,
    "description": "get/set fill radial gradient end point x",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill radial gradient end point x\nvar endPointX = shape.fillRadialGradientEndPointX();\n\n// set fill radial gradient end point x\nshape.fillRadialGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8303,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1164
  },
  {
    "id": "Konva.Arc#fillRadialGradientEndPointY",
    "longname": "Konva.Arc#fillRadialGradientEndPointY",
    "name": "fillRadialGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPointY",
    "inherited": true,
    "description": "get/set fill radial gradient end point y",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill radial gradient end point y\nvar endPointY = shape.fillRadialGradientEndPointY();\n\n// set fill radial gradient end point y\nshape.fillRadialGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8317,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1165
  },
  {
    "id": "Konva.Arc#fillPatternRotation",
    "longname": "Konva.Arc#fillPatternRotation",
    "name": "fillPatternRotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternRotation",
    "inherited": true,
    "description": "get/set fill pattern rotation in degrees",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get fill pattern rotation\nvar patternRotation = shape.fillPatternRotation();\n\n// set fill pattern rotation\nshape.fillPatternRotation(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8331,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1166
  },
  {
    "id": "Konva.Arc#fillRule",
    "longname": "Konva.Arc#fillRule",
    "name": "fillRule",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRule",
    "inherited": true,
    "description": "get/set fill rule",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "CanvasFillRule"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get fill rule\nvar fillRule = shape.fillRule();\n\n// set fill rule\nshape.fillRule('evenodd');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8345,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1167
  },
  {
    "id": "Konva.Arc#clearCache",
    "longname": "Konva.Arc#clearCache",
    "name": "clearCache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#clearCache",
    "inherited": true,
    "description": "clear cached canvas",
    "memberof": "Konva.Arc",
    "examples": [
      "node.clearCache();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2632,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1168
  },
  {
    "id": "Konva.Arc#cache",
    "longname": "Konva.Arc#cache",
    "name": "cache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#cache",
    "inherited": true,
    "description": "cache node to improve drawing performance, apply filters, or create more accurate\n hit regions. For all basic shapes size of cache canvas will be automatically detected.\n If you need to cache your custom `Konva.Shape` instance you have to pass shape's bounding box\n properties. Look at [https://konvajs.org/docs/performance/Shape_Caching.html](https://konvajs.org/docs/performance/Shape_Caching.html) for more information.",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "increase canvas size by `offset` pixel in all directions.",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "when set to true, a red border will be drawn around the cached\n region for debugging purposes",
        "name": "config.drawBorder"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "change quality (or pixel ratio) of cached image. pixelRatio = 2 will produce 2x sized cache.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "control imageSmoothingEnabled property of created canvas for cache",
        "name": "config.imageSmoothingEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "change quality (or pixel ratio) of cached hit canvas.",
        "name": "config.hitCanvasPixelRatio"
      }
    ],
    "examples": [
      "// cache a shape with the x,y position of the bounding box at the center and\n// the width and height of the bounding box equal to the width and height of\n// the shape obtained from shape.width() and shape.height()\nimage.cache();\n\n// cache a node and define the bounding box position and size\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200\n});\n\n// cache a node and draw a red border around the bounding box\n// for debugging purposes\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200,\n  offset : 10,\n  drawBorder: true\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2650,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1169
  },
  {
    "id": "Konva.Arc#isCached",
    "longname": "Konva.Arc#isCached",
    "name": "isCached",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isCached",
    "inherited": true,
    "description": "determine if node is currently cached",
    "memberof": "Konva.Arc",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2788,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1170
  },
  {
    "id": "Konva.Arc#getClientRect",
    "longname": "Konva.Arc#getClientRect",
    "name": "getClientRect",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getClientRect",
    "inherited": true,
    "description": "Return client rectangle `{x, y, width, height}` of node. This rectangle also include all styling (strokes, shadows, etc).\nThe purpose of the method is similar to getBoundingClientRect API of the DOM.",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply transform to node for calculating rect?",
        "name": "config.skipTransform"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply shadow to the node for calculating bound box?",
        "name": "config.skipShadow"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply stroke to the node for calculating bound box?",
        "name": "config.skipStroke"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "calculate client rect relative to one of the parents",
        "name": "config.relativeTo"
      }
    ],
    "examples": [
      "var rect = new Konva.Rect({\n     width : 100,\n     height : 100,\n     x : 50,\n     y : 50,\n     strokeWidth : 4,\n     stroke : 'black',\n     offsetX : 50,\n     scaleY : 2\n});\n\n// get client rect without think off transformations (position, rotation, scale, offset, etc)\nrect.getClientRect({ skipTransform: true});\n// returns {\n//     x : -2,   // two pixels for stroke / 2\n//     y : -2,\n//     width : 104, // increased by 4 for stroke\n//     height : 104\n//}\n\n// get client rect with transformation applied\nrect.getClientRect();\n// returns Object {x: -2, y: 46, width: 104, height: 208}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "rect with `{x, y, width, height}` properties"
      }
    ],
    "meta": {
      "lineno": 2797,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1171
  },
  {
    "id": "Konva.Arc#on",
    "longname": "Konva.Arc#on",
    "name": "on",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#on",
    "inherited": true,
    "description": "bind events to the node. KonvaJS supports mouseover, mousemove,\n mouseout, mouseenter, mouseleave, mousedown, mouseup, wheel, contextmenu, click, dblclick, touchstart, touchmove,\n touchend, tap, dbltap, dragstart, dragmove, and dragend events.\n Pass in a string of events delimited by a space to bind multiple events at once\n such as 'mousedown mouseup mousemove'. Include a namespace to bind an\n event by name such as 'click.foobar'.",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'click', 'mousedown touchstart', 'mousedown.foo touchstart.foo'",
        "name": "evtStr"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The handler function. The first argument of that function is event object. Event object has `target` as main target of the event, `currentTarget` as current node listener and `evt` as native browser event.",
        "name": "handler"
      }
    ],
    "examples": [
      "// add click listener\nnode.on('click', function() {\n  console.log('you clicked me!');\n});\n\n// get the target node\nnode.on('click', function(evt) {\n  console.log(evt.target);\n});\n\n// stop event propagation\nnode.on('click', function(evt) {\n  evt.cancelBubble = true;\n});\n\n// bind multiple listeners\nnode.on('click touchstart', function() {\n  console.log('you clicked/touched me!');\n});\n\n// namespace listener\nnode.on('click.foo', function() {\n  console.log('you clicked/touched me!');\n});\n\n// get the event type\nnode.on('click tap', function(evt) {\n  var eventType = evt.type;\n});\n\n// get native event object\nnode.on('click tap', function(evt) {\n  var nativeEvent = evt.evt;\n});\n\n// for change events, get the old and new val\nnode.on('xChange', function(evt) {\n  var oldVal = evt.oldVal;\n  var newVal = evt.newVal;\n});\n\n// get event targets\n// with event delegations\nlayer.on('click', 'Group', function(evt) {\n  var shape = evt.target;\n  var group = evt.currentTarget;\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2919,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1172
  },
  {
    "id": "Konva.Arc#off",
    "longname": "Konva.Arc#off",
    "name": "off",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#off",
    "inherited": true,
    "description": "remove event bindings from the node. Pass in a string of\n event types delimmited by a space to remove multiple event\n bindings at once such as 'mousedown mouseup mousemove'.\n include a namespace to remove an event binding by name\n such as 'click.foobar'. If you only give a name like '.foobar',\n all events in that namespace will be removed.",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'click', 'mousedown touchstart', '.foobar'",
        "name": "evtStr"
      }
    ],
    "examples": [
      "// remove listener\nnode.off('click');\n\n// remove multiple listeners\nnode.off('click touchstart');\n\n// remove listener by name\nnode.off('click.foo');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3007,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1173
  },
  {
    "id": "Konva.Arc#remove",
    "longname": "Konva.Arc#remove",
    "name": "remove",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#remove",
    "inherited": true,
    "description": "remove a node from parent, but don't destroy. You can reuse the node later.",
    "memberof": "Konva.Arc",
    "examples": [
      "node.remove();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3088,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1174
  },
  {
    "id": "Konva.Arc#destroy",
    "longname": "Konva.Arc#destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#destroy",
    "inherited": true,
    "description": "remove and destroy a node. Kill it and delete forever! You should not reuse node after destroy().\nIf the node is a container (Group, Stage or Layer) it will destroy all children too.",
    "memberof": "Konva.Arc",
    "examples": [
      "node.destroy();"
    ],
    "meta": {
      "lineno": 3125,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1175
  },
  {
    "id": "Konva.Arc#getAttr",
    "longname": "Konva.Arc#getAttr",
    "name": "getAttr",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAttr",
    "inherited": true,
    "description": "get attr",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "attr"
      }
    ],
    "examples": [
      "var x = node.getAttr('x');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer",
            "String",
            "Object",
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3138,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1176
  },
  {
    "id": "Konva.Arc#getAncestors",
    "longname": "Konva.Arc#getAncestors",
    "name": "getAncestors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAncestors",
    "inherited": true,
    "description": "get ancestors",
    "memberof": "Konva.Arc",
    "examples": [
      "shape.getAncestors().forEach(function(node) {\n  console.log(node.getId());\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3155,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1177
  },
  {
    "id": "Konva.Arc#getAttrs",
    "longname": "Konva.Arc#getAttrs",
    "name": "getAttrs",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAttrs",
    "inherited": true,
    "description": "get attrs object literal",
    "memberof": "Konva.Arc",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3173,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1178
  },
  {
    "id": "Konva.Arc#setAttrs",
    "longname": "Konva.Arc#setAttrs",
    "name": "setAttrs",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#setAttrs",
    "inherited": true,
    "description": "set multiple attrs at once using an object literal",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "object containing key value pairs",
        "name": "config"
      }
    ],
    "examples": [
      "node.setAttrs({\n  x: 5,\n  fill: 'red'\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3182,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1179
  },
  {
    "id": "Konva.Arc#isListening",
    "longname": "Konva.Arc#isListening",
    "name": "isListening",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isListening",
    "inherited": true,
    "description": "determine if node is listening for events by taking into account ancestors.\n\nParent    | Self      | isListening\nlistening | listening |\n----------+-----------+------------\nT         | T         | T\nT         | F         | F\nF         | T         | F\nF         | F         | F",
    "memberof": "Konva.Arc",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3217,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1180
  },
  {
    "id": "Konva.Arc#isVisible",
    "longname": "Konva.Arc#isVisible",
    "name": "isVisible",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isVisible",
    "inherited": true,
    "description": "determine if node is visible by taking into account ancestors.\n\nParent    | Self      | isVisible\nvisible   | visible   |\n----------+-----------+------------\nT         | T         | T\nT         | F         | F\nF         | T         | F\nF         | F         | F",
    "memberof": "Konva.Arc",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3248,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1181
  },
  {
    "id": "Konva.Arc#show",
    "longname": "Konva.Arc#show",
    "name": "show",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#show",
    "inherited": true,
    "description": "show node. set visible = true",
    "memberof": "Konva.Arc",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3300,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1182
  },
  {
    "id": "Konva.Arc#hide",
    "longname": "Konva.Arc#hide",
    "name": "hide",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hide",
    "inherited": true,
    "description": "hide node.  Hidden nodes are no longer detectable",
    "memberof": "Konva.Arc",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3310,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1183
  },
  {
    "id": "Konva.Arc#getAbsoluteZIndex",
    "longname": "Konva.Arc#getAbsoluteZIndex",
    "name": "getAbsoluteZIndex",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteZIndex",
    "inherited": true,
    "description": "get absolute z-index which takes into account sibling\n and ancestor indices",
    "memberof": "Konva.Arc",
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3323,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1184
  },
  {
    "id": "Konva.Arc#getDepth",
    "longname": "Konva.Arc#getDepth",
    "name": "getDepth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getDepth",
    "inherited": true,
    "description": "get node depth in node tree.  Returns an integer.\n e.g. Stage depth will always be 0.  Layers will always be 1.  Groups and Shapes will always\n be >= 2",
    "memberof": "Konva.Arc",
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3355,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1185
  },
  {
    "id": "Konva.Arc#getRelativePointerPosition",
    "longname": "Konva.Arc#getRelativePointerPosition",
    "name": "getRelativePointerPosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getRelativePointerPosition",
    "inherited": true,
    "description": "get position of first pointer (like mouse or first touch) relative to local coordinates of current node",
    "memberof": "Konva.Arc",
    "examples": [
      "// let's think we have a rectangle at position x = 10, y = 10\n// now we clicked at x = 15, y = 15 of the stage\n// if you want to know position of the click, related to the rectangle you can use\nrect.getRelativePointerPosition();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3398,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1186
  },
  {
    "id": "Konva.Arc#getAbsolutePosition",
    "longname": "Konva.Arc#getAbsolutePosition",
    "name": "getAbsolutePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsolutePosition",
    "inherited": true,
    "description": "get absolute position of a node. That function can be used to calculate absolute position, but relative to any ancestor",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "optional ancestor node",
        "name": "Ancestor"
      }
    ],
    "examples": [
      "// returns absolute position relative to top-left corner of canvas\nnode.getAbsolutePosition();\n\n// calculate absolute position of node, inside stage\n// so stage transforms are ignored\nnode.getAbsolutePosition(stage)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3426,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1187
  },
  {
    "id": "Konva.Arc#move",
    "longname": "Konva.Arc#move",
    "name": "move",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#move",
    "inherited": true,
    "description": "move node by an amount relative to its current position",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "change"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "change.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "change.y"
      }
    ],
    "examples": [
      "// move node in x direction by 1px and y direction by 2px\nnode.move({\n  x: 1,\n  y: 2\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3514,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1188
  },
  {
    "id": "Konva.Arc#rotate",
    "longname": "Konva.Arc#rotate",
    "name": "rotate",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#rotate",
    "inherited": true,
    "description": "rotate node by an amount in degrees relative to its current rotation",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "theta"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3559,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1189
  },
  {
    "id": "Konva.Arc#moveToTop",
    "longname": "Konva.Arc#moveToTop",
    "name": "moveToTop",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveToTop",
    "inherited": true,
    "description": "move node to the top of its siblings",
    "memberof": "Konva.Arc",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3570,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1190
  },
  {
    "id": "Konva.Arc#moveUp",
    "longname": "Konva.Arc#moveUp",
    "name": "moveUp",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveUp",
    "inherited": true,
    "description": "move node up",
    "memberof": "Konva.Arc",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "flag is moved or not"
      }
    ],
    "meta": {
      "lineno": 3590,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1191
  },
  {
    "id": "Konva.Arc#moveDown",
    "longname": "Konva.Arc#moveDown",
    "name": "moveDown",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveDown",
    "inherited": true,
    "description": "move node down",
    "memberof": "Konva.Arc",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3610,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1192
  },
  {
    "id": "Konva.Arc#moveToBottom",
    "longname": "Konva.Arc#moveToBottom",
    "name": "moveToBottom",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveToBottom",
    "inherited": true,
    "description": "move node to the bottom of its siblings",
    "memberof": "Konva.Arc",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3630,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1193
  },
  {
    "id": "Konva.Arc#getAbsoluteOpacity",
    "longname": "Konva.Arc#getAbsoluteOpacity",
    "name": "getAbsoluteOpacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteOpacity",
    "inherited": true,
    "description": "get absolute opacity",
    "memberof": "Konva.Arc",
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3668,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1194
  },
  {
    "id": "Konva.Arc#moveTo",
    "longname": "Konva.Arc#moveTo",
    "name": "moveTo",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveTo",
    "inherited": true,
    "description": "move node to another container",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Container"
          ]
        },
        "name": "newContainer"
      }
    ],
    "examples": [
      "// move node from current layer into layer2\nnode.moveTo(layer2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3685,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1195
  },
  {
    "id": "Konva.Arc#toObject",
    "longname": "Konva.Arc#toObject",
    "name": "toObject",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toObject",
    "inherited": true,
    "description": "convert Node into an object for serialization.  Returns an object.",
    "memberof": "Konva.Arc",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3703,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1196
  },
  {
    "id": "Konva.Arc#toJSON",
    "longname": "Konva.Arc#toJSON",
    "name": "toJSON",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toJSON",
    "inherited": true,
    "description": "convert Node into a JSON string.  Returns a JSON string.",
    "memberof": "Konva.Arc",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3736,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1197
  },
  {
    "id": "Konva.Arc#getParent",
    "longname": "Konva.Arc#getParent",
    "name": "getParent",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getParent",
    "inherited": true,
    "description": "get parent container",
    "memberof": "Konva.Arc",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3745,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1198
  },
  {
    "id": "Konva.Arc#findAncestors",
    "longname": "Konva.Arc#findAncestors",
    "name": "findAncestors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#findAncestors",
    "inherited": true,
    "description": "get all ancestors (parent then parent of the parent, etc) of the node",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "selector for search",
        "name": "selector"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "show we think that node is ancestro itself?",
        "name": "includeSelf"
      },
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "optional": true,
        "description": "optional node where we need to stop searching (one of ancestors)",
        "name": "stopNode"
      }
    ],
    "examples": [
      "// get one of the parent group\nvar parentGroups = node.findAncestors('Group');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "[ancestors]"
      }
    ],
    "meta": {
      "lineno": 3754,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1199
  },
  {
    "id": "Konva.Arc#findAncestor",
    "longname": "Konva.Arc#findAncestor",
    "name": "findAncestor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#findAncestor",
    "inherited": true,
    "description": "get ancestor (parent or parent of the parent, etc) of the node that match passed selector",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "selector for search",
        "name": "selector"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "show we think that node is ancestro itself?",
        "name": "includeSelf"
      },
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "optional": true,
        "description": "optional node where we need to stop searching (one of ancestors)",
        "name": "stopNode"
      }
    ],
    "examples": [
      "// get one of the parent group\nvar group = node.findAncestors('.mygroup');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "description": "ancestor"
      }
    ],
    "meta": {
      "lineno": 3786,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1200
  },
  {
    "id": "Konva.Arc#getLayer",
    "longname": "Konva.Arc#getLayer",
    "name": "getLayer",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getLayer",
    "inherited": true,
    "description": "get layer ancestor",
    "memberof": "Konva.Arc",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Layer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3837,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1201
  },
  {
    "id": "Konva.Arc#getStage",
    "longname": "Konva.Arc#getStage",
    "name": "getStage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getStage",
    "inherited": true,
    "description": "get stage ancestor",
    "memberof": "Konva.Arc",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Stage"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3847,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1202
  },
  {
    "id": "Konva.Arc#fire",
    "longname": "Konva.Arc#fire",
    "name": "fire",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#fire",
    "inherited": true,
    "description": "fire event",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "event type.  can be a regular event, like click, mouseover, or mouseout, or it can be a custom event, like myCustomEvent",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "Event"
          ]
        },
        "optional": true,
        "description": "event object",
        "name": "evt"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "setting the value to false, or leaving it undefined, will result in the event\n not bubbling.  Setting the value to true will result in the event bubbling.",
        "name": "bubble"
      }
    ],
    "examples": [
      "// manually fire click event\nnode.fire('click');\n\n// fire custom event\nnode.fire('foo');\n\n// fire custom event with custom event object\nnode.fire('foo', {\n  bar: 10\n});\n\n// fire click event that bubbles\nnode.fire('click', null, true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3865,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1203
  },
  {
    "id": "Konva.Arc#getAbsoluteTransform",
    "longname": "Konva.Arc#getAbsoluteTransform",
    "name": "getAbsoluteTransform",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteTransform",
    "inherited": true,
    "description": "get absolute transform of the node which takes into\n account its ancestor transforms",
    "memberof": "Konva.Arc",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3901,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1204
  },
  {
    "id": "Konva.Arc#getAbsoluteScale",
    "longname": "Konva.Arc#getAbsoluteScale",
    "name": "getAbsoluteScale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteScale",
    "inherited": true,
    "description": "get absolute scale of the node which takes into\n account its ancestor scales",
    "memberof": "Konva.Arc",
    "examples": [
      "// get absolute scale x\nvar scaleX = node.getAbsoluteScale().x;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3961,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1205
  },
  {
    "id": "Konva.Arc#getAbsoluteRotation",
    "longname": "Konva.Arc#getAbsoluteRotation",
    "name": "getAbsoluteRotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteRotation",
    "inherited": true,
    "description": "get absolute rotation of the node which takes into\n account its ancestor rotations",
    "memberof": "Konva.Arc",
    "examples": [
      "// get absolute rotation\nvar rotation = node.getAbsoluteRotation();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3989,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1206
  },
  {
    "id": "Konva.Arc#getTransform",
    "longname": "Konva.Arc#getTransform",
    "name": "getTransform",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getTransform",
    "inherited": true,
    "description": "get transform of the node",
    "memberof": "Konva.Arc",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4009,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1207
  },
  {
    "id": "Konva.Arc#clone",
    "longname": "Konva.Arc#clone",
    "name": "clone",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#clone",
    "inherited": true,
    "description": "clone node.  Returns a new Node instance with identical attributes.  You can also override\n the node properties with an object literal, enabling you to use an existing node as a template\n for another node",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "override attrs",
        "name": "obj"
      }
    ],
    "examples": [
      "// simple clone\nvar clone = node.clone();\n\n// clone a node and override the x position\nvar clone = rect.clone({\n  x: 5\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4044,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1208
  },
  {
    "id": "Konva.Arc#toCanvas",
    "longname": "Konva.Arc#toCanvas",
    "name": "toCanvas",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toCanvas",
    "inherited": true,
    "description": "converts node into an canvas element.",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output canvas. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var canvas = node.toCanvas();"
    ],
    "meta": {
      "lineno": 4119,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1209
  },
  {
    "id": "Konva.Arc#toDataURL",
    "longname": "Konva.Arc#toDataURL",
    "name": "toDataURL",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toDataURL",
    "inherited": true,
    "description": "Creates a composite data URL (base64 string). If MIME type is not\nspecified, then \"image/png\" will result. For \"image/jpeg\", specify a quality\nlevel as quality (range 0.0 - 1.0)",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"image/png\" or \"image/jpeg\".\n \"image/png\" is the default",
        "name": "config.mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "jpeg quality.  If using an \"image/jpeg\" mimeType,\n you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n is very high quality",
        "name": "config.quality"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output image url. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4140,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1210
  },
  {
    "id": "Konva.Arc#toImage",
    "longname": "Konva.Arc#toImage",
    "name": "toImage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toImage",
    "inherited": true,
    "description": "converts node into an image.  Since the toImage\n method is asynchronous, the resulting image can only be retrieved from the config callback\n or the returned Promise.  toImage is most commonly used\n to cache complex drawings as an image so that they don't have to constantly be redrawn",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"image/png\" or \"image/jpeg\".\n \"image/png\" is the default",
        "name": "config.mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "jpeg quality.  If using an \"image/jpeg\" mimeType,\n you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n is very high quality",
        "name": "config.quality"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output image. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var image = node.toImage({\n  callback(img) {\n    // do stuff with img\n  }\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Image>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4172,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1211
  },
  {
    "id": "Konva.Arc#toBlob",
    "longname": "Konva.Arc#toBlob",
    "name": "toBlob",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toBlob",
    "inherited": true,
    "description": "Converts node into a blob.  Since the toBlob method is asynchronous,\n the resulting blob can only be retrieved from the config callback\n or the returned Promise.",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output canvas. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var blob = await node.toBlob({});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Blob>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4219,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1212
  },
  {
    "id": "Konva.Arc#getClassName",
    "longname": "Konva.Arc#getClassName",
    "name": "getClassName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getClassName",
    "inherited": true,
    "description": "get class name, which may return Stage, Layer, Group, or shape class names like Rect, Circle, Text, etc.",
    "memberof": "Konva.Arc",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4267,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1213
  },
  {
    "id": "Konva.Arc#getType",
    "longname": "Konva.Arc#getType",
    "name": "getType",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getType",
    "inherited": true,
    "description": "get the node type, which may return Stage, Layer, Group, or Shape",
    "memberof": "Konva.Arc",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4276,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1214
  },
  {
    "id": "Konva.Arc#addName",
    "longname": "Konva.Arc#addName",
    "name": "addName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#addName",
    "inherited": true,
    "description": "add name to node",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red');\nnode.addName('selected');\nnode.name(); // return 'red selected'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4324,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1215
  },
  {
    "id": "Konva.Arc#hasName",
    "longname": "Konva.Arc#hasName",
    "name": "hasName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hasName",
    "inherited": true,
    "description": "check is node has name",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red');\nnode.hasName('red');   // return true\nnode.hasName('selected'); // return false\nnode.hasName(''); // return false"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4343,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1216
  },
  {
    "id": "Konva.Arc#removeName",
    "longname": "Konva.Arc#removeName",
    "name": "removeName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#removeName",
    "inherited": true,
    "description": "remove name from node",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red selected');\nnode.removeName('selected');\nnode.hasName('selected'); // return false\nnode.name(); // return 'red'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4367,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1217
  },
  {
    "id": "Konva.Arc#setAttr",
    "longname": "Konva.Arc#setAttr",
    "name": "setAttr",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#setAttr",
    "inherited": true,
    "description": "set attr",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "attr"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "name": "val"
      }
    ],
    "examples": [
      "node.setAttr('x', 5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4388,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1218
  },
  {
    "id": "Konva.Arc#draw",
    "longname": "Konva.Arc#draw",
    "name": "draw",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#draw",
    "inherited": true,
    "description": "draw both scene and hit graphs.  If the node being drawn is the stage, all of the layers will be cleared and redrawn",
    "memberof": "Konva.Arc",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4511,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1219
  },
  {
    "id": "Konva.Arc#startDrag",
    "longname": "Konva.Arc#startDrag",
    "name": "startDrag",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#startDrag",
    "inherited": true,
    "description": "initiate drag and drop.",
    "memberof": "Konva.Arc",
    "meta": {
      "lineno": 4544,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1220
  },
  {
    "id": "Konva.Arc#stopDrag",
    "longname": "Konva.Arc#stopDrag",
    "name": "stopDrag",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#stopDrag",
    "inherited": true,
    "description": "stop drag and drop",
    "memberof": "Konva.Arc",
    "meta": {
      "lineno": 4590,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1221
  },
  {
    "id": "Konva.Arc#isDragging",
    "longname": "Konva.Arc#isDragging",
    "name": "isDragging",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isDragging",
    "inherited": true,
    "description": "determine if node is currently in drag and drop mode",
    "memberof": "Konva.Arc",
    "meta": {
      "lineno": 4607,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1222
  },
  {
    "id": "Konva.Arc#isClientRectOnScreen",
    "longname": "Konva.Arc#isClientRectOnScreen",
    "name": "isClientRectOnScreen",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isClientRectOnScreen",
    "inherited": true,
    "description": "determine if node (at least partially) is currently in user-visible area",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number",
            "Object"
          ]
        },
        "description": "optional margin in pixels",
        "name": "margin"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "margin.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "margin.y"
      }
    ],
    "examples": [
      "// get index\n// default calculations\nvar isOnScreen = node.isClientRectOnScreen()\n// increase object size (or screen size) for cases when objects close to the screen still need to be marked as \"visible\"\nvar isOnScreen = node.isClientRectOnScreen({ x: stage.width(), y: stage.height() })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4671,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1223
  },
  {
    "id": "Konva.Arc#zIndex",
    "longname": "Konva.Arc#zIndex",
    "name": "zIndex",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#zIndex",
    "inherited": true,
    "description": "get/set zIndex relative to the node's siblings who share the same parent.\nPlease remember that zIndex is not absolute (like in CSS). It is relative to parent element only.",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "index"
      }
    ],
    "examples": [
      "// get index\nvar index = node.zIndex();\n\n// set index\nnode.zIndex(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4764,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1224
  },
  {
    "id": "Konva.Arc#absolutePosition",
    "longname": "Konva.Arc#absolutePosition",
    "name": "absolutePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#absolutePosition",
    "inherited": true,
    "description": "get/set node absolute position",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "// get position\nvar position = node.absolutePosition();\n\n// set position\nnode.absolutePosition({\n  x: 5,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4779,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1225
  },
  {
    "id": "Konva.Arc#position",
    "longname": "Konva.Arc#position",
    "name": "position",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#position",
    "inherited": true,
    "description": "get/set node position relative to parent",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "// get position\nvar position = node.position();\n\n// set position\nnode.position({\n  x: 5,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4799,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1226
  },
  {
    "id": "Konva.Arc#x",
    "longname": "Konva.Arc#x",
    "name": "x",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#x",
    "inherited": true,
    "description": "get/set x position",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get x\nvar x = node.x();\n\n// set x\nnode.x(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4818,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1227
  },
  {
    "id": "Konva.Arc#y",
    "longname": "Konva.Arc#y",
    "name": "y",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#y",
    "inherited": true,
    "description": "get/set y position",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get y\nvar y = node.y();\n\n// set y\nnode.y(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4832,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1228
  },
  {
    "id": "Konva.Arc#globalCompositeOperation",
    "longname": "Konva.Arc#globalCompositeOperation",
    "name": "globalCompositeOperation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#globalCompositeOperation",
    "inherited": true,
    "description": "get/set globalCompositeOperation of a node. globalCompositeOperation DOESN'T affect hit graph of nodes. So they are still trigger to events as they have default \"source-over\" globalCompositeOperation.",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "type"
      }
    ],
    "examples": [
      "// get globalCompositeOperation\nvar globalCompositeOperation = shape.globalCompositeOperation();\n\n// set globalCompositeOperation\nshape.globalCompositeOperation('source-in');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4846,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1229
  },
  {
    "id": "Konva.Arc#opacity",
    "longname": "Konva.Arc#opacity",
    "name": "opacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#opacity",
    "inherited": true,
    "description": "get/set opacity.  Opacity values range from 0 to 1.\n A node with an opacity of 0 is fully transparent, and a node\n with an opacity of 1 is fully opaque",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "opacity"
      }
    ],
    "examples": [
      "// get opacity\nvar opacity = node.opacity();\n\n// set opacity\nnode.opacity(0.5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4860,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1230
  },
  {
    "id": "Konva.Arc#name",
    "longname": "Konva.Arc#name",
    "name": "name",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#name",
    "inherited": true,
    "description": "get/set name.",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "// get name\nvar name = node.name();\n\n// set name\nnode.name('foo');\n\n// also node may have multiple names (as css classes)\nnode.name('foo bar');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4876,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1231
  },
  {
    "id": "Konva.Arc#id",
    "longname": "Konva.Arc#id",
    "name": "id",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#id",
    "inherited": true,
    "description": "get/set id. Id is global for whole page.",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "id"
      }
    ],
    "examples": [
      "// get id\nvar name = node.id();\n\n// set id\nnode.id('foo');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4893,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1232
  },
  {
    "id": "Konva.Arc#rotation",
    "longname": "Konva.Arc#rotation",
    "name": "rotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#rotation",
    "inherited": true,
    "description": "get/set rotation in degrees",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get rotation in degrees\nvar rotation = node.rotation();\n\n// set rotation in degrees\nnode.rotation(45);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4907,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1233
  },
  {
    "id": "Konva.Arc#scale",
    "longname": "Konva.Arc#scale",
    "name": "scale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scale",
    "inherited": true,
    "description": "get/set scale",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.y"
      }
    ],
    "examples": [
      "// get scale\nvar scale = node.scale();\n\n// set scale\nshape.scale({\n  x: 2,\n  y: 3\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4921,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1234
  },
  {
    "id": "Konva.Arc#scaleX",
    "longname": "Konva.Arc#scaleX",
    "name": "scaleX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scaleX",
    "inherited": true,
    "description": "get/set scale x",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get scale x\nvar scaleX = node.scaleX();\n\n// set scale x\nnode.scaleX(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4940,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1235
  },
  {
    "id": "Konva.Arc#scaleY",
    "longname": "Konva.Arc#scaleY",
    "name": "scaleY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scaleY",
    "inherited": true,
    "description": "get/set scale y",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get scale y\nvar scaleY = node.scaleY();\n\n// set scale y\nnode.scaleY(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4954,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1236
  },
  {
    "id": "Konva.Arc#skew",
    "longname": "Konva.Arc#skew",
    "name": "skew",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skew",
    "inherited": true,
    "description": "get/set skew",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "skew"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "skew.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "skew.y"
      }
    ],
    "examples": [
      "// get skew\nvar skew = node.skew();\n\n// set skew\nnode.skew({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4968,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1237
  },
  {
    "id": "Konva.Arc#skewX",
    "longname": "Konva.Arc#skewX",
    "name": "skewX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skewX",
    "inherited": true,
    "description": "get/set skew x",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get skew x\nvar skewX = node.skewX();\n\n// set skew x\nnode.skewX(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4987,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1238
  },
  {
    "id": "Konva.Arc#skewY",
    "longname": "Konva.Arc#skewY",
    "name": "skewY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skewY",
    "inherited": true,
    "description": "get/set skew y",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get skew y\nvar skewY = node.skewY();\n\n// set skew y\nnode.skewY(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5001,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1239
  },
  {
    "id": "Konva.Arc#offsetX",
    "longname": "Konva.Arc#offsetX",
    "name": "offsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#offsetX",
    "inherited": true,
    "description": "get/set offset x",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get offset x\nvar offsetX = node.offsetX();\n\n// set offset x\nnode.offsetX(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5033,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1240
  },
  {
    "id": "Konva.Arc#offsetY",
    "longname": "Konva.Arc#offsetY",
    "name": "offsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#offsetY",
    "inherited": true,
    "description": "get/set offset y",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get offset y\nvar offsetY = node.offsetY();\n\n// set offset y\nnode.offsetY(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5047,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1241
  },
  {
    "id": "Konva.Arc#dragDistance",
    "longname": "Konva.Arc#dragDistance",
    "name": "dragDistance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#dragDistance",
    "inherited": true,
    "description": "get/set drag distance",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "distance"
      }
    ],
    "examples": [
      "// get drag distance\nvar dragDistance = node.dragDistance();\n\n// set distance\n// node starts dragging only if pointer moved more then 3 pixels\nnode.dragDistance(3);\n// or set globally\nKonva.dragDistance = 3;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5061,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1242
  },
  {
    "id": "Konva.Arc#width",
    "longname": "Konva.Arc#width",
    "name": "width",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#width",
    "inherited": true,
    "description": "get/set width",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "width"
      }
    ],
    "examples": [
      "// get width\nvar width = node.width();\n\n// set width\nnode.width(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5078,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1243
  },
  {
    "id": "Konva.Arc#height",
    "longname": "Konva.Arc#height",
    "name": "height",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#height",
    "inherited": true,
    "description": "get/set height",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "height"
      }
    ],
    "examples": [
      "// get height\nvar height = node.height();\n\n// set height\nnode.height(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5092,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1244
  },
  {
    "id": "Konva.Arc#listening",
    "longname": "Konva.Arc#listening",
    "name": "listening",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#listening",
    "inherited": true,
    "description": "get/set listening attr.  If you need to determine if a node is listening or not\n  by taking into account its parents, use the isListening() method\n  nodes with listening set to false will not be detected in hit graph\n  so they will be ignored in container.getIntersection() method",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "Can be true, or false.  The default is true.",
        "name": "listening"
      }
    ],
    "examples": [
      "// get listening attr\nvar listening = node.listening();\n\n// stop listening for events, remove node and all its children from hit graph\nnode.listening(false);\n\n// listen to events according to the parent\nnode.listening(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5106,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1245
  },
  {
    "id": "Konva.Arc#preventDefault",
    "longname": "Konva.Arc#preventDefault",
    "name": "preventDefault",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#preventDefault",
    "inherited": true,
    "description": "get/set preventDefault\nBy default all shapes will prevent default behavior\nof a browser on a pointer move or tap.\nthat will prevent native scrolling when you are trying to drag&drop a node\nbut sometimes you may need to enable default actions\nin that case you can set the property to false",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "preventDefault"
      }
    ],
    "examples": [
      "// get preventDefault\nvar shouldPrevent = shape.preventDefault();\n\n// set preventDefault\nshape.preventDefault(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5125,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1246
  },
  {
    "id": "Konva.Arc#filters",
    "longname": "Konva.Arc#filters",
    "name": "filters",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#filters",
    "inherited": true,
    "description": "get/set filters.  Filters are applied to cached canvases",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "array of filters",
        "name": "filters"
      }
    ],
    "examples": [
      "// get filters\nvar filters = node.filters();\n\n// set a single filter\nnode.cache();\nnode.filters([Konva.Filters.Blur]);\n\n// set multiple filters\nnode.cache();\nnode.filters([\n  Konva.Filters.Blur,\n  Konva.Filters.Sepia,\n  Konva.Filters.Invert\n]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5148,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1247
  },
  {
    "id": "Konva.Arc#visible",
    "longname": "Konva.Arc#visible",
    "name": "visible",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#visible",
    "inherited": true,
    "description": "get/set visible attr.  Can be true, or false.  The default is true.\n  If you need to determine if a node is visible or not\n  by taking into account its parents, use the isVisible() method",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "visible"
      }
    ],
    "examples": [
      "// get visible attr\nvar visible = node.visible();\n\n// make invisible\nnode.visible(false);\n\n// make visible (according to the parent)\nnode.visible(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5171,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1248
  },
  {
    "id": "Konva.Arc#transformsEnabled",
    "longname": "Konva.Arc#transformsEnabled",
    "name": "transformsEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#transformsEnabled",
    "inherited": true,
    "description": "get/set transforms that are enabled.  Can be \"all\", \"none\", or \"position\".  The default\n is \"all\"",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// enable position transform only to improve draw performance\nnode.transformsEnabled('position');\n\n// enable all transforms\nnode.transformsEnabled('all');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5191,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1249
  },
  {
    "id": "Konva.Arc#size",
    "longname": "Konva.Arc#size",
    "name": "size",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#size",
    "inherited": true,
    "description": "get/set node size",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "size"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size.height"
      }
    ],
    "examples": [
      "// get node size\nvar size = node.size();\nvar width = size.width;\nvar height = size.height;\n\n// set size\nnode.size({\n  width: 100,\n  height: 200\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5205,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1250
  },
  {
    "id": "Konva.Arc#dragBoundFunc",
    "longname": "Konva.Arc#dragBoundFunc",
    "name": "dragBoundFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#dragBoundFunc",
    "inherited": true,
    "description": "get/set drag bound function.  This is used to override the default\n drag and drop position.",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "name": "dragBoundFunc"
      }
    ],
    "examples": [
      "// get drag bound function\nvar dragBoundFunc = node.dragBoundFunc();\n\n// create vertical drag and drop\nnode.dragBoundFunc(function(pos){\n  // important pos - is absolute position of the node\n  // you should return absolute position too\n  return {\n    x: this.absolutePosition().x,\n    y: pos.y\n  };\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5226,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1251
  },
  {
    "id": "Konva.Arc#draggable",
    "longname": "Konva.Arc#draggable",
    "name": "draggable",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#draggable",
    "inherited": true,
    "description": "get/set draggable flag",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "draggable"
      }
    ],
    "examples": [
      "// get draggable flag\nvar draggable = node.draggable();\n\n// enable drag and drop\nnode.draggable(true);\n\n// disable drag and drop\nnode.draggable(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5248,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1252
  },
  {
    "id": "Konva.Arc#to",
    "longname": "Konva.Arc#to",
    "name": "to",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#to",
    "inherited": true,
    "description": "Tween node properties. Shorter usage of {@link Konva.Tween} object.",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "tween params",
        "name": "params"
      }
    ],
    "examples": [
      "circle.to({\n  x : 50,\n  duration : 0.5,\n  onUpdate: () => console.log('props updated'),\n  onFinish: () => console.log('finished'),\n});"
    ],
    "meta": {
      "lineno": 9588,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1253
  },
  {
    "id": "Konva.Arc#blurRadius",
    "longname": "Konva.Arc#blurRadius",
    "name": "blurRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#blurRadius",
    "inherited": true,
    "description": "get/set blur radius. Use with {@link Konva.Filters.Blur} filter",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "radius"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17517,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1254
  },
  {
    "id": "Konva.Arc#brightness",
    "longname": "Konva.Arc#brightness",
    "name": "brightness",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#brightness",
    "inherited": true,
    "description": "get/set filter brightness.  The brightness is a number between -1 and 1.&nbsp; Positive values\n brighten the pixels and negative values darken them. Use with {@link Konva.Filters.Brighten} filter.",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between -1 and 1",
        "name": "brightness"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17547,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1255
  },
  {
    "id": "Konva.Arc#contrast",
    "longname": "Konva.Arc#contrast",
    "name": "contrast",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#contrast",
    "inherited": true,
    "description": "get/set filter contrast.  The contrast is a number between -100 and 100.\nUse with {@link Konva.Filters.Contrast} filter.",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between -100 and 100",
        "name": "contrast"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17600,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1256
  },
  {
    "id": "Konva.Arc#embossStrength",
    "longname": "Konva.Arc#embossStrength",
    "name": "embossStrength",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossStrength",
    "inherited": true,
    "description": "get/set emboss strength. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1.  Default is 0.5",
        "name": "level"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17725,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1257
  },
  {
    "id": "Konva.Arc#embossWhiteLevel",
    "longname": "Konva.Arc#embossWhiteLevel",
    "name": "embossWhiteLevel",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossWhiteLevel",
    "inherited": true,
    "description": "get/set emboss white level. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1.  Default is 0.5",
        "name": "embossWhiteLevel"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17733,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1258
  },
  {
    "id": "Konva.Arc#embossDirection",
    "longname": "Konva.Arc#embossDirection",
    "name": "embossDirection",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossDirection",
    "inherited": true,
    "description": "get/set emboss direction. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "can be top-left, top, top-right, right, bottom-right, bottom, bottom-left or left\n  The default is top-left",
        "name": "embossDirection"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17741,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1259
  },
  {
    "id": "Konva.Arc#embossBlend",
    "longname": "Konva.Arc#embossBlend",
    "name": "embossBlend",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossBlend",
    "inherited": true,
    "description": "get/set emboss blend. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "embossBlend"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17750,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1260
  },
  {
    "id": "Konva.Arc#enhance",
    "longname": "Konva.Arc#enhance",
    "name": "enhance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#enhance",
    "inherited": true,
    "description": "get/set enhance. Use with {@link Konva.Filters.Enhance} filter. -1 to 1 values",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Float"
          ]
        },
        "name": "amount"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Float"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17864,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1261
  },
  {
    "id": "Konva.Arc#hue",
    "longname": "Konva.Arc#hue",
    "name": "hue",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hue",
    "inherited": true,
    "description": "get/set hsv hue in degrees. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between 0 and 359",
        "name": "hue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17896,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1262
  },
  {
    "id": "Konva.Arc#saturation",
    "longname": "Konva.Arc#saturation",
    "name": "saturation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#saturation",
    "inherited": true,
    "description": "get/set hsv saturation. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the saturation, 1.0 doubles, etc..",
        "name": "saturation"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17904,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1263
  },
  {
    "id": "Konva.Arc#luminance",
    "longname": "Konva.Arc#luminance",
    "name": "luminance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#luminance",
    "inherited": true,
    "description": "get/set hsl luminance. Use with {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "from -1 to 1",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17912,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1264
  },
  {
    "id": "Konva.Arc#value",
    "longname": "Konva.Arc#value",
    "name": "value",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#value",
    "inherited": true,
    "description": "get/set hsv value. Use with {@link Konva.Filters.HSV} filter.",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the value, 1.0 doubles, etc..",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18018,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1265
  },
  {
    "id": "Konva.Arc#kaleidoscopePower",
    "longname": "Konva.Arc#kaleidoscopePower",
    "name": "kaleidoscopePower",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#kaleidoscopePower",
    "inherited": true,
    "description": "get/set kaleidoscope power. Use with {@link Konva.Filters.Kaleidoscope} filter.",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "of kaleidoscope",
        "name": "power"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18243,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1266
  },
  {
    "id": "Konva.Arc#kaleidoscopeAngle",
    "longname": "Konva.Arc#kaleidoscopeAngle",
    "name": "kaleidoscopeAngle",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#kaleidoscopeAngle",
    "inherited": true,
    "description": "get/set kaleidoscope angle. Use with {@link Konva.Filters.Kaleidoscope} filter.",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "degrees"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18251,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1267
  },
  {
    "id": "Konva.Arc#noise",
    "longname": "Konva.Arc#noise",
    "name": "noise",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#noise",
    "inherited": true,
    "description": "get/set noise amount.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Noise} filter.",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "noise"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18437,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1268
  },
  {
    "id": "Konva.Arc#pixelSize",
    "longname": "Konva.Arc#pixelSize",
    "name": "pixelSize",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#pixelSize",
    "inherited": true,
    "description": "get/set pixel size. Use with {@link Konva.Filters.Pixelate} filter.",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "pixelSize"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18522,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1269
  },
  {
    "id": "Konva.Arc#levels",
    "longname": "Konva.Arc#levels",
    "name": "levels",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#levels",
    "inherited": true,
    "description": "get/set levels.  Must be a number between 0 and 1.  Use with {@link Konva.Filters.Posterize} filter.",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1",
        "name": "level"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18552,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1270
  },
  {
    "id": "Konva.Arc#red",
    "longname": "Konva.Arc#red",
    "name": "red",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#red",
    "inherited": true,
    "description": "get/set filter red value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "red"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18596,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1271
  },
  {
    "id": "Konva.Arc#green",
    "longname": "Konva.Arc#green",
    "name": "green",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#green",
    "inherited": true,
    "description": "get/set filter green value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "green"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18616,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1272
  },
  {
    "id": "Konva.Arc#blue",
    "longname": "Konva.Arc#blue",
    "name": "blue",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#blue",
    "inherited": true,
    "description": "get/set filter blue value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "blue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18625,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1273
  },
  {
    "id": "Konva.Arc#alpha",
    "longname": "Konva.Arc#alpha",
    "name": "alpha",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#alpha",
    "inherited": true,
    "description": "get/set filter alpha value. Use with {@link Konva.Filters.RGBA} filter.",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Float"
          ]
        },
        "description": "value between 0 and 1",
        "name": "alpha"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Float"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18718,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1274
  },
  {
    "id": "Konva.Arc#threshold",
    "longname": "Konva.Arc#threshold",
    "name": "threshold",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#threshold",
    "inherited": true,
    "description": "get/set threshold.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Threshold} or {@link Konva.Filters.Mask} filter.",
    "memberof": "Konva.Arc",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "threshold"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18809,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1275
  },
  {
    "id": "Konva.Line#hasShadow",
    "longname": "Konva.Line#hasShadow",
    "name": "hasShadow",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasShadow",
    "inherited": true,
    "overrides": "Konva.Shape#hasShadow",
    "description": "returns whether or not a shadow will be rendered",
    "memberof": "Konva.Line",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 6909,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1276
  },
  {
    "id": "Konva.Line#hasFill",
    "longname": "Konva.Line#hasFill",
    "name": "hasFill",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasFill",
    "inherited": true,
    "overrides": "Konva.Shape#hasFill",
    "description": "returns whether or not the shape will be filled",
    "memberof": "Konva.Line",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7009,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1277
  },
  {
    "id": "Konva.Line#hasStroke",
    "longname": "Konva.Line#hasStroke",
    "name": "hasStroke",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasStroke",
    "inherited": true,
    "overrides": "Konva.Shape#hasStroke",
    "description": "returns whether or not the shape will be stroked",
    "memberof": "Konva.Line",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7030,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1278
  },
  {
    "id": "Konva.Line#intersects",
    "longname": "Konva.Line#intersects",
    "name": "intersects",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#intersects",
    "inherited": true,
    "overrides": "Konva.Shape#intersects",
    "description": "determines if point is in the shape, regardless if other shapes are on top of it.  Note: because\n this method clears a temporary canvas and then redraws the shape, it performs very poorly if executed many times\n consecutively.  Please use the {@link Konva.Stage#getIntersection} method if at all possible\n because it performs much better",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "point"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "point.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "point.y"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7066,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1279
  },
  {
    "id": "Konva.Line#getSelfRect",
    "longname": "Konva.Line#getSelfRect",
    "name": "getSelfRect",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#getSelfRect",
    "inherited": true,
    "overrides": "Konva.Shape#getSelfRect",
    "description": "return self rectangle (x, y, width, height) of shape.\nThis method are not taken into account transformation and styles.",
    "memberof": "Konva.Line",
    "examples": [
      "rect.getSelfRect();  // return {x:0, y:0, width:rect.width(), height:rect.height()}\ncircle.getSelfRect();  // return {x: - circle.width() / 2, y: - circle.height() / 2, width:circle.width(), height:circle.height()}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "rect with `{x, y, width, height}` properties"
      }
    ],
    "meta": {
      "lineno": 7138,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1280
  },
  {
    "id": "Konva.Line#drawHitFromCache",
    "longname": "Konva.Line#drawHitFromCache",
    "name": "drawHitFromCache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#drawHitFromCache",
    "inherited": true,
    "overrides": "Konva.Shape#drawHitFromCache",
    "description": "draw hit graph using the cached scene canvas",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "alpha channel threshold that determines whether or not\n a pixel should be drawn onto the hit graph.  Must be a value between 0 and 255.\n The default is 0",
        "name": "alphaThreshold"
      }
    ],
    "examples": [
      "shape.cache();\nshape.drawHitFromCache();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7294,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1281
  },
  {
    "id": "Konva.Line#stroke",
    "longname": "Konva.Line#stroke",
    "name": "stroke",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#stroke",
    "inherited": true,
    "overrides": "Konva.Shape#stroke",
    "description": "get/set stroke color",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get stroke color\nvar stroke = shape.stroke();\n\n// set stroke color with color string\nshape.stroke('green');\n\n// set stroke color with hex\nshape.stroke('#00ff00');\n\n// set stroke color with rgb\nshape.stroke('rgb(0,255,0)');\n\n// set stroke color with rgba and make it 50% opaque\nshape.stroke('rgba(0,255,0,0.5');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7360,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1282
  },
  {
    "id": "Konva.Line#strokeWidth",
    "longname": "Konva.Line#strokeWidth",
    "name": "strokeWidth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeWidth",
    "inherited": true,
    "overrides": "Konva.Shape#strokeWidth",
    "description": "get/set stroke width",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "strokeWidth"
      }
    ],
    "examples": [
      "// get stroke width\nvar strokeWidth = shape.strokeWidth();\n\n// set stroke width\nshape.strokeWidth(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7383,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1283
  },
  {
    "id": "Konva.Line#fillAfterStrokeEnabled",
    "longname": "Konva.Line#fillAfterStrokeEnabled",
    "name": "fillAfterStrokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillAfterStrokeEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#fillAfterStrokeEnabled",
    "description": "get/set fillAfterStrokeEnabled property. By default Konva is drawing filling first, then stroke on top of the fill.\nIn rare situations you may want a different behavior. When you have a stroke first then fill on top of it.\nEspecially useful for Text objects.\nDefault is false.",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "fillAfterStrokeEnabled"
      }
    ],
    "examples": [
      "// get stroke width\nvar fillAfterStrokeEnabled = shape.fillAfterStrokeEnabled();\n\n// set stroke width\nshape.fillAfterStrokeEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7397,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1284
  },
  {
    "id": "Konva.Line#hitStrokeWidth",
    "longname": "Konva.Line#hitStrokeWidth",
    "name": "hitStrokeWidth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hitStrokeWidth",
    "inherited": true,
    "overrides": "Konva.Shape#hitStrokeWidth",
    "description": "get/set stroke width for hit detection. Default value is \"auto\", it means it will be equals to strokeWidth",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "hitStrokeWidth"
      }
    ],
    "examples": [
      "// get stroke width\nvar hitStrokeWidth = shape.hitStrokeWidth();\n\n// set hit stroke width\nshape.hitStrokeWidth(20);\n// set hit stroke width always equals to scene stroke width\nshape.hitStrokeWidth('auto');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7414,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1285
  },
  {
    "id": "Konva.Line#strokeHitEnabled",
    "longname": "Konva.Line#strokeHitEnabled",
    "name": "strokeHitEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeHitEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#strokeHitEnabled",
    "description": "**deprecated, use hitStrokeWidth instead!** get/set strokeHitEnabled property. Useful for performance optimization.\nYou may set `shape.strokeHitEnabled(false)`. In this case stroke will be no draw on hit canvas, so hit area\nof shape will be decreased (by lineWidth / 2). Remember that non closed line with `strokeHitEnabled = false`\nwill be not drawn on hit canvas, that is mean line will no trigger pointer events (like mouseover)\nDefault value is true.",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "strokeHitEnabled"
      }
    ],
    "examples": [
      "// get strokeHitEnabled\nvar strokeHitEnabled = shape.strokeHitEnabled();\n\n// set strokeHitEnabled\nshape.strokeHitEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7430,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1286
  },
  {
    "id": "Konva.Line#perfectDrawEnabled",
    "longname": "Konva.Line#perfectDrawEnabled",
    "name": "perfectDrawEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#perfectDrawEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#perfectDrawEnabled",
    "description": "get/set perfectDrawEnabled. If a shape has fill, stroke and opacity you may set `perfectDrawEnabled` to false to improve performance.\nSee http://konvajs.org/docs/performance/Disable_Perfect_Draw.html for more information.\nDefault value is true",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "perfectDrawEnabled"
      }
    ],
    "examples": [
      "// get perfectDrawEnabled\nvar perfectDrawEnabled = shape.perfectDrawEnabled();\n\n// set perfectDrawEnabled\nshape.perfectDrawEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7448,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1287
  },
  {
    "id": "Konva.Line#shadowForStrokeEnabled",
    "longname": "Konva.Line#shadowForStrokeEnabled",
    "name": "shadowForStrokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowForStrokeEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#shadowForStrokeEnabled",
    "description": "get/set shadowForStrokeEnabled. Useful for performance optimization.\nYou may set `shape.shadowForStrokeEnabled(false)`. In this case stroke will no effect shadow.\nRemember if you set `shadowForStrokeEnabled = false` for non closed line - that line will have no shadow!.\nDefault value is true",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "shadowForStrokeEnabled"
      }
    ],
    "examples": [
      "// get shadowForStrokeEnabled\nvar shadowForStrokeEnabled = shape.shadowForStrokeEnabled();\n\n// set shadowForStrokeEnabled\nshape.shadowForStrokeEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7464,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1288
  },
  {
    "id": "Konva.Line#lineJoin",
    "longname": "Konva.Line#lineJoin",
    "name": "lineJoin",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#lineJoin",
    "inherited": true,
    "overrides": "Konva.Shape#lineJoin",
    "description": "get/set line join.  Can be miter, round, or bevel.  The\n default is miter",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "lineJoin"
      }
    ],
    "examples": [
      "// get line join\nvar lineJoin = shape.lineJoin();\n\n// set line join\nshape.lineJoin('round');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7481,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1289
  },
  {
    "id": "Konva.Line#lineCap",
    "longname": "Konva.Line#lineCap",
    "name": "lineCap",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#lineCap",
    "inherited": true,
    "overrides": "Konva.Shape#lineCap",
    "description": "get/set line cap.  Can be butt, round, or square",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "lineCap"
      }
    ],
    "examples": [
      "// get line cap\nvar lineCap = shape.lineCap();\n\n// set line cap\nshape.lineCap('round');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7496,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1290
  },
  {
    "id": "Konva.Line#sceneFunc",
    "longname": "Konva.Line#sceneFunc",
    "name": "sceneFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#sceneFunc",
    "inherited": true,
    "overrides": "Konva.Shape#sceneFunc",
    "description": "get/set scene draw function. That function is used to draw the shape on a canvas.\nAlso that function will be used to draw hit area of the shape, in case if hitFunc is not defined.",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "drawing function",
        "name": "drawFunc"
      }
    ],
    "examples": [
      "// get scene draw function\nvar sceneFunc = shape.sceneFunc();\n\n// set scene draw function\nshape.sceneFunc(function(context, shape) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  // like stroke and fill\n  context.fillStrokeShape(shape);\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7510,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1291
  },
  {
    "id": "Konva.Line#hitFunc",
    "longname": "Konva.Line#hitFunc",
    "name": "hitFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hitFunc",
    "inherited": true,
    "overrides": "Konva.Shape#hitFunc",
    "description": "get/set hit draw function. That function is used to draw custom hit area of a shape.",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "drawing function",
        "name": "drawFunc"
      }
    ],
    "examples": [
      "// get hit draw function\nvar hitFunc = shape.hitFunc();\n\n// set hit draw function\nshape.hitFunc(function(context) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  context.fillStrokeShape(shape);\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7532,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1292
  },
  {
    "id": "Konva.Line#dash",
    "longname": "Konva.Line#dash",
    "name": "dash",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#dash",
    "inherited": true,
    "overrides": "Konva.Shape#dash",
    "description": "get/set dash array for stroke.",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "dash"
      }
    ],
    "examples": [
      "// apply dashed stroke that is 10px long and 5 pixels apart\n line.dash([10, 5]);\n // apply dashed stroke that is made up of alternating dashed\n // lines that are 10px long and 20px apart, and dots that have\n // a radius of 5px and are 20px apart\n line.dash([10, 20, 0.001, 20]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7552,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1293
  },
  {
    "id": "Konva.Line#shadowColor",
    "longname": "Konva.Line#shadowColor",
    "name": "shadowColor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowColor",
    "inherited": true,
    "overrides": "Konva.Shape#shadowColor",
    "description": "get/set shadow color",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get shadow color\nvar shadow = shape.shadowColor();\n\n// set shadow color with color string\nshape.shadowColor('green');\n\n// set shadow color with hex\nshape.shadowColor('#00ff00');\n\n// set shadow color with rgb\nshape.shadowColor('rgb(0,255,0)');\n\n// set shadow color with rgba and make it 50% opaque\nshape.shadowColor('rgba(0,255,0,0.5');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7579,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1294
  },
  {
    "id": "Konva.Line#shadowBlur",
    "longname": "Konva.Line#shadowBlur",
    "name": "shadowBlur",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowBlur",
    "inherited": true,
    "overrides": "Konva.Shape#shadowBlur",
    "description": "get/set shadow blur",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "blur"
      }
    ],
    "examples": [
      "// get shadow blur\nvar shadowBlur = shape.shadowBlur();\n\n// set shadow blur\nshape.shadowBlur(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7602,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1295
  },
  {
    "id": "Konva.Line#shadowOpacity",
    "longname": "Konva.Line#shadowOpacity",
    "name": "shadowOpacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOpacity",
    "inherited": true,
    "overrides": "Konva.Shape#shadowOpacity",
    "description": "get/set shadow opacity.  must be a value between 0 and 1",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "opacity"
      }
    ],
    "examples": [
      "// get shadow opacity\nvar shadowOpacity = shape.shadowOpacity();\n\n// set shadow opacity\nshape.shadowOpacity(0.5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7616,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1296
  },
  {
    "id": "Konva.Line#shadowOffset",
    "longname": "Konva.Line#shadowOffset",
    "name": "shadowOffset",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffset",
    "inherited": true,
    "overrides": "Konva.Shape#shadowOffset",
    "description": "get/set shadow offset",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.y"
      }
    ],
    "examples": [
      "// get shadow offset\nvar shadowOffset = shape.shadowOffset();\n\n// set shadow offset\nshape.shadowOffset({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7630,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1297
  },
  {
    "id": "Konva.Line#shadowOffsetX",
    "longname": "Konva.Line#shadowOffsetX",
    "name": "shadowOffsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffsetX",
    "inherited": true,
    "overrides": "Konva.Shape#shadowOffsetX",
    "description": "get/set shadow offset x",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get shadow offset x\nvar shadowOffsetX = shape.shadowOffsetX();\n\n// set shadow offset x\nshape.shadowOffsetX(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7649,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1298
  },
  {
    "id": "Konva.Line#shadowOffsetY",
    "longname": "Konva.Line#shadowOffsetY",
    "name": "shadowOffsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffsetY",
    "inherited": true,
    "overrides": "Konva.Shape#shadowOffsetY",
    "description": "get/set shadow offset y",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get shadow offset y\nvar shadowOffsetY = shape.shadowOffsetY();\n\n// set shadow offset y\nshape.shadowOffsetY(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7663,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1299
  },
  {
    "id": "Konva.Line#fillPatternImage",
    "longname": "Konva.Line#fillPatternImage",
    "name": "fillPatternImage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternImage",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternImage",
    "description": "get/set fill pattern image",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Image"
          ]
        },
        "description": "object",
        "name": "image"
      }
    ],
    "examples": [
      "// get fill pattern image\nvar fillPatternImage = shape.fillPatternImage();\n\n// set fill pattern image\nvar imageObj = new Image();\nimageObj.onload = function() {\n  shape.fillPatternImage(imageObj);\n};\nimageObj.src = 'path/to/image/jpg';"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Image"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7677,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1300
  },
  {
    "id": "Konva.Line#fill",
    "longname": "Konva.Line#fill",
    "name": "fill",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fill",
    "inherited": true,
    "overrides": "Konva.Shape#fill",
    "description": "get/set fill color",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get fill color\nvar fill = shape.fill();\n\n// set fill color with color string\nshape.fill('green');\n\n// set fill color with hex\nshape.fill('#00ff00');\n\n// set fill color with rgb\nshape.fill('rgb(0,255,0)');\n\n// set fill color with rgba and make it 50% opaque\nshape.fill('rgba(0,255,0,0.5');\n\n// shape without fill\nshape.fill(null);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7695,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1301
  },
  {
    "id": "Konva.Line#fillPatternX",
    "longname": "Konva.Line#fillPatternX",
    "name": "fillPatternX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternX",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternX",
    "description": "get/set fill pattern x",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern x\nvar fillPatternX = shape.fillPatternX();\n// set fill pattern x\nshape.fillPatternX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7721,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1302
  },
  {
    "id": "Konva.Line#fillPatternY",
    "longname": "Konva.Line#fillPatternY",
    "name": "fillPatternY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternY",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternY",
    "description": "get/set fill pattern y",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern y\nvar fillPatternY = shape.fillPatternY();\n// set fill pattern y\nshape.fillPatternY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7734,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1303
  },
  {
    "id": "Konva.Line#fillLinearGradientColorStops",
    "longname": "Konva.Line#fillLinearGradientColorStops",
    "name": "fillLinearGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientColorStops",
    "inherited": true,
    "overrides": "Konva.Shape#fillLinearGradientColorStops",
    "description": "get/set fill linear gradient color stops",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get fill linear gradient color stops\nvar colorStops = shape.fillLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillLinearGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "colorStops"
      }
    ],
    "meta": {
      "lineno": 7747,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1304
  },
  {
    "id": "Konva.Line#strokeLinearGradientColorStops",
    "longname": "Konva.Line#strokeLinearGradientColorStops",
    "name": "strokeLinearGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientColorStops",
    "inherited": true,
    "overrides": "Konva.Shape#strokeLinearGradientColorStops",
    "description": "get/set stroke linear gradient color stops",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get stroke linear gradient color stops\nvar colorStops = shape.strokeLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.strokeLinearGradientColorStops([0, 'red', 0.5, 'blue', 1, 'green']);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "colorStops"
      }
    ],
    "meta": {
      "lineno": 7762,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1305
  },
  {
    "id": "Konva.Line#fillRadialGradientStartRadius",
    "longname": "Konva.Line#fillRadialGradientStartRadius",
    "name": "fillRadialGradientStartRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartRadius",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientStartRadius",
    "description": "get/set fill radial gradient start radius",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "radius"
      }
    ],
    "examples": [
      "// get radial gradient start radius\nvar startRadius = shape.fillRadialGradientStartRadius();\n\n// set radial gradient start radius\nshape.fillRadialGradientStartRadius(0);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7777,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1306
  },
  {
    "id": "Konva.Line#fillRadialGradientEndRadius",
    "longname": "Konva.Line#fillRadialGradientEndRadius",
    "name": "fillRadialGradientEndRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndRadius",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientEndRadius",
    "description": "get/set fill radial gradient end radius",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "radius"
      }
    ],
    "examples": [
      "// get radial gradient end radius\nvar endRadius = shape.fillRadialGradientEndRadius();\n\n// set radial gradient end radius\nshape.fillRadialGradientEndRadius(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7791,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1307
  },
  {
    "id": "Konva.Line#fillRadialGradientColorStops",
    "longname": "Konva.Line#fillRadialGradientColorStops",
    "name": "fillRadialGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientColorStops",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientColorStops",
    "description": "get/set fill radial gradient color stops",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get fill radial gradient color stops\nvar colorStops = shape.fillRadialGradientColorStops();\n\n// create a radial gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillRadialGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7805,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1308
  },
  {
    "id": "Konva.Line#fillPatternRepeat",
    "longname": "Konva.Line#fillPatternRepeat",
    "name": "fillPatternRepeat",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternRepeat",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternRepeat",
    "description": "get/set fill pattern repeat.  Can be 'repeat', 'repeat-x', 'repeat-y', or 'no-repeat'.  The default is 'repeat'",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "repeat"
      }
    ],
    "examples": [
      "// get fill pattern repeat\nvar repeat = shape.fillPatternRepeat();\n\n// repeat pattern in x direction only\nshape.fillPatternRepeat('repeat-x');\n\n// do not repeat the pattern\nshape.fillPatternRepeat('no-repeat');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7820,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1309
  },
  {
    "id": "Konva.Line#fillEnabled",
    "longname": "Konva.Line#fillEnabled",
    "name": "fillEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#fillEnabled",
    "description": "get/set fill enabled flag",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get fill enabled flag\nvar fillEnabled = shape.fillEnabled();\n\n// disable fill\nshape.fillEnabled(false);\n\n// enable fill\nshape.fillEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7837,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1310
  },
  {
    "id": "Konva.Line#strokeEnabled",
    "longname": "Konva.Line#strokeEnabled",
    "name": "strokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#strokeEnabled",
    "description": "get/set stroke enabled flag",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get stroke enabled flag\nvar strokeEnabled = shape.strokeEnabled();\n\n// disable stroke\nshape.strokeEnabled(false);\n\n// enable stroke\nshape.strokeEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7854,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1311
  },
  {
    "id": "Konva.Line#shadowEnabled",
    "longname": "Konva.Line#shadowEnabled",
    "name": "shadowEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#shadowEnabled",
    "description": "get/set shadow enabled flag",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get shadow enabled flag\nvar shadowEnabled = shape.shadowEnabled();\n\n// disable shadow\nshape.shadowEnabled(false);\n\n// enable shadow\nshape.shadowEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7871,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1312
  },
  {
    "id": "Konva.Line#dashEnabled",
    "longname": "Konva.Line#dashEnabled",
    "name": "dashEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#dashEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#dashEnabled",
    "description": "get/set dash enabled flag",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get dash enabled flag\nvar dashEnabled = shape.dashEnabled();\n\n// disable dash\nshape.dashEnabled(false);\n\n// enable dash\nshape.dashEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7888,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1313
  },
  {
    "id": "Konva.Line#strokeScaleEnabled",
    "longname": "Konva.Line#strokeScaleEnabled",
    "name": "strokeScaleEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeScaleEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#strokeScaleEnabled",
    "description": "get/set strokeScale enabled flag",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get stroke scale enabled flag\nvar strokeScaleEnabled = shape.strokeScaleEnabled();\n\n// disable stroke scale\nshape.strokeScaleEnabled(false);\n\n// enable stroke scale\nshape.strokeScaleEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7905,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1314
  },
  {
    "id": "Konva.Line#fillPriority",
    "longname": "Konva.Line#fillPriority",
    "name": "fillPriority",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPriority",
    "inherited": true,
    "overrides": "Konva.Shape#fillPriority",
    "description": "get/set fill priority.  can be color, pattern, linear-gradient, or radial-gradient.  The default is color.\n  This is handy if you want to toggle between different fill types.",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "priority"
      }
    ],
    "examples": [
      "// get fill priority\nvar fillPriority = shape.fillPriority();\n\n// set fill priority\nshape.fillPriority('linear-gradient');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7922,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1315
  },
  {
    "id": "Konva.Line#fillPatternOffset",
    "longname": "Konva.Line#fillPatternOffset",
    "name": "fillPatternOffset",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffset",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternOffset",
    "description": "get/set fill pattern offset",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.y"
      }
    ],
    "examples": [
      "// get fill pattern offset\nvar patternOffset = shape.fillPatternOffset();\n\n// set fill pattern offset\nshape.fillPatternOffset({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7937,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1316
  },
  {
    "id": "Konva.Line#fillPatternOffsetX",
    "longname": "Konva.Line#fillPatternOffsetX",
    "name": "fillPatternOffsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffsetX",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternOffsetX",
    "description": "get/set fill pattern offset x",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern offset x\nvar patternOffsetX = shape.fillPatternOffsetX();\n\n// set fill pattern offset x\nshape.fillPatternOffsetX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7956,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1317
  },
  {
    "id": "Konva.Line#fillPatternOffsetY",
    "longname": "Konva.Line#fillPatternOffsetY",
    "name": "fillPatternOffsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffsetY",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternOffsetY",
    "description": "get/set fill pattern offset y",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern offset y\nvar patternOffsetY = shape.fillPatternOffsetY();\n\n// set fill pattern offset y\nshape.fillPatternOffsetY(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7970,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1318
  },
  {
    "id": "Konva.Line#fillPatternScale",
    "longname": "Konva.Line#fillPatternScale",
    "name": "fillPatternScale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScale",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternScale",
    "description": "get/set fill pattern scale",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.y"
      }
    ],
    "examples": [
      "// get fill pattern scale\nvar patternScale = shape.fillPatternScale();\n\n// set fill pattern scale\nshape.fillPatternScale({\n  x: 2,\n  y: 2\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7984,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1319
  },
  {
    "id": "Konva.Line#fillPatternScaleX",
    "longname": "Konva.Line#fillPatternScaleX",
    "name": "fillPatternScaleX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScaleX",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternScaleX",
    "description": "get/set fill pattern scale x",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern scale x\nvar patternScaleX = shape.fillPatternScaleX();\n\n// set fill pattern scale x\nshape.fillPatternScaleX(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8003,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1320
  },
  {
    "id": "Konva.Line#fillPatternScaleY",
    "longname": "Konva.Line#fillPatternScaleY",
    "name": "fillPatternScaleY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScaleY",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternScaleY",
    "description": "get/set fill pattern scale y",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern scale y\nvar patternScaleY = shape.fillPatternScaleY();\n\n// set fill pattern scale y\nshape.fillPatternScaleY(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8017,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1321
  },
  {
    "id": "Konva.Line#fillLinearGradientStartPoint",
    "longname": "Konva.Line#fillLinearGradientStartPoint",
    "name": "fillLinearGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPoint",
    "inherited": true,
    "overrides": "Konva.Shape#fillLinearGradientStartPoint",
    "description": "get/set fill linear gradient start point",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get fill linear gradient start point\nvar startPoint = shape.fillLinearGradientStartPoint();\n\n// set fill linear gradient start point\nshape.fillLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8034,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1322
  },
  {
    "id": "Konva.Line#strokeLinearGradientStartPoint",
    "longname": "Konva.Line#strokeLinearGradientStartPoint",
    "name": "strokeLinearGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientStartPoint",
    "inherited": true,
    "overrides": "Konva.Shape#strokeLinearGradientStartPoint",
    "description": "get/set stroke linear gradient start point",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point\nvar startPoint = shape.strokeLinearGradientStartPoint();\n\n// set stroke linear gradient start point\nshape.strokeLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8056,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1323
  },
  {
    "id": "Konva.Line#fillLinearGradientStartPointX",
    "longname": "Konva.Line#fillLinearGradientStartPointX",
    "name": "fillLinearGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPointX",
    "inherited": true,
    "overrides": "Konva.Shape#fillLinearGradientStartPointX",
    "description": "get/set fill linear gradient start point x",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill linear gradient start point x\nvar startPointX = shape.fillLinearGradientStartPointX();\n\n// set fill linear gradient start point x\nshape.fillLinearGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8075,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1324
  },
  {
    "id": "Konva.Line#linearLinearGradientStartPointX",
    "longname": "Konva.Line#linearLinearGradientStartPointX",
    "name": "linearLinearGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#linearLinearGradientStartPointX",
    "inherited": true,
    "overrides": "Konva.Shape#linearLinearGradientStartPointX",
    "description": "get/set stroke linear gradient start point x",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point x\nvar startPointX = shape.strokeLinearGradientStartPointX();\n\n// set stroke linear gradient start point x\nshape.strokeLinearGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8089,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1325
  },
  {
    "id": "Konva.Line#fillLinearGradientStartPointY",
    "longname": "Konva.Line#fillLinearGradientStartPointY",
    "name": "fillLinearGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPointY",
    "inherited": true,
    "overrides": "Konva.Shape#fillLinearGradientStartPointY",
    "description": "get/set fill linear gradient start point y",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill linear gradient start point y\nvar startPointY = shape.fillLinearGradientStartPointY();\n\n// set fill linear gradient start point y\nshape.fillLinearGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8103,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1326
  },
  {
    "id": "Konva.Line#strokeLinearGradientStartPointY",
    "longname": "Konva.Line#strokeLinearGradientStartPointY",
    "name": "strokeLinearGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientStartPointY",
    "inherited": true,
    "overrides": "Konva.Shape#strokeLinearGradientStartPointY",
    "description": "get/set stroke linear gradient start point y",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point y\nvar startPointY = shape.strokeLinearGradientStartPointY();\n\n// set stroke linear gradient start point y\nshape.strokeLinearGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8117,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1327
  },
  {
    "id": "Konva.Line#fillLinearGradientEndPoint",
    "longname": "Konva.Line#fillLinearGradientEndPoint",
    "name": "fillLinearGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPoint",
    "inherited": true,
    "overrides": "Konva.Shape#fillLinearGradientEndPoint",
    "description": "get/set fill linear gradient end point",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get fill linear gradient end point\nvar endPoint = shape.fillLinearGradientEndPoint();\n\n// set fill linear gradient end point\nshape.fillLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8134,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1328
  },
  {
    "id": "Konva.Line#strokeLinearGradientEndPoint",
    "longname": "Konva.Line#strokeLinearGradientEndPoint",
    "name": "strokeLinearGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPoint",
    "inherited": true,
    "overrides": "Konva.Shape#strokeLinearGradientEndPoint",
    "description": "get/set stroke linear gradient end point",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point\nvar endPoint = shape.strokeLinearGradientEndPoint();\n\n// set stroke linear gradient end point\nshape.strokeLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8156,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1329
  },
  {
    "id": "Konva.Line#fillLinearGradientEndPointX",
    "longname": "Konva.Line#fillLinearGradientEndPointX",
    "name": "fillLinearGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPointX",
    "inherited": true,
    "overrides": "Konva.Shape#fillLinearGradientEndPointX",
    "description": "get/set fill linear gradient end point x",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill linear gradient end point x\nvar endPointX = shape.fillLinearGradientEndPointX();\n\n// set fill linear gradient end point x\nshape.fillLinearGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8175,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1330
  },
  {
    "id": "Konva.Line#strokeLinearGradientEndPointX",
    "longname": "Konva.Line#strokeLinearGradientEndPointX",
    "name": "strokeLinearGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPointX",
    "inherited": true,
    "overrides": "Konva.Shape#strokeLinearGradientEndPointX",
    "description": "get/set fill linear gradient end point x",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point x\nvar endPointX = shape.strokeLinearGradientEndPointX();\n\n// set stroke linear gradient end point x\nshape.strokeLinearGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8189,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1331
  },
  {
    "id": "Konva.Line#fillLinearGradientEndPointY",
    "longname": "Konva.Line#fillLinearGradientEndPointY",
    "name": "fillLinearGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPointY",
    "inherited": true,
    "overrides": "Konva.Shape#fillLinearGradientEndPointY",
    "description": "get/set fill linear gradient end point y",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill linear gradient end point y\nvar endPointY = shape.fillLinearGradientEndPointY();\n\n// set fill linear gradient end point y\nshape.fillLinearGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8203,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1332
  },
  {
    "id": "Konva.Line#strokeLinearGradientEndPointY",
    "longname": "Konva.Line#strokeLinearGradientEndPointY",
    "name": "strokeLinearGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPointY",
    "inherited": true,
    "overrides": "Konva.Shape#strokeLinearGradientEndPointY",
    "description": "get/set stroke linear gradient end point y",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point y\nvar endPointY = shape.strokeLinearGradientEndPointY();\n\n// set stroke linear gradient end point y\nshape.strokeLinearGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8217,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1333
  },
  {
    "id": "Konva.Line#fillRadialGradientStartPoint",
    "longname": "Konva.Line#fillRadialGradientStartPoint",
    "name": "fillRadialGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPoint",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientStartPoint",
    "description": "get/set fill radial gradient start point",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get fill radial gradient start point\nvar startPoint = shape.fillRadialGradientStartPoint();\n\n// set fill radial gradient start point\nshape.fillRadialGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8234,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1334
  },
  {
    "id": "Konva.Line#fillRadialGradientStartPointX",
    "longname": "Konva.Line#fillRadialGradientStartPointX",
    "name": "fillRadialGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPointX",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientStartPointX",
    "description": "get/set fill radial gradient start point x",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill radial gradient start point x\nvar startPointX = shape.fillRadialGradientStartPointX();\n\n// set fill radial gradient start point x\nshape.fillRadialGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8253,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1335
  },
  {
    "id": "Konva.Line#fillRadialGradientStartPointY",
    "longname": "Konva.Line#fillRadialGradientStartPointY",
    "name": "fillRadialGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPointY",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientStartPointY",
    "description": "get/set fill radial gradient start point y",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill radial gradient start point y\nvar startPointY = shape.fillRadialGradientStartPointY();\n\n// set fill radial gradient start point y\nshape.fillRadialGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8267,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1336
  },
  {
    "id": "Konva.Line#fillRadialGradientEndPoint",
    "longname": "Konva.Line#fillRadialGradientEndPoint",
    "name": "fillRadialGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPoint",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientEndPoint",
    "description": "get/set fill radial gradient end point",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get fill radial gradient end point\nvar endPoint = shape.fillRadialGradientEndPoint();\n\n// set fill radial gradient end point\nshape.fillRadialGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8284,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1337
  },
  {
    "id": "Konva.Line#fillRadialGradientEndPointX",
    "longname": "Konva.Line#fillRadialGradientEndPointX",
    "name": "fillRadialGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPointX",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientEndPointX",
    "description": "get/set fill radial gradient end point x",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill radial gradient end point x\nvar endPointX = shape.fillRadialGradientEndPointX();\n\n// set fill radial gradient end point x\nshape.fillRadialGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8303,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1338
  },
  {
    "id": "Konva.Line#fillRadialGradientEndPointY",
    "longname": "Konva.Line#fillRadialGradientEndPointY",
    "name": "fillRadialGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPointY",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientEndPointY",
    "description": "get/set fill radial gradient end point y",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill radial gradient end point y\nvar endPointY = shape.fillRadialGradientEndPointY();\n\n// set fill radial gradient end point y\nshape.fillRadialGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8317,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1339
  },
  {
    "id": "Konva.Line#fillPatternRotation",
    "longname": "Konva.Line#fillPatternRotation",
    "name": "fillPatternRotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternRotation",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternRotation",
    "description": "get/set fill pattern rotation in degrees",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get fill pattern rotation\nvar patternRotation = shape.fillPatternRotation();\n\n// set fill pattern rotation\nshape.fillPatternRotation(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8331,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1340
  },
  {
    "id": "Konva.Line#fillRule",
    "longname": "Konva.Line#fillRule",
    "name": "fillRule",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRule",
    "inherited": true,
    "overrides": "Konva.Shape#fillRule",
    "description": "get/set fill rule",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "CanvasFillRule"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get fill rule\nvar fillRule = shape.fillRule();\n\n// set fill rule\nshape.fillRule('evenodd');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8345,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1341
  },
  {
    "id": "Konva.Line#clearCache",
    "longname": "Konva.Line#clearCache",
    "name": "clearCache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#clearCache",
    "inherited": true,
    "overrides": "Konva.Shape#clearCache",
    "description": "clear cached canvas",
    "memberof": "Konva.Line",
    "examples": [
      "node.clearCache();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2632,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1342
  },
  {
    "id": "Konva.Line#cache",
    "longname": "Konva.Line#cache",
    "name": "cache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#cache",
    "inherited": true,
    "overrides": "Konva.Shape#cache",
    "description": "cache node to improve drawing performance, apply filters, or create more accurate\n hit regions. For all basic shapes size of cache canvas will be automatically detected.\n If you need to cache your custom `Konva.Shape` instance you have to pass shape's bounding box\n properties. Look at [https://konvajs.org/docs/performance/Shape_Caching.html](https://konvajs.org/docs/performance/Shape_Caching.html) for more information.",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "increase canvas size by `offset` pixel in all directions.",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "when set to true, a red border will be drawn around the cached\n region for debugging purposes",
        "name": "config.drawBorder"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "change quality (or pixel ratio) of cached image. pixelRatio = 2 will produce 2x sized cache.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "control imageSmoothingEnabled property of created canvas for cache",
        "name": "config.imageSmoothingEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "change quality (or pixel ratio) of cached hit canvas.",
        "name": "config.hitCanvasPixelRatio"
      }
    ],
    "examples": [
      "// cache a shape with the x,y position of the bounding box at the center and\n// the width and height of the bounding box equal to the width and height of\n// the shape obtained from shape.width() and shape.height()\nimage.cache();\n\n// cache a node and define the bounding box position and size\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200\n});\n\n// cache a node and draw a red border around the bounding box\n// for debugging purposes\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200,\n  offset : 10,\n  drawBorder: true\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2650,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1343
  },
  {
    "id": "Konva.Line#isCached",
    "longname": "Konva.Line#isCached",
    "name": "isCached",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isCached",
    "inherited": true,
    "overrides": "Konva.Shape#isCached",
    "description": "determine if node is currently cached",
    "memberof": "Konva.Line",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2788,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1344
  },
  {
    "id": "Konva.Line#getClientRect",
    "longname": "Konva.Line#getClientRect",
    "name": "getClientRect",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getClientRect",
    "inherited": true,
    "overrides": "Konva.Shape#getClientRect",
    "description": "Return client rectangle `{x, y, width, height}` of node. This rectangle also include all styling (strokes, shadows, etc).\nThe purpose of the method is similar to getBoundingClientRect API of the DOM.",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply transform to node for calculating rect?",
        "name": "config.skipTransform"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply shadow to the node for calculating bound box?",
        "name": "config.skipShadow"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply stroke to the node for calculating bound box?",
        "name": "config.skipStroke"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "calculate client rect relative to one of the parents",
        "name": "config.relativeTo"
      }
    ],
    "examples": [
      "var rect = new Konva.Rect({\n     width : 100,\n     height : 100,\n     x : 50,\n     y : 50,\n     strokeWidth : 4,\n     stroke : 'black',\n     offsetX : 50,\n     scaleY : 2\n});\n\n// get client rect without think off transformations (position, rotation, scale, offset, etc)\nrect.getClientRect({ skipTransform: true});\n// returns {\n//     x : -2,   // two pixels for stroke / 2\n//     y : -2,\n//     width : 104, // increased by 4 for stroke\n//     height : 104\n//}\n\n// get client rect with transformation applied\nrect.getClientRect();\n// returns Object {x: -2, y: 46, width: 104, height: 208}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "rect with `{x, y, width, height}` properties"
      }
    ],
    "meta": {
      "lineno": 2797,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1345
  },
  {
    "id": "Konva.Line#on",
    "longname": "Konva.Line#on",
    "name": "on",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#on",
    "inherited": true,
    "overrides": "Konva.Shape#on",
    "description": "bind events to the node. KonvaJS supports mouseover, mousemove,\n mouseout, mouseenter, mouseleave, mousedown, mouseup, wheel, contextmenu, click, dblclick, touchstart, touchmove,\n touchend, tap, dbltap, dragstart, dragmove, and dragend events.\n Pass in a string of events delimited by a space to bind multiple events at once\n such as 'mousedown mouseup mousemove'. Include a namespace to bind an\n event by name such as 'click.foobar'.",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'click', 'mousedown touchstart', 'mousedown.foo touchstart.foo'",
        "name": "evtStr"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The handler function. The first argument of that function is event object. Event object has `target` as main target of the event, `currentTarget` as current node listener and `evt` as native browser event.",
        "name": "handler"
      }
    ],
    "examples": [
      "// add click listener\nnode.on('click', function() {\n  console.log('you clicked me!');\n});\n\n// get the target node\nnode.on('click', function(evt) {\n  console.log(evt.target);\n});\n\n// stop event propagation\nnode.on('click', function(evt) {\n  evt.cancelBubble = true;\n});\n\n// bind multiple listeners\nnode.on('click touchstart', function() {\n  console.log('you clicked/touched me!');\n});\n\n// namespace listener\nnode.on('click.foo', function() {\n  console.log('you clicked/touched me!');\n});\n\n// get the event type\nnode.on('click tap', function(evt) {\n  var eventType = evt.type;\n});\n\n// get native event object\nnode.on('click tap', function(evt) {\n  var nativeEvent = evt.evt;\n});\n\n// for change events, get the old and new val\nnode.on('xChange', function(evt) {\n  var oldVal = evt.oldVal;\n  var newVal = evt.newVal;\n});\n\n// get event targets\n// with event delegations\nlayer.on('click', 'Group', function(evt) {\n  var shape = evt.target;\n  var group = evt.currentTarget;\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2919,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1346
  },
  {
    "id": "Konva.Line#off",
    "longname": "Konva.Line#off",
    "name": "off",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#off",
    "inherited": true,
    "overrides": "Konva.Shape#off",
    "description": "remove event bindings from the node. Pass in a string of\n event types delimmited by a space to remove multiple event\n bindings at once such as 'mousedown mouseup mousemove'.\n include a namespace to remove an event binding by name\n such as 'click.foobar'. If you only give a name like '.foobar',\n all events in that namespace will be removed.",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'click', 'mousedown touchstart', '.foobar'",
        "name": "evtStr"
      }
    ],
    "examples": [
      "// remove listener\nnode.off('click');\n\n// remove multiple listeners\nnode.off('click touchstart');\n\n// remove listener by name\nnode.off('click.foo');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3007,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1347
  },
  {
    "id": "Konva.Line#remove",
    "longname": "Konva.Line#remove",
    "name": "remove",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#remove",
    "inherited": true,
    "overrides": "Konva.Shape#remove",
    "description": "remove a node from parent, but don't destroy. You can reuse the node later.",
    "memberof": "Konva.Line",
    "examples": [
      "node.remove();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3088,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1348
  },
  {
    "id": "Konva.Line#destroy",
    "longname": "Konva.Line#destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#destroy",
    "inherited": true,
    "overrides": "Konva.Shape#destroy",
    "description": "remove and destroy a node. Kill it and delete forever! You should not reuse node after destroy().\nIf the node is a container (Group, Stage or Layer) it will destroy all children too.",
    "memberof": "Konva.Line",
    "examples": [
      "node.destroy();"
    ],
    "meta": {
      "lineno": 3125,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1349
  },
  {
    "id": "Konva.Line#getAttr",
    "longname": "Konva.Line#getAttr",
    "name": "getAttr",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAttr",
    "inherited": true,
    "overrides": "Konva.Shape#getAttr",
    "description": "get attr",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "attr"
      }
    ],
    "examples": [
      "var x = node.getAttr('x');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer",
            "String",
            "Object",
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3138,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1350
  },
  {
    "id": "Konva.Line#getAncestors",
    "longname": "Konva.Line#getAncestors",
    "name": "getAncestors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAncestors",
    "inherited": true,
    "overrides": "Konva.Shape#getAncestors",
    "description": "get ancestors",
    "memberof": "Konva.Line",
    "examples": [
      "shape.getAncestors().forEach(function(node) {\n  console.log(node.getId());\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3155,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1351
  },
  {
    "id": "Konva.Line#getAttrs",
    "longname": "Konva.Line#getAttrs",
    "name": "getAttrs",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAttrs",
    "inherited": true,
    "overrides": "Konva.Shape#getAttrs",
    "description": "get attrs object literal",
    "memberof": "Konva.Line",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3173,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1352
  },
  {
    "id": "Konva.Line#setAttrs",
    "longname": "Konva.Line#setAttrs",
    "name": "setAttrs",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#setAttrs",
    "inherited": true,
    "overrides": "Konva.Shape#setAttrs",
    "description": "set multiple attrs at once using an object literal",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "object containing key value pairs",
        "name": "config"
      }
    ],
    "examples": [
      "node.setAttrs({\n  x: 5,\n  fill: 'red'\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3182,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1353
  },
  {
    "id": "Konva.Line#isListening",
    "longname": "Konva.Line#isListening",
    "name": "isListening",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isListening",
    "inherited": true,
    "overrides": "Konva.Shape#isListening",
    "description": "determine if node is listening for events by taking into account ancestors.\n\nParent    | Self      | isListening\nlistening | listening |\n----------+-----------+------------\nT         | T         | T\nT         | F         | F\nF         | T         | F\nF         | F         | F",
    "memberof": "Konva.Line",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3217,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1354
  },
  {
    "id": "Konva.Line#isVisible",
    "longname": "Konva.Line#isVisible",
    "name": "isVisible",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isVisible",
    "inherited": true,
    "overrides": "Konva.Shape#isVisible",
    "description": "determine if node is visible by taking into account ancestors.\n\nParent    | Self      | isVisible\nvisible   | visible   |\n----------+-----------+------------\nT         | T         | T\nT         | F         | F\nF         | T         | F\nF         | F         | F",
    "memberof": "Konva.Line",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3248,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1355
  },
  {
    "id": "Konva.Line#show",
    "longname": "Konva.Line#show",
    "name": "show",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#show",
    "inherited": true,
    "overrides": "Konva.Shape#show",
    "description": "show node. set visible = true",
    "memberof": "Konva.Line",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3300,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1356
  },
  {
    "id": "Konva.Line#hide",
    "longname": "Konva.Line#hide",
    "name": "hide",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hide",
    "inherited": true,
    "overrides": "Konva.Shape#hide",
    "description": "hide node.  Hidden nodes are no longer detectable",
    "memberof": "Konva.Line",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3310,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1357
  },
  {
    "id": "Konva.Line#getAbsoluteZIndex",
    "longname": "Konva.Line#getAbsoluteZIndex",
    "name": "getAbsoluteZIndex",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteZIndex",
    "inherited": true,
    "overrides": "Konva.Shape#getAbsoluteZIndex",
    "description": "get absolute z-index which takes into account sibling\n and ancestor indices",
    "memberof": "Konva.Line",
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3323,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1358
  },
  {
    "id": "Konva.Line#getDepth",
    "longname": "Konva.Line#getDepth",
    "name": "getDepth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getDepth",
    "inherited": true,
    "overrides": "Konva.Shape#getDepth",
    "description": "get node depth in node tree.  Returns an integer.\n e.g. Stage depth will always be 0.  Layers will always be 1.  Groups and Shapes will always\n be >= 2",
    "memberof": "Konva.Line",
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3355,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1359
  },
  {
    "id": "Konva.Line#getRelativePointerPosition",
    "longname": "Konva.Line#getRelativePointerPosition",
    "name": "getRelativePointerPosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getRelativePointerPosition",
    "inherited": true,
    "overrides": "Konva.Shape#getRelativePointerPosition",
    "description": "get position of first pointer (like mouse or first touch) relative to local coordinates of current node",
    "memberof": "Konva.Line",
    "examples": [
      "// let's think we have a rectangle at position x = 10, y = 10\n// now we clicked at x = 15, y = 15 of the stage\n// if you want to know position of the click, related to the rectangle you can use\nrect.getRelativePointerPosition();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3398,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1360
  },
  {
    "id": "Konva.Line#getAbsolutePosition",
    "longname": "Konva.Line#getAbsolutePosition",
    "name": "getAbsolutePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsolutePosition",
    "inherited": true,
    "overrides": "Konva.Shape#getAbsolutePosition",
    "description": "get absolute position of a node. That function can be used to calculate absolute position, but relative to any ancestor",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "optional ancestor node",
        "name": "Ancestor"
      }
    ],
    "examples": [
      "// returns absolute position relative to top-left corner of canvas\nnode.getAbsolutePosition();\n\n// calculate absolute position of node, inside stage\n// so stage transforms are ignored\nnode.getAbsolutePosition(stage)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3426,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1361
  },
  {
    "id": "Konva.Line#move",
    "longname": "Konva.Line#move",
    "name": "move",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#move",
    "inherited": true,
    "overrides": "Konva.Shape#move",
    "description": "move node by an amount relative to its current position",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "change"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "change.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "change.y"
      }
    ],
    "examples": [
      "// move node in x direction by 1px and y direction by 2px\nnode.move({\n  x: 1,\n  y: 2\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3514,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1362
  },
  {
    "id": "Konva.Line#rotate",
    "longname": "Konva.Line#rotate",
    "name": "rotate",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#rotate",
    "inherited": true,
    "overrides": "Konva.Shape#rotate",
    "description": "rotate node by an amount in degrees relative to its current rotation",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "theta"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3559,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1363
  },
  {
    "id": "Konva.Line#moveToTop",
    "longname": "Konva.Line#moveToTop",
    "name": "moveToTop",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveToTop",
    "inherited": true,
    "overrides": "Konva.Shape#moveToTop",
    "description": "move node to the top of its siblings",
    "memberof": "Konva.Line",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3570,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1364
  },
  {
    "id": "Konva.Line#moveUp",
    "longname": "Konva.Line#moveUp",
    "name": "moveUp",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveUp",
    "inherited": true,
    "overrides": "Konva.Shape#moveUp",
    "description": "move node up",
    "memberof": "Konva.Line",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "flag is moved or not"
      }
    ],
    "meta": {
      "lineno": 3590,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1365
  },
  {
    "id": "Konva.Line#moveDown",
    "longname": "Konva.Line#moveDown",
    "name": "moveDown",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveDown",
    "inherited": true,
    "overrides": "Konva.Shape#moveDown",
    "description": "move node down",
    "memberof": "Konva.Line",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3610,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1366
  },
  {
    "id": "Konva.Line#moveToBottom",
    "longname": "Konva.Line#moveToBottom",
    "name": "moveToBottom",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveToBottom",
    "inherited": true,
    "overrides": "Konva.Shape#moveToBottom",
    "description": "move node to the bottom of its siblings",
    "memberof": "Konva.Line",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3630,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1367
  },
  {
    "id": "Konva.Line#getAbsoluteOpacity",
    "longname": "Konva.Line#getAbsoluteOpacity",
    "name": "getAbsoluteOpacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteOpacity",
    "inherited": true,
    "overrides": "Konva.Shape#getAbsoluteOpacity",
    "description": "get absolute opacity",
    "memberof": "Konva.Line",
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3668,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1368
  },
  {
    "id": "Konva.Line#moveTo",
    "longname": "Konva.Line#moveTo",
    "name": "moveTo",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveTo",
    "inherited": true,
    "overrides": "Konva.Shape#moveTo",
    "description": "move node to another container",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Container"
          ]
        },
        "name": "newContainer"
      }
    ],
    "examples": [
      "// move node from current layer into layer2\nnode.moveTo(layer2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3685,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1369
  },
  {
    "id": "Konva.Line#toObject",
    "longname": "Konva.Line#toObject",
    "name": "toObject",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toObject",
    "inherited": true,
    "overrides": "Konva.Shape#toObject",
    "description": "convert Node into an object for serialization.  Returns an object.",
    "memberof": "Konva.Line",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3703,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1370
  },
  {
    "id": "Konva.Line#toJSON",
    "longname": "Konva.Line#toJSON",
    "name": "toJSON",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toJSON",
    "inherited": true,
    "overrides": "Konva.Shape#toJSON",
    "description": "convert Node into a JSON string.  Returns a JSON string.",
    "memberof": "Konva.Line",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3736,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1371
  },
  {
    "id": "Konva.Line#getParent",
    "longname": "Konva.Line#getParent",
    "name": "getParent",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getParent",
    "inherited": true,
    "overrides": "Konva.Shape#getParent",
    "description": "get parent container",
    "memberof": "Konva.Line",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3745,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1372
  },
  {
    "id": "Konva.Line#findAncestors",
    "longname": "Konva.Line#findAncestors",
    "name": "findAncestors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#findAncestors",
    "inherited": true,
    "overrides": "Konva.Shape#findAncestors",
    "description": "get all ancestors (parent then parent of the parent, etc) of the node",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "selector for search",
        "name": "selector"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "show we think that node is ancestro itself?",
        "name": "includeSelf"
      },
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "optional": true,
        "description": "optional node where we need to stop searching (one of ancestors)",
        "name": "stopNode"
      }
    ],
    "examples": [
      "// get one of the parent group\nvar parentGroups = node.findAncestors('Group');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "[ancestors]"
      }
    ],
    "meta": {
      "lineno": 3754,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1373
  },
  {
    "id": "Konva.Line#findAncestor",
    "longname": "Konva.Line#findAncestor",
    "name": "findAncestor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#findAncestor",
    "inherited": true,
    "overrides": "Konva.Shape#findAncestor",
    "description": "get ancestor (parent or parent of the parent, etc) of the node that match passed selector",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "selector for search",
        "name": "selector"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "show we think that node is ancestro itself?",
        "name": "includeSelf"
      },
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "optional": true,
        "description": "optional node where we need to stop searching (one of ancestors)",
        "name": "stopNode"
      }
    ],
    "examples": [
      "// get one of the parent group\nvar group = node.findAncestors('.mygroup');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "description": "ancestor"
      }
    ],
    "meta": {
      "lineno": 3786,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1374
  },
  {
    "id": "Konva.Line#getLayer",
    "longname": "Konva.Line#getLayer",
    "name": "getLayer",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getLayer",
    "inherited": true,
    "overrides": "Konva.Shape#getLayer",
    "description": "get layer ancestor",
    "memberof": "Konva.Line",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Layer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3837,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1375
  },
  {
    "id": "Konva.Line#getStage",
    "longname": "Konva.Line#getStage",
    "name": "getStage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getStage",
    "inherited": true,
    "overrides": "Konva.Shape#getStage",
    "description": "get stage ancestor",
    "memberof": "Konva.Line",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Stage"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3847,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1376
  },
  {
    "id": "Konva.Line#fire",
    "longname": "Konva.Line#fire",
    "name": "fire",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#fire",
    "inherited": true,
    "overrides": "Konva.Shape#fire",
    "description": "fire event",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "event type.  can be a regular event, like click, mouseover, or mouseout, or it can be a custom event, like myCustomEvent",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "Event"
          ]
        },
        "optional": true,
        "description": "event object",
        "name": "evt"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "setting the value to false, or leaving it undefined, will result in the event\n not bubbling.  Setting the value to true will result in the event bubbling.",
        "name": "bubble"
      }
    ],
    "examples": [
      "// manually fire click event\nnode.fire('click');\n\n// fire custom event\nnode.fire('foo');\n\n// fire custom event with custom event object\nnode.fire('foo', {\n  bar: 10\n});\n\n// fire click event that bubbles\nnode.fire('click', null, true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3865,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1377
  },
  {
    "id": "Konva.Line#getAbsoluteTransform",
    "longname": "Konva.Line#getAbsoluteTransform",
    "name": "getAbsoluteTransform",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteTransform",
    "inherited": true,
    "overrides": "Konva.Shape#getAbsoluteTransform",
    "description": "get absolute transform of the node which takes into\n account its ancestor transforms",
    "memberof": "Konva.Line",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3901,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1378
  },
  {
    "id": "Konva.Line#getAbsoluteScale",
    "longname": "Konva.Line#getAbsoluteScale",
    "name": "getAbsoluteScale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteScale",
    "inherited": true,
    "overrides": "Konva.Shape#getAbsoluteScale",
    "description": "get absolute scale of the node which takes into\n account its ancestor scales",
    "memberof": "Konva.Line",
    "examples": [
      "// get absolute scale x\nvar scaleX = node.getAbsoluteScale().x;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3961,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1379
  },
  {
    "id": "Konva.Line#getAbsoluteRotation",
    "longname": "Konva.Line#getAbsoluteRotation",
    "name": "getAbsoluteRotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteRotation",
    "inherited": true,
    "overrides": "Konva.Shape#getAbsoluteRotation",
    "description": "get absolute rotation of the node which takes into\n account its ancestor rotations",
    "memberof": "Konva.Line",
    "examples": [
      "// get absolute rotation\nvar rotation = node.getAbsoluteRotation();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3989,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1380
  },
  {
    "id": "Konva.Line#getTransform",
    "longname": "Konva.Line#getTransform",
    "name": "getTransform",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getTransform",
    "inherited": true,
    "overrides": "Konva.Shape#getTransform",
    "description": "get transform of the node",
    "memberof": "Konva.Line",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4009,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1381
  },
  {
    "id": "Konva.Line#clone",
    "longname": "Konva.Line#clone",
    "name": "clone",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#clone",
    "inherited": true,
    "overrides": "Konva.Shape#clone",
    "description": "clone node.  Returns a new Node instance with identical attributes.  You can also override\n the node properties with an object literal, enabling you to use an existing node as a template\n for another node",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "override attrs",
        "name": "obj"
      }
    ],
    "examples": [
      "// simple clone\nvar clone = node.clone();\n\n// clone a node and override the x position\nvar clone = rect.clone({\n  x: 5\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4044,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1382
  },
  {
    "id": "Konva.Line#toCanvas",
    "longname": "Konva.Line#toCanvas",
    "name": "toCanvas",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toCanvas",
    "inherited": true,
    "overrides": "Konva.Shape#toCanvas",
    "description": "converts node into an canvas element.",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output canvas. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var canvas = node.toCanvas();"
    ],
    "meta": {
      "lineno": 4119,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1383
  },
  {
    "id": "Konva.Line#toDataURL",
    "longname": "Konva.Line#toDataURL",
    "name": "toDataURL",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toDataURL",
    "inherited": true,
    "overrides": "Konva.Shape#toDataURL",
    "description": "Creates a composite data URL (base64 string). If MIME type is not\nspecified, then \"image/png\" will result. For \"image/jpeg\", specify a quality\nlevel as quality (range 0.0 - 1.0)",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"image/png\" or \"image/jpeg\".\n \"image/png\" is the default",
        "name": "config.mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "jpeg quality.  If using an \"image/jpeg\" mimeType,\n you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n is very high quality",
        "name": "config.quality"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output image url. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4140,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1384
  },
  {
    "id": "Konva.Line#toImage",
    "longname": "Konva.Line#toImage",
    "name": "toImage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toImage",
    "inherited": true,
    "overrides": "Konva.Shape#toImage",
    "description": "converts node into an image.  Since the toImage\n method is asynchronous, the resulting image can only be retrieved from the config callback\n or the returned Promise.  toImage is most commonly used\n to cache complex drawings as an image so that they don't have to constantly be redrawn",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"image/png\" or \"image/jpeg\".\n \"image/png\" is the default",
        "name": "config.mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "jpeg quality.  If using an \"image/jpeg\" mimeType,\n you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n is very high quality",
        "name": "config.quality"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output image. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var image = node.toImage({\n  callback(img) {\n    // do stuff with img\n  }\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Image>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4172,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1385
  },
  {
    "id": "Konva.Line#toBlob",
    "longname": "Konva.Line#toBlob",
    "name": "toBlob",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toBlob",
    "inherited": true,
    "overrides": "Konva.Shape#toBlob",
    "description": "Converts node into a blob.  Since the toBlob method is asynchronous,\n the resulting blob can only be retrieved from the config callback\n or the returned Promise.",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output canvas. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var blob = await node.toBlob({});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Blob>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4219,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1386
  },
  {
    "id": "Konva.Line#getClassName",
    "longname": "Konva.Line#getClassName",
    "name": "getClassName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getClassName",
    "inherited": true,
    "overrides": "Konva.Shape#getClassName",
    "description": "get class name, which may return Stage, Layer, Group, or shape class names like Rect, Circle, Text, etc.",
    "memberof": "Konva.Line",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4267,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1387
  },
  {
    "id": "Konva.Line#getType",
    "longname": "Konva.Line#getType",
    "name": "getType",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getType",
    "inherited": true,
    "overrides": "Konva.Shape#getType",
    "description": "get the node type, which may return Stage, Layer, Group, or Shape",
    "memberof": "Konva.Line",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4276,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1388
  },
  {
    "id": "Konva.Line#addName",
    "longname": "Konva.Line#addName",
    "name": "addName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#addName",
    "inherited": true,
    "overrides": "Konva.Shape#addName",
    "description": "add name to node",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red');\nnode.addName('selected');\nnode.name(); // return 'red selected'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4324,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1389
  },
  {
    "id": "Konva.Line#hasName",
    "longname": "Konva.Line#hasName",
    "name": "hasName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hasName",
    "inherited": true,
    "overrides": "Konva.Shape#hasName",
    "description": "check is node has name",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red');\nnode.hasName('red');   // return true\nnode.hasName('selected'); // return false\nnode.hasName(''); // return false"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4343,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1390
  },
  {
    "id": "Konva.Line#removeName",
    "longname": "Konva.Line#removeName",
    "name": "removeName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#removeName",
    "inherited": true,
    "overrides": "Konva.Shape#removeName",
    "description": "remove name from node",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red selected');\nnode.removeName('selected');\nnode.hasName('selected'); // return false\nnode.name(); // return 'red'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4367,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1391
  },
  {
    "id": "Konva.Line#setAttr",
    "longname": "Konva.Line#setAttr",
    "name": "setAttr",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#setAttr",
    "inherited": true,
    "overrides": "Konva.Shape#setAttr",
    "description": "set attr",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "attr"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "name": "val"
      }
    ],
    "examples": [
      "node.setAttr('x', 5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4388,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1392
  },
  {
    "id": "Konva.Line#draw",
    "longname": "Konva.Line#draw",
    "name": "draw",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#draw",
    "inherited": true,
    "overrides": "Konva.Shape#draw",
    "description": "draw both scene and hit graphs.  If the node being drawn is the stage, all of the layers will be cleared and redrawn",
    "memberof": "Konva.Line",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4511,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1393
  },
  {
    "id": "Konva.Line#startDrag",
    "longname": "Konva.Line#startDrag",
    "name": "startDrag",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#startDrag",
    "inherited": true,
    "overrides": "Konva.Shape#startDrag",
    "description": "initiate drag and drop.",
    "memberof": "Konva.Line",
    "meta": {
      "lineno": 4544,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1394
  },
  {
    "id": "Konva.Line#stopDrag",
    "longname": "Konva.Line#stopDrag",
    "name": "stopDrag",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#stopDrag",
    "inherited": true,
    "overrides": "Konva.Shape#stopDrag",
    "description": "stop drag and drop",
    "memberof": "Konva.Line",
    "meta": {
      "lineno": 4590,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1395
  },
  {
    "id": "Konva.Line#isDragging",
    "longname": "Konva.Line#isDragging",
    "name": "isDragging",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isDragging",
    "inherited": true,
    "overrides": "Konva.Shape#isDragging",
    "description": "determine if node is currently in drag and drop mode",
    "memberof": "Konva.Line",
    "meta": {
      "lineno": 4607,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1396
  },
  {
    "id": "Konva.Line#isClientRectOnScreen",
    "longname": "Konva.Line#isClientRectOnScreen",
    "name": "isClientRectOnScreen",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isClientRectOnScreen",
    "inherited": true,
    "overrides": "Konva.Shape#isClientRectOnScreen",
    "description": "determine if node (at least partially) is currently in user-visible area",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number",
            "Object"
          ]
        },
        "description": "optional margin in pixels",
        "name": "margin"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "margin.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "margin.y"
      }
    ],
    "examples": [
      "// get index\n// default calculations\nvar isOnScreen = node.isClientRectOnScreen()\n// increase object size (or screen size) for cases when objects close to the screen still need to be marked as \"visible\"\nvar isOnScreen = node.isClientRectOnScreen({ x: stage.width(), y: stage.height() })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4671,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1397
  },
  {
    "id": "Konva.Line#zIndex",
    "longname": "Konva.Line#zIndex",
    "name": "zIndex",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#zIndex",
    "inherited": true,
    "overrides": "Konva.Shape#zIndex",
    "description": "get/set zIndex relative to the node's siblings who share the same parent.\nPlease remember that zIndex is not absolute (like in CSS). It is relative to parent element only.",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "index"
      }
    ],
    "examples": [
      "// get index\nvar index = node.zIndex();\n\n// set index\nnode.zIndex(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4764,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1398
  },
  {
    "id": "Konva.Line#absolutePosition",
    "longname": "Konva.Line#absolutePosition",
    "name": "absolutePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#absolutePosition",
    "inherited": true,
    "overrides": "Konva.Shape#absolutePosition",
    "description": "get/set node absolute position",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "// get position\nvar position = node.absolutePosition();\n\n// set position\nnode.absolutePosition({\n  x: 5,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4779,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1399
  },
  {
    "id": "Konva.Line#position",
    "longname": "Konva.Line#position",
    "name": "position",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#position",
    "inherited": true,
    "overrides": "Konva.Shape#position",
    "description": "get/set node position relative to parent",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "// get position\nvar position = node.position();\n\n// set position\nnode.position({\n  x: 5,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4799,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1400
  },
  {
    "id": "Konva.Line#x",
    "longname": "Konva.Line#x",
    "name": "x",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#x",
    "inherited": true,
    "overrides": "Konva.Shape#x",
    "description": "get/set x position",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get x\nvar x = node.x();\n\n// set x\nnode.x(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4818,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1401
  },
  {
    "id": "Konva.Line#y",
    "longname": "Konva.Line#y",
    "name": "y",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#y",
    "inherited": true,
    "overrides": "Konva.Shape#y",
    "description": "get/set y position",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get y\nvar y = node.y();\n\n// set y\nnode.y(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4832,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1402
  },
  {
    "id": "Konva.Line#globalCompositeOperation",
    "longname": "Konva.Line#globalCompositeOperation",
    "name": "globalCompositeOperation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#globalCompositeOperation",
    "inherited": true,
    "overrides": "Konva.Shape#globalCompositeOperation",
    "description": "get/set globalCompositeOperation of a node. globalCompositeOperation DOESN'T affect hit graph of nodes. So they are still trigger to events as they have default \"source-over\" globalCompositeOperation.",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "type"
      }
    ],
    "examples": [
      "// get globalCompositeOperation\nvar globalCompositeOperation = shape.globalCompositeOperation();\n\n// set globalCompositeOperation\nshape.globalCompositeOperation('source-in');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4846,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1403
  },
  {
    "id": "Konva.Line#opacity",
    "longname": "Konva.Line#opacity",
    "name": "opacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#opacity",
    "inherited": true,
    "overrides": "Konva.Shape#opacity",
    "description": "get/set opacity.  Opacity values range from 0 to 1.\n A node with an opacity of 0 is fully transparent, and a node\n with an opacity of 1 is fully opaque",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "opacity"
      }
    ],
    "examples": [
      "// get opacity\nvar opacity = node.opacity();\n\n// set opacity\nnode.opacity(0.5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4860,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1404
  },
  {
    "id": "Konva.Line#name",
    "longname": "Konva.Line#name",
    "name": "name",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#name",
    "inherited": true,
    "overrides": "Konva.Shape#name",
    "description": "get/set name.",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "// get name\nvar name = node.name();\n\n// set name\nnode.name('foo');\n\n// also node may have multiple names (as css classes)\nnode.name('foo bar');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4876,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1405
  },
  {
    "id": "Konva.Line#id",
    "longname": "Konva.Line#id",
    "name": "id",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#id",
    "inherited": true,
    "overrides": "Konva.Shape#id",
    "description": "get/set id. Id is global for whole page.",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "id"
      }
    ],
    "examples": [
      "// get id\nvar name = node.id();\n\n// set id\nnode.id('foo');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4893,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1406
  },
  {
    "id": "Konva.Line#rotation",
    "longname": "Konva.Line#rotation",
    "name": "rotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#rotation",
    "inherited": true,
    "overrides": "Konva.Shape#rotation",
    "description": "get/set rotation in degrees",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get rotation in degrees\nvar rotation = node.rotation();\n\n// set rotation in degrees\nnode.rotation(45);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4907,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1407
  },
  {
    "id": "Konva.Line#scale",
    "longname": "Konva.Line#scale",
    "name": "scale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scale",
    "inherited": true,
    "overrides": "Konva.Shape#scale",
    "description": "get/set scale",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.y"
      }
    ],
    "examples": [
      "// get scale\nvar scale = node.scale();\n\n// set scale\nshape.scale({\n  x: 2,\n  y: 3\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4921,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1408
  },
  {
    "id": "Konva.Line#scaleX",
    "longname": "Konva.Line#scaleX",
    "name": "scaleX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scaleX",
    "inherited": true,
    "overrides": "Konva.Shape#scaleX",
    "description": "get/set scale x",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get scale x\nvar scaleX = node.scaleX();\n\n// set scale x\nnode.scaleX(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4940,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1409
  },
  {
    "id": "Konva.Line#scaleY",
    "longname": "Konva.Line#scaleY",
    "name": "scaleY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scaleY",
    "inherited": true,
    "overrides": "Konva.Shape#scaleY",
    "description": "get/set scale y",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get scale y\nvar scaleY = node.scaleY();\n\n// set scale y\nnode.scaleY(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4954,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1410
  },
  {
    "id": "Konva.Line#skew",
    "longname": "Konva.Line#skew",
    "name": "skew",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skew",
    "inherited": true,
    "overrides": "Konva.Shape#skew",
    "description": "get/set skew",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "skew"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "skew.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "skew.y"
      }
    ],
    "examples": [
      "// get skew\nvar skew = node.skew();\n\n// set skew\nnode.skew({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4968,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1411
  },
  {
    "id": "Konva.Line#skewX",
    "longname": "Konva.Line#skewX",
    "name": "skewX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skewX",
    "inherited": true,
    "overrides": "Konva.Shape#skewX",
    "description": "get/set skew x",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get skew x\nvar skewX = node.skewX();\n\n// set skew x\nnode.skewX(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4987,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1412
  },
  {
    "id": "Konva.Line#skewY",
    "longname": "Konva.Line#skewY",
    "name": "skewY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skewY",
    "inherited": true,
    "overrides": "Konva.Shape#skewY",
    "description": "get/set skew y",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get skew y\nvar skewY = node.skewY();\n\n// set skew y\nnode.skewY(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5001,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1413
  },
  {
    "id": "Konva.Line#offsetX",
    "longname": "Konva.Line#offsetX",
    "name": "offsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#offsetX",
    "inherited": true,
    "overrides": "Konva.Shape#offsetX",
    "description": "get/set offset x",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get offset x\nvar offsetX = node.offsetX();\n\n// set offset x\nnode.offsetX(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5033,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1414
  },
  {
    "id": "Konva.Line#offsetY",
    "longname": "Konva.Line#offsetY",
    "name": "offsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#offsetY",
    "inherited": true,
    "overrides": "Konva.Shape#offsetY",
    "description": "get/set offset y",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get offset y\nvar offsetY = node.offsetY();\n\n// set offset y\nnode.offsetY(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5047,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1415
  },
  {
    "id": "Konva.Line#dragDistance",
    "longname": "Konva.Line#dragDistance",
    "name": "dragDistance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#dragDistance",
    "inherited": true,
    "overrides": "Konva.Shape#dragDistance",
    "description": "get/set drag distance",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "distance"
      }
    ],
    "examples": [
      "// get drag distance\nvar dragDistance = node.dragDistance();\n\n// set distance\n// node starts dragging only if pointer moved more then 3 pixels\nnode.dragDistance(3);\n// or set globally\nKonva.dragDistance = 3;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5061,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1416
  },
  {
    "id": "Konva.Line#width",
    "longname": "Konva.Line#width",
    "name": "width",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#width",
    "inherited": true,
    "overrides": "Konva.Shape#width",
    "description": "get/set width",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "width"
      }
    ],
    "examples": [
      "// get width\nvar width = node.width();\n\n// set width\nnode.width(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5078,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1417
  },
  {
    "id": "Konva.Line#height",
    "longname": "Konva.Line#height",
    "name": "height",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#height",
    "inherited": true,
    "overrides": "Konva.Shape#height",
    "description": "get/set height",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "height"
      }
    ],
    "examples": [
      "// get height\nvar height = node.height();\n\n// set height\nnode.height(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5092,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1418
  },
  {
    "id": "Konva.Line#listening",
    "longname": "Konva.Line#listening",
    "name": "listening",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#listening",
    "inherited": true,
    "overrides": "Konva.Shape#listening",
    "description": "get/set listening attr.  If you need to determine if a node is listening or not\n  by taking into account its parents, use the isListening() method\n  nodes with listening set to false will not be detected in hit graph\n  so they will be ignored in container.getIntersection() method",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "Can be true, or false.  The default is true.",
        "name": "listening"
      }
    ],
    "examples": [
      "// get listening attr\nvar listening = node.listening();\n\n// stop listening for events, remove node and all its children from hit graph\nnode.listening(false);\n\n// listen to events according to the parent\nnode.listening(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5106,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1419
  },
  {
    "id": "Konva.Line#preventDefault",
    "longname": "Konva.Line#preventDefault",
    "name": "preventDefault",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#preventDefault",
    "inherited": true,
    "overrides": "Konva.Shape#preventDefault",
    "description": "get/set preventDefault\nBy default all shapes will prevent default behavior\nof a browser on a pointer move or tap.\nthat will prevent native scrolling when you are trying to drag&drop a node\nbut sometimes you may need to enable default actions\nin that case you can set the property to false",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "preventDefault"
      }
    ],
    "examples": [
      "// get preventDefault\nvar shouldPrevent = shape.preventDefault();\n\n// set preventDefault\nshape.preventDefault(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5125,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1420
  },
  {
    "id": "Konva.Line#filters",
    "longname": "Konva.Line#filters",
    "name": "filters",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#filters",
    "inherited": true,
    "overrides": "Konva.Shape#filters",
    "description": "get/set filters.  Filters are applied to cached canvases",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "array of filters",
        "name": "filters"
      }
    ],
    "examples": [
      "// get filters\nvar filters = node.filters();\n\n// set a single filter\nnode.cache();\nnode.filters([Konva.Filters.Blur]);\n\n// set multiple filters\nnode.cache();\nnode.filters([\n  Konva.Filters.Blur,\n  Konva.Filters.Sepia,\n  Konva.Filters.Invert\n]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5148,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1421
  },
  {
    "id": "Konva.Line#visible",
    "longname": "Konva.Line#visible",
    "name": "visible",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#visible",
    "inherited": true,
    "overrides": "Konva.Shape#visible",
    "description": "get/set visible attr.  Can be true, or false.  The default is true.\n  If you need to determine if a node is visible or not\n  by taking into account its parents, use the isVisible() method",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "visible"
      }
    ],
    "examples": [
      "// get visible attr\nvar visible = node.visible();\n\n// make invisible\nnode.visible(false);\n\n// make visible (according to the parent)\nnode.visible(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5171,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1422
  },
  {
    "id": "Konva.Line#transformsEnabled",
    "longname": "Konva.Line#transformsEnabled",
    "name": "transformsEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#transformsEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#transformsEnabled",
    "description": "get/set transforms that are enabled.  Can be \"all\", \"none\", or \"position\".  The default\n is \"all\"",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// enable position transform only to improve draw performance\nnode.transformsEnabled('position');\n\n// enable all transforms\nnode.transformsEnabled('all');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5191,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1423
  },
  {
    "id": "Konva.Line#size",
    "longname": "Konva.Line#size",
    "name": "size",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#size",
    "inherited": true,
    "overrides": "Konva.Shape#size",
    "description": "get/set node size",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "size"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size.height"
      }
    ],
    "examples": [
      "// get node size\nvar size = node.size();\nvar width = size.width;\nvar height = size.height;\n\n// set size\nnode.size({\n  width: 100,\n  height: 200\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5205,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1424
  },
  {
    "id": "Konva.Line#dragBoundFunc",
    "longname": "Konva.Line#dragBoundFunc",
    "name": "dragBoundFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#dragBoundFunc",
    "inherited": true,
    "overrides": "Konva.Shape#dragBoundFunc",
    "description": "get/set drag bound function.  This is used to override the default\n drag and drop position.",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "name": "dragBoundFunc"
      }
    ],
    "examples": [
      "// get drag bound function\nvar dragBoundFunc = node.dragBoundFunc();\n\n// create vertical drag and drop\nnode.dragBoundFunc(function(pos){\n  // important pos - is absolute position of the node\n  // you should return absolute position too\n  return {\n    x: this.absolutePosition().x,\n    y: pos.y\n  };\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5226,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1425
  },
  {
    "id": "Konva.Line#draggable",
    "longname": "Konva.Line#draggable",
    "name": "draggable",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#draggable",
    "inherited": true,
    "overrides": "Konva.Shape#draggable",
    "description": "get/set draggable flag",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "draggable"
      }
    ],
    "examples": [
      "// get draggable flag\nvar draggable = node.draggable();\n\n// enable drag and drop\nnode.draggable(true);\n\n// disable drag and drop\nnode.draggable(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5248,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1426
  },
  {
    "id": "Konva.Line#to",
    "longname": "Konva.Line#to",
    "name": "to",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#to",
    "inherited": true,
    "overrides": "Konva.Shape#to",
    "description": "Tween node properties. Shorter usage of {@link Konva.Tween} object.",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "tween params",
        "name": "params"
      }
    ],
    "examples": [
      "circle.to({\n  x : 50,\n  duration : 0.5,\n  onUpdate: () => console.log('props updated'),\n  onFinish: () => console.log('finished'),\n});"
    ],
    "meta": {
      "lineno": 9588,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1427
  },
  {
    "id": "Konva.Line#blurRadius",
    "longname": "Konva.Line#blurRadius",
    "name": "blurRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#blurRadius",
    "inherited": true,
    "overrides": "Konva.Shape#blurRadius",
    "description": "get/set blur radius. Use with {@link Konva.Filters.Blur} filter",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "radius"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17517,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1428
  },
  {
    "id": "Konva.Line#brightness",
    "longname": "Konva.Line#brightness",
    "name": "brightness",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#brightness",
    "inherited": true,
    "overrides": "Konva.Shape#brightness",
    "description": "get/set filter brightness.  The brightness is a number between -1 and 1.&nbsp; Positive values\n brighten the pixels and negative values darken them. Use with {@link Konva.Filters.Brighten} filter.",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between -1 and 1",
        "name": "brightness"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17547,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1429
  },
  {
    "id": "Konva.Line#contrast",
    "longname": "Konva.Line#contrast",
    "name": "contrast",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#contrast",
    "inherited": true,
    "overrides": "Konva.Shape#contrast",
    "description": "get/set filter contrast.  The contrast is a number between -100 and 100.\nUse with {@link Konva.Filters.Contrast} filter.",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between -100 and 100",
        "name": "contrast"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17600,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1430
  },
  {
    "id": "Konva.Line#embossStrength",
    "longname": "Konva.Line#embossStrength",
    "name": "embossStrength",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossStrength",
    "inherited": true,
    "overrides": "Konva.Shape#embossStrength",
    "description": "get/set emboss strength. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1.  Default is 0.5",
        "name": "level"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17725,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1431
  },
  {
    "id": "Konva.Line#embossWhiteLevel",
    "longname": "Konva.Line#embossWhiteLevel",
    "name": "embossWhiteLevel",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossWhiteLevel",
    "inherited": true,
    "overrides": "Konva.Shape#embossWhiteLevel",
    "description": "get/set emboss white level. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1.  Default is 0.5",
        "name": "embossWhiteLevel"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17733,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1432
  },
  {
    "id": "Konva.Line#embossDirection",
    "longname": "Konva.Line#embossDirection",
    "name": "embossDirection",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossDirection",
    "inherited": true,
    "overrides": "Konva.Shape#embossDirection",
    "description": "get/set emboss direction. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "can be top-left, top, top-right, right, bottom-right, bottom, bottom-left or left\n  The default is top-left",
        "name": "embossDirection"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17741,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1433
  },
  {
    "id": "Konva.Line#embossBlend",
    "longname": "Konva.Line#embossBlend",
    "name": "embossBlend",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossBlend",
    "inherited": true,
    "overrides": "Konva.Shape#embossBlend",
    "description": "get/set emboss blend. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "embossBlend"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17750,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1434
  },
  {
    "id": "Konva.Line#enhance",
    "longname": "Konva.Line#enhance",
    "name": "enhance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#enhance",
    "inherited": true,
    "overrides": "Konva.Shape#enhance",
    "description": "get/set enhance. Use with {@link Konva.Filters.Enhance} filter. -1 to 1 values",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Float"
          ]
        },
        "name": "amount"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Float"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17864,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1435
  },
  {
    "id": "Konva.Line#hue",
    "longname": "Konva.Line#hue",
    "name": "hue",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hue",
    "inherited": true,
    "overrides": "Konva.Shape#hue",
    "description": "get/set hsv hue in degrees. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between 0 and 359",
        "name": "hue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17896,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1436
  },
  {
    "id": "Konva.Line#saturation",
    "longname": "Konva.Line#saturation",
    "name": "saturation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#saturation",
    "inherited": true,
    "overrides": "Konva.Shape#saturation",
    "description": "get/set hsv saturation. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the saturation, 1.0 doubles, etc..",
        "name": "saturation"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17904,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1437
  },
  {
    "id": "Konva.Line#luminance",
    "longname": "Konva.Line#luminance",
    "name": "luminance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#luminance",
    "inherited": true,
    "overrides": "Konva.Shape#luminance",
    "description": "get/set hsl luminance. Use with {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "from -1 to 1",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17912,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1438
  },
  {
    "id": "Konva.Line#value",
    "longname": "Konva.Line#value",
    "name": "value",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#value",
    "inherited": true,
    "overrides": "Konva.Shape#value",
    "description": "get/set hsv value. Use with {@link Konva.Filters.HSV} filter.",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the value, 1.0 doubles, etc..",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18018,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1439
  },
  {
    "id": "Konva.Line#kaleidoscopePower",
    "longname": "Konva.Line#kaleidoscopePower",
    "name": "kaleidoscopePower",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#kaleidoscopePower",
    "inherited": true,
    "overrides": "Konva.Shape#kaleidoscopePower",
    "description": "get/set kaleidoscope power. Use with {@link Konva.Filters.Kaleidoscope} filter.",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "of kaleidoscope",
        "name": "power"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18243,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1440
  },
  {
    "id": "Konva.Line#kaleidoscopeAngle",
    "longname": "Konva.Line#kaleidoscopeAngle",
    "name": "kaleidoscopeAngle",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#kaleidoscopeAngle",
    "inherited": true,
    "overrides": "Konva.Shape#kaleidoscopeAngle",
    "description": "get/set kaleidoscope angle. Use with {@link Konva.Filters.Kaleidoscope} filter.",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "degrees"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18251,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1441
  },
  {
    "id": "Konva.Line#noise",
    "longname": "Konva.Line#noise",
    "name": "noise",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#noise",
    "inherited": true,
    "overrides": "Konva.Shape#noise",
    "description": "get/set noise amount.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Noise} filter.",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "noise"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18437,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1442
  },
  {
    "id": "Konva.Line#pixelSize",
    "longname": "Konva.Line#pixelSize",
    "name": "pixelSize",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#pixelSize",
    "inherited": true,
    "overrides": "Konva.Shape#pixelSize",
    "description": "get/set pixel size. Use with {@link Konva.Filters.Pixelate} filter.",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "pixelSize"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18522,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1443
  },
  {
    "id": "Konva.Line#levels",
    "longname": "Konva.Line#levels",
    "name": "levels",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#levels",
    "inherited": true,
    "overrides": "Konva.Shape#levels",
    "description": "get/set levels.  Must be a number between 0 and 1.  Use with {@link Konva.Filters.Posterize} filter.",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1",
        "name": "level"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18552,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1444
  },
  {
    "id": "Konva.Line#red",
    "longname": "Konva.Line#red",
    "name": "red",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#red",
    "inherited": true,
    "overrides": "Konva.Shape#red",
    "description": "get/set filter red value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "red"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18596,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1445
  },
  {
    "id": "Konva.Line#green",
    "longname": "Konva.Line#green",
    "name": "green",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#green",
    "inherited": true,
    "overrides": "Konva.Shape#green",
    "description": "get/set filter green value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "green"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18616,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1446
  },
  {
    "id": "Konva.Line#blue",
    "longname": "Konva.Line#blue",
    "name": "blue",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#blue",
    "inherited": true,
    "overrides": "Konva.Shape#blue",
    "description": "get/set filter blue value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "blue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18625,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1447
  },
  {
    "id": "Konva.Line#alpha",
    "longname": "Konva.Line#alpha",
    "name": "alpha",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#alpha",
    "inherited": true,
    "overrides": "Konva.Shape#alpha",
    "description": "get/set filter alpha value. Use with {@link Konva.Filters.RGBA} filter.",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Float"
          ]
        },
        "description": "value between 0 and 1",
        "name": "alpha"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Float"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18718,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1448
  },
  {
    "id": "Konva.Line#threshold",
    "longname": "Konva.Line#threshold",
    "name": "threshold",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#threshold",
    "inherited": true,
    "overrides": "Konva.Shape#threshold",
    "description": "get/set threshold.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Threshold} or {@link Konva.Filters.Mask} filter.",
    "memberof": "Konva.Line",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "threshold"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18809,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1449
  },
  {
    "id": "Konva.Path#hasShadow",
    "longname": "Konva.Path#hasShadow",
    "name": "hasShadow",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasShadow",
    "inherited": true,
    "overrides": "Konva.Shape#hasShadow",
    "description": "returns whether or not a shadow will be rendered",
    "memberof": "Konva.Path",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 6909,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1450
  },
  {
    "id": "Konva.Path#hasFill",
    "longname": "Konva.Path#hasFill",
    "name": "hasFill",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasFill",
    "inherited": true,
    "overrides": "Konva.Shape#hasFill",
    "description": "returns whether or not the shape will be filled",
    "memberof": "Konva.Path",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7009,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1451
  },
  {
    "id": "Konva.Path#hasStroke",
    "longname": "Konva.Path#hasStroke",
    "name": "hasStroke",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasStroke",
    "inherited": true,
    "overrides": "Konva.Shape#hasStroke",
    "description": "returns whether or not the shape will be stroked",
    "memberof": "Konva.Path",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7030,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1452
  },
  {
    "id": "Konva.Path#intersects",
    "longname": "Konva.Path#intersects",
    "name": "intersects",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#intersects",
    "inherited": true,
    "overrides": "Konva.Shape#intersects",
    "description": "determines if point is in the shape, regardless if other shapes are on top of it.  Note: because\n this method clears a temporary canvas and then redraws the shape, it performs very poorly if executed many times\n consecutively.  Please use the {@link Konva.Stage#getIntersection} method if at all possible\n because it performs much better",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "point"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "point.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "point.y"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7066,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1453
  },
  {
    "id": "Konva.Path#getSelfRect",
    "longname": "Konva.Path#getSelfRect",
    "name": "getSelfRect",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#getSelfRect",
    "inherited": true,
    "overrides": "Konva.Shape#getSelfRect",
    "description": "return self rectangle (x, y, width, height) of shape.\nThis method are not taken into account transformation and styles.",
    "memberof": "Konva.Path",
    "examples": [
      "rect.getSelfRect();  // return {x:0, y:0, width:rect.width(), height:rect.height()}\ncircle.getSelfRect();  // return {x: - circle.width() / 2, y: - circle.height() / 2, width:circle.width(), height:circle.height()}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "rect with `{x, y, width, height}` properties"
      }
    ],
    "meta": {
      "lineno": 7138,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1454
  },
  {
    "id": "Konva.Path#drawHitFromCache",
    "longname": "Konva.Path#drawHitFromCache",
    "name": "drawHitFromCache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#drawHitFromCache",
    "inherited": true,
    "overrides": "Konva.Shape#drawHitFromCache",
    "description": "draw hit graph using the cached scene canvas",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "alpha channel threshold that determines whether or not\n a pixel should be drawn onto the hit graph.  Must be a value between 0 and 255.\n The default is 0",
        "name": "alphaThreshold"
      }
    ],
    "examples": [
      "shape.cache();\nshape.drawHitFromCache();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7294,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1455
  },
  {
    "id": "Konva.Path#stroke",
    "longname": "Konva.Path#stroke",
    "name": "stroke",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#stroke",
    "inherited": true,
    "overrides": "Konva.Shape#stroke",
    "description": "get/set stroke color",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get stroke color\nvar stroke = shape.stroke();\n\n// set stroke color with color string\nshape.stroke('green');\n\n// set stroke color with hex\nshape.stroke('#00ff00');\n\n// set stroke color with rgb\nshape.stroke('rgb(0,255,0)');\n\n// set stroke color with rgba and make it 50% opaque\nshape.stroke('rgba(0,255,0,0.5');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7360,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1456
  },
  {
    "id": "Konva.Path#strokeWidth",
    "longname": "Konva.Path#strokeWidth",
    "name": "strokeWidth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeWidth",
    "inherited": true,
    "overrides": "Konva.Shape#strokeWidth",
    "description": "get/set stroke width",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "strokeWidth"
      }
    ],
    "examples": [
      "// get stroke width\nvar strokeWidth = shape.strokeWidth();\n\n// set stroke width\nshape.strokeWidth(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7383,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1457
  },
  {
    "id": "Konva.Path#fillAfterStrokeEnabled",
    "longname": "Konva.Path#fillAfterStrokeEnabled",
    "name": "fillAfterStrokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillAfterStrokeEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#fillAfterStrokeEnabled",
    "description": "get/set fillAfterStrokeEnabled property. By default Konva is drawing filling first, then stroke on top of the fill.\nIn rare situations you may want a different behavior. When you have a stroke first then fill on top of it.\nEspecially useful for Text objects.\nDefault is false.",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "fillAfterStrokeEnabled"
      }
    ],
    "examples": [
      "// get stroke width\nvar fillAfterStrokeEnabled = shape.fillAfterStrokeEnabled();\n\n// set stroke width\nshape.fillAfterStrokeEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7397,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1458
  },
  {
    "id": "Konva.Path#hitStrokeWidth",
    "longname": "Konva.Path#hitStrokeWidth",
    "name": "hitStrokeWidth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hitStrokeWidth",
    "inherited": true,
    "overrides": "Konva.Shape#hitStrokeWidth",
    "description": "get/set stroke width for hit detection. Default value is \"auto\", it means it will be equals to strokeWidth",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "hitStrokeWidth"
      }
    ],
    "examples": [
      "// get stroke width\nvar hitStrokeWidth = shape.hitStrokeWidth();\n\n// set hit stroke width\nshape.hitStrokeWidth(20);\n// set hit stroke width always equals to scene stroke width\nshape.hitStrokeWidth('auto');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7414,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1459
  },
  {
    "id": "Konva.Path#strokeHitEnabled",
    "longname": "Konva.Path#strokeHitEnabled",
    "name": "strokeHitEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeHitEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#strokeHitEnabled",
    "description": "**deprecated, use hitStrokeWidth instead!** get/set strokeHitEnabled property. Useful for performance optimization.\nYou may set `shape.strokeHitEnabled(false)`. In this case stroke will be no draw on hit canvas, so hit area\nof shape will be decreased (by lineWidth / 2). Remember that non closed line with `strokeHitEnabled = false`\nwill be not drawn on hit canvas, that is mean line will no trigger pointer events (like mouseover)\nDefault value is true.",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "strokeHitEnabled"
      }
    ],
    "examples": [
      "// get strokeHitEnabled\nvar strokeHitEnabled = shape.strokeHitEnabled();\n\n// set strokeHitEnabled\nshape.strokeHitEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7430,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1460
  },
  {
    "id": "Konva.Path#perfectDrawEnabled",
    "longname": "Konva.Path#perfectDrawEnabled",
    "name": "perfectDrawEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#perfectDrawEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#perfectDrawEnabled",
    "description": "get/set perfectDrawEnabled. If a shape has fill, stroke and opacity you may set `perfectDrawEnabled` to false to improve performance.\nSee http://konvajs.org/docs/performance/Disable_Perfect_Draw.html for more information.\nDefault value is true",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "perfectDrawEnabled"
      }
    ],
    "examples": [
      "// get perfectDrawEnabled\nvar perfectDrawEnabled = shape.perfectDrawEnabled();\n\n// set perfectDrawEnabled\nshape.perfectDrawEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7448,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1461
  },
  {
    "id": "Konva.Path#shadowForStrokeEnabled",
    "longname": "Konva.Path#shadowForStrokeEnabled",
    "name": "shadowForStrokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowForStrokeEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#shadowForStrokeEnabled",
    "description": "get/set shadowForStrokeEnabled. Useful for performance optimization.\nYou may set `shape.shadowForStrokeEnabled(false)`. In this case stroke will no effect shadow.\nRemember if you set `shadowForStrokeEnabled = false` for non closed line - that line will have no shadow!.\nDefault value is true",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "shadowForStrokeEnabled"
      }
    ],
    "examples": [
      "// get shadowForStrokeEnabled\nvar shadowForStrokeEnabled = shape.shadowForStrokeEnabled();\n\n// set shadowForStrokeEnabled\nshape.shadowForStrokeEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7464,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1462
  },
  {
    "id": "Konva.Path#lineJoin",
    "longname": "Konva.Path#lineJoin",
    "name": "lineJoin",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#lineJoin",
    "inherited": true,
    "overrides": "Konva.Shape#lineJoin",
    "description": "get/set line join.  Can be miter, round, or bevel.  The\n default is miter",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "lineJoin"
      }
    ],
    "examples": [
      "// get line join\nvar lineJoin = shape.lineJoin();\n\n// set line join\nshape.lineJoin('round');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7481,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1463
  },
  {
    "id": "Konva.Path#lineCap",
    "longname": "Konva.Path#lineCap",
    "name": "lineCap",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#lineCap",
    "inherited": true,
    "overrides": "Konva.Shape#lineCap",
    "description": "get/set line cap.  Can be butt, round, or square",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "lineCap"
      }
    ],
    "examples": [
      "// get line cap\nvar lineCap = shape.lineCap();\n\n// set line cap\nshape.lineCap('round');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7496,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1464
  },
  {
    "id": "Konva.Path#sceneFunc",
    "longname": "Konva.Path#sceneFunc",
    "name": "sceneFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#sceneFunc",
    "inherited": true,
    "overrides": "Konva.Shape#sceneFunc",
    "description": "get/set scene draw function. That function is used to draw the shape on a canvas.\nAlso that function will be used to draw hit area of the shape, in case if hitFunc is not defined.",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "drawing function",
        "name": "drawFunc"
      }
    ],
    "examples": [
      "// get scene draw function\nvar sceneFunc = shape.sceneFunc();\n\n// set scene draw function\nshape.sceneFunc(function(context, shape) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  // like stroke and fill\n  context.fillStrokeShape(shape);\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7510,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1465
  },
  {
    "id": "Konva.Path#hitFunc",
    "longname": "Konva.Path#hitFunc",
    "name": "hitFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hitFunc",
    "inherited": true,
    "overrides": "Konva.Shape#hitFunc",
    "description": "get/set hit draw function. That function is used to draw custom hit area of a shape.",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "drawing function",
        "name": "drawFunc"
      }
    ],
    "examples": [
      "// get hit draw function\nvar hitFunc = shape.hitFunc();\n\n// set hit draw function\nshape.hitFunc(function(context) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  context.fillStrokeShape(shape);\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7532,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1466
  },
  {
    "id": "Konva.Path#dash",
    "longname": "Konva.Path#dash",
    "name": "dash",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#dash",
    "inherited": true,
    "overrides": "Konva.Shape#dash",
    "description": "get/set dash array for stroke.",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "dash"
      }
    ],
    "examples": [
      "// apply dashed stroke that is 10px long and 5 pixels apart\n line.dash([10, 5]);\n // apply dashed stroke that is made up of alternating dashed\n // lines that are 10px long and 20px apart, and dots that have\n // a radius of 5px and are 20px apart\n line.dash([10, 20, 0.001, 20]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7552,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1467
  },
  {
    "id": "Konva.Path#shadowColor",
    "longname": "Konva.Path#shadowColor",
    "name": "shadowColor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowColor",
    "inherited": true,
    "overrides": "Konva.Shape#shadowColor",
    "description": "get/set shadow color",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get shadow color\nvar shadow = shape.shadowColor();\n\n// set shadow color with color string\nshape.shadowColor('green');\n\n// set shadow color with hex\nshape.shadowColor('#00ff00');\n\n// set shadow color with rgb\nshape.shadowColor('rgb(0,255,0)');\n\n// set shadow color with rgba and make it 50% opaque\nshape.shadowColor('rgba(0,255,0,0.5');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7579,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1468
  },
  {
    "id": "Konva.Path#shadowBlur",
    "longname": "Konva.Path#shadowBlur",
    "name": "shadowBlur",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowBlur",
    "inherited": true,
    "overrides": "Konva.Shape#shadowBlur",
    "description": "get/set shadow blur",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "blur"
      }
    ],
    "examples": [
      "// get shadow blur\nvar shadowBlur = shape.shadowBlur();\n\n// set shadow blur\nshape.shadowBlur(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7602,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1469
  },
  {
    "id": "Konva.Path#shadowOpacity",
    "longname": "Konva.Path#shadowOpacity",
    "name": "shadowOpacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOpacity",
    "inherited": true,
    "overrides": "Konva.Shape#shadowOpacity",
    "description": "get/set shadow opacity.  must be a value between 0 and 1",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "opacity"
      }
    ],
    "examples": [
      "// get shadow opacity\nvar shadowOpacity = shape.shadowOpacity();\n\n// set shadow opacity\nshape.shadowOpacity(0.5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7616,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1470
  },
  {
    "id": "Konva.Path#shadowOffset",
    "longname": "Konva.Path#shadowOffset",
    "name": "shadowOffset",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffset",
    "inherited": true,
    "overrides": "Konva.Shape#shadowOffset",
    "description": "get/set shadow offset",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.y"
      }
    ],
    "examples": [
      "// get shadow offset\nvar shadowOffset = shape.shadowOffset();\n\n// set shadow offset\nshape.shadowOffset({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7630,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1471
  },
  {
    "id": "Konva.Path#shadowOffsetX",
    "longname": "Konva.Path#shadowOffsetX",
    "name": "shadowOffsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffsetX",
    "inherited": true,
    "overrides": "Konva.Shape#shadowOffsetX",
    "description": "get/set shadow offset x",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get shadow offset x\nvar shadowOffsetX = shape.shadowOffsetX();\n\n// set shadow offset x\nshape.shadowOffsetX(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7649,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1472
  },
  {
    "id": "Konva.Path#shadowOffsetY",
    "longname": "Konva.Path#shadowOffsetY",
    "name": "shadowOffsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffsetY",
    "inherited": true,
    "overrides": "Konva.Shape#shadowOffsetY",
    "description": "get/set shadow offset y",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get shadow offset y\nvar shadowOffsetY = shape.shadowOffsetY();\n\n// set shadow offset y\nshape.shadowOffsetY(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7663,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1473
  },
  {
    "id": "Konva.Path#fillPatternImage",
    "longname": "Konva.Path#fillPatternImage",
    "name": "fillPatternImage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternImage",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternImage",
    "description": "get/set fill pattern image",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Image"
          ]
        },
        "description": "object",
        "name": "image"
      }
    ],
    "examples": [
      "// get fill pattern image\nvar fillPatternImage = shape.fillPatternImage();\n\n// set fill pattern image\nvar imageObj = new Image();\nimageObj.onload = function() {\n  shape.fillPatternImage(imageObj);\n};\nimageObj.src = 'path/to/image/jpg';"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Image"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7677,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1474
  },
  {
    "id": "Konva.Path#fill",
    "longname": "Konva.Path#fill",
    "name": "fill",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fill",
    "inherited": true,
    "overrides": "Konva.Shape#fill",
    "description": "get/set fill color",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get fill color\nvar fill = shape.fill();\n\n// set fill color with color string\nshape.fill('green');\n\n// set fill color with hex\nshape.fill('#00ff00');\n\n// set fill color with rgb\nshape.fill('rgb(0,255,0)');\n\n// set fill color with rgba and make it 50% opaque\nshape.fill('rgba(0,255,0,0.5');\n\n// shape without fill\nshape.fill(null);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7695,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1475
  },
  {
    "id": "Konva.Path#fillPatternX",
    "longname": "Konva.Path#fillPatternX",
    "name": "fillPatternX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternX",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternX",
    "description": "get/set fill pattern x",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern x\nvar fillPatternX = shape.fillPatternX();\n// set fill pattern x\nshape.fillPatternX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7721,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1476
  },
  {
    "id": "Konva.Path#fillPatternY",
    "longname": "Konva.Path#fillPatternY",
    "name": "fillPatternY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternY",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternY",
    "description": "get/set fill pattern y",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern y\nvar fillPatternY = shape.fillPatternY();\n// set fill pattern y\nshape.fillPatternY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7734,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1477
  },
  {
    "id": "Konva.Path#fillLinearGradientColorStops",
    "longname": "Konva.Path#fillLinearGradientColorStops",
    "name": "fillLinearGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientColorStops",
    "inherited": true,
    "overrides": "Konva.Shape#fillLinearGradientColorStops",
    "description": "get/set fill linear gradient color stops",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get fill linear gradient color stops\nvar colorStops = shape.fillLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillLinearGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "colorStops"
      }
    ],
    "meta": {
      "lineno": 7747,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1478
  },
  {
    "id": "Konva.Path#strokeLinearGradientColorStops",
    "longname": "Konva.Path#strokeLinearGradientColorStops",
    "name": "strokeLinearGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientColorStops",
    "inherited": true,
    "overrides": "Konva.Shape#strokeLinearGradientColorStops",
    "description": "get/set stroke linear gradient color stops",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get stroke linear gradient color stops\nvar colorStops = shape.strokeLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.strokeLinearGradientColorStops([0, 'red', 0.5, 'blue', 1, 'green']);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "colorStops"
      }
    ],
    "meta": {
      "lineno": 7762,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1479
  },
  {
    "id": "Konva.Path#fillRadialGradientStartRadius",
    "longname": "Konva.Path#fillRadialGradientStartRadius",
    "name": "fillRadialGradientStartRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartRadius",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientStartRadius",
    "description": "get/set fill radial gradient start radius",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "radius"
      }
    ],
    "examples": [
      "// get radial gradient start radius\nvar startRadius = shape.fillRadialGradientStartRadius();\n\n// set radial gradient start radius\nshape.fillRadialGradientStartRadius(0);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7777,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1480
  },
  {
    "id": "Konva.Path#fillRadialGradientEndRadius",
    "longname": "Konva.Path#fillRadialGradientEndRadius",
    "name": "fillRadialGradientEndRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndRadius",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientEndRadius",
    "description": "get/set fill radial gradient end radius",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "radius"
      }
    ],
    "examples": [
      "// get radial gradient end radius\nvar endRadius = shape.fillRadialGradientEndRadius();\n\n// set radial gradient end radius\nshape.fillRadialGradientEndRadius(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7791,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1481
  },
  {
    "id": "Konva.Path#fillRadialGradientColorStops",
    "longname": "Konva.Path#fillRadialGradientColorStops",
    "name": "fillRadialGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientColorStops",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientColorStops",
    "description": "get/set fill radial gradient color stops",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get fill radial gradient color stops\nvar colorStops = shape.fillRadialGradientColorStops();\n\n// create a radial gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillRadialGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7805,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1482
  },
  {
    "id": "Konva.Path#fillPatternRepeat",
    "longname": "Konva.Path#fillPatternRepeat",
    "name": "fillPatternRepeat",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternRepeat",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternRepeat",
    "description": "get/set fill pattern repeat.  Can be 'repeat', 'repeat-x', 'repeat-y', or 'no-repeat'.  The default is 'repeat'",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "repeat"
      }
    ],
    "examples": [
      "// get fill pattern repeat\nvar repeat = shape.fillPatternRepeat();\n\n// repeat pattern in x direction only\nshape.fillPatternRepeat('repeat-x');\n\n// do not repeat the pattern\nshape.fillPatternRepeat('no-repeat');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7820,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1483
  },
  {
    "id": "Konva.Path#fillEnabled",
    "longname": "Konva.Path#fillEnabled",
    "name": "fillEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#fillEnabled",
    "description": "get/set fill enabled flag",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get fill enabled flag\nvar fillEnabled = shape.fillEnabled();\n\n// disable fill\nshape.fillEnabled(false);\n\n// enable fill\nshape.fillEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7837,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1484
  },
  {
    "id": "Konva.Path#strokeEnabled",
    "longname": "Konva.Path#strokeEnabled",
    "name": "strokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#strokeEnabled",
    "description": "get/set stroke enabled flag",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get stroke enabled flag\nvar strokeEnabled = shape.strokeEnabled();\n\n// disable stroke\nshape.strokeEnabled(false);\n\n// enable stroke\nshape.strokeEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7854,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1485
  },
  {
    "id": "Konva.Path#shadowEnabled",
    "longname": "Konva.Path#shadowEnabled",
    "name": "shadowEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#shadowEnabled",
    "description": "get/set shadow enabled flag",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get shadow enabled flag\nvar shadowEnabled = shape.shadowEnabled();\n\n// disable shadow\nshape.shadowEnabled(false);\n\n// enable shadow\nshape.shadowEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7871,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1486
  },
  {
    "id": "Konva.Path#dashEnabled",
    "longname": "Konva.Path#dashEnabled",
    "name": "dashEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#dashEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#dashEnabled",
    "description": "get/set dash enabled flag",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get dash enabled flag\nvar dashEnabled = shape.dashEnabled();\n\n// disable dash\nshape.dashEnabled(false);\n\n// enable dash\nshape.dashEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7888,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1487
  },
  {
    "id": "Konva.Path#strokeScaleEnabled",
    "longname": "Konva.Path#strokeScaleEnabled",
    "name": "strokeScaleEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeScaleEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#strokeScaleEnabled",
    "description": "get/set strokeScale enabled flag",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get stroke scale enabled flag\nvar strokeScaleEnabled = shape.strokeScaleEnabled();\n\n// disable stroke scale\nshape.strokeScaleEnabled(false);\n\n// enable stroke scale\nshape.strokeScaleEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7905,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1488
  },
  {
    "id": "Konva.Path#fillPriority",
    "longname": "Konva.Path#fillPriority",
    "name": "fillPriority",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPriority",
    "inherited": true,
    "overrides": "Konva.Shape#fillPriority",
    "description": "get/set fill priority.  can be color, pattern, linear-gradient, or radial-gradient.  The default is color.\n  This is handy if you want to toggle between different fill types.",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "priority"
      }
    ],
    "examples": [
      "// get fill priority\nvar fillPriority = shape.fillPriority();\n\n// set fill priority\nshape.fillPriority('linear-gradient');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7922,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1489
  },
  {
    "id": "Konva.Path#fillPatternOffset",
    "longname": "Konva.Path#fillPatternOffset",
    "name": "fillPatternOffset",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffset",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternOffset",
    "description": "get/set fill pattern offset",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.y"
      }
    ],
    "examples": [
      "// get fill pattern offset\nvar patternOffset = shape.fillPatternOffset();\n\n// set fill pattern offset\nshape.fillPatternOffset({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7937,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1490
  },
  {
    "id": "Konva.Path#fillPatternOffsetX",
    "longname": "Konva.Path#fillPatternOffsetX",
    "name": "fillPatternOffsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffsetX",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternOffsetX",
    "description": "get/set fill pattern offset x",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern offset x\nvar patternOffsetX = shape.fillPatternOffsetX();\n\n// set fill pattern offset x\nshape.fillPatternOffsetX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7956,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1491
  },
  {
    "id": "Konva.Path#fillPatternOffsetY",
    "longname": "Konva.Path#fillPatternOffsetY",
    "name": "fillPatternOffsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffsetY",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternOffsetY",
    "description": "get/set fill pattern offset y",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern offset y\nvar patternOffsetY = shape.fillPatternOffsetY();\n\n// set fill pattern offset y\nshape.fillPatternOffsetY(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7970,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1492
  },
  {
    "id": "Konva.Path#fillPatternScale",
    "longname": "Konva.Path#fillPatternScale",
    "name": "fillPatternScale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScale",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternScale",
    "description": "get/set fill pattern scale",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.y"
      }
    ],
    "examples": [
      "// get fill pattern scale\nvar patternScale = shape.fillPatternScale();\n\n// set fill pattern scale\nshape.fillPatternScale({\n  x: 2,\n  y: 2\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7984,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1493
  },
  {
    "id": "Konva.Path#fillPatternScaleX",
    "longname": "Konva.Path#fillPatternScaleX",
    "name": "fillPatternScaleX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScaleX",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternScaleX",
    "description": "get/set fill pattern scale x",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern scale x\nvar patternScaleX = shape.fillPatternScaleX();\n\n// set fill pattern scale x\nshape.fillPatternScaleX(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8003,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1494
  },
  {
    "id": "Konva.Path#fillPatternScaleY",
    "longname": "Konva.Path#fillPatternScaleY",
    "name": "fillPatternScaleY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScaleY",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternScaleY",
    "description": "get/set fill pattern scale y",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern scale y\nvar patternScaleY = shape.fillPatternScaleY();\n\n// set fill pattern scale y\nshape.fillPatternScaleY(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8017,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1495
  },
  {
    "id": "Konva.Path#fillLinearGradientStartPoint",
    "longname": "Konva.Path#fillLinearGradientStartPoint",
    "name": "fillLinearGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPoint",
    "inherited": true,
    "overrides": "Konva.Shape#fillLinearGradientStartPoint",
    "description": "get/set fill linear gradient start point",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get fill linear gradient start point\nvar startPoint = shape.fillLinearGradientStartPoint();\n\n// set fill linear gradient start point\nshape.fillLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8034,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1496
  },
  {
    "id": "Konva.Path#strokeLinearGradientStartPoint",
    "longname": "Konva.Path#strokeLinearGradientStartPoint",
    "name": "strokeLinearGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientStartPoint",
    "inherited": true,
    "overrides": "Konva.Shape#strokeLinearGradientStartPoint",
    "description": "get/set stroke linear gradient start point",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point\nvar startPoint = shape.strokeLinearGradientStartPoint();\n\n// set stroke linear gradient start point\nshape.strokeLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8056,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1497
  },
  {
    "id": "Konva.Path#fillLinearGradientStartPointX",
    "longname": "Konva.Path#fillLinearGradientStartPointX",
    "name": "fillLinearGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPointX",
    "inherited": true,
    "overrides": "Konva.Shape#fillLinearGradientStartPointX",
    "description": "get/set fill linear gradient start point x",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill linear gradient start point x\nvar startPointX = shape.fillLinearGradientStartPointX();\n\n// set fill linear gradient start point x\nshape.fillLinearGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8075,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1498
  },
  {
    "id": "Konva.Path#linearLinearGradientStartPointX",
    "longname": "Konva.Path#linearLinearGradientStartPointX",
    "name": "linearLinearGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#linearLinearGradientStartPointX",
    "inherited": true,
    "overrides": "Konva.Shape#linearLinearGradientStartPointX",
    "description": "get/set stroke linear gradient start point x",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point x\nvar startPointX = shape.strokeLinearGradientStartPointX();\n\n// set stroke linear gradient start point x\nshape.strokeLinearGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8089,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1499
  },
  {
    "id": "Konva.Path#fillLinearGradientStartPointY",
    "longname": "Konva.Path#fillLinearGradientStartPointY",
    "name": "fillLinearGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPointY",
    "inherited": true,
    "overrides": "Konva.Shape#fillLinearGradientStartPointY",
    "description": "get/set fill linear gradient start point y",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill linear gradient start point y\nvar startPointY = shape.fillLinearGradientStartPointY();\n\n// set fill linear gradient start point y\nshape.fillLinearGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8103,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1500
  },
  {
    "id": "Konva.Path#strokeLinearGradientStartPointY",
    "longname": "Konva.Path#strokeLinearGradientStartPointY",
    "name": "strokeLinearGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientStartPointY",
    "inherited": true,
    "overrides": "Konva.Shape#strokeLinearGradientStartPointY",
    "description": "get/set stroke linear gradient start point y",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point y\nvar startPointY = shape.strokeLinearGradientStartPointY();\n\n// set stroke linear gradient start point y\nshape.strokeLinearGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8117,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1501
  },
  {
    "id": "Konva.Path#fillLinearGradientEndPoint",
    "longname": "Konva.Path#fillLinearGradientEndPoint",
    "name": "fillLinearGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPoint",
    "inherited": true,
    "overrides": "Konva.Shape#fillLinearGradientEndPoint",
    "description": "get/set fill linear gradient end point",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get fill linear gradient end point\nvar endPoint = shape.fillLinearGradientEndPoint();\n\n// set fill linear gradient end point\nshape.fillLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8134,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1502
  },
  {
    "id": "Konva.Path#strokeLinearGradientEndPoint",
    "longname": "Konva.Path#strokeLinearGradientEndPoint",
    "name": "strokeLinearGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPoint",
    "inherited": true,
    "overrides": "Konva.Shape#strokeLinearGradientEndPoint",
    "description": "get/set stroke linear gradient end point",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point\nvar endPoint = shape.strokeLinearGradientEndPoint();\n\n// set stroke linear gradient end point\nshape.strokeLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8156,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1503
  },
  {
    "id": "Konva.Path#fillLinearGradientEndPointX",
    "longname": "Konva.Path#fillLinearGradientEndPointX",
    "name": "fillLinearGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPointX",
    "inherited": true,
    "overrides": "Konva.Shape#fillLinearGradientEndPointX",
    "description": "get/set fill linear gradient end point x",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill linear gradient end point x\nvar endPointX = shape.fillLinearGradientEndPointX();\n\n// set fill linear gradient end point x\nshape.fillLinearGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8175,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1504
  },
  {
    "id": "Konva.Path#strokeLinearGradientEndPointX",
    "longname": "Konva.Path#strokeLinearGradientEndPointX",
    "name": "strokeLinearGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPointX",
    "inherited": true,
    "overrides": "Konva.Shape#strokeLinearGradientEndPointX",
    "description": "get/set fill linear gradient end point x",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point x\nvar endPointX = shape.strokeLinearGradientEndPointX();\n\n// set stroke linear gradient end point x\nshape.strokeLinearGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8189,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1505
  },
  {
    "id": "Konva.Path#fillLinearGradientEndPointY",
    "longname": "Konva.Path#fillLinearGradientEndPointY",
    "name": "fillLinearGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPointY",
    "inherited": true,
    "overrides": "Konva.Shape#fillLinearGradientEndPointY",
    "description": "get/set fill linear gradient end point y",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill linear gradient end point y\nvar endPointY = shape.fillLinearGradientEndPointY();\n\n// set fill linear gradient end point y\nshape.fillLinearGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8203,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1506
  },
  {
    "id": "Konva.Path#strokeLinearGradientEndPointY",
    "longname": "Konva.Path#strokeLinearGradientEndPointY",
    "name": "strokeLinearGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPointY",
    "inherited": true,
    "overrides": "Konva.Shape#strokeLinearGradientEndPointY",
    "description": "get/set stroke linear gradient end point y",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point y\nvar endPointY = shape.strokeLinearGradientEndPointY();\n\n// set stroke linear gradient end point y\nshape.strokeLinearGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8217,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1507
  },
  {
    "id": "Konva.Path#fillRadialGradientStartPoint",
    "longname": "Konva.Path#fillRadialGradientStartPoint",
    "name": "fillRadialGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPoint",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientStartPoint",
    "description": "get/set fill radial gradient start point",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get fill radial gradient start point\nvar startPoint = shape.fillRadialGradientStartPoint();\n\n// set fill radial gradient start point\nshape.fillRadialGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8234,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1508
  },
  {
    "id": "Konva.Path#fillRadialGradientStartPointX",
    "longname": "Konva.Path#fillRadialGradientStartPointX",
    "name": "fillRadialGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPointX",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientStartPointX",
    "description": "get/set fill radial gradient start point x",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill radial gradient start point x\nvar startPointX = shape.fillRadialGradientStartPointX();\n\n// set fill radial gradient start point x\nshape.fillRadialGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8253,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1509
  },
  {
    "id": "Konva.Path#fillRadialGradientStartPointY",
    "longname": "Konva.Path#fillRadialGradientStartPointY",
    "name": "fillRadialGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPointY",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientStartPointY",
    "description": "get/set fill radial gradient start point y",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill radial gradient start point y\nvar startPointY = shape.fillRadialGradientStartPointY();\n\n// set fill radial gradient start point y\nshape.fillRadialGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8267,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1510
  },
  {
    "id": "Konva.Path#fillRadialGradientEndPoint",
    "longname": "Konva.Path#fillRadialGradientEndPoint",
    "name": "fillRadialGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPoint",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientEndPoint",
    "description": "get/set fill radial gradient end point",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get fill radial gradient end point\nvar endPoint = shape.fillRadialGradientEndPoint();\n\n// set fill radial gradient end point\nshape.fillRadialGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8284,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1511
  },
  {
    "id": "Konva.Path#fillRadialGradientEndPointX",
    "longname": "Konva.Path#fillRadialGradientEndPointX",
    "name": "fillRadialGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPointX",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientEndPointX",
    "description": "get/set fill radial gradient end point x",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill radial gradient end point x\nvar endPointX = shape.fillRadialGradientEndPointX();\n\n// set fill radial gradient end point x\nshape.fillRadialGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8303,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1512
  },
  {
    "id": "Konva.Path#fillRadialGradientEndPointY",
    "longname": "Konva.Path#fillRadialGradientEndPointY",
    "name": "fillRadialGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPointY",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientEndPointY",
    "description": "get/set fill radial gradient end point y",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill radial gradient end point y\nvar endPointY = shape.fillRadialGradientEndPointY();\n\n// set fill radial gradient end point y\nshape.fillRadialGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8317,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1513
  },
  {
    "id": "Konva.Path#fillPatternRotation",
    "longname": "Konva.Path#fillPatternRotation",
    "name": "fillPatternRotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternRotation",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternRotation",
    "description": "get/set fill pattern rotation in degrees",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get fill pattern rotation\nvar patternRotation = shape.fillPatternRotation();\n\n// set fill pattern rotation\nshape.fillPatternRotation(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8331,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1514
  },
  {
    "id": "Konva.Path#fillRule",
    "longname": "Konva.Path#fillRule",
    "name": "fillRule",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRule",
    "inherited": true,
    "overrides": "Konva.Shape#fillRule",
    "description": "get/set fill rule",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "CanvasFillRule"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get fill rule\nvar fillRule = shape.fillRule();\n\n// set fill rule\nshape.fillRule('evenodd');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8345,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1515
  },
  {
    "id": "Konva.Path#clearCache",
    "longname": "Konva.Path#clearCache",
    "name": "clearCache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#clearCache",
    "inherited": true,
    "overrides": "Konva.Shape#clearCache",
    "description": "clear cached canvas",
    "memberof": "Konva.Path",
    "examples": [
      "node.clearCache();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2632,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1516
  },
  {
    "id": "Konva.Path#cache",
    "longname": "Konva.Path#cache",
    "name": "cache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#cache",
    "inherited": true,
    "overrides": "Konva.Shape#cache",
    "description": "cache node to improve drawing performance, apply filters, or create more accurate\n hit regions. For all basic shapes size of cache canvas will be automatically detected.\n If you need to cache your custom `Konva.Shape` instance you have to pass shape's bounding box\n properties. Look at [https://konvajs.org/docs/performance/Shape_Caching.html](https://konvajs.org/docs/performance/Shape_Caching.html) for more information.",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "increase canvas size by `offset` pixel in all directions.",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "when set to true, a red border will be drawn around the cached\n region for debugging purposes",
        "name": "config.drawBorder"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "change quality (or pixel ratio) of cached image. pixelRatio = 2 will produce 2x sized cache.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "control imageSmoothingEnabled property of created canvas for cache",
        "name": "config.imageSmoothingEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "change quality (or pixel ratio) of cached hit canvas.",
        "name": "config.hitCanvasPixelRatio"
      }
    ],
    "examples": [
      "// cache a shape with the x,y position of the bounding box at the center and\n// the width and height of the bounding box equal to the width and height of\n// the shape obtained from shape.width() and shape.height()\nimage.cache();\n\n// cache a node and define the bounding box position and size\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200\n});\n\n// cache a node and draw a red border around the bounding box\n// for debugging purposes\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200,\n  offset : 10,\n  drawBorder: true\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2650,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1517
  },
  {
    "id": "Konva.Path#isCached",
    "longname": "Konva.Path#isCached",
    "name": "isCached",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isCached",
    "inherited": true,
    "overrides": "Konva.Shape#isCached",
    "description": "determine if node is currently cached",
    "memberof": "Konva.Path",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2788,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1518
  },
  {
    "id": "Konva.Path#getClientRect",
    "longname": "Konva.Path#getClientRect",
    "name": "getClientRect",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getClientRect",
    "inherited": true,
    "overrides": "Konva.Shape#getClientRect",
    "description": "Return client rectangle `{x, y, width, height}` of node. This rectangle also include all styling (strokes, shadows, etc).\nThe purpose of the method is similar to getBoundingClientRect API of the DOM.",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply transform to node for calculating rect?",
        "name": "config.skipTransform"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply shadow to the node for calculating bound box?",
        "name": "config.skipShadow"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply stroke to the node for calculating bound box?",
        "name": "config.skipStroke"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "calculate client rect relative to one of the parents",
        "name": "config.relativeTo"
      }
    ],
    "examples": [
      "var rect = new Konva.Rect({\n     width : 100,\n     height : 100,\n     x : 50,\n     y : 50,\n     strokeWidth : 4,\n     stroke : 'black',\n     offsetX : 50,\n     scaleY : 2\n});\n\n// get client rect without think off transformations (position, rotation, scale, offset, etc)\nrect.getClientRect({ skipTransform: true});\n// returns {\n//     x : -2,   // two pixels for stroke / 2\n//     y : -2,\n//     width : 104, // increased by 4 for stroke\n//     height : 104\n//}\n\n// get client rect with transformation applied\nrect.getClientRect();\n// returns Object {x: -2, y: 46, width: 104, height: 208}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "rect with `{x, y, width, height}` properties"
      }
    ],
    "meta": {
      "lineno": 2797,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1519
  },
  {
    "id": "Konva.Path#on",
    "longname": "Konva.Path#on",
    "name": "on",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#on",
    "inherited": true,
    "overrides": "Konva.Shape#on",
    "description": "bind events to the node. KonvaJS supports mouseover, mousemove,\n mouseout, mouseenter, mouseleave, mousedown, mouseup, wheel, contextmenu, click, dblclick, touchstart, touchmove,\n touchend, tap, dbltap, dragstart, dragmove, and dragend events.\n Pass in a string of events delimited by a space to bind multiple events at once\n such as 'mousedown mouseup mousemove'. Include a namespace to bind an\n event by name such as 'click.foobar'.",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'click', 'mousedown touchstart', 'mousedown.foo touchstart.foo'",
        "name": "evtStr"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The handler function. The first argument of that function is event object. Event object has `target` as main target of the event, `currentTarget` as current node listener and `evt` as native browser event.",
        "name": "handler"
      }
    ],
    "examples": [
      "// add click listener\nnode.on('click', function() {\n  console.log('you clicked me!');\n});\n\n// get the target node\nnode.on('click', function(evt) {\n  console.log(evt.target);\n});\n\n// stop event propagation\nnode.on('click', function(evt) {\n  evt.cancelBubble = true;\n});\n\n// bind multiple listeners\nnode.on('click touchstart', function() {\n  console.log('you clicked/touched me!');\n});\n\n// namespace listener\nnode.on('click.foo', function() {\n  console.log('you clicked/touched me!');\n});\n\n// get the event type\nnode.on('click tap', function(evt) {\n  var eventType = evt.type;\n});\n\n// get native event object\nnode.on('click tap', function(evt) {\n  var nativeEvent = evt.evt;\n});\n\n// for change events, get the old and new val\nnode.on('xChange', function(evt) {\n  var oldVal = evt.oldVal;\n  var newVal = evt.newVal;\n});\n\n// get event targets\n// with event delegations\nlayer.on('click', 'Group', function(evt) {\n  var shape = evt.target;\n  var group = evt.currentTarget;\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2919,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1520
  },
  {
    "id": "Konva.Path#off",
    "longname": "Konva.Path#off",
    "name": "off",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#off",
    "inherited": true,
    "overrides": "Konva.Shape#off",
    "description": "remove event bindings from the node. Pass in a string of\n event types delimmited by a space to remove multiple event\n bindings at once such as 'mousedown mouseup mousemove'.\n include a namespace to remove an event binding by name\n such as 'click.foobar'. If you only give a name like '.foobar',\n all events in that namespace will be removed.",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'click', 'mousedown touchstart', '.foobar'",
        "name": "evtStr"
      }
    ],
    "examples": [
      "// remove listener\nnode.off('click');\n\n// remove multiple listeners\nnode.off('click touchstart');\n\n// remove listener by name\nnode.off('click.foo');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3007,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1521
  },
  {
    "id": "Konva.Path#remove",
    "longname": "Konva.Path#remove",
    "name": "remove",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#remove",
    "inherited": true,
    "overrides": "Konva.Shape#remove",
    "description": "remove a node from parent, but don't destroy. You can reuse the node later.",
    "memberof": "Konva.Path",
    "examples": [
      "node.remove();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3088,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1522
  },
  {
    "id": "Konva.Path#destroy",
    "longname": "Konva.Path#destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#destroy",
    "inherited": true,
    "overrides": "Konva.Shape#destroy",
    "description": "remove and destroy a node. Kill it and delete forever! You should not reuse node after destroy().\nIf the node is a container (Group, Stage or Layer) it will destroy all children too.",
    "memberof": "Konva.Path",
    "examples": [
      "node.destroy();"
    ],
    "meta": {
      "lineno": 3125,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1523
  },
  {
    "id": "Konva.Path#getAttr",
    "longname": "Konva.Path#getAttr",
    "name": "getAttr",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAttr",
    "inherited": true,
    "overrides": "Konva.Shape#getAttr",
    "description": "get attr",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "attr"
      }
    ],
    "examples": [
      "var x = node.getAttr('x');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer",
            "String",
            "Object",
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3138,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1524
  },
  {
    "id": "Konva.Path#getAncestors",
    "longname": "Konva.Path#getAncestors",
    "name": "getAncestors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAncestors",
    "inherited": true,
    "overrides": "Konva.Shape#getAncestors",
    "description": "get ancestors",
    "memberof": "Konva.Path",
    "examples": [
      "shape.getAncestors().forEach(function(node) {\n  console.log(node.getId());\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3155,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1525
  },
  {
    "id": "Konva.Path#getAttrs",
    "longname": "Konva.Path#getAttrs",
    "name": "getAttrs",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAttrs",
    "inherited": true,
    "overrides": "Konva.Shape#getAttrs",
    "description": "get attrs object literal",
    "memberof": "Konva.Path",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3173,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1526
  },
  {
    "id": "Konva.Path#setAttrs",
    "longname": "Konva.Path#setAttrs",
    "name": "setAttrs",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#setAttrs",
    "inherited": true,
    "overrides": "Konva.Shape#setAttrs",
    "description": "set multiple attrs at once using an object literal",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "object containing key value pairs",
        "name": "config"
      }
    ],
    "examples": [
      "node.setAttrs({\n  x: 5,\n  fill: 'red'\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3182,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1527
  },
  {
    "id": "Konva.Path#isListening",
    "longname": "Konva.Path#isListening",
    "name": "isListening",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isListening",
    "inherited": true,
    "overrides": "Konva.Shape#isListening",
    "description": "determine if node is listening for events by taking into account ancestors.\n\nParent    | Self      | isListening\nlistening | listening |\n----------+-----------+------------\nT         | T         | T\nT         | F         | F\nF         | T         | F\nF         | F         | F",
    "memberof": "Konva.Path",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3217,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1528
  },
  {
    "id": "Konva.Path#isVisible",
    "longname": "Konva.Path#isVisible",
    "name": "isVisible",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isVisible",
    "inherited": true,
    "overrides": "Konva.Shape#isVisible",
    "description": "determine if node is visible by taking into account ancestors.\n\nParent    | Self      | isVisible\nvisible   | visible   |\n----------+-----------+------------\nT         | T         | T\nT         | F         | F\nF         | T         | F\nF         | F         | F",
    "memberof": "Konva.Path",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3248,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1529
  },
  {
    "id": "Konva.Path#show",
    "longname": "Konva.Path#show",
    "name": "show",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#show",
    "inherited": true,
    "overrides": "Konva.Shape#show",
    "description": "show node. set visible = true",
    "memberof": "Konva.Path",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3300,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1530
  },
  {
    "id": "Konva.Path#hide",
    "longname": "Konva.Path#hide",
    "name": "hide",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hide",
    "inherited": true,
    "overrides": "Konva.Shape#hide",
    "description": "hide node.  Hidden nodes are no longer detectable",
    "memberof": "Konva.Path",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3310,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1531
  },
  {
    "id": "Konva.Path#getAbsoluteZIndex",
    "longname": "Konva.Path#getAbsoluteZIndex",
    "name": "getAbsoluteZIndex",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteZIndex",
    "inherited": true,
    "overrides": "Konva.Shape#getAbsoluteZIndex",
    "description": "get absolute z-index which takes into account sibling\n and ancestor indices",
    "memberof": "Konva.Path",
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3323,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1532
  },
  {
    "id": "Konva.Path#getDepth",
    "longname": "Konva.Path#getDepth",
    "name": "getDepth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getDepth",
    "inherited": true,
    "overrides": "Konva.Shape#getDepth",
    "description": "get node depth in node tree.  Returns an integer.\n e.g. Stage depth will always be 0.  Layers will always be 1.  Groups and Shapes will always\n be >= 2",
    "memberof": "Konva.Path",
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3355,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1533
  },
  {
    "id": "Konva.Path#getRelativePointerPosition",
    "longname": "Konva.Path#getRelativePointerPosition",
    "name": "getRelativePointerPosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getRelativePointerPosition",
    "inherited": true,
    "overrides": "Konva.Shape#getRelativePointerPosition",
    "description": "get position of first pointer (like mouse or first touch) relative to local coordinates of current node",
    "memberof": "Konva.Path",
    "examples": [
      "// let's think we have a rectangle at position x = 10, y = 10\n// now we clicked at x = 15, y = 15 of the stage\n// if you want to know position of the click, related to the rectangle you can use\nrect.getRelativePointerPosition();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3398,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1534
  },
  {
    "id": "Konva.Path#getAbsolutePosition",
    "longname": "Konva.Path#getAbsolutePosition",
    "name": "getAbsolutePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsolutePosition",
    "inherited": true,
    "overrides": "Konva.Shape#getAbsolutePosition",
    "description": "get absolute position of a node. That function can be used to calculate absolute position, but relative to any ancestor",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "optional ancestor node",
        "name": "Ancestor"
      }
    ],
    "examples": [
      "// returns absolute position relative to top-left corner of canvas\nnode.getAbsolutePosition();\n\n// calculate absolute position of node, inside stage\n// so stage transforms are ignored\nnode.getAbsolutePosition(stage)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3426,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1535
  },
  {
    "id": "Konva.Path#move",
    "longname": "Konva.Path#move",
    "name": "move",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#move",
    "inherited": true,
    "overrides": "Konva.Shape#move",
    "description": "move node by an amount relative to its current position",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "change"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "change.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "change.y"
      }
    ],
    "examples": [
      "// move node in x direction by 1px and y direction by 2px\nnode.move({\n  x: 1,\n  y: 2\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3514,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1536
  },
  {
    "id": "Konva.Path#rotate",
    "longname": "Konva.Path#rotate",
    "name": "rotate",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#rotate",
    "inherited": true,
    "overrides": "Konva.Shape#rotate",
    "description": "rotate node by an amount in degrees relative to its current rotation",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "theta"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3559,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1537
  },
  {
    "id": "Konva.Path#moveToTop",
    "longname": "Konva.Path#moveToTop",
    "name": "moveToTop",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveToTop",
    "inherited": true,
    "overrides": "Konva.Shape#moveToTop",
    "description": "move node to the top of its siblings",
    "memberof": "Konva.Path",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3570,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1538
  },
  {
    "id": "Konva.Path#moveUp",
    "longname": "Konva.Path#moveUp",
    "name": "moveUp",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveUp",
    "inherited": true,
    "overrides": "Konva.Shape#moveUp",
    "description": "move node up",
    "memberof": "Konva.Path",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "flag is moved or not"
      }
    ],
    "meta": {
      "lineno": 3590,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1539
  },
  {
    "id": "Konva.Path#moveDown",
    "longname": "Konva.Path#moveDown",
    "name": "moveDown",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveDown",
    "inherited": true,
    "overrides": "Konva.Shape#moveDown",
    "description": "move node down",
    "memberof": "Konva.Path",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3610,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1540
  },
  {
    "id": "Konva.Path#moveToBottom",
    "longname": "Konva.Path#moveToBottom",
    "name": "moveToBottom",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveToBottom",
    "inherited": true,
    "overrides": "Konva.Shape#moveToBottom",
    "description": "move node to the bottom of its siblings",
    "memberof": "Konva.Path",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3630,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1541
  },
  {
    "id": "Konva.Path#getAbsoluteOpacity",
    "longname": "Konva.Path#getAbsoluteOpacity",
    "name": "getAbsoluteOpacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteOpacity",
    "inherited": true,
    "overrides": "Konva.Shape#getAbsoluteOpacity",
    "description": "get absolute opacity",
    "memberof": "Konva.Path",
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3668,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1542
  },
  {
    "id": "Konva.Path#moveTo",
    "longname": "Konva.Path#moveTo",
    "name": "moveTo",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveTo",
    "inherited": true,
    "overrides": "Konva.Shape#moveTo",
    "description": "move node to another container",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Container"
          ]
        },
        "name": "newContainer"
      }
    ],
    "examples": [
      "// move node from current layer into layer2\nnode.moveTo(layer2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3685,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1543
  },
  {
    "id": "Konva.Path#toObject",
    "longname": "Konva.Path#toObject",
    "name": "toObject",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toObject",
    "inherited": true,
    "overrides": "Konva.Shape#toObject",
    "description": "convert Node into an object for serialization.  Returns an object.",
    "memberof": "Konva.Path",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3703,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1544
  },
  {
    "id": "Konva.Path#toJSON",
    "longname": "Konva.Path#toJSON",
    "name": "toJSON",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toJSON",
    "inherited": true,
    "overrides": "Konva.Shape#toJSON",
    "description": "convert Node into a JSON string.  Returns a JSON string.",
    "memberof": "Konva.Path",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3736,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1545
  },
  {
    "id": "Konva.Path#getParent",
    "longname": "Konva.Path#getParent",
    "name": "getParent",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getParent",
    "inherited": true,
    "overrides": "Konva.Shape#getParent",
    "description": "get parent container",
    "memberof": "Konva.Path",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3745,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1546
  },
  {
    "id": "Konva.Path#findAncestors",
    "longname": "Konva.Path#findAncestors",
    "name": "findAncestors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#findAncestors",
    "inherited": true,
    "overrides": "Konva.Shape#findAncestors",
    "description": "get all ancestors (parent then parent of the parent, etc) of the node",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "selector for search",
        "name": "selector"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "show we think that node is ancestro itself?",
        "name": "includeSelf"
      },
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "optional": true,
        "description": "optional node where we need to stop searching (one of ancestors)",
        "name": "stopNode"
      }
    ],
    "examples": [
      "// get one of the parent group\nvar parentGroups = node.findAncestors('Group');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "[ancestors]"
      }
    ],
    "meta": {
      "lineno": 3754,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1547
  },
  {
    "id": "Konva.Path#findAncestor",
    "longname": "Konva.Path#findAncestor",
    "name": "findAncestor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#findAncestor",
    "inherited": true,
    "overrides": "Konva.Shape#findAncestor",
    "description": "get ancestor (parent or parent of the parent, etc) of the node that match passed selector",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "selector for search",
        "name": "selector"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "show we think that node is ancestro itself?",
        "name": "includeSelf"
      },
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "optional": true,
        "description": "optional node where we need to stop searching (one of ancestors)",
        "name": "stopNode"
      }
    ],
    "examples": [
      "// get one of the parent group\nvar group = node.findAncestors('.mygroup');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "description": "ancestor"
      }
    ],
    "meta": {
      "lineno": 3786,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1548
  },
  {
    "id": "Konva.Path#getLayer",
    "longname": "Konva.Path#getLayer",
    "name": "getLayer",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getLayer",
    "inherited": true,
    "overrides": "Konva.Shape#getLayer",
    "description": "get layer ancestor",
    "memberof": "Konva.Path",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Layer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3837,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1549
  },
  {
    "id": "Konva.Path#getStage",
    "longname": "Konva.Path#getStage",
    "name": "getStage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getStage",
    "inherited": true,
    "overrides": "Konva.Shape#getStage",
    "description": "get stage ancestor",
    "memberof": "Konva.Path",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Stage"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3847,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1550
  },
  {
    "id": "Konva.Path#fire",
    "longname": "Konva.Path#fire",
    "name": "fire",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#fire",
    "inherited": true,
    "overrides": "Konva.Shape#fire",
    "description": "fire event",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "event type.  can be a regular event, like click, mouseover, or mouseout, or it can be a custom event, like myCustomEvent",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "Event"
          ]
        },
        "optional": true,
        "description": "event object",
        "name": "evt"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "setting the value to false, or leaving it undefined, will result in the event\n not bubbling.  Setting the value to true will result in the event bubbling.",
        "name": "bubble"
      }
    ],
    "examples": [
      "// manually fire click event\nnode.fire('click');\n\n// fire custom event\nnode.fire('foo');\n\n// fire custom event with custom event object\nnode.fire('foo', {\n  bar: 10\n});\n\n// fire click event that bubbles\nnode.fire('click', null, true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3865,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1551
  },
  {
    "id": "Konva.Path#getAbsoluteTransform",
    "longname": "Konva.Path#getAbsoluteTransform",
    "name": "getAbsoluteTransform",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteTransform",
    "inherited": true,
    "overrides": "Konva.Shape#getAbsoluteTransform",
    "description": "get absolute transform of the node which takes into\n account its ancestor transforms",
    "memberof": "Konva.Path",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3901,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1552
  },
  {
    "id": "Konva.Path#getAbsoluteScale",
    "longname": "Konva.Path#getAbsoluteScale",
    "name": "getAbsoluteScale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteScale",
    "inherited": true,
    "overrides": "Konva.Shape#getAbsoluteScale",
    "description": "get absolute scale of the node which takes into\n account its ancestor scales",
    "memberof": "Konva.Path",
    "examples": [
      "// get absolute scale x\nvar scaleX = node.getAbsoluteScale().x;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3961,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1553
  },
  {
    "id": "Konva.Path#getAbsoluteRotation",
    "longname": "Konva.Path#getAbsoluteRotation",
    "name": "getAbsoluteRotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteRotation",
    "inherited": true,
    "overrides": "Konva.Shape#getAbsoluteRotation",
    "description": "get absolute rotation of the node which takes into\n account its ancestor rotations",
    "memberof": "Konva.Path",
    "examples": [
      "// get absolute rotation\nvar rotation = node.getAbsoluteRotation();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3989,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1554
  },
  {
    "id": "Konva.Path#getTransform",
    "longname": "Konva.Path#getTransform",
    "name": "getTransform",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getTransform",
    "inherited": true,
    "overrides": "Konva.Shape#getTransform",
    "description": "get transform of the node",
    "memberof": "Konva.Path",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4009,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1555
  },
  {
    "id": "Konva.Path#clone",
    "longname": "Konva.Path#clone",
    "name": "clone",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#clone",
    "inherited": true,
    "overrides": "Konva.Shape#clone",
    "description": "clone node.  Returns a new Node instance with identical attributes.  You can also override\n the node properties with an object literal, enabling you to use an existing node as a template\n for another node",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "override attrs",
        "name": "obj"
      }
    ],
    "examples": [
      "// simple clone\nvar clone = node.clone();\n\n// clone a node and override the x position\nvar clone = rect.clone({\n  x: 5\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4044,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1556
  },
  {
    "id": "Konva.Path#toCanvas",
    "longname": "Konva.Path#toCanvas",
    "name": "toCanvas",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toCanvas",
    "inherited": true,
    "overrides": "Konva.Shape#toCanvas",
    "description": "converts node into an canvas element.",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output canvas. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var canvas = node.toCanvas();"
    ],
    "meta": {
      "lineno": 4119,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1557
  },
  {
    "id": "Konva.Path#toDataURL",
    "longname": "Konva.Path#toDataURL",
    "name": "toDataURL",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toDataURL",
    "inherited": true,
    "overrides": "Konva.Shape#toDataURL",
    "description": "Creates a composite data URL (base64 string). If MIME type is not\nspecified, then \"image/png\" will result. For \"image/jpeg\", specify a quality\nlevel as quality (range 0.0 - 1.0)",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"image/png\" or \"image/jpeg\".\n \"image/png\" is the default",
        "name": "config.mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "jpeg quality.  If using an \"image/jpeg\" mimeType,\n you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n is very high quality",
        "name": "config.quality"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output image url. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4140,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1558
  },
  {
    "id": "Konva.Path#toImage",
    "longname": "Konva.Path#toImage",
    "name": "toImage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toImage",
    "inherited": true,
    "overrides": "Konva.Shape#toImage",
    "description": "converts node into an image.  Since the toImage\n method is asynchronous, the resulting image can only be retrieved from the config callback\n or the returned Promise.  toImage is most commonly used\n to cache complex drawings as an image so that they don't have to constantly be redrawn",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"image/png\" or \"image/jpeg\".\n \"image/png\" is the default",
        "name": "config.mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "jpeg quality.  If using an \"image/jpeg\" mimeType,\n you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n is very high quality",
        "name": "config.quality"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output image. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var image = node.toImage({\n  callback(img) {\n    // do stuff with img\n  }\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Image>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4172,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1559
  },
  {
    "id": "Konva.Path#toBlob",
    "longname": "Konva.Path#toBlob",
    "name": "toBlob",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toBlob",
    "inherited": true,
    "overrides": "Konva.Shape#toBlob",
    "description": "Converts node into a blob.  Since the toBlob method is asynchronous,\n the resulting blob can only be retrieved from the config callback\n or the returned Promise.",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output canvas. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var blob = await node.toBlob({});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Blob>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4219,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1560
  },
  {
    "id": "Konva.Path#getClassName",
    "longname": "Konva.Path#getClassName",
    "name": "getClassName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getClassName",
    "inherited": true,
    "overrides": "Konva.Shape#getClassName",
    "description": "get class name, which may return Stage, Layer, Group, or shape class names like Rect, Circle, Text, etc.",
    "memberof": "Konva.Path",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4267,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1561
  },
  {
    "id": "Konva.Path#getType",
    "longname": "Konva.Path#getType",
    "name": "getType",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getType",
    "inherited": true,
    "overrides": "Konva.Shape#getType",
    "description": "get the node type, which may return Stage, Layer, Group, or Shape",
    "memberof": "Konva.Path",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4276,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1562
  },
  {
    "id": "Konva.Path#addName",
    "longname": "Konva.Path#addName",
    "name": "addName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#addName",
    "inherited": true,
    "overrides": "Konva.Shape#addName",
    "description": "add name to node",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red');\nnode.addName('selected');\nnode.name(); // return 'red selected'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4324,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1563
  },
  {
    "id": "Konva.Path#hasName",
    "longname": "Konva.Path#hasName",
    "name": "hasName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hasName",
    "inherited": true,
    "overrides": "Konva.Shape#hasName",
    "description": "check is node has name",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red');\nnode.hasName('red');   // return true\nnode.hasName('selected'); // return false\nnode.hasName(''); // return false"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4343,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1564
  },
  {
    "id": "Konva.Path#removeName",
    "longname": "Konva.Path#removeName",
    "name": "removeName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#removeName",
    "inherited": true,
    "overrides": "Konva.Shape#removeName",
    "description": "remove name from node",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red selected');\nnode.removeName('selected');\nnode.hasName('selected'); // return false\nnode.name(); // return 'red'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4367,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1565
  },
  {
    "id": "Konva.Path#setAttr",
    "longname": "Konva.Path#setAttr",
    "name": "setAttr",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#setAttr",
    "inherited": true,
    "overrides": "Konva.Shape#setAttr",
    "description": "set attr",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "attr"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "name": "val"
      }
    ],
    "examples": [
      "node.setAttr('x', 5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4388,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1566
  },
  {
    "id": "Konva.Path#draw",
    "longname": "Konva.Path#draw",
    "name": "draw",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#draw",
    "inherited": true,
    "overrides": "Konva.Shape#draw",
    "description": "draw both scene and hit graphs.  If the node being drawn is the stage, all of the layers will be cleared and redrawn",
    "memberof": "Konva.Path",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4511,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1567
  },
  {
    "id": "Konva.Path#startDrag",
    "longname": "Konva.Path#startDrag",
    "name": "startDrag",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#startDrag",
    "inherited": true,
    "overrides": "Konva.Shape#startDrag",
    "description": "initiate drag and drop.",
    "memberof": "Konva.Path",
    "meta": {
      "lineno": 4544,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1568
  },
  {
    "id": "Konva.Path#stopDrag",
    "longname": "Konva.Path#stopDrag",
    "name": "stopDrag",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#stopDrag",
    "inherited": true,
    "overrides": "Konva.Shape#stopDrag",
    "description": "stop drag and drop",
    "memberof": "Konva.Path",
    "meta": {
      "lineno": 4590,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1569
  },
  {
    "id": "Konva.Path#isDragging",
    "longname": "Konva.Path#isDragging",
    "name": "isDragging",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isDragging",
    "inherited": true,
    "overrides": "Konva.Shape#isDragging",
    "description": "determine if node is currently in drag and drop mode",
    "memberof": "Konva.Path",
    "meta": {
      "lineno": 4607,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1570
  },
  {
    "id": "Konva.Path#isClientRectOnScreen",
    "longname": "Konva.Path#isClientRectOnScreen",
    "name": "isClientRectOnScreen",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isClientRectOnScreen",
    "inherited": true,
    "overrides": "Konva.Shape#isClientRectOnScreen",
    "description": "determine if node (at least partially) is currently in user-visible area",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number",
            "Object"
          ]
        },
        "description": "optional margin in pixels",
        "name": "margin"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "margin.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "margin.y"
      }
    ],
    "examples": [
      "// get index\n// default calculations\nvar isOnScreen = node.isClientRectOnScreen()\n// increase object size (or screen size) for cases when objects close to the screen still need to be marked as \"visible\"\nvar isOnScreen = node.isClientRectOnScreen({ x: stage.width(), y: stage.height() })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4671,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1571
  },
  {
    "id": "Konva.Path#zIndex",
    "longname": "Konva.Path#zIndex",
    "name": "zIndex",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#zIndex",
    "inherited": true,
    "overrides": "Konva.Shape#zIndex",
    "description": "get/set zIndex relative to the node's siblings who share the same parent.\nPlease remember that zIndex is not absolute (like in CSS). It is relative to parent element only.",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "index"
      }
    ],
    "examples": [
      "// get index\nvar index = node.zIndex();\n\n// set index\nnode.zIndex(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4764,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1572
  },
  {
    "id": "Konva.Path#absolutePosition",
    "longname": "Konva.Path#absolutePosition",
    "name": "absolutePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#absolutePosition",
    "inherited": true,
    "overrides": "Konva.Shape#absolutePosition",
    "description": "get/set node absolute position",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "// get position\nvar position = node.absolutePosition();\n\n// set position\nnode.absolutePosition({\n  x: 5,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4779,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1573
  },
  {
    "id": "Konva.Path#position",
    "longname": "Konva.Path#position",
    "name": "position",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#position",
    "inherited": true,
    "overrides": "Konva.Shape#position",
    "description": "get/set node position relative to parent",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "// get position\nvar position = node.position();\n\n// set position\nnode.position({\n  x: 5,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4799,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1574
  },
  {
    "id": "Konva.Path#x",
    "longname": "Konva.Path#x",
    "name": "x",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#x",
    "inherited": true,
    "overrides": "Konva.Shape#x",
    "description": "get/set x position",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get x\nvar x = node.x();\n\n// set x\nnode.x(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4818,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1575
  },
  {
    "id": "Konva.Path#y",
    "longname": "Konva.Path#y",
    "name": "y",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#y",
    "inherited": true,
    "overrides": "Konva.Shape#y",
    "description": "get/set y position",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get y\nvar y = node.y();\n\n// set y\nnode.y(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4832,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1576
  },
  {
    "id": "Konva.Path#globalCompositeOperation",
    "longname": "Konva.Path#globalCompositeOperation",
    "name": "globalCompositeOperation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#globalCompositeOperation",
    "inherited": true,
    "overrides": "Konva.Shape#globalCompositeOperation",
    "description": "get/set globalCompositeOperation of a node. globalCompositeOperation DOESN'T affect hit graph of nodes. So they are still trigger to events as they have default \"source-over\" globalCompositeOperation.",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "type"
      }
    ],
    "examples": [
      "// get globalCompositeOperation\nvar globalCompositeOperation = shape.globalCompositeOperation();\n\n// set globalCompositeOperation\nshape.globalCompositeOperation('source-in');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4846,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1577
  },
  {
    "id": "Konva.Path#opacity",
    "longname": "Konva.Path#opacity",
    "name": "opacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#opacity",
    "inherited": true,
    "overrides": "Konva.Shape#opacity",
    "description": "get/set opacity.  Opacity values range from 0 to 1.\n A node with an opacity of 0 is fully transparent, and a node\n with an opacity of 1 is fully opaque",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "opacity"
      }
    ],
    "examples": [
      "// get opacity\nvar opacity = node.opacity();\n\n// set opacity\nnode.opacity(0.5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4860,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1578
  },
  {
    "id": "Konva.Path#name",
    "longname": "Konva.Path#name",
    "name": "name",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#name",
    "inherited": true,
    "overrides": "Konva.Shape#name",
    "description": "get/set name.",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "// get name\nvar name = node.name();\n\n// set name\nnode.name('foo');\n\n// also node may have multiple names (as css classes)\nnode.name('foo bar');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4876,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1579
  },
  {
    "id": "Konva.Path#id",
    "longname": "Konva.Path#id",
    "name": "id",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#id",
    "inherited": true,
    "overrides": "Konva.Shape#id",
    "description": "get/set id. Id is global for whole page.",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "id"
      }
    ],
    "examples": [
      "// get id\nvar name = node.id();\n\n// set id\nnode.id('foo');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4893,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1580
  },
  {
    "id": "Konva.Path#rotation",
    "longname": "Konva.Path#rotation",
    "name": "rotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#rotation",
    "inherited": true,
    "overrides": "Konva.Shape#rotation",
    "description": "get/set rotation in degrees",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get rotation in degrees\nvar rotation = node.rotation();\n\n// set rotation in degrees\nnode.rotation(45);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4907,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1581
  },
  {
    "id": "Konva.Path#scale",
    "longname": "Konva.Path#scale",
    "name": "scale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scale",
    "inherited": true,
    "overrides": "Konva.Shape#scale",
    "description": "get/set scale",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.y"
      }
    ],
    "examples": [
      "// get scale\nvar scale = node.scale();\n\n// set scale\nshape.scale({\n  x: 2,\n  y: 3\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4921,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1582
  },
  {
    "id": "Konva.Path#scaleX",
    "longname": "Konva.Path#scaleX",
    "name": "scaleX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scaleX",
    "inherited": true,
    "overrides": "Konva.Shape#scaleX",
    "description": "get/set scale x",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get scale x\nvar scaleX = node.scaleX();\n\n// set scale x\nnode.scaleX(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4940,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1583
  },
  {
    "id": "Konva.Path#scaleY",
    "longname": "Konva.Path#scaleY",
    "name": "scaleY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scaleY",
    "inherited": true,
    "overrides": "Konva.Shape#scaleY",
    "description": "get/set scale y",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get scale y\nvar scaleY = node.scaleY();\n\n// set scale y\nnode.scaleY(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4954,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1584
  },
  {
    "id": "Konva.Path#skew",
    "longname": "Konva.Path#skew",
    "name": "skew",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skew",
    "inherited": true,
    "overrides": "Konva.Shape#skew",
    "description": "get/set skew",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "skew"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "skew.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "skew.y"
      }
    ],
    "examples": [
      "// get skew\nvar skew = node.skew();\n\n// set skew\nnode.skew({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4968,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1585
  },
  {
    "id": "Konva.Path#skewX",
    "longname": "Konva.Path#skewX",
    "name": "skewX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skewX",
    "inherited": true,
    "overrides": "Konva.Shape#skewX",
    "description": "get/set skew x",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get skew x\nvar skewX = node.skewX();\n\n// set skew x\nnode.skewX(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4987,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1586
  },
  {
    "id": "Konva.Path#skewY",
    "longname": "Konva.Path#skewY",
    "name": "skewY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skewY",
    "inherited": true,
    "overrides": "Konva.Shape#skewY",
    "description": "get/set skew y",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get skew y\nvar skewY = node.skewY();\n\n// set skew y\nnode.skewY(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5001,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1587
  },
  {
    "id": "Konva.Path#offsetX",
    "longname": "Konva.Path#offsetX",
    "name": "offsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#offsetX",
    "inherited": true,
    "overrides": "Konva.Shape#offsetX",
    "description": "get/set offset x",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get offset x\nvar offsetX = node.offsetX();\n\n// set offset x\nnode.offsetX(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5033,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1588
  },
  {
    "id": "Konva.Path#offsetY",
    "longname": "Konva.Path#offsetY",
    "name": "offsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#offsetY",
    "inherited": true,
    "overrides": "Konva.Shape#offsetY",
    "description": "get/set offset y",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get offset y\nvar offsetY = node.offsetY();\n\n// set offset y\nnode.offsetY(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5047,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1589
  },
  {
    "id": "Konva.Path#dragDistance",
    "longname": "Konva.Path#dragDistance",
    "name": "dragDistance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#dragDistance",
    "inherited": true,
    "overrides": "Konva.Shape#dragDistance",
    "description": "get/set drag distance",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "distance"
      }
    ],
    "examples": [
      "// get drag distance\nvar dragDistance = node.dragDistance();\n\n// set distance\n// node starts dragging only if pointer moved more then 3 pixels\nnode.dragDistance(3);\n// or set globally\nKonva.dragDistance = 3;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5061,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1590
  },
  {
    "id": "Konva.Path#width",
    "longname": "Konva.Path#width",
    "name": "width",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#width",
    "inherited": true,
    "overrides": "Konva.Shape#width",
    "description": "get/set width",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "width"
      }
    ],
    "examples": [
      "// get width\nvar width = node.width();\n\n// set width\nnode.width(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5078,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1591
  },
  {
    "id": "Konva.Path#height",
    "longname": "Konva.Path#height",
    "name": "height",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#height",
    "inherited": true,
    "overrides": "Konva.Shape#height",
    "description": "get/set height",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "height"
      }
    ],
    "examples": [
      "// get height\nvar height = node.height();\n\n// set height\nnode.height(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5092,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1592
  },
  {
    "id": "Konva.Path#listening",
    "longname": "Konva.Path#listening",
    "name": "listening",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#listening",
    "inherited": true,
    "overrides": "Konva.Shape#listening",
    "description": "get/set listening attr.  If you need to determine if a node is listening or not\n  by taking into account its parents, use the isListening() method\n  nodes with listening set to false will not be detected in hit graph\n  so they will be ignored in container.getIntersection() method",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "Can be true, or false.  The default is true.",
        "name": "listening"
      }
    ],
    "examples": [
      "// get listening attr\nvar listening = node.listening();\n\n// stop listening for events, remove node and all its children from hit graph\nnode.listening(false);\n\n// listen to events according to the parent\nnode.listening(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5106,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1593
  },
  {
    "id": "Konva.Path#preventDefault",
    "longname": "Konva.Path#preventDefault",
    "name": "preventDefault",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#preventDefault",
    "inherited": true,
    "overrides": "Konva.Shape#preventDefault",
    "description": "get/set preventDefault\nBy default all shapes will prevent default behavior\nof a browser on a pointer move or tap.\nthat will prevent native scrolling when you are trying to drag&drop a node\nbut sometimes you may need to enable default actions\nin that case you can set the property to false",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "preventDefault"
      }
    ],
    "examples": [
      "// get preventDefault\nvar shouldPrevent = shape.preventDefault();\n\n// set preventDefault\nshape.preventDefault(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5125,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1594
  },
  {
    "id": "Konva.Path#filters",
    "longname": "Konva.Path#filters",
    "name": "filters",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#filters",
    "inherited": true,
    "overrides": "Konva.Shape#filters",
    "description": "get/set filters.  Filters are applied to cached canvases",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "array of filters",
        "name": "filters"
      }
    ],
    "examples": [
      "// get filters\nvar filters = node.filters();\n\n// set a single filter\nnode.cache();\nnode.filters([Konva.Filters.Blur]);\n\n// set multiple filters\nnode.cache();\nnode.filters([\n  Konva.Filters.Blur,\n  Konva.Filters.Sepia,\n  Konva.Filters.Invert\n]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5148,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1595
  },
  {
    "id": "Konva.Path#visible",
    "longname": "Konva.Path#visible",
    "name": "visible",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#visible",
    "inherited": true,
    "overrides": "Konva.Shape#visible",
    "description": "get/set visible attr.  Can be true, or false.  The default is true.\n  If you need to determine if a node is visible or not\n  by taking into account its parents, use the isVisible() method",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "visible"
      }
    ],
    "examples": [
      "// get visible attr\nvar visible = node.visible();\n\n// make invisible\nnode.visible(false);\n\n// make visible (according to the parent)\nnode.visible(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5171,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1596
  },
  {
    "id": "Konva.Path#transformsEnabled",
    "longname": "Konva.Path#transformsEnabled",
    "name": "transformsEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#transformsEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#transformsEnabled",
    "description": "get/set transforms that are enabled.  Can be \"all\", \"none\", or \"position\".  The default\n is \"all\"",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// enable position transform only to improve draw performance\nnode.transformsEnabled('position');\n\n// enable all transforms\nnode.transformsEnabled('all');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5191,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1597
  },
  {
    "id": "Konva.Path#size",
    "longname": "Konva.Path#size",
    "name": "size",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#size",
    "inherited": true,
    "overrides": "Konva.Shape#size",
    "description": "get/set node size",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "size"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size.height"
      }
    ],
    "examples": [
      "// get node size\nvar size = node.size();\nvar width = size.width;\nvar height = size.height;\n\n// set size\nnode.size({\n  width: 100,\n  height: 200\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5205,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1598
  },
  {
    "id": "Konva.Path#dragBoundFunc",
    "longname": "Konva.Path#dragBoundFunc",
    "name": "dragBoundFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#dragBoundFunc",
    "inherited": true,
    "overrides": "Konva.Shape#dragBoundFunc",
    "description": "get/set drag bound function.  This is used to override the default\n drag and drop position.",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "name": "dragBoundFunc"
      }
    ],
    "examples": [
      "// get drag bound function\nvar dragBoundFunc = node.dragBoundFunc();\n\n// create vertical drag and drop\nnode.dragBoundFunc(function(pos){\n  // important pos - is absolute position of the node\n  // you should return absolute position too\n  return {\n    x: this.absolutePosition().x,\n    y: pos.y\n  };\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5226,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1599
  },
  {
    "id": "Konva.Path#draggable",
    "longname": "Konva.Path#draggable",
    "name": "draggable",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#draggable",
    "inherited": true,
    "overrides": "Konva.Shape#draggable",
    "description": "get/set draggable flag",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "draggable"
      }
    ],
    "examples": [
      "// get draggable flag\nvar draggable = node.draggable();\n\n// enable drag and drop\nnode.draggable(true);\n\n// disable drag and drop\nnode.draggable(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5248,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1600
  },
  {
    "id": "Konva.Path#to",
    "longname": "Konva.Path#to",
    "name": "to",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#to",
    "inherited": true,
    "overrides": "Konva.Shape#to",
    "description": "Tween node properties. Shorter usage of {@link Konva.Tween} object.",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "tween params",
        "name": "params"
      }
    ],
    "examples": [
      "circle.to({\n  x : 50,\n  duration : 0.5,\n  onUpdate: () => console.log('props updated'),\n  onFinish: () => console.log('finished'),\n});"
    ],
    "meta": {
      "lineno": 9588,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1601
  },
  {
    "id": "Konva.Path#blurRadius",
    "longname": "Konva.Path#blurRadius",
    "name": "blurRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#blurRadius",
    "inherited": true,
    "overrides": "Konva.Shape#blurRadius",
    "description": "get/set blur radius. Use with {@link Konva.Filters.Blur} filter",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "radius"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17517,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1602
  },
  {
    "id": "Konva.Path#brightness",
    "longname": "Konva.Path#brightness",
    "name": "brightness",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#brightness",
    "inherited": true,
    "overrides": "Konva.Shape#brightness",
    "description": "get/set filter brightness.  The brightness is a number between -1 and 1.&nbsp; Positive values\n brighten the pixels and negative values darken them. Use with {@link Konva.Filters.Brighten} filter.",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between -1 and 1",
        "name": "brightness"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17547,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1603
  },
  {
    "id": "Konva.Path#contrast",
    "longname": "Konva.Path#contrast",
    "name": "contrast",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#contrast",
    "inherited": true,
    "overrides": "Konva.Shape#contrast",
    "description": "get/set filter contrast.  The contrast is a number between -100 and 100.\nUse with {@link Konva.Filters.Contrast} filter.",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between -100 and 100",
        "name": "contrast"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17600,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1604
  },
  {
    "id": "Konva.Path#embossStrength",
    "longname": "Konva.Path#embossStrength",
    "name": "embossStrength",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossStrength",
    "inherited": true,
    "overrides": "Konva.Shape#embossStrength",
    "description": "get/set emboss strength. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1.  Default is 0.5",
        "name": "level"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17725,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1605
  },
  {
    "id": "Konva.Path#embossWhiteLevel",
    "longname": "Konva.Path#embossWhiteLevel",
    "name": "embossWhiteLevel",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossWhiteLevel",
    "inherited": true,
    "overrides": "Konva.Shape#embossWhiteLevel",
    "description": "get/set emboss white level. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1.  Default is 0.5",
        "name": "embossWhiteLevel"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17733,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1606
  },
  {
    "id": "Konva.Path#embossDirection",
    "longname": "Konva.Path#embossDirection",
    "name": "embossDirection",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossDirection",
    "inherited": true,
    "overrides": "Konva.Shape#embossDirection",
    "description": "get/set emboss direction. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "can be top-left, top, top-right, right, bottom-right, bottom, bottom-left or left\n  The default is top-left",
        "name": "embossDirection"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17741,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1607
  },
  {
    "id": "Konva.Path#embossBlend",
    "longname": "Konva.Path#embossBlend",
    "name": "embossBlend",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossBlend",
    "inherited": true,
    "overrides": "Konva.Shape#embossBlend",
    "description": "get/set emboss blend. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "embossBlend"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17750,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1608
  },
  {
    "id": "Konva.Path#enhance",
    "longname": "Konva.Path#enhance",
    "name": "enhance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#enhance",
    "inherited": true,
    "overrides": "Konva.Shape#enhance",
    "description": "get/set enhance. Use with {@link Konva.Filters.Enhance} filter. -1 to 1 values",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Float"
          ]
        },
        "name": "amount"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Float"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17864,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1609
  },
  {
    "id": "Konva.Path#hue",
    "longname": "Konva.Path#hue",
    "name": "hue",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hue",
    "inherited": true,
    "overrides": "Konva.Shape#hue",
    "description": "get/set hsv hue in degrees. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between 0 and 359",
        "name": "hue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17896,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1610
  },
  {
    "id": "Konva.Path#saturation",
    "longname": "Konva.Path#saturation",
    "name": "saturation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#saturation",
    "inherited": true,
    "overrides": "Konva.Shape#saturation",
    "description": "get/set hsv saturation. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the saturation, 1.0 doubles, etc..",
        "name": "saturation"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17904,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1611
  },
  {
    "id": "Konva.Path#luminance",
    "longname": "Konva.Path#luminance",
    "name": "luminance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#luminance",
    "inherited": true,
    "overrides": "Konva.Shape#luminance",
    "description": "get/set hsl luminance. Use with {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "from -1 to 1",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17912,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1612
  },
  {
    "id": "Konva.Path#value",
    "longname": "Konva.Path#value",
    "name": "value",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#value",
    "inherited": true,
    "overrides": "Konva.Shape#value",
    "description": "get/set hsv value. Use with {@link Konva.Filters.HSV} filter.",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the value, 1.0 doubles, etc..",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18018,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1613
  },
  {
    "id": "Konva.Path#kaleidoscopePower",
    "longname": "Konva.Path#kaleidoscopePower",
    "name": "kaleidoscopePower",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#kaleidoscopePower",
    "inherited": true,
    "overrides": "Konva.Shape#kaleidoscopePower",
    "description": "get/set kaleidoscope power. Use with {@link Konva.Filters.Kaleidoscope} filter.",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "of kaleidoscope",
        "name": "power"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18243,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1614
  },
  {
    "id": "Konva.Path#kaleidoscopeAngle",
    "longname": "Konva.Path#kaleidoscopeAngle",
    "name": "kaleidoscopeAngle",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#kaleidoscopeAngle",
    "inherited": true,
    "overrides": "Konva.Shape#kaleidoscopeAngle",
    "description": "get/set kaleidoscope angle. Use with {@link Konva.Filters.Kaleidoscope} filter.",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "degrees"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18251,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1615
  },
  {
    "id": "Konva.Path#noise",
    "longname": "Konva.Path#noise",
    "name": "noise",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#noise",
    "inherited": true,
    "overrides": "Konva.Shape#noise",
    "description": "get/set noise amount.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Noise} filter.",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "noise"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18437,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1616
  },
  {
    "id": "Konva.Path#pixelSize",
    "longname": "Konva.Path#pixelSize",
    "name": "pixelSize",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#pixelSize",
    "inherited": true,
    "overrides": "Konva.Shape#pixelSize",
    "description": "get/set pixel size. Use with {@link Konva.Filters.Pixelate} filter.",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "pixelSize"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18522,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1617
  },
  {
    "id": "Konva.Path#levels",
    "longname": "Konva.Path#levels",
    "name": "levels",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#levels",
    "inherited": true,
    "overrides": "Konva.Shape#levels",
    "description": "get/set levels.  Must be a number between 0 and 1.  Use with {@link Konva.Filters.Posterize} filter.",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1",
        "name": "level"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18552,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1618
  },
  {
    "id": "Konva.Path#red",
    "longname": "Konva.Path#red",
    "name": "red",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#red",
    "inherited": true,
    "overrides": "Konva.Shape#red",
    "description": "get/set filter red value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "red"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18596,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1619
  },
  {
    "id": "Konva.Path#green",
    "longname": "Konva.Path#green",
    "name": "green",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#green",
    "inherited": true,
    "overrides": "Konva.Shape#green",
    "description": "get/set filter green value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "green"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18616,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1620
  },
  {
    "id": "Konva.Path#blue",
    "longname": "Konva.Path#blue",
    "name": "blue",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#blue",
    "inherited": true,
    "overrides": "Konva.Shape#blue",
    "description": "get/set filter blue value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "blue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18625,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1621
  },
  {
    "id": "Konva.Path#alpha",
    "longname": "Konva.Path#alpha",
    "name": "alpha",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#alpha",
    "inherited": true,
    "overrides": "Konva.Shape#alpha",
    "description": "get/set filter alpha value. Use with {@link Konva.Filters.RGBA} filter.",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Float"
          ]
        },
        "description": "value between 0 and 1",
        "name": "alpha"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Float"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18718,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1622
  },
  {
    "id": "Konva.Path#threshold",
    "longname": "Konva.Path#threshold",
    "name": "threshold",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#threshold",
    "inherited": true,
    "overrides": "Konva.Shape#threshold",
    "description": "get/set threshold.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Threshold} or {@link Konva.Filters.Mask} filter.",
    "memberof": "Konva.Path",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "threshold"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18809,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1623
  },
  {
    "id": "Konva.Arrow#closed",
    "longname": "Konva.Arrow#closed",
    "name": "closed",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Line#closed",
    "inherited": true,
    "description": "get/set closed flag.  The default is false",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "closed"
      }
    ],
    "examples": [
      "// get closed flag\nvar closed = line.closed();\n\n// close the shape\nline.closed(true);\n\n// open the shape\nline.closed(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 10325,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1624
  },
  {
    "id": "Konva.Arrow#bezier",
    "longname": "Konva.Arrow#bezier",
    "name": "bezier",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Line#bezier",
    "inherited": true,
    "description": "get/set bezier flag.  The default is false",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "bezier"
      }
    ],
    "examples": [
      "// get whether the line is a bezier\nvar isBezier = line.bezier();\n\n// set whether the line is a bezier\nline.bezier(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 10342,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1625
  },
  {
    "id": "Konva.Arrow#tension",
    "longname": "Konva.Arrow#tension",
    "name": "tension",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Line#tension",
    "inherited": true,
    "description": "get/set tension",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "Higher values will result in a more curvy line.  A value of 0 will result in no interpolation. The default is 0",
        "name": "tension"
      }
    ],
    "examples": [
      "// get tension\nvar tension = line.tension();\n\n// set tension\nline.tension(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 10356,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1626
  },
  {
    "id": "Konva.Arrow#points",
    "longname": "Konva.Arrow#points",
    "name": "points",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Line#points",
    "inherited": true,
    "description": "get/set points array. Points is a flat array [x1, y1, x2, y2]. It is flat for performance reasons.",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "points"
      }
    ],
    "examples": [
      "// get points\nvar points = line.points();\n\n// set points\nline.points([10, 20, 30, 40, 50, 60]);\n\n// push a new point\nline.points(line.points().concat([70, 80]));"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 10370,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1627
  },
  {
    "id": "Konva.Arrow#hasShadow",
    "longname": "Konva.Arrow#hasShadow",
    "name": "hasShadow",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasShadow",
    "inherited": true,
    "description": "returns whether or not a shadow will be rendered",
    "memberof": "Konva.Arrow",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 6909,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1628
  },
  {
    "id": "Konva.Arrow#hasFill",
    "longname": "Konva.Arrow#hasFill",
    "name": "hasFill",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasFill",
    "inherited": true,
    "description": "returns whether or not the shape will be filled",
    "memberof": "Konva.Arrow",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7009,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1629
  },
  {
    "id": "Konva.Arrow#hasStroke",
    "longname": "Konva.Arrow#hasStroke",
    "name": "hasStroke",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasStroke",
    "inherited": true,
    "description": "returns whether or not the shape will be stroked",
    "memberof": "Konva.Arrow",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7030,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1630
  },
  {
    "id": "Konva.Arrow#intersects",
    "longname": "Konva.Arrow#intersects",
    "name": "intersects",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#intersects",
    "inherited": true,
    "description": "determines if point is in the shape, regardless if other shapes are on top of it.  Note: because\n this method clears a temporary canvas and then redraws the shape, it performs very poorly if executed many times\n consecutively.  Please use the {@link Konva.Stage#getIntersection} method if at all possible\n because it performs much better",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "point"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "point.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "point.y"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7066,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1631
  },
  {
    "id": "Konva.Arrow#getSelfRect",
    "longname": "Konva.Arrow#getSelfRect",
    "name": "getSelfRect",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#getSelfRect",
    "inherited": true,
    "overrides": "Konva.Line#getSelfRect",
    "description": "return self rectangle (x, y, width, height) of shape.\nThis method are not taken into account transformation and styles.",
    "memberof": "Konva.Arrow",
    "examples": [
      "rect.getSelfRect();  // return {x:0, y:0, width:rect.width(), height:rect.height()}\ncircle.getSelfRect();  // return {x: - circle.width() / 2, y: - circle.height() / 2, width:circle.width(), height:circle.height()}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "rect with `{x, y, width, height}` properties"
      }
    ],
    "meta": {
      "lineno": 7138,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1632
  },
  {
    "id": "Konva.Arrow#drawHitFromCache",
    "longname": "Konva.Arrow#drawHitFromCache",
    "name": "drawHitFromCache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#drawHitFromCache",
    "inherited": true,
    "description": "draw hit graph using the cached scene canvas",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "alpha channel threshold that determines whether or not\n a pixel should be drawn onto the hit graph.  Must be a value between 0 and 255.\n The default is 0",
        "name": "alphaThreshold"
      }
    ],
    "examples": [
      "shape.cache();\nshape.drawHitFromCache();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7294,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1633
  },
  {
    "id": "Konva.Arrow#stroke",
    "longname": "Konva.Arrow#stroke",
    "name": "stroke",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#stroke",
    "inherited": true,
    "description": "get/set stroke color",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get stroke color\nvar stroke = shape.stroke();\n\n// set stroke color with color string\nshape.stroke('green');\n\n// set stroke color with hex\nshape.stroke('#00ff00');\n\n// set stroke color with rgb\nshape.stroke('rgb(0,255,0)');\n\n// set stroke color with rgba and make it 50% opaque\nshape.stroke('rgba(0,255,0,0.5');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7360,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1634
  },
  {
    "id": "Konva.Arrow#strokeWidth",
    "longname": "Konva.Arrow#strokeWidth",
    "name": "strokeWidth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeWidth",
    "inherited": true,
    "description": "get/set stroke width",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "strokeWidth"
      }
    ],
    "examples": [
      "// get stroke width\nvar strokeWidth = shape.strokeWidth();\n\n// set stroke width\nshape.strokeWidth(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7383,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1635
  },
  {
    "id": "Konva.Arrow#fillAfterStrokeEnabled",
    "longname": "Konva.Arrow#fillAfterStrokeEnabled",
    "name": "fillAfterStrokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillAfterStrokeEnabled",
    "inherited": true,
    "description": "get/set fillAfterStrokeEnabled property. By default Konva is drawing filling first, then stroke on top of the fill.\nIn rare situations you may want a different behavior. When you have a stroke first then fill on top of it.\nEspecially useful for Text objects.\nDefault is false.",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "fillAfterStrokeEnabled"
      }
    ],
    "examples": [
      "// get stroke width\nvar fillAfterStrokeEnabled = shape.fillAfterStrokeEnabled();\n\n// set stroke width\nshape.fillAfterStrokeEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7397,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1636
  },
  {
    "id": "Konva.Arrow#hitStrokeWidth",
    "longname": "Konva.Arrow#hitStrokeWidth",
    "name": "hitStrokeWidth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hitStrokeWidth",
    "inherited": true,
    "description": "get/set stroke width for hit detection. Default value is \"auto\", it means it will be equals to strokeWidth",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "hitStrokeWidth"
      }
    ],
    "examples": [
      "// get stroke width\nvar hitStrokeWidth = shape.hitStrokeWidth();\n\n// set hit stroke width\nshape.hitStrokeWidth(20);\n// set hit stroke width always equals to scene stroke width\nshape.hitStrokeWidth('auto');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7414,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1637
  },
  {
    "id": "Konva.Arrow#strokeHitEnabled",
    "longname": "Konva.Arrow#strokeHitEnabled",
    "name": "strokeHitEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeHitEnabled",
    "inherited": true,
    "description": "**deprecated, use hitStrokeWidth instead!** get/set strokeHitEnabled property. Useful for performance optimization.\nYou may set `shape.strokeHitEnabled(false)`. In this case stroke will be no draw on hit canvas, so hit area\nof shape will be decreased (by lineWidth / 2). Remember that non closed line with `strokeHitEnabled = false`\nwill be not drawn on hit canvas, that is mean line will no trigger pointer events (like mouseover)\nDefault value is true.",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "strokeHitEnabled"
      }
    ],
    "examples": [
      "// get strokeHitEnabled\nvar strokeHitEnabled = shape.strokeHitEnabled();\n\n// set strokeHitEnabled\nshape.strokeHitEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7430,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1638
  },
  {
    "id": "Konva.Arrow#perfectDrawEnabled",
    "longname": "Konva.Arrow#perfectDrawEnabled",
    "name": "perfectDrawEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#perfectDrawEnabled",
    "inherited": true,
    "description": "get/set perfectDrawEnabled. If a shape has fill, stroke and opacity you may set `perfectDrawEnabled` to false to improve performance.\nSee http://konvajs.org/docs/performance/Disable_Perfect_Draw.html for more information.\nDefault value is true",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "perfectDrawEnabled"
      }
    ],
    "examples": [
      "// get perfectDrawEnabled\nvar perfectDrawEnabled = shape.perfectDrawEnabled();\n\n// set perfectDrawEnabled\nshape.perfectDrawEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7448,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1639
  },
  {
    "id": "Konva.Arrow#shadowForStrokeEnabled",
    "longname": "Konva.Arrow#shadowForStrokeEnabled",
    "name": "shadowForStrokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowForStrokeEnabled",
    "inherited": true,
    "description": "get/set shadowForStrokeEnabled. Useful for performance optimization.\nYou may set `shape.shadowForStrokeEnabled(false)`. In this case stroke will no effect shadow.\nRemember if you set `shadowForStrokeEnabled = false` for non closed line - that line will have no shadow!.\nDefault value is true",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "shadowForStrokeEnabled"
      }
    ],
    "examples": [
      "// get shadowForStrokeEnabled\nvar shadowForStrokeEnabled = shape.shadowForStrokeEnabled();\n\n// set shadowForStrokeEnabled\nshape.shadowForStrokeEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7464,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1640
  },
  {
    "id": "Konva.Arrow#lineJoin",
    "longname": "Konva.Arrow#lineJoin",
    "name": "lineJoin",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#lineJoin",
    "inherited": true,
    "description": "get/set line join.  Can be miter, round, or bevel.  The\n default is miter",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "lineJoin"
      }
    ],
    "examples": [
      "// get line join\nvar lineJoin = shape.lineJoin();\n\n// set line join\nshape.lineJoin('round');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7481,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1641
  },
  {
    "id": "Konva.Arrow#lineCap",
    "longname": "Konva.Arrow#lineCap",
    "name": "lineCap",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#lineCap",
    "inherited": true,
    "description": "get/set line cap.  Can be butt, round, or square",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "lineCap"
      }
    ],
    "examples": [
      "// get line cap\nvar lineCap = shape.lineCap();\n\n// set line cap\nshape.lineCap('round');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7496,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1642
  },
  {
    "id": "Konva.Arrow#sceneFunc",
    "longname": "Konva.Arrow#sceneFunc",
    "name": "sceneFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#sceneFunc",
    "inherited": true,
    "description": "get/set scene draw function. That function is used to draw the shape on a canvas.\nAlso that function will be used to draw hit area of the shape, in case if hitFunc is not defined.",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "drawing function",
        "name": "drawFunc"
      }
    ],
    "examples": [
      "// get scene draw function\nvar sceneFunc = shape.sceneFunc();\n\n// set scene draw function\nshape.sceneFunc(function(context, shape) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  // like stroke and fill\n  context.fillStrokeShape(shape);\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7510,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1643
  },
  {
    "id": "Konva.Arrow#hitFunc",
    "longname": "Konva.Arrow#hitFunc",
    "name": "hitFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hitFunc",
    "inherited": true,
    "description": "get/set hit draw function. That function is used to draw custom hit area of a shape.",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "drawing function",
        "name": "drawFunc"
      }
    ],
    "examples": [
      "// get hit draw function\nvar hitFunc = shape.hitFunc();\n\n// set hit draw function\nshape.hitFunc(function(context) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  context.fillStrokeShape(shape);\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7532,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1644
  },
  {
    "id": "Konva.Arrow#dash",
    "longname": "Konva.Arrow#dash",
    "name": "dash",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#dash",
    "inherited": true,
    "description": "get/set dash array for stroke.",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "dash"
      }
    ],
    "examples": [
      "// apply dashed stroke that is 10px long and 5 pixels apart\n line.dash([10, 5]);\n // apply dashed stroke that is made up of alternating dashed\n // lines that are 10px long and 20px apart, and dots that have\n // a radius of 5px and are 20px apart\n line.dash([10, 20, 0.001, 20]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7552,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1645
  },
  {
    "id": "Konva.Arrow#shadowColor",
    "longname": "Konva.Arrow#shadowColor",
    "name": "shadowColor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowColor",
    "inherited": true,
    "description": "get/set shadow color",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get shadow color\nvar shadow = shape.shadowColor();\n\n// set shadow color with color string\nshape.shadowColor('green');\n\n// set shadow color with hex\nshape.shadowColor('#00ff00');\n\n// set shadow color with rgb\nshape.shadowColor('rgb(0,255,0)');\n\n// set shadow color with rgba and make it 50% opaque\nshape.shadowColor('rgba(0,255,0,0.5');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7579,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1646
  },
  {
    "id": "Konva.Arrow#shadowBlur",
    "longname": "Konva.Arrow#shadowBlur",
    "name": "shadowBlur",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowBlur",
    "inherited": true,
    "description": "get/set shadow blur",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "blur"
      }
    ],
    "examples": [
      "// get shadow blur\nvar shadowBlur = shape.shadowBlur();\n\n// set shadow blur\nshape.shadowBlur(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7602,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1647
  },
  {
    "id": "Konva.Arrow#shadowOpacity",
    "longname": "Konva.Arrow#shadowOpacity",
    "name": "shadowOpacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOpacity",
    "inherited": true,
    "description": "get/set shadow opacity.  must be a value between 0 and 1",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "opacity"
      }
    ],
    "examples": [
      "// get shadow opacity\nvar shadowOpacity = shape.shadowOpacity();\n\n// set shadow opacity\nshape.shadowOpacity(0.5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7616,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1648
  },
  {
    "id": "Konva.Arrow#shadowOffset",
    "longname": "Konva.Arrow#shadowOffset",
    "name": "shadowOffset",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffset",
    "inherited": true,
    "description": "get/set shadow offset",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.y"
      }
    ],
    "examples": [
      "// get shadow offset\nvar shadowOffset = shape.shadowOffset();\n\n// set shadow offset\nshape.shadowOffset({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7630,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1649
  },
  {
    "id": "Konva.Arrow#shadowOffsetX",
    "longname": "Konva.Arrow#shadowOffsetX",
    "name": "shadowOffsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffsetX",
    "inherited": true,
    "description": "get/set shadow offset x",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get shadow offset x\nvar shadowOffsetX = shape.shadowOffsetX();\n\n// set shadow offset x\nshape.shadowOffsetX(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7649,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1650
  },
  {
    "id": "Konva.Arrow#shadowOffsetY",
    "longname": "Konva.Arrow#shadowOffsetY",
    "name": "shadowOffsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffsetY",
    "inherited": true,
    "description": "get/set shadow offset y",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get shadow offset y\nvar shadowOffsetY = shape.shadowOffsetY();\n\n// set shadow offset y\nshape.shadowOffsetY(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7663,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1651
  },
  {
    "id": "Konva.Arrow#fillPatternImage",
    "longname": "Konva.Arrow#fillPatternImage",
    "name": "fillPatternImage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternImage",
    "inherited": true,
    "description": "get/set fill pattern image",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Image"
          ]
        },
        "description": "object",
        "name": "image"
      }
    ],
    "examples": [
      "// get fill pattern image\nvar fillPatternImage = shape.fillPatternImage();\n\n// set fill pattern image\nvar imageObj = new Image();\nimageObj.onload = function() {\n  shape.fillPatternImage(imageObj);\n};\nimageObj.src = 'path/to/image/jpg';"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Image"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7677,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1652
  },
  {
    "id": "Konva.Arrow#fill",
    "longname": "Konva.Arrow#fill",
    "name": "fill",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fill",
    "inherited": true,
    "description": "get/set fill color",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get fill color\nvar fill = shape.fill();\n\n// set fill color with color string\nshape.fill('green');\n\n// set fill color with hex\nshape.fill('#00ff00');\n\n// set fill color with rgb\nshape.fill('rgb(0,255,0)');\n\n// set fill color with rgba and make it 50% opaque\nshape.fill('rgba(0,255,0,0.5');\n\n// shape without fill\nshape.fill(null);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7695,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1653
  },
  {
    "id": "Konva.Arrow#fillPatternX",
    "longname": "Konva.Arrow#fillPatternX",
    "name": "fillPatternX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternX",
    "inherited": true,
    "description": "get/set fill pattern x",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern x\nvar fillPatternX = shape.fillPatternX();\n// set fill pattern x\nshape.fillPatternX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7721,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1654
  },
  {
    "id": "Konva.Arrow#fillPatternY",
    "longname": "Konva.Arrow#fillPatternY",
    "name": "fillPatternY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternY",
    "inherited": true,
    "description": "get/set fill pattern y",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern y\nvar fillPatternY = shape.fillPatternY();\n// set fill pattern y\nshape.fillPatternY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7734,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1655
  },
  {
    "id": "Konva.Arrow#fillLinearGradientColorStops",
    "longname": "Konva.Arrow#fillLinearGradientColorStops",
    "name": "fillLinearGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientColorStops",
    "inherited": true,
    "description": "get/set fill linear gradient color stops",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get fill linear gradient color stops\nvar colorStops = shape.fillLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillLinearGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "colorStops"
      }
    ],
    "meta": {
      "lineno": 7747,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1656
  },
  {
    "id": "Konva.Arrow#strokeLinearGradientColorStops",
    "longname": "Konva.Arrow#strokeLinearGradientColorStops",
    "name": "strokeLinearGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientColorStops",
    "inherited": true,
    "description": "get/set stroke linear gradient color stops",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get stroke linear gradient color stops\nvar colorStops = shape.strokeLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.strokeLinearGradientColorStops([0, 'red', 0.5, 'blue', 1, 'green']);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "colorStops"
      }
    ],
    "meta": {
      "lineno": 7762,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1657
  },
  {
    "id": "Konva.Arrow#fillRadialGradientStartRadius",
    "longname": "Konva.Arrow#fillRadialGradientStartRadius",
    "name": "fillRadialGradientStartRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartRadius",
    "inherited": true,
    "description": "get/set fill radial gradient start radius",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "radius"
      }
    ],
    "examples": [
      "// get radial gradient start radius\nvar startRadius = shape.fillRadialGradientStartRadius();\n\n// set radial gradient start radius\nshape.fillRadialGradientStartRadius(0);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7777,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1658
  },
  {
    "id": "Konva.Arrow#fillRadialGradientEndRadius",
    "longname": "Konva.Arrow#fillRadialGradientEndRadius",
    "name": "fillRadialGradientEndRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndRadius",
    "inherited": true,
    "description": "get/set fill radial gradient end radius",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "radius"
      }
    ],
    "examples": [
      "// get radial gradient end radius\nvar endRadius = shape.fillRadialGradientEndRadius();\n\n// set radial gradient end radius\nshape.fillRadialGradientEndRadius(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7791,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1659
  },
  {
    "id": "Konva.Arrow#fillRadialGradientColorStops",
    "longname": "Konva.Arrow#fillRadialGradientColorStops",
    "name": "fillRadialGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientColorStops",
    "inherited": true,
    "description": "get/set fill radial gradient color stops",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get fill radial gradient color stops\nvar colorStops = shape.fillRadialGradientColorStops();\n\n// create a radial gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillRadialGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7805,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1660
  },
  {
    "id": "Konva.Arrow#fillPatternRepeat",
    "longname": "Konva.Arrow#fillPatternRepeat",
    "name": "fillPatternRepeat",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternRepeat",
    "inherited": true,
    "description": "get/set fill pattern repeat.  Can be 'repeat', 'repeat-x', 'repeat-y', or 'no-repeat'.  The default is 'repeat'",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "repeat"
      }
    ],
    "examples": [
      "// get fill pattern repeat\nvar repeat = shape.fillPatternRepeat();\n\n// repeat pattern in x direction only\nshape.fillPatternRepeat('repeat-x');\n\n// do not repeat the pattern\nshape.fillPatternRepeat('no-repeat');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7820,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1661
  },
  {
    "id": "Konva.Arrow#fillEnabled",
    "longname": "Konva.Arrow#fillEnabled",
    "name": "fillEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillEnabled",
    "inherited": true,
    "description": "get/set fill enabled flag",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get fill enabled flag\nvar fillEnabled = shape.fillEnabled();\n\n// disable fill\nshape.fillEnabled(false);\n\n// enable fill\nshape.fillEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7837,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1662
  },
  {
    "id": "Konva.Arrow#strokeEnabled",
    "longname": "Konva.Arrow#strokeEnabled",
    "name": "strokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeEnabled",
    "inherited": true,
    "description": "get/set stroke enabled flag",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get stroke enabled flag\nvar strokeEnabled = shape.strokeEnabled();\n\n// disable stroke\nshape.strokeEnabled(false);\n\n// enable stroke\nshape.strokeEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7854,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1663
  },
  {
    "id": "Konva.Arrow#shadowEnabled",
    "longname": "Konva.Arrow#shadowEnabled",
    "name": "shadowEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowEnabled",
    "inherited": true,
    "description": "get/set shadow enabled flag",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get shadow enabled flag\nvar shadowEnabled = shape.shadowEnabled();\n\n// disable shadow\nshape.shadowEnabled(false);\n\n// enable shadow\nshape.shadowEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7871,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1664
  },
  {
    "id": "Konva.Arrow#dashEnabled",
    "longname": "Konva.Arrow#dashEnabled",
    "name": "dashEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#dashEnabled",
    "inherited": true,
    "description": "get/set dash enabled flag",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get dash enabled flag\nvar dashEnabled = shape.dashEnabled();\n\n// disable dash\nshape.dashEnabled(false);\n\n// enable dash\nshape.dashEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7888,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1665
  },
  {
    "id": "Konva.Arrow#strokeScaleEnabled",
    "longname": "Konva.Arrow#strokeScaleEnabled",
    "name": "strokeScaleEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeScaleEnabled",
    "inherited": true,
    "description": "get/set strokeScale enabled flag",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get stroke scale enabled flag\nvar strokeScaleEnabled = shape.strokeScaleEnabled();\n\n// disable stroke scale\nshape.strokeScaleEnabled(false);\n\n// enable stroke scale\nshape.strokeScaleEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7905,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1666
  },
  {
    "id": "Konva.Arrow#fillPriority",
    "longname": "Konva.Arrow#fillPriority",
    "name": "fillPriority",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPriority",
    "inherited": true,
    "description": "get/set fill priority.  can be color, pattern, linear-gradient, or radial-gradient.  The default is color.\n  This is handy if you want to toggle between different fill types.",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "priority"
      }
    ],
    "examples": [
      "// get fill priority\nvar fillPriority = shape.fillPriority();\n\n// set fill priority\nshape.fillPriority('linear-gradient');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7922,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1667
  },
  {
    "id": "Konva.Arrow#fillPatternOffset",
    "longname": "Konva.Arrow#fillPatternOffset",
    "name": "fillPatternOffset",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffset",
    "inherited": true,
    "description": "get/set fill pattern offset",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.y"
      }
    ],
    "examples": [
      "// get fill pattern offset\nvar patternOffset = shape.fillPatternOffset();\n\n// set fill pattern offset\nshape.fillPatternOffset({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7937,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1668
  },
  {
    "id": "Konva.Arrow#fillPatternOffsetX",
    "longname": "Konva.Arrow#fillPatternOffsetX",
    "name": "fillPatternOffsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffsetX",
    "inherited": true,
    "description": "get/set fill pattern offset x",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern offset x\nvar patternOffsetX = shape.fillPatternOffsetX();\n\n// set fill pattern offset x\nshape.fillPatternOffsetX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7956,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1669
  },
  {
    "id": "Konva.Arrow#fillPatternOffsetY",
    "longname": "Konva.Arrow#fillPatternOffsetY",
    "name": "fillPatternOffsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffsetY",
    "inherited": true,
    "description": "get/set fill pattern offset y",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern offset y\nvar patternOffsetY = shape.fillPatternOffsetY();\n\n// set fill pattern offset y\nshape.fillPatternOffsetY(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7970,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1670
  },
  {
    "id": "Konva.Arrow#fillPatternScale",
    "longname": "Konva.Arrow#fillPatternScale",
    "name": "fillPatternScale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScale",
    "inherited": true,
    "description": "get/set fill pattern scale",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.y"
      }
    ],
    "examples": [
      "// get fill pattern scale\nvar patternScale = shape.fillPatternScale();\n\n// set fill pattern scale\nshape.fillPatternScale({\n  x: 2,\n  y: 2\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7984,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1671
  },
  {
    "id": "Konva.Arrow#fillPatternScaleX",
    "longname": "Konva.Arrow#fillPatternScaleX",
    "name": "fillPatternScaleX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScaleX",
    "inherited": true,
    "description": "get/set fill pattern scale x",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern scale x\nvar patternScaleX = shape.fillPatternScaleX();\n\n// set fill pattern scale x\nshape.fillPatternScaleX(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8003,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1672
  },
  {
    "id": "Konva.Arrow#fillPatternScaleY",
    "longname": "Konva.Arrow#fillPatternScaleY",
    "name": "fillPatternScaleY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScaleY",
    "inherited": true,
    "description": "get/set fill pattern scale y",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern scale y\nvar patternScaleY = shape.fillPatternScaleY();\n\n// set fill pattern scale y\nshape.fillPatternScaleY(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8017,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1673
  },
  {
    "id": "Konva.Arrow#fillLinearGradientStartPoint",
    "longname": "Konva.Arrow#fillLinearGradientStartPoint",
    "name": "fillLinearGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPoint",
    "inherited": true,
    "description": "get/set fill linear gradient start point",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get fill linear gradient start point\nvar startPoint = shape.fillLinearGradientStartPoint();\n\n// set fill linear gradient start point\nshape.fillLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8034,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1674
  },
  {
    "id": "Konva.Arrow#strokeLinearGradientStartPoint",
    "longname": "Konva.Arrow#strokeLinearGradientStartPoint",
    "name": "strokeLinearGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientStartPoint",
    "inherited": true,
    "description": "get/set stroke linear gradient start point",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point\nvar startPoint = shape.strokeLinearGradientStartPoint();\n\n// set stroke linear gradient start point\nshape.strokeLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8056,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1675
  },
  {
    "id": "Konva.Arrow#fillLinearGradientStartPointX",
    "longname": "Konva.Arrow#fillLinearGradientStartPointX",
    "name": "fillLinearGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPointX",
    "inherited": true,
    "description": "get/set fill linear gradient start point x",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill linear gradient start point x\nvar startPointX = shape.fillLinearGradientStartPointX();\n\n// set fill linear gradient start point x\nshape.fillLinearGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8075,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1676
  },
  {
    "id": "Konva.Arrow#linearLinearGradientStartPointX",
    "longname": "Konva.Arrow#linearLinearGradientStartPointX",
    "name": "linearLinearGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#linearLinearGradientStartPointX",
    "inherited": true,
    "description": "get/set stroke linear gradient start point x",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point x\nvar startPointX = shape.strokeLinearGradientStartPointX();\n\n// set stroke linear gradient start point x\nshape.strokeLinearGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8089,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1677
  },
  {
    "id": "Konva.Arrow#fillLinearGradientStartPointY",
    "longname": "Konva.Arrow#fillLinearGradientStartPointY",
    "name": "fillLinearGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPointY",
    "inherited": true,
    "description": "get/set fill linear gradient start point y",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill linear gradient start point y\nvar startPointY = shape.fillLinearGradientStartPointY();\n\n// set fill linear gradient start point y\nshape.fillLinearGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8103,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1678
  },
  {
    "id": "Konva.Arrow#strokeLinearGradientStartPointY",
    "longname": "Konva.Arrow#strokeLinearGradientStartPointY",
    "name": "strokeLinearGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientStartPointY",
    "inherited": true,
    "description": "get/set stroke linear gradient start point y",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point y\nvar startPointY = shape.strokeLinearGradientStartPointY();\n\n// set stroke linear gradient start point y\nshape.strokeLinearGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8117,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1679
  },
  {
    "id": "Konva.Arrow#fillLinearGradientEndPoint",
    "longname": "Konva.Arrow#fillLinearGradientEndPoint",
    "name": "fillLinearGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPoint",
    "inherited": true,
    "description": "get/set fill linear gradient end point",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get fill linear gradient end point\nvar endPoint = shape.fillLinearGradientEndPoint();\n\n// set fill linear gradient end point\nshape.fillLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8134,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1680
  },
  {
    "id": "Konva.Arrow#strokeLinearGradientEndPoint",
    "longname": "Konva.Arrow#strokeLinearGradientEndPoint",
    "name": "strokeLinearGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPoint",
    "inherited": true,
    "description": "get/set stroke linear gradient end point",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point\nvar endPoint = shape.strokeLinearGradientEndPoint();\n\n// set stroke linear gradient end point\nshape.strokeLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8156,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1681
  },
  {
    "id": "Konva.Arrow#fillLinearGradientEndPointX",
    "longname": "Konva.Arrow#fillLinearGradientEndPointX",
    "name": "fillLinearGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPointX",
    "inherited": true,
    "description": "get/set fill linear gradient end point x",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill linear gradient end point x\nvar endPointX = shape.fillLinearGradientEndPointX();\n\n// set fill linear gradient end point x\nshape.fillLinearGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8175,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1682
  },
  {
    "id": "Konva.Arrow#strokeLinearGradientEndPointX",
    "longname": "Konva.Arrow#strokeLinearGradientEndPointX",
    "name": "strokeLinearGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPointX",
    "inherited": true,
    "description": "get/set fill linear gradient end point x",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point x\nvar endPointX = shape.strokeLinearGradientEndPointX();\n\n// set stroke linear gradient end point x\nshape.strokeLinearGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8189,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1683
  },
  {
    "id": "Konva.Arrow#fillLinearGradientEndPointY",
    "longname": "Konva.Arrow#fillLinearGradientEndPointY",
    "name": "fillLinearGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPointY",
    "inherited": true,
    "description": "get/set fill linear gradient end point y",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill linear gradient end point y\nvar endPointY = shape.fillLinearGradientEndPointY();\n\n// set fill linear gradient end point y\nshape.fillLinearGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8203,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1684
  },
  {
    "id": "Konva.Arrow#strokeLinearGradientEndPointY",
    "longname": "Konva.Arrow#strokeLinearGradientEndPointY",
    "name": "strokeLinearGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPointY",
    "inherited": true,
    "description": "get/set stroke linear gradient end point y",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point y\nvar endPointY = shape.strokeLinearGradientEndPointY();\n\n// set stroke linear gradient end point y\nshape.strokeLinearGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8217,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1685
  },
  {
    "id": "Konva.Arrow#fillRadialGradientStartPoint",
    "longname": "Konva.Arrow#fillRadialGradientStartPoint",
    "name": "fillRadialGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPoint",
    "inherited": true,
    "description": "get/set fill radial gradient start point",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get fill radial gradient start point\nvar startPoint = shape.fillRadialGradientStartPoint();\n\n// set fill radial gradient start point\nshape.fillRadialGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8234,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1686
  },
  {
    "id": "Konva.Arrow#fillRadialGradientStartPointX",
    "longname": "Konva.Arrow#fillRadialGradientStartPointX",
    "name": "fillRadialGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPointX",
    "inherited": true,
    "description": "get/set fill radial gradient start point x",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill radial gradient start point x\nvar startPointX = shape.fillRadialGradientStartPointX();\n\n// set fill radial gradient start point x\nshape.fillRadialGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8253,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1687
  },
  {
    "id": "Konva.Arrow#fillRadialGradientStartPointY",
    "longname": "Konva.Arrow#fillRadialGradientStartPointY",
    "name": "fillRadialGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPointY",
    "inherited": true,
    "description": "get/set fill radial gradient start point y",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill radial gradient start point y\nvar startPointY = shape.fillRadialGradientStartPointY();\n\n// set fill radial gradient start point y\nshape.fillRadialGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8267,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1688
  },
  {
    "id": "Konva.Arrow#fillRadialGradientEndPoint",
    "longname": "Konva.Arrow#fillRadialGradientEndPoint",
    "name": "fillRadialGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPoint",
    "inherited": true,
    "description": "get/set fill radial gradient end point",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get fill radial gradient end point\nvar endPoint = shape.fillRadialGradientEndPoint();\n\n// set fill radial gradient end point\nshape.fillRadialGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8284,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1689
  },
  {
    "id": "Konva.Arrow#fillRadialGradientEndPointX",
    "longname": "Konva.Arrow#fillRadialGradientEndPointX",
    "name": "fillRadialGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPointX",
    "inherited": true,
    "description": "get/set fill radial gradient end point x",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill radial gradient end point x\nvar endPointX = shape.fillRadialGradientEndPointX();\n\n// set fill radial gradient end point x\nshape.fillRadialGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8303,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1690
  },
  {
    "id": "Konva.Arrow#fillRadialGradientEndPointY",
    "longname": "Konva.Arrow#fillRadialGradientEndPointY",
    "name": "fillRadialGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPointY",
    "inherited": true,
    "description": "get/set fill radial gradient end point y",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill radial gradient end point y\nvar endPointY = shape.fillRadialGradientEndPointY();\n\n// set fill radial gradient end point y\nshape.fillRadialGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8317,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1691
  },
  {
    "id": "Konva.Arrow#fillPatternRotation",
    "longname": "Konva.Arrow#fillPatternRotation",
    "name": "fillPatternRotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternRotation",
    "inherited": true,
    "description": "get/set fill pattern rotation in degrees",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get fill pattern rotation\nvar patternRotation = shape.fillPatternRotation();\n\n// set fill pattern rotation\nshape.fillPatternRotation(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8331,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1692
  },
  {
    "id": "Konva.Arrow#fillRule",
    "longname": "Konva.Arrow#fillRule",
    "name": "fillRule",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRule",
    "inherited": true,
    "description": "get/set fill rule",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "CanvasFillRule"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get fill rule\nvar fillRule = shape.fillRule();\n\n// set fill rule\nshape.fillRule('evenodd');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8345,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1693
  },
  {
    "id": "Konva.Arrow#clearCache",
    "longname": "Konva.Arrow#clearCache",
    "name": "clearCache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#clearCache",
    "inherited": true,
    "description": "clear cached canvas",
    "memberof": "Konva.Arrow",
    "examples": [
      "node.clearCache();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2632,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1694
  },
  {
    "id": "Konva.Arrow#cache",
    "longname": "Konva.Arrow#cache",
    "name": "cache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#cache",
    "inherited": true,
    "description": "cache node to improve drawing performance, apply filters, or create more accurate\n hit regions. For all basic shapes size of cache canvas will be automatically detected.\n If you need to cache your custom `Konva.Shape` instance you have to pass shape's bounding box\n properties. Look at [https://konvajs.org/docs/performance/Shape_Caching.html](https://konvajs.org/docs/performance/Shape_Caching.html) for more information.",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "increase canvas size by `offset` pixel in all directions.",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "when set to true, a red border will be drawn around the cached\n region for debugging purposes",
        "name": "config.drawBorder"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "change quality (or pixel ratio) of cached image. pixelRatio = 2 will produce 2x sized cache.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "control imageSmoothingEnabled property of created canvas for cache",
        "name": "config.imageSmoothingEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "change quality (or pixel ratio) of cached hit canvas.",
        "name": "config.hitCanvasPixelRatio"
      }
    ],
    "examples": [
      "// cache a shape with the x,y position of the bounding box at the center and\n// the width and height of the bounding box equal to the width and height of\n// the shape obtained from shape.width() and shape.height()\nimage.cache();\n\n// cache a node and define the bounding box position and size\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200\n});\n\n// cache a node and draw a red border around the bounding box\n// for debugging purposes\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200,\n  offset : 10,\n  drawBorder: true\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2650,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1695
  },
  {
    "id": "Konva.Arrow#isCached",
    "longname": "Konva.Arrow#isCached",
    "name": "isCached",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isCached",
    "inherited": true,
    "description": "determine if node is currently cached",
    "memberof": "Konva.Arrow",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2788,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1696
  },
  {
    "id": "Konva.Arrow#getClientRect",
    "longname": "Konva.Arrow#getClientRect",
    "name": "getClientRect",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getClientRect",
    "inherited": true,
    "description": "Return client rectangle `{x, y, width, height}` of node. This rectangle also include all styling (strokes, shadows, etc).\nThe purpose of the method is similar to getBoundingClientRect API of the DOM.",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply transform to node for calculating rect?",
        "name": "config.skipTransform"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply shadow to the node for calculating bound box?",
        "name": "config.skipShadow"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply stroke to the node for calculating bound box?",
        "name": "config.skipStroke"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "calculate client rect relative to one of the parents",
        "name": "config.relativeTo"
      }
    ],
    "examples": [
      "var rect = new Konva.Rect({\n     width : 100,\n     height : 100,\n     x : 50,\n     y : 50,\n     strokeWidth : 4,\n     stroke : 'black',\n     offsetX : 50,\n     scaleY : 2\n});\n\n// get client rect without think off transformations (position, rotation, scale, offset, etc)\nrect.getClientRect({ skipTransform: true});\n// returns {\n//     x : -2,   // two pixels for stroke / 2\n//     y : -2,\n//     width : 104, // increased by 4 for stroke\n//     height : 104\n//}\n\n// get client rect with transformation applied\nrect.getClientRect();\n// returns Object {x: -2, y: 46, width: 104, height: 208}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "rect with `{x, y, width, height}` properties"
      }
    ],
    "meta": {
      "lineno": 2797,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1697
  },
  {
    "id": "Konva.Arrow#on",
    "longname": "Konva.Arrow#on",
    "name": "on",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#on",
    "inherited": true,
    "description": "bind events to the node. KonvaJS supports mouseover, mousemove,\n mouseout, mouseenter, mouseleave, mousedown, mouseup, wheel, contextmenu, click, dblclick, touchstart, touchmove,\n touchend, tap, dbltap, dragstart, dragmove, and dragend events.\n Pass in a string of events delimited by a space to bind multiple events at once\n such as 'mousedown mouseup mousemove'. Include a namespace to bind an\n event by name such as 'click.foobar'.",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'click', 'mousedown touchstart', 'mousedown.foo touchstart.foo'",
        "name": "evtStr"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The handler function. The first argument of that function is event object. Event object has `target` as main target of the event, `currentTarget` as current node listener and `evt` as native browser event.",
        "name": "handler"
      }
    ],
    "examples": [
      "// add click listener\nnode.on('click', function() {\n  console.log('you clicked me!');\n});\n\n// get the target node\nnode.on('click', function(evt) {\n  console.log(evt.target);\n});\n\n// stop event propagation\nnode.on('click', function(evt) {\n  evt.cancelBubble = true;\n});\n\n// bind multiple listeners\nnode.on('click touchstart', function() {\n  console.log('you clicked/touched me!');\n});\n\n// namespace listener\nnode.on('click.foo', function() {\n  console.log('you clicked/touched me!');\n});\n\n// get the event type\nnode.on('click tap', function(evt) {\n  var eventType = evt.type;\n});\n\n// get native event object\nnode.on('click tap', function(evt) {\n  var nativeEvent = evt.evt;\n});\n\n// for change events, get the old and new val\nnode.on('xChange', function(evt) {\n  var oldVal = evt.oldVal;\n  var newVal = evt.newVal;\n});\n\n// get event targets\n// with event delegations\nlayer.on('click', 'Group', function(evt) {\n  var shape = evt.target;\n  var group = evt.currentTarget;\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2919,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1698
  },
  {
    "id": "Konva.Arrow#off",
    "longname": "Konva.Arrow#off",
    "name": "off",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#off",
    "inherited": true,
    "description": "remove event bindings from the node. Pass in a string of\n event types delimmited by a space to remove multiple event\n bindings at once such as 'mousedown mouseup mousemove'.\n include a namespace to remove an event binding by name\n such as 'click.foobar'. If you only give a name like '.foobar',\n all events in that namespace will be removed.",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'click', 'mousedown touchstart', '.foobar'",
        "name": "evtStr"
      }
    ],
    "examples": [
      "// remove listener\nnode.off('click');\n\n// remove multiple listeners\nnode.off('click touchstart');\n\n// remove listener by name\nnode.off('click.foo');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3007,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1699
  },
  {
    "id": "Konva.Arrow#remove",
    "longname": "Konva.Arrow#remove",
    "name": "remove",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#remove",
    "inherited": true,
    "description": "remove a node from parent, but don't destroy. You can reuse the node later.",
    "memberof": "Konva.Arrow",
    "examples": [
      "node.remove();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3088,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1700
  },
  {
    "id": "Konva.Arrow#destroy",
    "longname": "Konva.Arrow#destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#destroy",
    "inherited": true,
    "description": "remove and destroy a node. Kill it and delete forever! You should not reuse node after destroy().\nIf the node is a container (Group, Stage or Layer) it will destroy all children too.",
    "memberof": "Konva.Arrow",
    "examples": [
      "node.destroy();"
    ],
    "meta": {
      "lineno": 3125,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1701
  },
  {
    "id": "Konva.Arrow#getAttr",
    "longname": "Konva.Arrow#getAttr",
    "name": "getAttr",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAttr",
    "inherited": true,
    "description": "get attr",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "attr"
      }
    ],
    "examples": [
      "var x = node.getAttr('x');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer",
            "String",
            "Object",
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3138,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1702
  },
  {
    "id": "Konva.Arrow#getAncestors",
    "longname": "Konva.Arrow#getAncestors",
    "name": "getAncestors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAncestors",
    "inherited": true,
    "description": "get ancestors",
    "memberof": "Konva.Arrow",
    "examples": [
      "shape.getAncestors().forEach(function(node) {\n  console.log(node.getId());\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3155,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1703
  },
  {
    "id": "Konva.Arrow#getAttrs",
    "longname": "Konva.Arrow#getAttrs",
    "name": "getAttrs",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAttrs",
    "inherited": true,
    "description": "get attrs object literal",
    "memberof": "Konva.Arrow",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3173,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1704
  },
  {
    "id": "Konva.Arrow#setAttrs",
    "longname": "Konva.Arrow#setAttrs",
    "name": "setAttrs",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#setAttrs",
    "inherited": true,
    "description": "set multiple attrs at once using an object literal",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "object containing key value pairs",
        "name": "config"
      }
    ],
    "examples": [
      "node.setAttrs({\n  x: 5,\n  fill: 'red'\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3182,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1705
  },
  {
    "id": "Konva.Arrow#isListening",
    "longname": "Konva.Arrow#isListening",
    "name": "isListening",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isListening",
    "inherited": true,
    "description": "determine if node is listening for events by taking into account ancestors.\n\nParent    | Self      | isListening\nlistening | listening |\n----------+-----------+------------\nT         | T         | T\nT         | F         | F\nF         | T         | F\nF         | F         | F",
    "memberof": "Konva.Arrow",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3217,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1706
  },
  {
    "id": "Konva.Arrow#isVisible",
    "longname": "Konva.Arrow#isVisible",
    "name": "isVisible",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isVisible",
    "inherited": true,
    "description": "determine if node is visible by taking into account ancestors.\n\nParent    | Self      | isVisible\nvisible   | visible   |\n----------+-----------+------------\nT         | T         | T\nT         | F         | F\nF         | T         | F\nF         | F         | F",
    "memberof": "Konva.Arrow",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3248,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1707
  },
  {
    "id": "Konva.Arrow#show",
    "longname": "Konva.Arrow#show",
    "name": "show",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#show",
    "inherited": true,
    "description": "show node. set visible = true",
    "memberof": "Konva.Arrow",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3300,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1708
  },
  {
    "id": "Konva.Arrow#hide",
    "longname": "Konva.Arrow#hide",
    "name": "hide",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hide",
    "inherited": true,
    "description": "hide node.  Hidden nodes are no longer detectable",
    "memberof": "Konva.Arrow",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3310,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1709
  },
  {
    "id": "Konva.Arrow#getAbsoluteZIndex",
    "longname": "Konva.Arrow#getAbsoluteZIndex",
    "name": "getAbsoluteZIndex",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteZIndex",
    "inherited": true,
    "description": "get absolute z-index which takes into account sibling\n and ancestor indices",
    "memberof": "Konva.Arrow",
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3323,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1710
  },
  {
    "id": "Konva.Arrow#getDepth",
    "longname": "Konva.Arrow#getDepth",
    "name": "getDepth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getDepth",
    "inherited": true,
    "description": "get node depth in node tree.  Returns an integer.\n e.g. Stage depth will always be 0.  Layers will always be 1.  Groups and Shapes will always\n be >= 2",
    "memberof": "Konva.Arrow",
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3355,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1711
  },
  {
    "id": "Konva.Arrow#getRelativePointerPosition",
    "longname": "Konva.Arrow#getRelativePointerPosition",
    "name": "getRelativePointerPosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getRelativePointerPosition",
    "inherited": true,
    "description": "get position of first pointer (like mouse or first touch) relative to local coordinates of current node",
    "memberof": "Konva.Arrow",
    "examples": [
      "// let's think we have a rectangle at position x = 10, y = 10\n// now we clicked at x = 15, y = 15 of the stage\n// if you want to know position of the click, related to the rectangle you can use\nrect.getRelativePointerPosition();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3398,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1712
  },
  {
    "id": "Konva.Arrow#getAbsolutePosition",
    "longname": "Konva.Arrow#getAbsolutePosition",
    "name": "getAbsolutePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsolutePosition",
    "inherited": true,
    "description": "get absolute position of a node. That function can be used to calculate absolute position, but relative to any ancestor",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "optional ancestor node",
        "name": "Ancestor"
      }
    ],
    "examples": [
      "// returns absolute position relative to top-left corner of canvas\nnode.getAbsolutePosition();\n\n// calculate absolute position of node, inside stage\n// so stage transforms are ignored\nnode.getAbsolutePosition(stage)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3426,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1713
  },
  {
    "id": "Konva.Arrow#move",
    "longname": "Konva.Arrow#move",
    "name": "move",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#move",
    "inherited": true,
    "description": "move node by an amount relative to its current position",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "change"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "change.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "change.y"
      }
    ],
    "examples": [
      "// move node in x direction by 1px and y direction by 2px\nnode.move({\n  x: 1,\n  y: 2\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3514,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1714
  },
  {
    "id": "Konva.Arrow#rotate",
    "longname": "Konva.Arrow#rotate",
    "name": "rotate",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#rotate",
    "inherited": true,
    "description": "rotate node by an amount in degrees relative to its current rotation",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "theta"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3559,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1715
  },
  {
    "id": "Konva.Arrow#moveToTop",
    "longname": "Konva.Arrow#moveToTop",
    "name": "moveToTop",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveToTop",
    "inherited": true,
    "description": "move node to the top of its siblings",
    "memberof": "Konva.Arrow",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3570,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1716
  },
  {
    "id": "Konva.Arrow#moveUp",
    "longname": "Konva.Arrow#moveUp",
    "name": "moveUp",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveUp",
    "inherited": true,
    "description": "move node up",
    "memberof": "Konva.Arrow",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "flag is moved or not"
      }
    ],
    "meta": {
      "lineno": 3590,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1717
  },
  {
    "id": "Konva.Arrow#moveDown",
    "longname": "Konva.Arrow#moveDown",
    "name": "moveDown",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveDown",
    "inherited": true,
    "description": "move node down",
    "memberof": "Konva.Arrow",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3610,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1718
  },
  {
    "id": "Konva.Arrow#moveToBottom",
    "longname": "Konva.Arrow#moveToBottom",
    "name": "moveToBottom",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveToBottom",
    "inherited": true,
    "description": "move node to the bottom of its siblings",
    "memberof": "Konva.Arrow",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3630,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1719
  },
  {
    "id": "Konva.Arrow#getAbsoluteOpacity",
    "longname": "Konva.Arrow#getAbsoluteOpacity",
    "name": "getAbsoluteOpacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteOpacity",
    "inherited": true,
    "description": "get absolute opacity",
    "memberof": "Konva.Arrow",
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3668,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1720
  },
  {
    "id": "Konva.Arrow#moveTo",
    "longname": "Konva.Arrow#moveTo",
    "name": "moveTo",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveTo",
    "inherited": true,
    "description": "move node to another container",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Container"
          ]
        },
        "name": "newContainer"
      }
    ],
    "examples": [
      "// move node from current layer into layer2\nnode.moveTo(layer2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3685,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1721
  },
  {
    "id": "Konva.Arrow#toObject",
    "longname": "Konva.Arrow#toObject",
    "name": "toObject",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toObject",
    "inherited": true,
    "description": "convert Node into an object for serialization.  Returns an object.",
    "memberof": "Konva.Arrow",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3703,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1722
  },
  {
    "id": "Konva.Arrow#toJSON",
    "longname": "Konva.Arrow#toJSON",
    "name": "toJSON",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toJSON",
    "inherited": true,
    "description": "convert Node into a JSON string.  Returns a JSON string.",
    "memberof": "Konva.Arrow",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3736,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1723
  },
  {
    "id": "Konva.Arrow#getParent",
    "longname": "Konva.Arrow#getParent",
    "name": "getParent",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getParent",
    "inherited": true,
    "description": "get parent container",
    "memberof": "Konva.Arrow",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3745,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1724
  },
  {
    "id": "Konva.Arrow#findAncestors",
    "longname": "Konva.Arrow#findAncestors",
    "name": "findAncestors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#findAncestors",
    "inherited": true,
    "description": "get all ancestors (parent then parent of the parent, etc) of the node",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "selector for search",
        "name": "selector"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "show we think that node is ancestro itself?",
        "name": "includeSelf"
      },
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "optional": true,
        "description": "optional node where we need to stop searching (one of ancestors)",
        "name": "stopNode"
      }
    ],
    "examples": [
      "// get one of the parent group\nvar parentGroups = node.findAncestors('Group');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "[ancestors]"
      }
    ],
    "meta": {
      "lineno": 3754,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1725
  },
  {
    "id": "Konva.Arrow#findAncestor",
    "longname": "Konva.Arrow#findAncestor",
    "name": "findAncestor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#findAncestor",
    "inherited": true,
    "description": "get ancestor (parent or parent of the parent, etc) of the node that match passed selector",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "selector for search",
        "name": "selector"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "show we think that node is ancestro itself?",
        "name": "includeSelf"
      },
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "optional": true,
        "description": "optional node where we need to stop searching (one of ancestors)",
        "name": "stopNode"
      }
    ],
    "examples": [
      "// get one of the parent group\nvar group = node.findAncestors('.mygroup');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "description": "ancestor"
      }
    ],
    "meta": {
      "lineno": 3786,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1726
  },
  {
    "id": "Konva.Arrow#getLayer",
    "longname": "Konva.Arrow#getLayer",
    "name": "getLayer",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getLayer",
    "inherited": true,
    "description": "get layer ancestor",
    "memberof": "Konva.Arrow",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Layer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3837,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1727
  },
  {
    "id": "Konva.Arrow#getStage",
    "longname": "Konva.Arrow#getStage",
    "name": "getStage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getStage",
    "inherited": true,
    "description": "get stage ancestor",
    "memberof": "Konva.Arrow",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Stage"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3847,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1728
  },
  {
    "id": "Konva.Arrow#fire",
    "longname": "Konva.Arrow#fire",
    "name": "fire",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#fire",
    "inherited": true,
    "description": "fire event",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "event type.  can be a regular event, like click, mouseover, or mouseout, or it can be a custom event, like myCustomEvent",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "Event"
          ]
        },
        "optional": true,
        "description": "event object",
        "name": "evt"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "setting the value to false, or leaving it undefined, will result in the event\n not bubbling.  Setting the value to true will result in the event bubbling.",
        "name": "bubble"
      }
    ],
    "examples": [
      "// manually fire click event\nnode.fire('click');\n\n// fire custom event\nnode.fire('foo');\n\n// fire custom event with custom event object\nnode.fire('foo', {\n  bar: 10\n});\n\n// fire click event that bubbles\nnode.fire('click', null, true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3865,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1729
  },
  {
    "id": "Konva.Arrow#getAbsoluteTransform",
    "longname": "Konva.Arrow#getAbsoluteTransform",
    "name": "getAbsoluteTransform",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteTransform",
    "inherited": true,
    "description": "get absolute transform of the node which takes into\n account its ancestor transforms",
    "memberof": "Konva.Arrow",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3901,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1730
  },
  {
    "id": "Konva.Arrow#getAbsoluteScale",
    "longname": "Konva.Arrow#getAbsoluteScale",
    "name": "getAbsoluteScale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteScale",
    "inherited": true,
    "description": "get absolute scale of the node which takes into\n account its ancestor scales",
    "memberof": "Konva.Arrow",
    "examples": [
      "// get absolute scale x\nvar scaleX = node.getAbsoluteScale().x;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3961,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1731
  },
  {
    "id": "Konva.Arrow#getAbsoluteRotation",
    "longname": "Konva.Arrow#getAbsoluteRotation",
    "name": "getAbsoluteRotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteRotation",
    "inherited": true,
    "description": "get absolute rotation of the node which takes into\n account its ancestor rotations",
    "memberof": "Konva.Arrow",
    "examples": [
      "// get absolute rotation\nvar rotation = node.getAbsoluteRotation();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3989,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1732
  },
  {
    "id": "Konva.Arrow#getTransform",
    "longname": "Konva.Arrow#getTransform",
    "name": "getTransform",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getTransform",
    "inherited": true,
    "description": "get transform of the node",
    "memberof": "Konva.Arrow",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4009,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1733
  },
  {
    "id": "Konva.Arrow#clone",
    "longname": "Konva.Arrow#clone",
    "name": "clone",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#clone",
    "inherited": true,
    "description": "clone node.  Returns a new Node instance with identical attributes.  You can also override\n the node properties with an object literal, enabling you to use an existing node as a template\n for another node",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "override attrs",
        "name": "obj"
      }
    ],
    "examples": [
      "// simple clone\nvar clone = node.clone();\n\n// clone a node and override the x position\nvar clone = rect.clone({\n  x: 5\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4044,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1734
  },
  {
    "id": "Konva.Arrow#toCanvas",
    "longname": "Konva.Arrow#toCanvas",
    "name": "toCanvas",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toCanvas",
    "inherited": true,
    "description": "converts node into an canvas element.",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output canvas. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var canvas = node.toCanvas();"
    ],
    "meta": {
      "lineno": 4119,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1735
  },
  {
    "id": "Konva.Arrow#toDataURL",
    "longname": "Konva.Arrow#toDataURL",
    "name": "toDataURL",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toDataURL",
    "inherited": true,
    "description": "Creates a composite data URL (base64 string). If MIME type is not\nspecified, then \"image/png\" will result. For \"image/jpeg\", specify a quality\nlevel as quality (range 0.0 - 1.0)",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"image/png\" or \"image/jpeg\".\n \"image/png\" is the default",
        "name": "config.mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "jpeg quality.  If using an \"image/jpeg\" mimeType,\n you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n is very high quality",
        "name": "config.quality"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output image url. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4140,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1736
  },
  {
    "id": "Konva.Arrow#toImage",
    "longname": "Konva.Arrow#toImage",
    "name": "toImage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toImage",
    "inherited": true,
    "description": "converts node into an image.  Since the toImage\n method is asynchronous, the resulting image can only be retrieved from the config callback\n or the returned Promise.  toImage is most commonly used\n to cache complex drawings as an image so that they don't have to constantly be redrawn",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"image/png\" or \"image/jpeg\".\n \"image/png\" is the default",
        "name": "config.mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "jpeg quality.  If using an \"image/jpeg\" mimeType,\n you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n is very high quality",
        "name": "config.quality"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output image. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var image = node.toImage({\n  callback(img) {\n    // do stuff with img\n  }\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Image>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4172,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1737
  },
  {
    "id": "Konva.Arrow#toBlob",
    "longname": "Konva.Arrow#toBlob",
    "name": "toBlob",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toBlob",
    "inherited": true,
    "description": "Converts node into a blob.  Since the toBlob method is asynchronous,\n the resulting blob can only be retrieved from the config callback\n or the returned Promise.",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output canvas. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var blob = await node.toBlob({});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Blob>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4219,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1738
  },
  {
    "id": "Konva.Arrow#getClassName",
    "longname": "Konva.Arrow#getClassName",
    "name": "getClassName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getClassName",
    "inherited": true,
    "description": "get class name, which may return Stage, Layer, Group, or shape class names like Rect, Circle, Text, etc.",
    "memberof": "Konva.Arrow",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4267,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1739
  },
  {
    "id": "Konva.Arrow#getType",
    "longname": "Konva.Arrow#getType",
    "name": "getType",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getType",
    "inherited": true,
    "description": "get the node type, which may return Stage, Layer, Group, or Shape",
    "memberof": "Konva.Arrow",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4276,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1740
  },
  {
    "id": "Konva.Arrow#addName",
    "longname": "Konva.Arrow#addName",
    "name": "addName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#addName",
    "inherited": true,
    "description": "add name to node",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red');\nnode.addName('selected');\nnode.name(); // return 'red selected'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4324,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1741
  },
  {
    "id": "Konva.Arrow#hasName",
    "longname": "Konva.Arrow#hasName",
    "name": "hasName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hasName",
    "inherited": true,
    "description": "check is node has name",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red');\nnode.hasName('red');   // return true\nnode.hasName('selected'); // return false\nnode.hasName(''); // return false"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4343,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1742
  },
  {
    "id": "Konva.Arrow#removeName",
    "longname": "Konva.Arrow#removeName",
    "name": "removeName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#removeName",
    "inherited": true,
    "description": "remove name from node",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red selected');\nnode.removeName('selected');\nnode.hasName('selected'); // return false\nnode.name(); // return 'red'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4367,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1743
  },
  {
    "id": "Konva.Arrow#setAttr",
    "longname": "Konva.Arrow#setAttr",
    "name": "setAttr",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#setAttr",
    "inherited": true,
    "description": "set attr",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "attr"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "name": "val"
      }
    ],
    "examples": [
      "node.setAttr('x', 5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4388,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1744
  },
  {
    "id": "Konva.Arrow#draw",
    "longname": "Konva.Arrow#draw",
    "name": "draw",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#draw",
    "inherited": true,
    "description": "draw both scene and hit graphs.  If the node being drawn is the stage, all of the layers will be cleared and redrawn",
    "memberof": "Konva.Arrow",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4511,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1745
  },
  {
    "id": "Konva.Arrow#startDrag",
    "longname": "Konva.Arrow#startDrag",
    "name": "startDrag",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#startDrag",
    "inherited": true,
    "description": "initiate drag and drop.",
    "memberof": "Konva.Arrow",
    "meta": {
      "lineno": 4544,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1746
  },
  {
    "id": "Konva.Arrow#stopDrag",
    "longname": "Konva.Arrow#stopDrag",
    "name": "stopDrag",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#stopDrag",
    "inherited": true,
    "description": "stop drag and drop",
    "memberof": "Konva.Arrow",
    "meta": {
      "lineno": 4590,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1747
  },
  {
    "id": "Konva.Arrow#isDragging",
    "longname": "Konva.Arrow#isDragging",
    "name": "isDragging",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isDragging",
    "inherited": true,
    "description": "determine if node is currently in drag and drop mode",
    "memberof": "Konva.Arrow",
    "meta": {
      "lineno": 4607,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1748
  },
  {
    "id": "Konva.Arrow#isClientRectOnScreen",
    "longname": "Konva.Arrow#isClientRectOnScreen",
    "name": "isClientRectOnScreen",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isClientRectOnScreen",
    "inherited": true,
    "description": "determine if node (at least partially) is currently in user-visible area",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number",
            "Object"
          ]
        },
        "description": "optional margin in pixels",
        "name": "margin"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "margin.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "margin.y"
      }
    ],
    "examples": [
      "// get index\n// default calculations\nvar isOnScreen = node.isClientRectOnScreen()\n// increase object size (or screen size) for cases when objects close to the screen still need to be marked as \"visible\"\nvar isOnScreen = node.isClientRectOnScreen({ x: stage.width(), y: stage.height() })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4671,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1749
  },
  {
    "id": "Konva.Arrow#zIndex",
    "longname": "Konva.Arrow#zIndex",
    "name": "zIndex",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#zIndex",
    "inherited": true,
    "description": "get/set zIndex relative to the node's siblings who share the same parent.\nPlease remember that zIndex is not absolute (like in CSS). It is relative to parent element only.",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "index"
      }
    ],
    "examples": [
      "// get index\nvar index = node.zIndex();\n\n// set index\nnode.zIndex(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4764,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1750
  },
  {
    "id": "Konva.Arrow#absolutePosition",
    "longname": "Konva.Arrow#absolutePosition",
    "name": "absolutePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#absolutePosition",
    "inherited": true,
    "description": "get/set node absolute position",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "// get position\nvar position = node.absolutePosition();\n\n// set position\nnode.absolutePosition({\n  x: 5,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4779,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1751
  },
  {
    "id": "Konva.Arrow#position",
    "longname": "Konva.Arrow#position",
    "name": "position",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#position",
    "inherited": true,
    "description": "get/set node position relative to parent",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "// get position\nvar position = node.position();\n\n// set position\nnode.position({\n  x: 5,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4799,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1752
  },
  {
    "id": "Konva.Arrow#x",
    "longname": "Konva.Arrow#x",
    "name": "x",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#x",
    "inherited": true,
    "description": "get/set x position",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get x\nvar x = node.x();\n\n// set x\nnode.x(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4818,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1753
  },
  {
    "id": "Konva.Arrow#y",
    "longname": "Konva.Arrow#y",
    "name": "y",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#y",
    "inherited": true,
    "description": "get/set y position",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get y\nvar y = node.y();\n\n// set y\nnode.y(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4832,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1754
  },
  {
    "id": "Konva.Arrow#globalCompositeOperation",
    "longname": "Konva.Arrow#globalCompositeOperation",
    "name": "globalCompositeOperation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#globalCompositeOperation",
    "inherited": true,
    "description": "get/set globalCompositeOperation of a node. globalCompositeOperation DOESN'T affect hit graph of nodes. So they are still trigger to events as they have default \"source-over\" globalCompositeOperation.",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "type"
      }
    ],
    "examples": [
      "// get globalCompositeOperation\nvar globalCompositeOperation = shape.globalCompositeOperation();\n\n// set globalCompositeOperation\nshape.globalCompositeOperation('source-in');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4846,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1755
  },
  {
    "id": "Konva.Arrow#opacity",
    "longname": "Konva.Arrow#opacity",
    "name": "opacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#opacity",
    "inherited": true,
    "description": "get/set opacity.  Opacity values range from 0 to 1.\n A node with an opacity of 0 is fully transparent, and a node\n with an opacity of 1 is fully opaque",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "opacity"
      }
    ],
    "examples": [
      "// get opacity\nvar opacity = node.opacity();\n\n// set opacity\nnode.opacity(0.5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4860,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1756
  },
  {
    "id": "Konva.Arrow#name",
    "longname": "Konva.Arrow#name",
    "name": "name",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#name",
    "inherited": true,
    "description": "get/set name.",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "// get name\nvar name = node.name();\n\n// set name\nnode.name('foo');\n\n// also node may have multiple names (as css classes)\nnode.name('foo bar');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4876,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1757
  },
  {
    "id": "Konva.Arrow#id",
    "longname": "Konva.Arrow#id",
    "name": "id",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#id",
    "inherited": true,
    "description": "get/set id. Id is global for whole page.",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "id"
      }
    ],
    "examples": [
      "// get id\nvar name = node.id();\n\n// set id\nnode.id('foo');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4893,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1758
  },
  {
    "id": "Konva.Arrow#rotation",
    "longname": "Konva.Arrow#rotation",
    "name": "rotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#rotation",
    "inherited": true,
    "description": "get/set rotation in degrees",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get rotation in degrees\nvar rotation = node.rotation();\n\n// set rotation in degrees\nnode.rotation(45);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4907,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1759
  },
  {
    "id": "Konva.Arrow#scale",
    "longname": "Konva.Arrow#scale",
    "name": "scale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scale",
    "inherited": true,
    "description": "get/set scale",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.y"
      }
    ],
    "examples": [
      "// get scale\nvar scale = node.scale();\n\n// set scale\nshape.scale({\n  x: 2,\n  y: 3\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4921,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1760
  },
  {
    "id": "Konva.Arrow#scaleX",
    "longname": "Konva.Arrow#scaleX",
    "name": "scaleX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scaleX",
    "inherited": true,
    "description": "get/set scale x",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get scale x\nvar scaleX = node.scaleX();\n\n// set scale x\nnode.scaleX(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4940,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1761
  },
  {
    "id": "Konva.Arrow#scaleY",
    "longname": "Konva.Arrow#scaleY",
    "name": "scaleY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scaleY",
    "inherited": true,
    "description": "get/set scale y",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get scale y\nvar scaleY = node.scaleY();\n\n// set scale y\nnode.scaleY(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4954,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1762
  },
  {
    "id": "Konva.Arrow#skew",
    "longname": "Konva.Arrow#skew",
    "name": "skew",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skew",
    "inherited": true,
    "description": "get/set skew",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "skew"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "skew.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "skew.y"
      }
    ],
    "examples": [
      "// get skew\nvar skew = node.skew();\n\n// set skew\nnode.skew({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4968,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1763
  },
  {
    "id": "Konva.Arrow#skewX",
    "longname": "Konva.Arrow#skewX",
    "name": "skewX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skewX",
    "inherited": true,
    "description": "get/set skew x",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get skew x\nvar skewX = node.skewX();\n\n// set skew x\nnode.skewX(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4987,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1764
  },
  {
    "id": "Konva.Arrow#skewY",
    "longname": "Konva.Arrow#skewY",
    "name": "skewY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skewY",
    "inherited": true,
    "description": "get/set skew y",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get skew y\nvar skewY = node.skewY();\n\n// set skew y\nnode.skewY(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5001,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1765
  },
  {
    "id": "Konva.Arrow#offsetX",
    "longname": "Konva.Arrow#offsetX",
    "name": "offsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#offsetX",
    "inherited": true,
    "description": "get/set offset x",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get offset x\nvar offsetX = node.offsetX();\n\n// set offset x\nnode.offsetX(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5033,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1766
  },
  {
    "id": "Konva.Arrow#offsetY",
    "longname": "Konva.Arrow#offsetY",
    "name": "offsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#offsetY",
    "inherited": true,
    "description": "get/set offset y",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get offset y\nvar offsetY = node.offsetY();\n\n// set offset y\nnode.offsetY(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5047,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1767
  },
  {
    "id": "Konva.Arrow#dragDistance",
    "longname": "Konva.Arrow#dragDistance",
    "name": "dragDistance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#dragDistance",
    "inherited": true,
    "description": "get/set drag distance",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "distance"
      }
    ],
    "examples": [
      "// get drag distance\nvar dragDistance = node.dragDistance();\n\n// set distance\n// node starts dragging only if pointer moved more then 3 pixels\nnode.dragDistance(3);\n// or set globally\nKonva.dragDistance = 3;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5061,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1768
  },
  {
    "id": "Konva.Arrow#width",
    "longname": "Konva.Arrow#width",
    "name": "width",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#width",
    "inherited": true,
    "description": "get/set width",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "width"
      }
    ],
    "examples": [
      "// get width\nvar width = node.width();\n\n// set width\nnode.width(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5078,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1769
  },
  {
    "id": "Konva.Arrow#height",
    "longname": "Konva.Arrow#height",
    "name": "height",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#height",
    "inherited": true,
    "description": "get/set height",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "height"
      }
    ],
    "examples": [
      "// get height\nvar height = node.height();\n\n// set height\nnode.height(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5092,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1770
  },
  {
    "id": "Konva.Arrow#listening",
    "longname": "Konva.Arrow#listening",
    "name": "listening",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#listening",
    "inherited": true,
    "description": "get/set listening attr.  If you need to determine if a node is listening or not\n  by taking into account its parents, use the isListening() method\n  nodes with listening set to false will not be detected in hit graph\n  so they will be ignored in container.getIntersection() method",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "Can be true, or false.  The default is true.",
        "name": "listening"
      }
    ],
    "examples": [
      "// get listening attr\nvar listening = node.listening();\n\n// stop listening for events, remove node and all its children from hit graph\nnode.listening(false);\n\n// listen to events according to the parent\nnode.listening(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5106,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1771
  },
  {
    "id": "Konva.Arrow#preventDefault",
    "longname": "Konva.Arrow#preventDefault",
    "name": "preventDefault",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#preventDefault",
    "inherited": true,
    "description": "get/set preventDefault\nBy default all shapes will prevent default behavior\nof a browser on a pointer move or tap.\nthat will prevent native scrolling when you are trying to drag&drop a node\nbut sometimes you may need to enable default actions\nin that case you can set the property to false",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "preventDefault"
      }
    ],
    "examples": [
      "// get preventDefault\nvar shouldPrevent = shape.preventDefault();\n\n// set preventDefault\nshape.preventDefault(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5125,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1772
  },
  {
    "id": "Konva.Arrow#filters",
    "longname": "Konva.Arrow#filters",
    "name": "filters",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#filters",
    "inherited": true,
    "description": "get/set filters.  Filters are applied to cached canvases",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "array of filters",
        "name": "filters"
      }
    ],
    "examples": [
      "// get filters\nvar filters = node.filters();\n\n// set a single filter\nnode.cache();\nnode.filters([Konva.Filters.Blur]);\n\n// set multiple filters\nnode.cache();\nnode.filters([\n  Konva.Filters.Blur,\n  Konva.Filters.Sepia,\n  Konva.Filters.Invert\n]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5148,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1773
  },
  {
    "id": "Konva.Arrow#visible",
    "longname": "Konva.Arrow#visible",
    "name": "visible",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#visible",
    "inherited": true,
    "description": "get/set visible attr.  Can be true, or false.  The default is true.\n  If you need to determine if a node is visible or not\n  by taking into account its parents, use the isVisible() method",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "visible"
      }
    ],
    "examples": [
      "// get visible attr\nvar visible = node.visible();\n\n// make invisible\nnode.visible(false);\n\n// make visible (according to the parent)\nnode.visible(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5171,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1774
  },
  {
    "id": "Konva.Arrow#transformsEnabled",
    "longname": "Konva.Arrow#transformsEnabled",
    "name": "transformsEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#transformsEnabled",
    "inherited": true,
    "description": "get/set transforms that are enabled.  Can be \"all\", \"none\", or \"position\".  The default\n is \"all\"",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// enable position transform only to improve draw performance\nnode.transformsEnabled('position');\n\n// enable all transforms\nnode.transformsEnabled('all');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5191,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1775
  },
  {
    "id": "Konva.Arrow#size",
    "longname": "Konva.Arrow#size",
    "name": "size",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#size",
    "inherited": true,
    "description": "get/set node size",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "size"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size.height"
      }
    ],
    "examples": [
      "// get node size\nvar size = node.size();\nvar width = size.width;\nvar height = size.height;\n\n// set size\nnode.size({\n  width: 100,\n  height: 200\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5205,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1776
  },
  {
    "id": "Konva.Arrow#dragBoundFunc",
    "longname": "Konva.Arrow#dragBoundFunc",
    "name": "dragBoundFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#dragBoundFunc",
    "inherited": true,
    "description": "get/set drag bound function.  This is used to override the default\n drag and drop position.",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "name": "dragBoundFunc"
      }
    ],
    "examples": [
      "// get drag bound function\nvar dragBoundFunc = node.dragBoundFunc();\n\n// create vertical drag and drop\nnode.dragBoundFunc(function(pos){\n  // important pos - is absolute position of the node\n  // you should return absolute position too\n  return {\n    x: this.absolutePosition().x,\n    y: pos.y\n  };\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5226,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1777
  },
  {
    "id": "Konva.Arrow#draggable",
    "longname": "Konva.Arrow#draggable",
    "name": "draggable",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#draggable",
    "inherited": true,
    "description": "get/set draggable flag",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "draggable"
      }
    ],
    "examples": [
      "// get draggable flag\nvar draggable = node.draggable();\n\n// enable drag and drop\nnode.draggable(true);\n\n// disable drag and drop\nnode.draggable(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5248,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1778
  },
  {
    "id": "Konva.Arrow#to",
    "longname": "Konva.Arrow#to",
    "name": "to",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#to",
    "inherited": true,
    "description": "Tween node properties. Shorter usage of {@link Konva.Tween} object.",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "tween params",
        "name": "params"
      }
    ],
    "examples": [
      "circle.to({\n  x : 50,\n  duration : 0.5,\n  onUpdate: () => console.log('props updated'),\n  onFinish: () => console.log('finished'),\n});"
    ],
    "meta": {
      "lineno": 9588,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1779
  },
  {
    "id": "Konva.Arrow#blurRadius",
    "longname": "Konva.Arrow#blurRadius",
    "name": "blurRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#blurRadius",
    "inherited": true,
    "description": "get/set blur radius. Use with {@link Konva.Filters.Blur} filter",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "radius"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17517,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1780
  },
  {
    "id": "Konva.Arrow#brightness",
    "longname": "Konva.Arrow#brightness",
    "name": "brightness",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#brightness",
    "inherited": true,
    "description": "get/set filter brightness.  The brightness is a number between -1 and 1.&nbsp; Positive values\n brighten the pixels and negative values darken them. Use with {@link Konva.Filters.Brighten} filter.",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between -1 and 1",
        "name": "brightness"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17547,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1781
  },
  {
    "id": "Konva.Arrow#contrast",
    "longname": "Konva.Arrow#contrast",
    "name": "contrast",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#contrast",
    "inherited": true,
    "description": "get/set filter contrast.  The contrast is a number between -100 and 100.\nUse with {@link Konva.Filters.Contrast} filter.",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between -100 and 100",
        "name": "contrast"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17600,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1782
  },
  {
    "id": "Konva.Arrow#embossStrength",
    "longname": "Konva.Arrow#embossStrength",
    "name": "embossStrength",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossStrength",
    "inherited": true,
    "description": "get/set emboss strength. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1.  Default is 0.5",
        "name": "level"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17725,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1783
  },
  {
    "id": "Konva.Arrow#embossWhiteLevel",
    "longname": "Konva.Arrow#embossWhiteLevel",
    "name": "embossWhiteLevel",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossWhiteLevel",
    "inherited": true,
    "description": "get/set emboss white level. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1.  Default is 0.5",
        "name": "embossWhiteLevel"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17733,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1784
  },
  {
    "id": "Konva.Arrow#embossDirection",
    "longname": "Konva.Arrow#embossDirection",
    "name": "embossDirection",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossDirection",
    "inherited": true,
    "description": "get/set emboss direction. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "can be top-left, top, top-right, right, bottom-right, bottom, bottom-left or left\n  The default is top-left",
        "name": "embossDirection"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17741,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1785
  },
  {
    "id": "Konva.Arrow#embossBlend",
    "longname": "Konva.Arrow#embossBlend",
    "name": "embossBlend",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossBlend",
    "inherited": true,
    "description": "get/set emboss blend. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "embossBlend"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17750,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1786
  },
  {
    "id": "Konva.Arrow#enhance",
    "longname": "Konva.Arrow#enhance",
    "name": "enhance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#enhance",
    "inherited": true,
    "description": "get/set enhance. Use with {@link Konva.Filters.Enhance} filter. -1 to 1 values",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Float"
          ]
        },
        "name": "amount"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Float"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17864,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1787
  },
  {
    "id": "Konva.Arrow#hue",
    "longname": "Konva.Arrow#hue",
    "name": "hue",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hue",
    "inherited": true,
    "description": "get/set hsv hue in degrees. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between 0 and 359",
        "name": "hue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17896,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1788
  },
  {
    "id": "Konva.Arrow#saturation",
    "longname": "Konva.Arrow#saturation",
    "name": "saturation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#saturation",
    "inherited": true,
    "description": "get/set hsv saturation. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the saturation, 1.0 doubles, etc..",
        "name": "saturation"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17904,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1789
  },
  {
    "id": "Konva.Arrow#luminance",
    "longname": "Konva.Arrow#luminance",
    "name": "luminance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#luminance",
    "inherited": true,
    "description": "get/set hsl luminance. Use with {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "from -1 to 1",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17912,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1790
  },
  {
    "id": "Konva.Arrow#value",
    "longname": "Konva.Arrow#value",
    "name": "value",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#value",
    "inherited": true,
    "description": "get/set hsv value. Use with {@link Konva.Filters.HSV} filter.",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the value, 1.0 doubles, etc..",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18018,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1791
  },
  {
    "id": "Konva.Arrow#kaleidoscopePower",
    "longname": "Konva.Arrow#kaleidoscopePower",
    "name": "kaleidoscopePower",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#kaleidoscopePower",
    "inherited": true,
    "description": "get/set kaleidoscope power. Use with {@link Konva.Filters.Kaleidoscope} filter.",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "of kaleidoscope",
        "name": "power"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18243,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1792
  },
  {
    "id": "Konva.Arrow#kaleidoscopeAngle",
    "longname": "Konva.Arrow#kaleidoscopeAngle",
    "name": "kaleidoscopeAngle",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#kaleidoscopeAngle",
    "inherited": true,
    "description": "get/set kaleidoscope angle. Use with {@link Konva.Filters.Kaleidoscope} filter.",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "degrees"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18251,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1793
  },
  {
    "id": "Konva.Arrow#noise",
    "longname": "Konva.Arrow#noise",
    "name": "noise",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#noise",
    "inherited": true,
    "description": "get/set noise amount.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Noise} filter.",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "noise"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18437,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1794
  },
  {
    "id": "Konva.Arrow#pixelSize",
    "longname": "Konva.Arrow#pixelSize",
    "name": "pixelSize",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#pixelSize",
    "inherited": true,
    "description": "get/set pixel size. Use with {@link Konva.Filters.Pixelate} filter.",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "pixelSize"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18522,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1795
  },
  {
    "id": "Konva.Arrow#levels",
    "longname": "Konva.Arrow#levels",
    "name": "levels",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#levels",
    "inherited": true,
    "description": "get/set levels.  Must be a number between 0 and 1.  Use with {@link Konva.Filters.Posterize} filter.",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1",
        "name": "level"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18552,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1796
  },
  {
    "id": "Konva.Arrow#red",
    "longname": "Konva.Arrow#red",
    "name": "red",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#red",
    "inherited": true,
    "description": "get/set filter red value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "red"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18596,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1797
  },
  {
    "id": "Konva.Arrow#green",
    "longname": "Konva.Arrow#green",
    "name": "green",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#green",
    "inherited": true,
    "description": "get/set filter green value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "green"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18616,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1798
  },
  {
    "id": "Konva.Arrow#blue",
    "longname": "Konva.Arrow#blue",
    "name": "blue",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#blue",
    "inherited": true,
    "description": "get/set filter blue value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "blue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18625,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1799
  },
  {
    "id": "Konva.Arrow#alpha",
    "longname": "Konva.Arrow#alpha",
    "name": "alpha",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#alpha",
    "inherited": true,
    "description": "get/set filter alpha value. Use with {@link Konva.Filters.RGBA} filter.",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Float"
          ]
        },
        "description": "value between 0 and 1",
        "name": "alpha"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Float"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18718,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1800
  },
  {
    "id": "Konva.Arrow#threshold",
    "longname": "Konva.Arrow#threshold",
    "name": "threshold",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#threshold",
    "inherited": true,
    "description": "get/set threshold.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Threshold} or {@link Konva.Filters.Mask} filter.",
    "memberof": "Konva.Arrow",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "threshold"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18809,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1801
  },
  {
    "id": "Konva.Circle#hasShadow",
    "longname": "Konva.Circle#hasShadow",
    "name": "hasShadow",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasShadow",
    "inherited": true,
    "description": "returns whether or not a shadow will be rendered",
    "memberof": "Konva.Circle",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 6909,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1802
  },
  {
    "id": "Konva.Circle#hasFill",
    "longname": "Konva.Circle#hasFill",
    "name": "hasFill",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasFill",
    "inherited": true,
    "description": "returns whether or not the shape will be filled",
    "memberof": "Konva.Circle",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7009,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1803
  },
  {
    "id": "Konva.Circle#hasStroke",
    "longname": "Konva.Circle#hasStroke",
    "name": "hasStroke",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasStroke",
    "inherited": true,
    "description": "returns whether or not the shape will be stroked",
    "memberof": "Konva.Circle",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7030,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1804
  },
  {
    "id": "Konva.Circle#intersects",
    "longname": "Konva.Circle#intersects",
    "name": "intersects",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#intersects",
    "inherited": true,
    "description": "determines if point is in the shape, regardless if other shapes are on top of it.  Note: because\n this method clears a temporary canvas and then redraws the shape, it performs very poorly if executed many times\n consecutively.  Please use the {@link Konva.Stage#getIntersection} method if at all possible\n because it performs much better",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "point"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "point.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "point.y"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7066,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1805
  },
  {
    "id": "Konva.Circle#getSelfRect",
    "longname": "Konva.Circle#getSelfRect",
    "name": "getSelfRect",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#getSelfRect",
    "inherited": true,
    "description": "return self rectangle (x, y, width, height) of shape.\nThis method are not taken into account transformation and styles.",
    "memberof": "Konva.Circle",
    "examples": [
      "rect.getSelfRect();  // return {x:0, y:0, width:rect.width(), height:rect.height()}\ncircle.getSelfRect();  // return {x: - circle.width() / 2, y: - circle.height() / 2, width:circle.width(), height:circle.height()}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "rect with `{x, y, width, height}` properties"
      }
    ],
    "meta": {
      "lineno": 7138,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1806
  },
  {
    "id": "Konva.Circle#drawHitFromCache",
    "longname": "Konva.Circle#drawHitFromCache",
    "name": "drawHitFromCache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#drawHitFromCache",
    "inherited": true,
    "description": "draw hit graph using the cached scene canvas",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "alpha channel threshold that determines whether or not\n a pixel should be drawn onto the hit graph.  Must be a value between 0 and 255.\n The default is 0",
        "name": "alphaThreshold"
      }
    ],
    "examples": [
      "shape.cache();\nshape.drawHitFromCache();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7294,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1807
  },
  {
    "id": "Konva.Circle#stroke",
    "longname": "Konva.Circle#stroke",
    "name": "stroke",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#stroke",
    "inherited": true,
    "description": "get/set stroke color",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get stroke color\nvar stroke = shape.stroke();\n\n// set stroke color with color string\nshape.stroke('green');\n\n// set stroke color with hex\nshape.stroke('#00ff00');\n\n// set stroke color with rgb\nshape.stroke('rgb(0,255,0)');\n\n// set stroke color with rgba and make it 50% opaque\nshape.stroke('rgba(0,255,0,0.5');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7360,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1808
  },
  {
    "id": "Konva.Circle#strokeWidth",
    "longname": "Konva.Circle#strokeWidth",
    "name": "strokeWidth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeWidth",
    "inherited": true,
    "description": "get/set stroke width",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "strokeWidth"
      }
    ],
    "examples": [
      "// get stroke width\nvar strokeWidth = shape.strokeWidth();\n\n// set stroke width\nshape.strokeWidth(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7383,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1809
  },
  {
    "id": "Konva.Circle#fillAfterStrokeEnabled",
    "longname": "Konva.Circle#fillAfterStrokeEnabled",
    "name": "fillAfterStrokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillAfterStrokeEnabled",
    "inherited": true,
    "description": "get/set fillAfterStrokeEnabled property. By default Konva is drawing filling first, then stroke on top of the fill.\nIn rare situations you may want a different behavior. When you have a stroke first then fill on top of it.\nEspecially useful for Text objects.\nDefault is false.",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "fillAfterStrokeEnabled"
      }
    ],
    "examples": [
      "// get stroke width\nvar fillAfterStrokeEnabled = shape.fillAfterStrokeEnabled();\n\n// set stroke width\nshape.fillAfterStrokeEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7397,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1810
  },
  {
    "id": "Konva.Circle#hitStrokeWidth",
    "longname": "Konva.Circle#hitStrokeWidth",
    "name": "hitStrokeWidth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hitStrokeWidth",
    "inherited": true,
    "description": "get/set stroke width for hit detection. Default value is \"auto\", it means it will be equals to strokeWidth",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "hitStrokeWidth"
      }
    ],
    "examples": [
      "// get stroke width\nvar hitStrokeWidth = shape.hitStrokeWidth();\n\n// set hit stroke width\nshape.hitStrokeWidth(20);\n// set hit stroke width always equals to scene stroke width\nshape.hitStrokeWidth('auto');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7414,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1811
  },
  {
    "id": "Konva.Circle#strokeHitEnabled",
    "longname": "Konva.Circle#strokeHitEnabled",
    "name": "strokeHitEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeHitEnabled",
    "inherited": true,
    "description": "**deprecated, use hitStrokeWidth instead!** get/set strokeHitEnabled property. Useful for performance optimization.\nYou may set `shape.strokeHitEnabled(false)`. In this case stroke will be no draw on hit canvas, so hit area\nof shape will be decreased (by lineWidth / 2). Remember that non closed line with `strokeHitEnabled = false`\nwill be not drawn on hit canvas, that is mean line will no trigger pointer events (like mouseover)\nDefault value is true.",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "strokeHitEnabled"
      }
    ],
    "examples": [
      "// get strokeHitEnabled\nvar strokeHitEnabled = shape.strokeHitEnabled();\n\n// set strokeHitEnabled\nshape.strokeHitEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7430,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1812
  },
  {
    "id": "Konva.Circle#perfectDrawEnabled",
    "longname": "Konva.Circle#perfectDrawEnabled",
    "name": "perfectDrawEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#perfectDrawEnabled",
    "inherited": true,
    "description": "get/set perfectDrawEnabled. If a shape has fill, stroke and opacity you may set `perfectDrawEnabled` to false to improve performance.\nSee http://konvajs.org/docs/performance/Disable_Perfect_Draw.html for more information.\nDefault value is true",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "perfectDrawEnabled"
      }
    ],
    "examples": [
      "// get perfectDrawEnabled\nvar perfectDrawEnabled = shape.perfectDrawEnabled();\n\n// set perfectDrawEnabled\nshape.perfectDrawEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7448,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1813
  },
  {
    "id": "Konva.Circle#shadowForStrokeEnabled",
    "longname": "Konva.Circle#shadowForStrokeEnabled",
    "name": "shadowForStrokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowForStrokeEnabled",
    "inherited": true,
    "description": "get/set shadowForStrokeEnabled. Useful for performance optimization.\nYou may set `shape.shadowForStrokeEnabled(false)`. In this case stroke will no effect shadow.\nRemember if you set `shadowForStrokeEnabled = false` for non closed line - that line will have no shadow!.\nDefault value is true",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "shadowForStrokeEnabled"
      }
    ],
    "examples": [
      "// get shadowForStrokeEnabled\nvar shadowForStrokeEnabled = shape.shadowForStrokeEnabled();\n\n// set shadowForStrokeEnabled\nshape.shadowForStrokeEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7464,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1814
  },
  {
    "id": "Konva.Circle#lineJoin",
    "longname": "Konva.Circle#lineJoin",
    "name": "lineJoin",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#lineJoin",
    "inherited": true,
    "description": "get/set line join.  Can be miter, round, or bevel.  The\n default is miter",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "lineJoin"
      }
    ],
    "examples": [
      "// get line join\nvar lineJoin = shape.lineJoin();\n\n// set line join\nshape.lineJoin('round');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7481,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1815
  },
  {
    "id": "Konva.Circle#lineCap",
    "longname": "Konva.Circle#lineCap",
    "name": "lineCap",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#lineCap",
    "inherited": true,
    "description": "get/set line cap.  Can be butt, round, or square",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "lineCap"
      }
    ],
    "examples": [
      "// get line cap\nvar lineCap = shape.lineCap();\n\n// set line cap\nshape.lineCap('round');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7496,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1816
  },
  {
    "id": "Konva.Circle#sceneFunc",
    "longname": "Konva.Circle#sceneFunc",
    "name": "sceneFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#sceneFunc",
    "inherited": true,
    "description": "get/set scene draw function. That function is used to draw the shape on a canvas.\nAlso that function will be used to draw hit area of the shape, in case if hitFunc is not defined.",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "drawing function",
        "name": "drawFunc"
      }
    ],
    "examples": [
      "// get scene draw function\nvar sceneFunc = shape.sceneFunc();\n\n// set scene draw function\nshape.sceneFunc(function(context, shape) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  // like stroke and fill\n  context.fillStrokeShape(shape);\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7510,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1817
  },
  {
    "id": "Konva.Circle#hitFunc",
    "longname": "Konva.Circle#hitFunc",
    "name": "hitFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hitFunc",
    "inherited": true,
    "description": "get/set hit draw function. That function is used to draw custom hit area of a shape.",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "drawing function",
        "name": "drawFunc"
      }
    ],
    "examples": [
      "// get hit draw function\nvar hitFunc = shape.hitFunc();\n\n// set hit draw function\nshape.hitFunc(function(context) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  context.fillStrokeShape(shape);\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7532,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1818
  },
  {
    "id": "Konva.Circle#dash",
    "longname": "Konva.Circle#dash",
    "name": "dash",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#dash",
    "inherited": true,
    "overrides": "Konva.Shape#dash",
    "description": "get/set dash array for stroke.",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "dash"
      }
    ],
    "examples": [
      "// apply dashed stroke that is 10px long and 5 pixels apart\n line.dash([10, 5]);\n // apply dashed stroke that is made up of alternating dashed\n // lines that are 10px long and 20px apart, and dots that have\n // a radius of 5px and are 20px apart\n line.dash([10, 20, 0.001, 20]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7552,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1819
  },
  {
    "id": "Konva.Circle#shadowColor",
    "longname": "Konva.Circle#shadowColor",
    "name": "shadowColor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowColor",
    "inherited": true,
    "description": "get/set shadow color",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get shadow color\nvar shadow = shape.shadowColor();\n\n// set shadow color with color string\nshape.shadowColor('green');\n\n// set shadow color with hex\nshape.shadowColor('#00ff00');\n\n// set shadow color with rgb\nshape.shadowColor('rgb(0,255,0)');\n\n// set shadow color with rgba and make it 50% opaque\nshape.shadowColor('rgba(0,255,0,0.5');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7579,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1820
  },
  {
    "id": "Konva.Circle#shadowBlur",
    "longname": "Konva.Circle#shadowBlur",
    "name": "shadowBlur",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowBlur",
    "inherited": true,
    "description": "get/set shadow blur",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "blur"
      }
    ],
    "examples": [
      "// get shadow blur\nvar shadowBlur = shape.shadowBlur();\n\n// set shadow blur\nshape.shadowBlur(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7602,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1821
  },
  {
    "id": "Konva.Circle#shadowOpacity",
    "longname": "Konva.Circle#shadowOpacity",
    "name": "shadowOpacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOpacity",
    "inherited": true,
    "description": "get/set shadow opacity.  must be a value between 0 and 1",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "opacity"
      }
    ],
    "examples": [
      "// get shadow opacity\nvar shadowOpacity = shape.shadowOpacity();\n\n// set shadow opacity\nshape.shadowOpacity(0.5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7616,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1822
  },
  {
    "id": "Konva.Circle#shadowOffset",
    "longname": "Konva.Circle#shadowOffset",
    "name": "shadowOffset",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffset",
    "inherited": true,
    "description": "get/set shadow offset",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.y"
      }
    ],
    "examples": [
      "// get shadow offset\nvar shadowOffset = shape.shadowOffset();\n\n// set shadow offset\nshape.shadowOffset({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7630,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1823
  },
  {
    "id": "Konva.Circle#shadowOffsetX",
    "longname": "Konva.Circle#shadowOffsetX",
    "name": "shadowOffsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffsetX",
    "inherited": true,
    "description": "get/set shadow offset x",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get shadow offset x\nvar shadowOffsetX = shape.shadowOffsetX();\n\n// set shadow offset x\nshape.shadowOffsetX(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7649,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1824
  },
  {
    "id": "Konva.Circle#shadowOffsetY",
    "longname": "Konva.Circle#shadowOffsetY",
    "name": "shadowOffsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffsetY",
    "inherited": true,
    "description": "get/set shadow offset y",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get shadow offset y\nvar shadowOffsetY = shape.shadowOffsetY();\n\n// set shadow offset y\nshape.shadowOffsetY(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7663,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1825
  },
  {
    "id": "Konva.Circle#fillPatternImage",
    "longname": "Konva.Circle#fillPatternImage",
    "name": "fillPatternImage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternImage",
    "inherited": true,
    "description": "get/set fill pattern image",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Image"
          ]
        },
        "description": "object",
        "name": "image"
      }
    ],
    "examples": [
      "// get fill pattern image\nvar fillPatternImage = shape.fillPatternImage();\n\n// set fill pattern image\nvar imageObj = new Image();\nimageObj.onload = function() {\n  shape.fillPatternImage(imageObj);\n};\nimageObj.src = 'path/to/image/jpg';"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Image"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7677,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1826
  },
  {
    "id": "Konva.Circle#fill",
    "longname": "Konva.Circle#fill",
    "name": "fill",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fill",
    "inherited": true,
    "description": "get/set fill color",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get fill color\nvar fill = shape.fill();\n\n// set fill color with color string\nshape.fill('green');\n\n// set fill color with hex\nshape.fill('#00ff00');\n\n// set fill color with rgb\nshape.fill('rgb(0,255,0)');\n\n// set fill color with rgba and make it 50% opaque\nshape.fill('rgba(0,255,0,0.5');\n\n// shape without fill\nshape.fill(null);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7695,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1827
  },
  {
    "id": "Konva.Circle#fillPatternX",
    "longname": "Konva.Circle#fillPatternX",
    "name": "fillPatternX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternX",
    "inherited": true,
    "description": "get/set fill pattern x",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern x\nvar fillPatternX = shape.fillPatternX();\n// set fill pattern x\nshape.fillPatternX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7721,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1828
  },
  {
    "id": "Konva.Circle#fillPatternY",
    "longname": "Konva.Circle#fillPatternY",
    "name": "fillPatternY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternY",
    "inherited": true,
    "description": "get/set fill pattern y",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern y\nvar fillPatternY = shape.fillPatternY();\n// set fill pattern y\nshape.fillPatternY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7734,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1829
  },
  {
    "id": "Konva.Circle#fillLinearGradientColorStops",
    "longname": "Konva.Circle#fillLinearGradientColorStops",
    "name": "fillLinearGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientColorStops",
    "inherited": true,
    "description": "get/set fill linear gradient color stops",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get fill linear gradient color stops\nvar colorStops = shape.fillLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillLinearGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "colorStops"
      }
    ],
    "meta": {
      "lineno": 7747,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1830
  },
  {
    "id": "Konva.Circle#strokeLinearGradientColorStops",
    "longname": "Konva.Circle#strokeLinearGradientColorStops",
    "name": "strokeLinearGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientColorStops",
    "inherited": true,
    "description": "get/set stroke linear gradient color stops",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get stroke linear gradient color stops\nvar colorStops = shape.strokeLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.strokeLinearGradientColorStops([0, 'red', 0.5, 'blue', 1, 'green']);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "colorStops"
      }
    ],
    "meta": {
      "lineno": 7762,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1831
  },
  {
    "id": "Konva.Circle#fillRadialGradientStartRadius",
    "longname": "Konva.Circle#fillRadialGradientStartRadius",
    "name": "fillRadialGradientStartRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartRadius",
    "inherited": true,
    "description": "get/set fill radial gradient start radius",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "radius"
      }
    ],
    "examples": [
      "// get radial gradient start radius\nvar startRadius = shape.fillRadialGradientStartRadius();\n\n// set radial gradient start radius\nshape.fillRadialGradientStartRadius(0);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7777,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1832
  },
  {
    "id": "Konva.Circle#fillRadialGradientEndRadius",
    "longname": "Konva.Circle#fillRadialGradientEndRadius",
    "name": "fillRadialGradientEndRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndRadius",
    "inherited": true,
    "description": "get/set fill radial gradient end radius",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "radius"
      }
    ],
    "examples": [
      "// get radial gradient end radius\nvar endRadius = shape.fillRadialGradientEndRadius();\n\n// set radial gradient end radius\nshape.fillRadialGradientEndRadius(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7791,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1833
  },
  {
    "id": "Konva.Circle#fillRadialGradientColorStops",
    "longname": "Konva.Circle#fillRadialGradientColorStops",
    "name": "fillRadialGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientColorStops",
    "inherited": true,
    "description": "get/set fill radial gradient color stops",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get fill radial gradient color stops\nvar colorStops = shape.fillRadialGradientColorStops();\n\n// create a radial gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillRadialGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7805,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1834
  },
  {
    "id": "Konva.Circle#fillPatternRepeat",
    "longname": "Konva.Circle#fillPatternRepeat",
    "name": "fillPatternRepeat",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternRepeat",
    "inherited": true,
    "description": "get/set fill pattern repeat.  Can be 'repeat', 'repeat-x', 'repeat-y', or 'no-repeat'.  The default is 'repeat'",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "repeat"
      }
    ],
    "examples": [
      "// get fill pattern repeat\nvar repeat = shape.fillPatternRepeat();\n\n// repeat pattern in x direction only\nshape.fillPatternRepeat('repeat-x');\n\n// do not repeat the pattern\nshape.fillPatternRepeat('no-repeat');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7820,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1835
  },
  {
    "id": "Konva.Circle#fillEnabled",
    "longname": "Konva.Circle#fillEnabled",
    "name": "fillEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillEnabled",
    "inherited": true,
    "description": "get/set fill enabled flag",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get fill enabled flag\nvar fillEnabled = shape.fillEnabled();\n\n// disable fill\nshape.fillEnabled(false);\n\n// enable fill\nshape.fillEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7837,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1836
  },
  {
    "id": "Konva.Circle#strokeEnabled",
    "longname": "Konva.Circle#strokeEnabled",
    "name": "strokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeEnabled",
    "inherited": true,
    "description": "get/set stroke enabled flag",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get stroke enabled flag\nvar strokeEnabled = shape.strokeEnabled();\n\n// disable stroke\nshape.strokeEnabled(false);\n\n// enable stroke\nshape.strokeEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7854,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1837
  },
  {
    "id": "Konva.Circle#shadowEnabled",
    "longname": "Konva.Circle#shadowEnabled",
    "name": "shadowEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowEnabled",
    "inherited": true,
    "description": "get/set shadow enabled flag",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get shadow enabled flag\nvar shadowEnabled = shape.shadowEnabled();\n\n// disable shadow\nshape.shadowEnabled(false);\n\n// enable shadow\nshape.shadowEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7871,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1838
  },
  {
    "id": "Konva.Circle#dashEnabled",
    "longname": "Konva.Circle#dashEnabled",
    "name": "dashEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#dashEnabled",
    "inherited": true,
    "description": "get/set dash enabled flag",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get dash enabled flag\nvar dashEnabled = shape.dashEnabled();\n\n// disable dash\nshape.dashEnabled(false);\n\n// enable dash\nshape.dashEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7888,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1839
  },
  {
    "id": "Konva.Circle#strokeScaleEnabled",
    "longname": "Konva.Circle#strokeScaleEnabled",
    "name": "strokeScaleEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeScaleEnabled",
    "inherited": true,
    "description": "get/set strokeScale enabled flag",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get stroke scale enabled flag\nvar strokeScaleEnabled = shape.strokeScaleEnabled();\n\n// disable stroke scale\nshape.strokeScaleEnabled(false);\n\n// enable stroke scale\nshape.strokeScaleEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7905,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1840
  },
  {
    "id": "Konva.Circle#fillPriority",
    "longname": "Konva.Circle#fillPriority",
    "name": "fillPriority",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPriority",
    "inherited": true,
    "description": "get/set fill priority.  can be color, pattern, linear-gradient, or radial-gradient.  The default is color.\n  This is handy if you want to toggle between different fill types.",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "priority"
      }
    ],
    "examples": [
      "// get fill priority\nvar fillPriority = shape.fillPriority();\n\n// set fill priority\nshape.fillPriority('linear-gradient');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7922,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1841
  },
  {
    "id": "Konva.Circle#fillPatternOffset",
    "longname": "Konva.Circle#fillPatternOffset",
    "name": "fillPatternOffset",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffset",
    "inherited": true,
    "description": "get/set fill pattern offset",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.y"
      }
    ],
    "examples": [
      "// get fill pattern offset\nvar patternOffset = shape.fillPatternOffset();\n\n// set fill pattern offset\nshape.fillPatternOffset({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7937,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1842
  },
  {
    "id": "Konva.Circle#fillPatternOffsetX",
    "longname": "Konva.Circle#fillPatternOffsetX",
    "name": "fillPatternOffsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffsetX",
    "inherited": true,
    "description": "get/set fill pattern offset x",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern offset x\nvar patternOffsetX = shape.fillPatternOffsetX();\n\n// set fill pattern offset x\nshape.fillPatternOffsetX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7956,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1843
  },
  {
    "id": "Konva.Circle#fillPatternOffsetY",
    "longname": "Konva.Circle#fillPatternOffsetY",
    "name": "fillPatternOffsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffsetY",
    "inherited": true,
    "description": "get/set fill pattern offset y",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern offset y\nvar patternOffsetY = shape.fillPatternOffsetY();\n\n// set fill pattern offset y\nshape.fillPatternOffsetY(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7970,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1844
  },
  {
    "id": "Konva.Circle#fillPatternScale",
    "longname": "Konva.Circle#fillPatternScale",
    "name": "fillPatternScale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScale",
    "inherited": true,
    "description": "get/set fill pattern scale",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.y"
      }
    ],
    "examples": [
      "// get fill pattern scale\nvar patternScale = shape.fillPatternScale();\n\n// set fill pattern scale\nshape.fillPatternScale({\n  x: 2,\n  y: 2\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7984,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1845
  },
  {
    "id": "Konva.Circle#fillPatternScaleX",
    "longname": "Konva.Circle#fillPatternScaleX",
    "name": "fillPatternScaleX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScaleX",
    "inherited": true,
    "description": "get/set fill pattern scale x",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern scale x\nvar patternScaleX = shape.fillPatternScaleX();\n\n// set fill pattern scale x\nshape.fillPatternScaleX(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8003,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1846
  },
  {
    "id": "Konva.Circle#fillPatternScaleY",
    "longname": "Konva.Circle#fillPatternScaleY",
    "name": "fillPatternScaleY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScaleY",
    "inherited": true,
    "description": "get/set fill pattern scale y",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern scale y\nvar patternScaleY = shape.fillPatternScaleY();\n\n// set fill pattern scale y\nshape.fillPatternScaleY(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8017,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1847
  },
  {
    "id": "Konva.Circle#fillLinearGradientStartPoint",
    "longname": "Konva.Circle#fillLinearGradientStartPoint",
    "name": "fillLinearGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPoint",
    "inherited": true,
    "description": "get/set fill linear gradient start point",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get fill linear gradient start point\nvar startPoint = shape.fillLinearGradientStartPoint();\n\n// set fill linear gradient start point\nshape.fillLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8034,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1848
  },
  {
    "id": "Konva.Circle#strokeLinearGradientStartPoint",
    "longname": "Konva.Circle#strokeLinearGradientStartPoint",
    "name": "strokeLinearGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientStartPoint",
    "inherited": true,
    "description": "get/set stroke linear gradient start point",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point\nvar startPoint = shape.strokeLinearGradientStartPoint();\n\n// set stroke linear gradient start point\nshape.strokeLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8056,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1849
  },
  {
    "id": "Konva.Circle#fillLinearGradientStartPointX",
    "longname": "Konva.Circle#fillLinearGradientStartPointX",
    "name": "fillLinearGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPointX",
    "inherited": true,
    "description": "get/set fill linear gradient start point x",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill linear gradient start point x\nvar startPointX = shape.fillLinearGradientStartPointX();\n\n// set fill linear gradient start point x\nshape.fillLinearGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8075,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1850
  },
  {
    "id": "Konva.Circle#linearLinearGradientStartPointX",
    "longname": "Konva.Circle#linearLinearGradientStartPointX",
    "name": "linearLinearGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#linearLinearGradientStartPointX",
    "inherited": true,
    "description": "get/set stroke linear gradient start point x",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point x\nvar startPointX = shape.strokeLinearGradientStartPointX();\n\n// set stroke linear gradient start point x\nshape.strokeLinearGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8089,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1851
  },
  {
    "id": "Konva.Circle#fillLinearGradientStartPointY",
    "longname": "Konva.Circle#fillLinearGradientStartPointY",
    "name": "fillLinearGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPointY",
    "inherited": true,
    "description": "get/set fill linear gradient start point y",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill linear gradient start point y\nvar startPointY = shape.fillLinearGradientStartPointY();\n\n// set fill linear gradient start point y\nshape.fillLinearGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8103,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1852
  },
  {
    "id": "Konva.Circle#strokeLinearGradientStartPointY",
    "longname": "Konva.Circle#strokeLinearGradientStartPointY",
    "name": "strokeLinearGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientStartPointY",
    "inherited": true,
    "description": "get/set stroke linear gradient start point y",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point y\nvar startPointY = shape.strokeLinearGradientStartPointY();\n\n// set stroke linear gradient start point y\nshape.strokeLinearGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8117,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1853
  },
  {
    "id": "Konva.Circle#fillLinearGradientEndPoint",
    "longname": "Konva.Circle#fillLinearGradientEndPoint",
    "name": "fillLinearGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPoint",
    "inherited": true,
    "description": "get/set fill linear gradient end point",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get fill linear gradient end point\nvar endPoint = shape.fillLinearGradientEndPoint();\n\n// set fill linear gradient end point\nshape.fillLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8134,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1854
  },
  {
    "id": "Konva.Circle#strokeLinearGradientEndPoint",
    "longname": "Konva.Circle#strokeLinearGradientEndPoint",
    "name": "strokeLinearGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPoint",
    "inherited": true,
    "description": "get/set stroke linear gradient end point",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point\nvar endPoint = shape.strokeLinearGradientEndPoint();\n\n// set stroke linear gradient end point\nshape.strokeLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8156,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1855
  },
  {
    "id": "Konva.Circle#fillLinearGradientEndPointX",
    "longname": "Konva.Circle#fillLinearGradientEndPointX",
    "name": "fillLinearGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPointX",
    "inherited": true,
    "description": "get/set fill linear gradient end point x",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill linear gradient end point x\nvar endPointX = shape.fillLinearGradientEndPointX();\n\n// set fill linear gradient end point x\nshape.fillLinearGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8175,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1856
  },
  {
    "id": "Konva.Circle#strokeLinearGradientEndPointX",
    "longname": "Konva.Circle#strokeLinearGradientEndPointX",
    "name": "strokeLinearGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPointX",
    "inherited": true,
    "description": "get/set fill linear gradient end point x",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point x\nvar endPointX = shape.strokeLinearGradientEndPointX();\n\n// set stroke linear gradient end point x\nshape.strokeLinearGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8189,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1857
  },
  {
    "id": "Konva.Circle#fillLinearGradientEndPointY",
    "longname": "Konva.Circle#fillLinearGradientEndPointY",
    "name": "fillLinearGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPointY",
    "inherited": true,
    "description": "get/set fill linear gradient end point y",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill linear gradient end point y\nvar endPointY = shape.fillLinearGradientEndPointY();\n\n// set fill linear gradient end point y\nshape.fillLinearGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8203,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1858
  },
  {
    "id": "Konva.Circle#strokeLinearGradientEndPointY",
    "longname": "Konva.Circle#strokeLinearGradientEndPointY",
    "name": "strokeLinearGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPointY",
    "inherited": true,
    "description": "get/set stroke linear gradient end point y",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point y\nvar endPointY = shape.strokeLinearGradientEndPointY();\n\n// set stroke linear gradient end point y\nshape.strokeLinearGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8217,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1859
  },
  {
    "id": "Konva.Circle#fillRadialGradientStartPoint",
    "longname": "Konva.Circle#fillRadialGradientStartPoint",
    "name": "fillRadialGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPoint",
    "inherited": true,
    "description": "get/set fill radial gradient start point",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get fill radial gradient start point\nvar startPoint = shape.fillRadialGradientStartPoint();\n\n// set fill radial gradient start point\nshape.fillRadialGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8234,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1860
  },
  {
    "id": "Konva.Circle#fillRadialGradientStartPointX",
    "longname": "Konva.Circle#fillRadialGradientStartPointX",
    "name": "fillRadialGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPointX",
    "inherited": true,
    "description": "get/set fill radial gradient start point x",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill radial gradient start point x\nvar startPointX = shape.fillRadialGradientStartPointX();\n\n// set fill radial gradient start point x\nshape.fillRadialGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8253,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1861
  },
  {
    "id": "Konva.Circle#fillRadialGradientStartPointY",
    "longname": "Konva.Circle#fillRadialGradientStartPointY",
    "name": "fillRadialGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPointY",
    "inherited": true,
    "description": "get/set fill radial gradient start point y",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill radial gradient start point y\nvar startPointY = shape.fillRadialGradientStartPointY();\n\n// set fill radial gradient start point y\nshape.fillRadialGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8267,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1862
  },
  {
    "id": "Konva.Circle#fillRadialGradientEndPoint",
    "longname": "Konva.Circle#fillRadialGradientEndPoint",
    "name": "fillRadialGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPoint",
    "inherited": true,
    "description": "get/set fill radial gradient end point",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get fill radial gradient end point\nvar endPoint = shape.fillRadialGradientEndPoint();\n\n// set fill radial gradient end point\nshape.fillRadialGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8284,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1863
  },
  {
    "id": "Konva.Circle#fillRadialGradientEndPointX",
    "longname": "Konva.Circle#fillRadialGradientEndPointX",
    "name": "fillRadialGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPointX",
    "inherited": true,
    "description": "get/set fill radial gradient end point x",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill radial gradient end point x\nvar endPointX = shape.fillRadialGradientEndPointX();\n\n// set fill radial gradient end point x\nshape.fillRadialGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8303,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1864
  },
  {
    "id": "Konva.Circle#fillRadialGradientEndPointY",
    "longname": "Konva.Circle#fillRadialGradientEndPointY",
    "name": "fillRadialGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPointY",
    "inherited": true,
    "description": "get/set fill radial gradient end point y",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill radial gradient end point y\nvar endPointY = shape.fillRadialGradientEndPointY();\n\n// set fill radial gradient end point y\nshape.fillRadialGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8317,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1865
  },
  {
    "id": "Konva.Circle#fillPatternRotation",
    "longname": "Konva.Circle#fillPatternRotation",
    "name": "fillPatternRotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternRotation",
    "inherited": true,
    "description": "get/set fill pattern rotation in degrees",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get fill pattern rotation\nvar patternRotation = shape.fillPatternRotation();\n\n// set fill pattern rotation\nshape.fillPatternRotation(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8331,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1866
  },
  {
    "id": "Konva.Circle#fillRule",
    "longname": "Konva.Circle#fillRule",
    "name": "fillRule",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRule",
    "inherited": true,
    "description": "get/set fill rule",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "CanvasFillRule"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get fill rule\nvar fillRule = shape.fillRule();\n\n// set fill rule\nshape.fillRule('evenodd');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8345,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1867
  },
  {
    "id": "Konva.Circle#clearCache",
    "longname": "Konva.Circle#clearCache",
    "name": "clearCache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#clearCache",
    "inherited": true,
    "description": "clear cached canvas",
    "memberof": "Konva.Circle",
    "examples": [
      "node.clearCache();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2632,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1868
  },
  {
    "id": "Konva.Circle#cache",
    "longname": "Konva.Circle#cache",
    "name": "cache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#cache",
    "inherited": true,
    "description": "cache node to improve drawing performance, apply filters, or create more accurate\n hit regions. For all basic shapes size of cache canvas will be automatically detected.\n If you need to cache your custom `Konva.Shape` instance you have to pass shape's bounding box\n properties. Look at [https://konvajs.org/docs/performance/Shape_Caching.html](https://konvajs.org/docs/performance/Shape_Caching.html) for more information.",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "increase canvas size by `offset` pixel in all directions.",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "when set to true, a red border will be drawn around the cached\n region for debugging purposes",
        "name": "config.drawBorder"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "change quality (or pixel ratio) of cached image. pixelRatio = 2 will produce 2x sized cache.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "control imageSmoothingEnabled property of created canvas for cache",
        "name": "config.imageSmoothingEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "change quality (or pixel ratio) of cached hit canvas.",
        "name": "config.hitCanvasPixelRatio"
      }
    ],
    "examples": [
      "// cache a shape with the x,y position of the bounding box at the center and\n// the width and height of the bounding box equal to the width and height of\n// the shape obtained from shape.width() and shape.height()\nimage.cache();\n\n// cache a node and define the bounding box position and size\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200\n});\n\n// cache a node and draw a red border around the bounding box\n// for debugging purposes\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200,\n  offset : 10,\n  drawBorder: true\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2650,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1869
  },
  {
    "id": "Konva.Circle#isCached",
    "longname": "Konva.Circle#isCached",
    "name": "isCached",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isCached",
    "inherited": true,
    "description": "determine if node is currently cached",
    "memberof": "Konva.Circle",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2788,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1870
  },
  {
    "id": "Konva.Circle#getClientRect",
    "longname": "Konva.Circle#getClientRect",
    "name": "getClientRect",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getClientRect",
    "inherited": true,
    "description": "Return client rectangle `{x, y, width, height}` of node. This rectangle also include all styling (strokes, shadows, etc).\nThe purpose of the method is similar to getBoundingClientRect API of the DOM.",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply transform to node for calculating rect?",
        "name": "config.skipTransform"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply shadow to the node for calculating bound box?",
        "name": "config.skipShadow"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply stroke to the node for calculating bound box?",
        "name": "config.skipStroke"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "calculate client rect relative to one of the parents",
        "name": "config.relativeTo"
      }
    ],
    "examples": [
      "var rect = new Konva.Rect({\n     width : 100,\n     height : 100,\n     x : 50,\n     y : 50,\n     strokeWidth : 4,\n     stroke : 'black',\n     offsetX : 50,\n     scaleY : 2\n});\n\n// get client rect without think off transformations (position, rotation, scale, offset, etc)\nrect.getClientRect({ skipTransform: true});\n// returns {\n//     x : -2,   // two pixels for stroke / 2\n//     y : -2,\n//     width : 104, // increased by 4 for stroke\n//     height : 104\n//}\n\n// get client rect with transformation applied\nrect.getClientRect();\n// returns Object {x: -2, y: 46, width: 104, height: 208}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "rect with `{x, y, width, height}` properties"
      }
    ],
    "meta": {
      "lineno": 2797,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1871
  },
  {
    "id": "Konva.Circle#on",
    "longname": "Konva.Circle#on",
    "name": "on",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#on",
    "inherited": true,
    "description": "bind events to the node. KonvaJS supports mouseover, mousemove,\n mouseout, mouseenter, mouseleave, mousedown, mouseup, wheel, contextmenu, click, dblclick, touchstart, touchmove,\n touchend, tap, dbltap, dragstart, dragmove, and dragend events.\n Pass in a string of events delimited by a space to bind multiple events at once\n such as 'mousedown mouseup mousemove'. Include a namespace to bind an\n event by name such as 'click.foobar'.",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'click', 'mousedown touchstart', 'mousedown.foo touchstart.foo'",
        "name": "evtStr"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The handler function. The first argument of that function is event object. Event object has `target` as main target of the event, `currentTarget` as current node listener and `evt` as native browser event.",
        "name": "handler"
      }
    ],
    "examples": [
      "// add click listener\nnode.on('click', function() {\n  console.log('you clicked me!');\n});\n\n// get the target node\nnode.on('click', function(evt) {\n  console.log(evt.target);\n});\n\n// stop event propagation\nnode.on('click', function(evt) {\n  evt.cancelBubble = true;\n});\n\n// bind multiple listeners\nnode.on('click touchstart', function() {\n  console.log('you clicked/touched me!');\n});\n\n// namespace listener\nnode.on('click.foo', function() {\n  console.log('you clicked/touched me!');\n});\n\n// get the event type\nnode.on('click tap', function(evt) {\n  var eventType = evt.type;\n});\n\n// get native event object\nnode.on('click tap', function(evt) {\n  var nativeEvent = evt.evt;\n});\n\n// for change events, get the old and new val\nnode.on('xChange', function(evt) {\n  var oldVal = evt.oldVal;\n  var newVal = evt.newVal;\n});\n\n// get event targets\n// with event delegations\nlayer.on('click', 'Group', function(evt) {\n  var shape = evt.target;\n  var group = evt.currentTarget;\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2919,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1872
  },
  {
    "id": "Konva.Circle#off",
    "longname": "Konva.Circle#off",
    "name": "off",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#off",
    "inherited": true,
    "description": "remove event bindings from the node. Pass in a string of\n event types delimmited by a space to remove multiple event\n bindings at once such as 'mousedown mouseup mousemove'.\n include a namespace to remove an event binding by name\n such as 'click.foobar'. If you only give a name like '.foobar',\n all events in that namespace will be removed.",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'click', 'mousedown touchstart', '.foobar'",
        "name": "evtStr"
      }
    ],
    "examples": [
      "// remove listener\nnode.off('click');\n\n// remove multiple listeners\nnode.off('click touchstart');\n\n// remove listener by name\nnode.off('click.foo');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3007,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1873
  },
  {
    "id": "Konva.Circle#remove",
    "longname": "Konva.Circle#remove",
    "name": "remove",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#remove",
    "inherited": true,
    "description": "remove a node from parent, but don't destroy. You can reuse the node later.",
    "memberof": "Konva.Circle",
    "examples": [
      "node.remove();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3088,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1874
  },
  {
    "id": "Konva.Circle#destroy",
    "longname": "Konva.Circle#destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#destroy",
    "inherited": true,
    "description": "remove and destroy a node. Kill it and delete forever! You should not reuse node after destroy().\nIf the node is a container (Group, Stage or Layer) it will destroy all children too.",
    "memberof": "Konva.Circle",
    "examples": [
      "node.destroy();"
    ],
    "meta": {
      "lineno": 3125,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1875
  },
  {
    "id": "Konva.Circle#getAttr",
    "longname": "Konva.Circle#getAttr",
    "name": "getAttr",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAttr",
    "inherited": true,
    "description": "get attr",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "attr"
      }
    ],
    "examples": [
      "var x = node.getAttr('x');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer",
            "String",
            "Object",
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3138,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1876
  },
  {
    "id": "Konva.Circle#getAncestors",
    "longname": "Konva.Circle#getAncestors",
    "name": "getAncestors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAncestors",
    "inherited": true,
    "description": "get ancestors",
    "memberof": "Konva.Circle",
    "examples": [
      "shape.getAncestors().forEach(function(node) {\n  console.log(node.getId());\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3155,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1877
  },
  {
    "id": "Konva.Circle#getAttrs",
    "longname": "Konva.Circle#getAttrs",
    "name": "getAttrs",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAttrs",
    "inherited": true,
    "description": "get attrs object literal",
    "memberof": "Konva.Circle",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3173,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1878
  },
  {
    "id": "Konva.Circle#setAttrs",
    "longname": "Konva.Circle#setAttrs",
    "name": "setAttrs",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#setAttrs",
    "inherited": true,
    "description": "set multiple attrs at once using an object literal",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "object containing key value pairs",
        "name": "config"
      }
    ],
    "examples": [
      "node.setAttrs({\n  x: 5,\n  fill: 'red'\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3182,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1879
  },
  {
    "id": "Konva.Circle#isListening",
    "longname": "Konva.Circle#isListening",
    "name": "isListening",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isListening",
    "inherited": true,
    "description": "determine if node is listening for events by taking into account ancestors.\n\nParent    | Self      | isListening\nlistening | listening |\n----------+-----------+------------\nT         | T         | T\nT         | F         | F\nF         | T         | F\nF         | F         | F",
    "memberof": "Konva.Circle",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3217,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1880
  },
  {
    "id": "Konva.Circle#isVisible",
    "longname": "Konva.Circle#isVisible",
    "name": "isVisible",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isVisible",
    "inherited": true,
    "description": "determine if node is visible by taking into account ancestors.\n\nParent    | Self      | isVisible\nvisible   | visible   |\n----------+-----------+------------\nT         | T         | T\nT         | F         | F\nF         | T         | F\nF         | F         | F",
    "memberof": "Konva.Circle",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3248,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1881
  },
  {
    "id": "Konva.Circle#show",
    "longname": "Konva.Circle#show",
    "name": "show",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#show",
    "inherited": true,
    "description": "show node. set visible = true",
    "memberof": "Konva.Circle",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3300,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1882
  },
  {
    "id": "Konva.Circle#hide",
    "longname": "Konva.Circle#hide",
    "name": "hide",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hide",
    "inherited": true,
    "description": "hide node.  Hidden nodes are no longer detectable",
    "memberof": "Konva.Circle",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3310,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1883
  },
  {
    "id": "Konva.Circle#getAbsoluteZIndex",
    "longname": "Konva.Circle#getAbsoluteZIndex",
    "name": "getAbsoluteZIndex",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteZIndex",
    "inherited": true,
    "description": "get absolute z-index which takes into account sibling\n and ancestor indices",
    "memberof": "Konva.Circle",
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3323,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1884
  },
  {
    "id": "Konva.Circle#getDepth",
    "longname": "Konva.Circle#getDepth",
    "name": "getDepth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getDepth",
    "inherited": true,
    "description": "get node depth in node tree.  Returns an integer.\n e.g. Stage depth will always be 0.  Layers will always be 1.  Groups and Shapes will always\n be >= 2",
    "memberof": "Konva.Circle",
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3355,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1885
  },
  {
    "id": "Konva.Circle#getRelativePointerPosition",
    "longname": "Konva.Circle#getRelativePointerPosition",
    "name": "getRelativePointerPosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getRelativePointerPosition",
    "inherited": true,
    "description": "get position of first pointer (like mouse or first touch) relative to local coordinates of current node",
    "memberof": "Konva.Circle",
    "examples": [
      "// let's think we have a rectangle at position x = 10, y = 10\n// now we clicked at x = 15, y = 15 of the stage\n// if you want to know position of the click, related to the rectangle you can use\nrect.getRelativePointerPosition();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3398,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1886
  },
  {
    "id": "Konva.Circle#getAbsolutePosition",
    "longname": "Konva.Circle#getAbsolutePosition",
    "name": "getAbsolutePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsolutePosition",
    "inherited": true,
    "description": "get absolute position of a node. That function can be used to calculate absolute position, but relative to any ancestor",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "optional ancestor node",
        "name": "Ancestor"
      }
    ],
    "examples": [
      "// returns absolute position relative to top-left corner of canvas\nnode.getAbsolutePosition();\n\n// calculate absolute position of node, inside stage\n// so stage transforms are ignored\nnode.getAbsolutePosition(stage)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3426,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1887
  },
  {
    "id": "Konva.Circle#move",
    "longname": "Konva.Circle#move",
    "name": "move",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#move",
    "inherited": true,
    "description": "move node by an amount relative to its current position",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "change"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "change.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "change.y"
      }
    ],
    "examples": [
      "// move node in x direction by 1px and y direction by 2px\nnode.move({\n  x: 1,\n  y: 2\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3514,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1888
  },
  {
    "id": "Konva.Circle#rotate",
    "longname": "Konva.Circle#rotate",
    "name": "rotate",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#rotate",
    "inherited": true,
    "description": "rotate node by an amount in degrees relative to its current rotation",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "theta"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3559,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1889
  },
  {
    "id": "Konva.Circle#moveToTop",
    "longname": "Konva.Circle#moveToTop",
    "name": "moveToTop",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveToTop",
    "inherited": true,
    "description": "move node to the top of its siblings",
    "memberof": "Konva.Circle",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3570,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1890
  },
  {
    "id": "Konva.Circle#moveUp",
    "longname": "Konva.Circle#moveUp",
    "name": "moveUp",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveUp",
    "inherited": true,
    "description": "move node up",
    "memberof": "Konva.Circle",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "flag is moved or not"
      }
    ],
    "meta": {
      "lineno": 3590,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1891
  },
  {
    "id": "Konva.Circle#moveDown",
    "longname": "Konva.Circle#moveDown",
    "name": "moveDown",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveDown",
    "inherited": true,
    "description": "move node down",
    "memberof": "Konva.Circle",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3610,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1892
  },
  {
    "id": "Konva.Circle#moveToBottom",
    "longname": "Konva.Circle#moveToBottom",
    "name": "moveToBottom",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveToBottom",
    "inherited": true,
    "description": "move node to the bottom of its siblings",
    "memberof": "Konva.Circle",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3630,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1893
  },
  {
    "id": "Konva.Circle#getAbsoluteOpacity",
    "longname": "Konva.Circle#getAbsoluteOpacity",
    "name": "getAbsoluteOpacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteOpacity",
    "inherited": true,
    "description": "get absolute opacity",
    "memberof": "Konva.Circle",
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3668,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1894
  },
  {
    "id": "Konva.Circle#moveTo",
    "longname": "Konva.Circle#moveTo",
    "name": "moveTo",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveTo",
    "inherited": true,
    "description": "move node to another container",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Container"
          ]
        },
        "name": "newContainer"
      }
    ],
    "examples": [
      "// move node from current layer into layer2\nnode.moveTo(layer2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3685,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1895
  },
  {
    "id": "Konva.Circle#toObject",
    "longname": "Konva.Circle#toObject",
    "name": "toObject",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toObject",
    "inherited": true,
    "description": "convert Node into an object for serialization.  Returns an object.",
    "memberof": "Konva.Circle",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3703,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1896
  },
  {
    "id": "Konva.Circle#toJSON",
    "longname": "Konva.Circle#toJSON",
    "name": "toJSON",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toJSON",
    "inherited": true,
    "description": "convert Node into a JSON string.  Returns a JSON string.",
    "memberof": "Konva.Circle",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3736,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1897
  },
  {
    "id": "Konva.Circle#getParent",
    "longname": "Konva.Circle#getParent",
    "name": "getParent",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getParent",
    "inherited": true,
    "description": "get parent container",
    "memberof": "Konva.Circle",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3745,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1898
  },
  {
    "id": "Konva.Circle#findAncestors",
    "longname": "Konva.Circle#findAncestors",
    "name": "findAncestors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#findAncestors",
    "inherited": true,
    "description": "get all ancestors (parent then parent of the parent, etc) of the node",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "selector for search",
        "name": "selector"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "show we think that node is ancestro itself?",
        "name": "includeSelf"
      },
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "optional": true,
        "description": "optional node where we need to stop searching (one of ancestors)",
        "name": "stopNode"
      }
    ],
    "examples": [
      "// get one of the parent group\nvar parentGroups = node.findAncestors('Group');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "[ancestors]"
      }
    ],
    "meta": {
      "lineno": 3754,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1899
  },
  {
    "id": "Konva.Circle#findAncestor",
    "longname": "Konva.Circle#findAncestor",
    "name": "findAncestor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#findAncestor",
    "inherited": true,
    "description": "get ancestor (parent or parent of the parent, etc) of the node that match passed selector",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "selector for search",
        "name": "selector"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "show we think that node is ancestro itself?",
        "name": "includeSelf"
      },
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "optional": true,
        "description": "optional node where we need to stop searching (one of ancestors)",
        "name": "stopNode"
      }
    ],
    "examples": [
      "// get one of the parent group\nvar group = node.findAncestors('.mygroup');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "description": "ancestor"
      }
    ],
    "meta": {
      "lineno": 3786,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1900
  },
  {
    "id": "Konva.Circle#getLayer",
    "longname": "Konva.Circle#getLayer",
    "name": "getLayer",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getLayer",
    "inherited": true,
    "description": "get layer ancestor",
    "memberof": "Konva.Circle",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Layer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3837,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1901
  },
  {
    "id": "Konva.Circle#getStage",
    "longname": "Konva.Circle#getStage",
    "name": "getStage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getStage",
    "inherited": true,
    "description": "get stage ancestor",
    "memberof": "Konva.Circle",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Stage"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3847,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1902
  },
  {
    "id": "Konva.Circle#fire",
    "longname": "Konva.Circle#fire",
    "name": "fire",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#fire",
    "inherited": true,
    "description": "fire event",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "event type.  can be a regular event, like click, mouseover, or mouseout, or it can be a custom event, like myCustomEvent",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "Event"
          ]
        },
        "optional": true,
        "description": "event object",
        "name": "evt"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "setting the value to false, or leaving it undefined, will result in the event\n not bubbling.  Setting the value to true will result in the event bubbling.",
        "name": "bubble"
      }
    ],
    "examples": [
      "// manually fire click event\nnode.fire('click');\n\n// fire custom event\nnode.fire('foo');\n\n// fire custom event with custom event object\nnode.fire('foo', {\n  bar: 10\n});\n\n// fire click event that bubbles\nnode.fire('click', null, true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3865,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1903
  },
  {
    "id": "Konva.Circle#getAbsoluteTransform",
    "longname": "Konva.Circle#getAbsoluteTransform",
    "name": "getAbsoluteTransform",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteTransform",
    "inherited": true,
    "description": "get absolute transform of the node which takes into\n account its ancestor transforms",
    "memberof": "Konva.Circle",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3901,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1904
  },
  {
    "id": "Konva.Circle#getAbsoluteScale",
    "longname": "Konva.Circle#getAbsoluteScale",
    "name": "getAbsoluteScale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteScale",
    "inherited": true,
    "description": "get absolute scale of the node which takes into\n account its ancestor scales",
    "memberof": "Konva.Circle",
    "examples": [
      "// get absolute scale x\nvar scaleX = node.getAbsoluteScale().x;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3961,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1905
  },
  {
    "id": "Konva.Circle#getAbsoluteRotation",
    "longname": "Konva.Circle#getAbsoluteRotation",
    "name": "getAbsoluteRotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteRotation",
    "inherited": true,
    "description": "get absolute rotation of the node which takes into\n account its ancestor rotations",
    "memberof": "Konva.Circle",
    "examples": [
      "// get absolute rotation\nvar rotation = node.getAbsoluteRotation();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3989,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1906
  },
  {
    "id": "Konva.Circle#getTransform",
    "longname": "Konva.Circle#getTransform",
    "name": "getTransform",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getTransform",
    "inherited": true,
    "description": "get transform of the node",
    "memberof": "Konva.Circle",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4009,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1907
  },
  {
    "id": "Konva.Circle#clone",
    "longname": "Konva.Circle#clone",
    "name": "clone",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#clone",
    "inherited": true,
    "description": "clone node.  Returns a new Node instance with identical attributes.  You can also override\n the node properties with an object literal, enabling you to use an existing node as a template\n for another node",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "override attrs",
        "name": "obj"
      }
    ],
    "examples": [
      "// simple clone\nvar clone = node.clone();\n\n// clone a node and override the x position\nvar clone = rect.clone({\n  x: 5\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4044,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1908
  },
  {
    "id": "Konva.Circle#toCanvas",
    "longname": "Konva.Circle#toCanvas",
    "name": "toCanvas",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toCanvas",
    "inherited": true,
    "description": "converts node into an canvas element.",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output canvas. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var canvas = node.toCanvas();"
    ],
    "meta": {
      "lineno": 4119,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1909
  },
  {
    "id": "Konva.Circle#toDataURL",
    "longname": "Konva.Circle#toDataURL",
    "name": "toDataURL",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toDataURL",
    "inherited": true,
    "description": "Creates a composite data URL (base64 string). If MIME type is not\nspecified, then \"image/png\" will result. For \"image/jpeg\", specify a quality\nlevel as quality (range 0.0 - 1.0)",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"image/png\" or \"image/jpeg\".\n \"image/png\" is the default",
        "name": "config.mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "jpeg quality.  If using an \"image/jpeg\" mimeType,\n you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n is very high quality",
        "name": "config.quality"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output image url. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4140,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1910
  },
  {
    "id": "Konva.Circle#toImage",
    "longname": "Konva.Circle#toImage",
    "name": "toImage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toImage",
    "inherited": true,
    "description": "converts node into an image.  Since the toImage\n method is asynchronous, the resulting image can only be retrieved from the config callback\n or the returned Promise.  toImage is most commonly used\n to cache complex drawings as an image so that they don't have to constantly be redrawn",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"image/png\" or \"image/jpeg\".\n \"image/png\" is the default",
        "name": "config.mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "jpeg quality.  If using an \"image/jpeg\" mimeType,\n you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n is very high quality",
        "name": "config.quality"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output image. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var image = node.toImage({\n  callback(img) {\n    // do stuff with img\n  }\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Image>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4172,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1911
  },
  {
    "id": "Konva.Circle#toBlob",
    "longname": "Konva.Circle#toBlob",
    "name": "toBlob",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toBlob",
    "inherited": true,
    "description": "Converts node into a blob.  Since the toBlob method is asynchronous,\n the resulting blob can only be retrieved from the config callback\n or the returned Promise.",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output canvas. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var blob = await node.toBlob({});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Blob>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4219,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1912
  },
  {
    "id": "Konva.Circle#getClassName",
    "longname": "Konva.Circle#getClassName",
    "name": "getClassName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getClassName",
    "inherited": true,
    "description": "get class name, which may return Stage, Layer, Group, or shape class names like Rect, Circle, Text, etc.",
    "memberof": "Konva.Circle",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4267,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1913
  },
  {
    "id": "Konva.Circle#getType",
    "longname": "Konva.Circle#getType",
    "name": "getType",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getType",
    "inherited": true,
    "description": "get the node type, which may return Stage, Layer, Group, or Shape",
    "memberof": "Konva.Circle",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4276,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1914
  },
  {
    "id": "Konva.Circle#addName",
    "longname": "Konva.Circle#addName",
    "name": "addName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#addName",
    "inherited": true,
    "description": "add name to node",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red');\nnode.addName('selected');\nnode.name(); // return 'red selected'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4324,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1915
  },
  {
    "id": "Konva.Circle#hasName",
    "longname": "Konva.Circle#hasName",
    "name": "hasName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hasName",
    "inherited": true,
    "description": "check is node has name",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red');\nnode.hasName('red');   // return true\nnode.hasName('selected'); // return false\nnode.hasName(''); // return false"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4343,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1916
  },
  {
    "id": "Konva.Circle#removeName",
    "longname": "Konva.Circle#removeName",
    "name": "removeName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#removeName",
    "inherited": true,
    "description": "remove name from node",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red selected');\nnode.removeName('selected');\nnode.hasName('selected'); // return false\nnode.name(); // return 'red'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4367,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1917
  },
  {
    "id": "Konva.Circle#setAttr",
    "longname": "Konva.Circle#setAttr",
    "name": "setAttr",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#setAttr",
    "inherited": true,
    "description": "set attr",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "attr"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "name": "val"
      }
    ],
    "examples": [
      "node.setAttr('x', 5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4388,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1918
  },
  {
    "id": "Konva.Circle#draw",
    "longname": "Konva.Circle#draw",
    "name": "draw",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#draw",
    "inherited": true,
    "description": "draw both scene and hit graphs.  If the node being drawn is the stage, all of the layers will be cleared and redrawn",
    "memberof": "Konva.Circle",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4511,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1919
  },
  {
    "id": "Konva.Circle#startDrag",
    "longname": "Konva.Circle#startDrag",
    "name": "startDrag",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#startDrag",
    "inherited": true,
    "description": "initiate drag and drop.",
    "memberof": "Konva.Circle",
    "meta": {
      "lineno": 4544,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1920
  },
  {
    "id": "Konva.Circle#stopDrag",
    "longname": "Konva.Circle#stopDrag",
    "name": "stopDrag",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#stopDrag",
    "inherited": true,
    "description": "stop drag and drop",
    "memberof": "Konva.Circle",
    "meta": {
      "lineno": 4590,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1921
  },
  {
    "id": "Konva.Circle#isDragging",
    "longname": "Konva.Circle#isDragging",
    "name": "isDragging",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isDragging",
    "inherited": true,
    "description": "determine if node is currently in drag and drop mode",
    "memberof": "Konva.Circle",
    "meta": {
      "lineno": 4607,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1922
  },
  {
    "id": "Konva.Circle#isClientRectOnScreen",
    "longname": "Konva.Circle#isClientRectOnScreen",
    "name": "isClientRectOnScreen",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isClientRectOnScreen",
    "inherited": true,
    "description": "determine if node (at least partially) is currently in user-visible area",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number",
            "Object"
          ]
        },
        "description": "optional margin in pixels",
        "name": "margin"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "margin.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "margin.y"
      }
    ],
    "examples": [
      "// get index\n// default calculations\nvar isOnScreen = node.isClientRectOnScreen()\n// increase object size (or screen size) for cases when objects close to the screen still need to be marked as \"visible\"\nvar isOnScreen = node.isClientRectOnScreen({ x: stage.width(), y: stage.height() })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4671,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1923
  },
  {
    "id": "Konva.Circle#zIndex",
    "longname": "Konva.Circle#zIndex",
    "name": "zIndex",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#zIndex",
    "inherited": true,
    "description": "get/set zIndex relative to the node's siblings who share the same parent.\nPlease remember that zIndex is not absolute (like in CSS). It is relative to parent element only.",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "index"
      }
    ],
    "examples": [
      "// get index\nvar index = node.zIndex();\n\n// set index\nnode.zIndex(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4764,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1924
  },
  {
    "id": "Konva.Circle#absolutePosition",
    "longname": "Konva.Circle#absolutePosition",
    "name": "absolutePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#absolutePosition",
    "inherited": true,
    "description": "get/set node absolute position",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "// get position\nvar position = node.absolutePosition();\n\n// set position\nnode.absolutePosition({\n  x: 5,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4779,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1925
  },
  {
    "id": "Konva.Circle#position",
    "longname": "Konva.Circle#position",
    "name": "position",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#position",
    "inherited": true,
    "description": "get/set node position relative to parent",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "// get position\nvar position = node.position();\n\n// set position\nnode.position({\n  x: 5,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4799,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1926
  },
  {
    "id": "Konva.Circle#x",
    "longname": "Konva.Circle#x",
    "name": "x",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#x",
    "inherited": true,
    "description": "get/set x position",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get x\nvar x = node.x();\n\n// set x\nnode.x(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4818,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1927
  },
  {
    "id": "Konva.Circle#y",
    "longname": "Konva.Circle#y",
    "name": "y",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#y",
    "inherited": true,
    "description": "get/set y position",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get y\nvar y = node.y();\n\n// set y\nnode.y(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4832,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1928
  },
  {
    "id": "Konva.Circle#globalCompositeOperation",
    "longname": "Konva.Circle#globalCompositeOperation",
    "name": "globalCompositeOperation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#globalCompositeOperation",
    "inherited": true,
    "description": "get/set globalCompositeOperation of a node. globalCompositeOperation DOESN'T affect hit graph of nodes. So they are still trigger to events as they have default \"source-over\" globalCompositeOperation.",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "type"
      }
    ],
    "examples": [
      "// get globalCompositeOperation\nvar globalCompositeOperation = shape.globalCompositeOperation();\n\n// set globalCompositeOperation\nshape.globalCompositeOperation('source-in');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4846,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1929
  },
  {
    "id": "Konva.Circle#opacity",
    "longname": "Konva.Circle#opacity",
    "name": "opacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#opacity",
    "inherited": true,
    "description": "get/set opacity.  Opacity values range from 0 to 1.\n A node with an opacity of 0 is fully transparent, and a node\n with an opacity of 1 is fully opaque",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "opacity"
      }
    ],
    "examples": [
      "// get opacity\nvar opacity = node.opacity();\n\n// set opacity\nnode.opacity(0.5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4860,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1930
  },
  {
    "id": "Konva.Circle#name",
    "longname": "Konva.Circle#name",
    "name": "name",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#name",
    "inherited": true,
    "description": "get/set name.",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "// get name\nvar name = node.name();\n\n// set name\nnode.name('foo');\n\n// also node may have multiple names (as css classes)\nnode.name('foo bar');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4876,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1931
  },
  {
    "id": "Konva.Circle#id",
    "longname": "Konva.Circle#id",
    "name": "id",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#id",
    "inherited": true,
    "description": "get/set id. Id is global for whole page.",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "id"
      }
    ],
    "examples": [
      "// get id\nvar name = node.id();\n\n// set id\nnode.id('foo');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4893,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1932
  },
  {
    "id": "Konva.Circle#rotation",
    "longname": "Konva.Circle#rotation",
    "name": "rotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#rotation",
    "inherited": true,
    "description": "get/set rotation in degrees",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get rotation in degrees\nvar rotation = node.rotation();\n\n// set rotation in degrees\nnode.rotation(45);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4907,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1933
  },
  {
    "id": "Konva.Circle#scale",
    "longname": "Konva.Circle#scale",
    "name": "scale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scale",
    "inherited": true,
    "description": "get/set scale",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.y"
      }
    ],
    "examples": [
      "// get scale\nvar scale = node.scale();\n\n// set scale\nshape.scale({\n  x: 2,\n  y: 3\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4921,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1934
  },
  {
    "id": "Konva.Circle#scaleX",
    "longname": "Konva.Circle#scaleX",
    "name": "scaleX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scaleX",
    "inherited": true,
    "description": "get/set scale x",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get scale x\nvar scaleX = node.scaleX();\n\n// set scale x\nnode.scaleX(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4940,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1935
  },
  {
    "id": "Konva.Circle#scaleY",
    "longname": "Konva.Circle#scaleY",
    "name": "scaleY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scaleY",
    "inherited": true,
    "description": "get/set scale y",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get scale y\nvar scaleY = node.scaleY();\n\n// set scale y\nnode.scaleY(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4954,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1936
  },
  {
    "id": "Konva.Circle#skew",
    "longname": "Konva.Circle#skew",
    "name": "skew",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skew",
    "inherited": true,
    "description": "get/set skew",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "skew"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "skew.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "skew.y"
      }
    ],
    "examples": [
      "// get skew\nvar skew = node.skew();\n\n// set skew\nnode.skew({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4968,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1937
  },
  {
    "id": "Konva.Circle#skewX",
    "longname": "Konva.Circle#skewX",
    "name": "skewX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skewX",
    "inherited": true,
    "description": "get/set skew x",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get skew x\nvar skewX = node.skewX();\n\n// set skew x\nnode.skewX(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4987,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1938
  },
  {
    "id": "Konva.Circle#skewY",
    "longname": "Konva.Circle#skewY",
    "name": "skewY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skewY",
    "inherited": true,
    "description": "get/set skew y",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get skew y\nvar skewY = node.skewY();\n\n// set skew y\nnode.skewY(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5001,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1939
  },
  {
    "id": "Konva.Circle#offsetX",
    "longname": "Konva.Circle#offsetX",
    "name": "offsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#offsetX",
    "inherited": true,
    "description": "get/set offset x",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get offset x\nvar offsetX = node.offsetX();\n\n// set offset x\nnode.offsetX(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5033,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1940
  },
  {
    "id": "Konva.Circle#offsetY",
    "longname": "Konva.Circle#offsetY",
    "name": "offsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#offsetY",
    "inherited": true,
    "description": "get/set offset y",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get offset y\nvar offsetY = node.offsetY();\n\n// set offset y\nnode.offsetY(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5047,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1941
  },
  {
    "id": "Konva.Circle#dragDistance",
    "longname": "Konva.Circle#dragDistance",
    "name": "dragDistance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#dragDistance",
    "inherited": true,
    "description": "get/set drag distance",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "distance"
      }
    ],
    "examples": [
      "// get drag distance\nvar dragDistance = node.dragDistance();\n\n// set distance\n// node starts dragging only if pointer moved more then 3 pixels\nnode.dragDistance(3);\n// or set globally\nKonva.dragDistance = 3;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5061,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1942
  },
  {
    "id": "Konva.Circle#width",
    "longname": "Konva.Circle#width",
    "name": "width",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#width",
    "inherited": true,
    "description": "get/set width",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "width"
      }
    ],
    "examples": [
      "// get width\nvar width = node.width();\n\n// set width\nnode.width(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5078,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1943
  },
  {
    "id": "Konva.Circle#height",
    "longname": "Konva.Circle#height",
    "name": "height",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#height",
    "inherited": true,
    "description": "get/set height",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "height"
      }
    ],
    "examples": [
      "// get height\nvar height = node.height();\n\n// set height\nnode.height(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5092,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1944
  },
  {
    "id": "Konva.Circle#listening",
    "longname": "Konva.Circle#listening",
    "name": "listening",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#listening",
    "inherited": true,
    "description": "get/set listening attr.  If you need to determine if a node is listening or not\n  by taking into account its parents, use the isListening() method\n  nodes with listening set to false will not be detected in hit graph\n  so they will be ignored in container.getIntersection() method",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "Can be true, or false.  The default is true.",
        "name": "listening"
      }
    ],
    "examples": [
      "// get listening attr\nvar listening = node.listening();\n\n// stop listening for events, remove node and all its children from hit graph\nnode.listening(false);\n\n// listen to events according to the parent\nnode.listening(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5106,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1945
  },
  {
    "id": "Konva.Circle#preventDefault",
    "longname": "Konva.Circle#preventDefault",
    "name": "preventDefault",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#preventDefault",
    "inherited": true,
    "description": "get/set preventDefault\nBy default all shapes will prevent default behavior\nof a browser on a pointer move or tap.\nthat will prevent native scrolling when you are trying to drag&drop a node\nbut sometimes you may need to enable default actions\nin that case you can set the property to false",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "preventDefault"
      }
    ],
    "examples": [
      "// get preventDefault\nvar shouldPrevent = shape.preventDefault();\n\n// set preventDefault\nshape.preventDefault(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5125,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1946
  },
  {
    "id": "Konva.Circle#filters",
    "longname": "Konva.Circle#filters",
    "name": "filters",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#filters",
    "inherited": true,
    "description": "get/set filters.  Filters are applied to cached canvases",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "array of filters",
        "name": "filters"
      }
    ],
    "examples": [
      "// get filters\nvar filters = node.filters();\n\n// set a single filter\nnode.cache();\nnode.filters([Konva.Filters.Blur]);\n\n// set multiple filters\nnode.cache();\nnode.filters([\n  Konva.Filters.Blur,\n  Konva.Filters.Sepia,\n  Konva.Filters.Invert\n]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5148,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1947
  },
  {
    "id": "Konva.Circle#visible",
    "longname": "Konva.Circle#visible",
    "name": "visible",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#visible",
    "inherited": true,
    "description": "get/set visible attr.  Can be true, or false.  The default is true.\n  If you need to determine if a node is visible or not\n  by taking into account its parents, use the isVisible() method",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "visible"
      }
    ],
    "examples": [
      "// get visible attr\nvar visible = node.visible();\n\n// make invisible\nnode.visible(false);\n\n// make visible (according to the parent)\nnode.visible(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5171,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1948
  },
  {
    "id": "Konva.Circle#transformsEnabled",
    "longname": "Konva.Circle#transformsEnabled",
    "name": "transformsEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#transformsEnabled",
    "inherited": true,
    "description": "get/set transforms that are enabled.  Can be \"all\", \"none\", or \"position\".  The default\n is \"all\"",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// enable position transform only to improve draw performance\nnode.transformsEnabled('position');\n\n// enable all transforms\nnode.transformsEnabled('all');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5191,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1949
  },
  {
    "id": "Konva.Circle#size",
    "longname": "Konva.Circle#size",
    "name": "size",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#size",
    "inherited": true,
    "description": "get/set node size",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "size"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size.height"
      }
    ],
    "examples": [
      "// get node size\nvar size = node.size();\nvar width = size.width;\nvar height = size.height;\n\n// set size\nnode.size({\n  width: 100,\n  height: 200\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5205,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1950
  },
  {
    "id": "Konva.Circle#dragBoundFunc",
    "longname": "Konva.Circle#dragBoundFunc",
    "name": "dragBoundFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#dragBoundFunc",
    "inherited": true,
    "description": "get/set drag bound function.  This is used to override the default\n drag and drop position.",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "name": "dragBoundFunc"
      }
    ],
    "examples": [
      "// get drag bound function\nvar dragBoundFunc = node.dragBoundFunc();\n\n// create vertical drag and drop\nnode.dragBoundFunc(function(pos){\n  // important pos - is absolute position of the node\n  // you should return absolute position too\n  return {\n    x: this.absolutePosition().x,\n    y: pos.y\n  };\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5226,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1951
  },
  {
    "id": "Konva.Circle#draggable",
    "longname": "Konva.Circle#draggable",
    "name": "draggable",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#draggable",
    "inherited": true,
    "description": "get/set draggable flag",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "draggable"
      }
    ],
    "examples": [
      "// get draggable flag\nvar draggable = node.draggable();\n\n// enable drag and drop\nnode.draggable(true);\n\n// disable drag and drop\nnode.draggable(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5248,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1952
  },
  {
    "id": "Konva.Circle#to",
    "longname": "Konva.Circle#to",
    "name": "to",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#to",
    "inherited": true,
    "description": "Tween node properties. Shorter usage of {@link Konva.Tween} object.",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "tween params",
        "name": "params"
      }
    ],
    "examples": [
      "circle.to({\n  x : 50,\n  duration : 0.5,\n  onUpdate: () => console.log('props updated'),\n  onFinish: () => console.log('finished'),\n});"
    ],
    "meta": {
      "lineno": 9588,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1953
  },
  {
    "id": "Konva.Circle#blurRadius",
    "longname": "Konva.Circle#blurRadius",
    "name": "blurRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#blurRadius",
    "inherited": true,
    "description": "get/set blur radius. Use with {@link Konva.Filters.Blur} filter",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "radius"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17517,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1954
  },
  {
    "id": "Konva.Circle#brightness",
    "longname": "Konva.Circle#brightness",
    "name": "brightness",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#brightness",
    "inherited": true,
    "description": "get/set filter brightness.  The brightness is a number between -1 and 1.&nbsp; Positive values\n brighten the pixels and negative values darken them. Use with {@link Konva.Filters.Brighten} filter.",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between -1 and 1",
        "name": "brightness"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17547,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1955
  },
  {
    "id": "Konva.Circle#contrast",
    "longname": "Konva.Circle#contrast",
    "name": "contrast",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#contrast",
    "inherited": true,
    "description": "get/set filter contrast.  The contrast is a number between -100 and 100.\nUse with {@link Konva.Filters.Contrast} filter.",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between -100 and 100",
        "name": "contrast"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17600,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1956
  },
  {
    "id": "Konva.Circle#embossStrength",
    "longname": "Konva.Circle#embossStrength",
    "name": "embossStrength",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossStrength",
    "inherited": true,
    "description": "get/set emboss strength. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1.  Default is 0.5",
        "name": "level"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17725,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1957
  },
  {
    "id": "Konva.Circle#embossWhiteLevel",
    "longname": "Konva.Circle#embossWhiteLevel",
    "name": "embossWhiteLevel",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossWhiteLevel",
    "inherited": true,
    "description": "get/set emboss white level. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1.  Default is 0.5",
        "name": "embossWhiteLevel"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17733,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1958
  },
  {
    "id": "Konva.Circle#embossDirection",
    "longname": "Konva.Circle#embossDirection",
    "name": "embossDirection",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossDirection",
    "inherited": true,
    "description": "get/set emboss direction. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "can be top-left, top, top-right, right, bottom-right, bottom, bottom-left or left\n  The default is top-left",
        "name": "embossDirection"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17741,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1959
  },
  {
    "id": "Konva.Circle#embossBlend",
    "longname": "Konva.Circle#embossBlend",
    "name": "embossBlend",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossBlend",
    "inherited": true,
    "description": "get/set emboss blend. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "embossBlend"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17750,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1960
  },
  {
    "id": "Konva.Circle#enhance",
    "longname": "Konva.Circle#enhance",
    "name": "enhance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#enhance",
    "inherited": true,
    "description": "get/set enhance. Use with {@link Konva.Filters.Enhance} filter. -1 to 1 values",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Float"
          ]
        },
        "name": "amount"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Float"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17864,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1961
  },
  {
    "id": "Konva.Circle#hue",
    "longname": "Konva.Circle#hue",
    "name": "hue",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hue",
    "inherited": true,
    "description": "get/set hsv hue in degrees. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between 0 and 359",
        "name": "hue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17896,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1962
  },
  {
    "id": "Konva.Circle#saturation",
    "longname": "Konva.Circle#saturation",
    "name": "saturation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#saturation",
    "inherited": true,
    "description": "get/set hsv saturation. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the saturation, 1.0 doubles, etc..",
        "name": "saturation"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17904,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1963
  },
  {
    "id": "Konva.Circle#luminance",
    "longname": "Konva.Circle#luminance",
    "name": "luminance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#luminance",
    "inherited": true,
    "description": "get/set hsl luminance. Use with {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "from -1 to 1",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17912,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1964
  },
  {
    "id": "Konva.Circle#value",
    "longname": "Konva.Circle#value",
    "name": "value",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#value",
    "inherited": true,
    "description": "get/set hsv value. Use with {@link Konva.Filters.HSV} filter.",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the value, 1.0 doubles, etc..",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18018,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1965
  },
  {
    "id": "Konva.Circle#kaleidoscopePower",
    "longname": "Konva.Circle#kaleidoscopePower",
    "name": "kaleidoscopePower",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#kaleidoscopePower",
    "inherited": true,
    "description": "get/set kaleidoscope power. Use with {@link Konva.Filters.Kaleidoscope} filter.",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "of kaleidoscope",
        "name": "power"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18243,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1966
  },
  {
    "id": "Konva.Circle#kaleidoscopeAngle",
    "longname": "Konva.Circle#kaleidoscopeAngle",
    "name": "kaleidoscopeAngle",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#kaleidoscopeAngle",
    "inherited": true,
    "description": "get/set kaleidoscope angle. Use with {@link Konva.Filters.Kaleidoscope} filter.",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "degrees"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18251,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1967
  },
  {
    "id": "Konva.Circle#noise",
    "longname": "Konva.Circle#noise",
    "name": "noise",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#noise",
    "inherited": true,
    "description": "get/set noise amount.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Noise} filter.",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "noise"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18437,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1968
  },
  {
    "id": "Konva.Circle#pixelSize",
    "longname": "Konva.Circle#pixelSize",
    "name": "pixelSize",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#pixelSize",
    "inherited": true,
    "description": "get/set pixel size. Use with {@link Konva.Filters.Pixelate} filter.",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "pixelSize"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18522,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1969
  },
  {
    "id": "Konva.Circle#levels",
    "longname": "Konva.Circle#levels",
    "name": "levels",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#levels",
    "inherited": true,
    "description": "get/set levels.  Must be a number between 0 and 1.  Use with {@link Konva.Filters.Posterize} filter.",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1",
        "name": "level"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18552,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1970
  },
  {
    "id": "Konva.Circle#red",
    "longname": "Konva.Circle#red",
    "name": "red",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#red",
    "inherited": true,
    "description": "get/set filter red value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "red"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18596,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1971
  },
  {
    "id": "Konva.Circle#green",
    "longname": "Konva.Circle#green",
    "name": "green",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#green",
    "inherited": true,
    "description": "get/set filter green value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "green"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18616,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1972
  },
  {
    "id": "Konva.Circle#blue",
    "longname": "Konva.Circle#blue",
    "name": "blue",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#blue",
    "inherited": true,
    "description": "get/set filter blue value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "blue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18625,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1973
  },
  {
    "id": "Konva.Circle#alpha",
    "longname": "Konva.Circle#alpha",
    "name": "alpha",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#alpha",
    "inherited": true,
    "description": "get/set filter alpha value. Use with {@link Konva.Filters.RGBA} filter.",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Float"
          ]
        },
        "description": "value between 0 and 1",
        "name": "alpha"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Float"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18718,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1974
  },
  {
    "id": "Konva.Circle#threshold",
    "longname": "Konva.Circle#threshold",
    "name": "threshold",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#threshold",
    "inherited": true,
    "description": "get/set threshold.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Threshold} or {@link Konva.Filters.Mask} filter.",
    "memberof": "Konva.Circle",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "threshold"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18809,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1975
  },
  {
    "id": "Konva.Ellipse#hasShadow",
    "longname": "Konva.Ellipse#hasShadow",
    "name": "hasShadow",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasShadow",
    "inherited": true,
    "description": "returns whether or not a shadow will be rendered",
    "memberof": "Konva.Ellipse",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 6909,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1976
  },
  {
    "id": "Konva.Ellipse#hasFill",
    "longname": "Konva.Ellipse#hasFill",
    "name": "hasFill",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasFill",
    "inherited": true,
    "description": "returns whether or not the shape will be filled",
    "memberof": "Konva.Ellipse",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7009,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1977
  },
  {
    "id": "Konva.Ellipse#hasStroke",
    "longname": "Konva.Ellipse#hasStroke",
    "name": "hasStroke",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasStroke",
    "inherited": true,
    "description": "returns whether or not the shape will be stroked",
    "memberof": "Konva.Ellipse",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7030,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1978
  },
  {
    "id": "Konva.Ellipse#intersects",
    "longname": "Konva.Ellipse#intersects",
    "name": "intersects",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#intersects",
    "inherited": true,
    "description": "determines if point is in the shape, regardless if other shapes are on top of it.  Note: because\n this method clears a temporary canvas and then redraws the shape, it performs very poorly if executed many times\n consecutively.  Please use the {@link Konva.Stage#getIntersection} method if at all possible\n because it performs much better",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "point"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "point.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "point.y"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7066,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1979
  },
  {
    "id": "Konva.Ellipse#getSelfRect",
    "longname": "Konva.Ellipse#getSelfRect",
    "name": "getSelfRect",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#getSelfRect",
    "inherited": true,
    "description": "return self rectangle (x, y, width, height) of shape.\nThis method are not taken into account transformation and styles.",
    "memberof": "Konva.Ellipse",
    "examples": [
      "rect.getSelfRect();  // return {x:0, y:0, width:rect.width(), height:rect.height()}\ncircle.getSelfRect();  // return {x: - circle.width() / 2, y: - circle.height() / 2, width:circle.width(), height:circle.height()}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "rect with `{x, y, width, height}` properties"
      }
    ],
    "meta": {
      "lineno": 7138,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1980
  },
  {
    "id": "Konva.Ellipse#drawHitFromCache",
    "longname": "Konva.Ellipse#drawHitFromCache",
    "name": "drawHitFromCache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#drawHitFromCache",
    "inherited": true,
    "description": "draw hit graph using the cached scene canvas",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "alpha channel threshold that determines whether or not\n a pixel should be drawn onto the hit graph.  Must be a value between 0 and 255.\n The default is 0",
        "name": "alphaThreshold"
      }
    ],
    "examples": [
      "shape.cache();\nshape.drawHitFromCache();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7294,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1981
  },
  {
    "id": "Konva.Ellipse#stroke",
    "longname": "Konva.Ellipse#stroke",
    "name": "stroke",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#stroke",
    "inherited": true,
    "description": "get/set stroke color",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get stroke color\nvar stroke = shape.stroke();\n\n// set stroke color with color string\nshape.stroke('green');\n\n// set stroke color with hex\nshape.stroke('#00ff00');\n\n// set stroke color with rgb\nshape.stroke('rgb(0,255,0)');\n\n// set stroke color with rgba and make it 50% opaque\nshape.stroke('rgba(0,255,0,0.5');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7360,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1982
  },
  {
    "id": "Konva.Ellipse#strokeWidth",
    "longname": "Konva.Ellipse#strokeWidth",
    "name": "strokeWidth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeWidth",
    "inherited": true,
    "description": "get/set stroke width",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "strokeWidth"
      }
    ],
    "examples": [
      "// get stroke width\nvar strokeWidth = shape.strokeWidth();\n\n// set stroke width\nshape.strokeWidth(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7383,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1983
  },
  {
    "id": "Konva.Ellipse#fillAfterStrokeEnabled",
    "longname": "Konva.Ellipse#fillAfterStrokeEnabled",
    "name": "fillAfterStrokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillAfterStrokeEnabled",
    "inherited": true,
    "description": "get/set fillAfterStrokeEnabled property. By default Konva is drawing filling first, then stroke on top of the fill.\nIn rare situations you may want a different behavior. When you have a stroke first then fill on top of it.\nEspecially useful for Text objects.\nDefault is false.",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "fillAfterStrokeEnabled"
      }
    ],
    "examples": [
      "// get stroke width\nvar fillAfterStrokeEnabled = shape.fillAfterStrokeEnabled();\n\n// set stroke width\nshape.fillAfterStrokeEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7397,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1984
  },
  {
    "id": "Konva.Ellipse#hitStrokeWidth",
    "longname": "Konva.Ellipse#hitStrokeWidth",
    "name": "hitStrokeWidth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hitStrokeWidth",
    "inherited": true,
    "description": "get/set stroke width for hit detection. Default value is \"auto\", it means it will be equals to strokeWidth",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "hitStrokeWidth"
      }
    ],
    "examples": [
      "// get stroke width\nvar hitStrokeWidth = shape.hitStrokeWidth();\n\n// set hit stroke width\nshape.hitStrokeWidth(20);\n// set hit stroke width always equals to scene stroke width\nshape.hitStrokeWidth('auto');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7414,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1985
  },
  {
    "id": "Konva.Ellipse#strokeHitEnabled",
    "longname": "Konva.Ellipse#strokeHitEnabled",
    "name": "strokeHitEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeHitEnabled",
    "inherited": true,
    "description": "**deprecated, use hitStrokeWidth instead!** get/set strokeHitEnabled property. Useful for performance optimization.\nYou may set `shape.strokeHitEnabled(false)`. In this case stroke will be no draw on hit canvas, so hit area\nof shape will be decreased (by lineWidth / 2). Remember that non closed line with `strokeHitEnabled = false`\nwill be not drawn on hit canvas, that is mean line will no trigger pointer events (like mouseover)\nDefault value is true.",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "strokeHitEnabled"
      }
    ],
    "examples": [
      "// get strokeHitEnabled\nvar strokeHitEnabled = shape.strokeHitEnabled();\n\n// set strokeHitEnabled\nshape.strokeHitEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7430,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1986
  },
  {
    "id": "Konva.Ellipse#perfectDrawEnabled",
    "longname": "Konva.Ellipse#perfectDrawEnabled",
    "name": "perfectDrawEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#perfectDrawEnabled",
    "inherited": true,
    "description": "get/set perfectDrawEnabled. If a shape has fill, stroke and opacity you may set `perfectDrawEnabled` to false to improve performance.\nSee http://konvajs.org/docs/performance/Disable_Perfect_Draw.html for more information.\nDefault value is true",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "perfectDrawEnabled"
      }
    ],
    "examples": [
      "// get perfectDrawEnabled\nvar perfectDrawEnabled = shape.perfectDrawEnabled();\n\n// set perfectDrawEnabled\nshape.perfectDrawEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7448,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1987
  },
  {
    "id": "Konva.Ellipse#shadowForStrokeEnabled",
    "longname": "Konva.Ellipse#shadowForStrokeEnabled",
    "name": "shadowForStrokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowForStrokeEnabled",
    "inherited": true,
    "description": "get/set shadowForStrokeEnabled. Useful for performance optimization.\nYou may set `shape.shadowForStrokeEnabled(false)`. In this case stroke will no effect shadow.\nRemember if you set `shadowForStrokeEnabled = false` for non closed line - that line will have no shadow!.\nDefault value is true",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "shadowForStrokeEnabled"
      }
    ],
    "examples": [
      "// get shadowForStrokeEnabled\nvar shadowForStrokeEnabled = shape.shadowForStrokeEnabled();\n\n// set shadowForStrokeEnabled\nshape.shadowForStrokeEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7464,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1988
  },
  {
    "id": "Konva.Ellipse#lineJoin",
    "longname": "Konva.Ellipse#lineJoin",
    "name": "lineJoin",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#lineJoin",
    "inherited": true,
    "description": "get/set line join.  Can be miter, round, or bevel.  The\n default is miter",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "lineJoin"
      }
    ],
    "examples": [
      "// get line join\nvar lineJoin = shape.lineJoin();\n\n// set line join\nshape.lineJoin('round');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7481,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1989
  },
  {
    "id": "Konva.Ellipse#lineCap",
    "longname": "Konva.Ellipse#lineCap",
    "name": "lineCap",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#lineCap",
    "inherited": true,
    "description": "get/set line cap.  Can be butt, round, or square",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "lineCap"
      }
    ],
    "examples": [
      "// get line cap\nvar lineCap = shape.lineCap();\n\n// set line cap\nshape.lineCap('round');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7496,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1990
  },
  {
    "id": "Konva.Ellipse#sceneFunc",
    "longname": "Konva.Ellipse#sceneFunc",
    "name": "sceneFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#sceneFunc",
    "inherited": true,
    "description": "get/set scene draw function. That function is used to draw the shape on a canvas.\nAlso that function will be used to draw hit area of the shape, in case if hitFunc is not defined.",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "drawing function",
        "name": "drawFunc"
      }
    ],
    "examples": [
      "// get scene draw function\nvar sceneFunc = shape.sceneFunc();\n\n// set scene draw function\nshape.sceneFunc(function(context, shape) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  // like stroke and fill\n  context.fillStrokeShape(shape);\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7510,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1991
  },
  {
    "id": "Konva.Ellipse#hitFunc",
    "longname": "Konva.Ellipse#hitFunc",
    "name": "hitFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hitFunc",
    "inherited": true,
    "description": "get/set hit draw function. That function is used to draw custom hit area of a shape.",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "drawing function",
        "name": "drawFunc"
      }
    ],
    "examples": [
      "// get hit draw function\nvar hitFunc = shape.hitFunc();\n\n// set hit draw function\nshape.hitFunc(function(context) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  context.fillStrokeShape(shape);\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7532,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1992
  },
  {
    "id": "Konva.Ellipse#dash",
    "longname": "Konva.Ellipse#dash",
    "name": "dash",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#dash",
    "inherited": true,
    "overrides": "Konva.Shape#dash",
    "description": "get/set dash array for stroke.",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "dash"
      }
    ],
    "examples": [
      "// apply dashed stroke that is 10px long and 5 pixels apart\n line.dash([10, 5]);\n // apply dashed stroke that is made up of alternating dashed\n // lines that are 10px long and 20px apart, and dots that have\n // a radius of 5px and are 20px apart\n line.dash([10, 20, 0.001, 20]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7552,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1993
  },
  {
    "id": "Konva.Ellipse#shadowColor",
    "longname": "Konva.Ellipse#shadowColor",
    "name": "shadowColor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowColor",
    "inherited": true,
    "description": "get/set shadow color",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get shadow color\nvar shadow = shape.shadowColor();\n\n// set shadow color with color string\nshape.shadowColor('green');\n\n// set shadow color with hex\nshape.shadowColor('#00ff00');\n\n// set shadow color with rgb\nshape.shadowColor('rgb(0,255,0)');\n\n// set shadow color with rgba and make it 50% opaque\nshape.shadowColor('rgba(0,255,0,0.5');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7579,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1994
  },
  {
    "id": "Konva.Ellipse#shadowBlur",
    "longname": "Konva.Ellipse#shadowBlur",
    "name": "shadowBlur",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowBlur",
    "inherited": true,
    "description": "get/set shadow blur",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "blur"
      }
    ],
    "examples": [
      "// get shadow blur\nvar shadowBlur = shape.shadowBlur();\n\n// set shadow blur\nshape.shadowBlur(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7602,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1995
  },
  {
    "id": "Konva.Ellipse#shadowOpacity",
    "longname": "Konva.Ellipse#shadowOpacity",
    "name": "shadowOpacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOpacity",
    "inherited": true,
    "description": "get/set shadow opacity.  must be a value between 0 and 1",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "opacity"
      }
    ],
    "examples": [
      "// get shadow opacity\nvar shadowOpacity = shape.shadowOpacity();\n\n// set shadow opacity\nshape.shadowOpacity(0.5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7616,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1996
  },
  {
    "id": "Konva.Ellipse#shadowOffset",
    "longname": "Konva.Ellipse#shadowOffset",
    "name": "shadowOffset",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffset",
    "inherited": true,
    "description": "get/set shadow offset",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.y"
      }
    ],
    "examples": [
      "// get shadow offset\nvar shadowOffset = shape.shadowOffset();\n\n// set shadow offset\nshape.shadowOffset({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7630,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1997
  },
  {
    "id": "Konva.Ellipse#shadowOffsetX",
    "longname": "Konva.Ellipse#shadowOffsetX",
    "name": "shadowOffsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffsetX",
    "inherited": true,
    "description": "get/set shadow offset x",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get shadow offset x\nvar shadowOffsetX = shape.shadowOffsetX();\n\n// set shadow offset x\nshape.shadowOffsetX(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7649,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1998
  },
  {
    "id": "Konva.Ellipse#shadowOffsetY",
    "longname": "Konva.Ellipse#shadowOffsetY",
    "name": "shadowOffsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffsetY",
    "inherited": true,
    "description": "get/set shadow offset y",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get shadow offset y\nvar shadowOffsetY = shape.shadowOffsetY();\n\n// set shadow offset y\nshape.shadowOffsetY(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7663,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1999
  },
  {
    "id": "Konva.Ellipse#fillPatternImage",
    "longname": "Konva.Ellipse#fillPatternImage",
    "name": "fillPatternImage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternImage",
    "inherited": true,
    "description": "get/set fill pattern image",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Image"
          ]
        },
        "description": "object",
        "name": "image"
      }
    ],
    "examples": [
      "// get fill pattern image\nvar fillPatternImage = shape.fillPatternImage();\n\n// set fill pattern image\nvar imageObj = new Image();\nimageObj.onload = function() {\n  shape.fillPatternImage(imageObj);\n};\nimageObj.src = 'path/to/image/jpg';"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Image"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7677,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2000
  },
  {
    "id": "Konva.Ellipse#fill",
    "longname": "Konva.Ellipse#fill",
    "name": "fill",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fill",
    "inherited": true,
    "description": "get/set fill color",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get fill color\nvar fill = shape.fill();\n\n// set fill color with color string\nshape.fill('green');\n\n// set fill color with hex\nshape.fill('#00ff00');\n\n// set fill color with rgb\nshape.fill('rgb(0,255,0)');\n\n// set fill color with rgba and make it 50% opaque\nshape.fill('rgba(0,255,0,0.5');\n\n// shape without fill\nshape.fill(null);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7695,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2001
  },
  {
    "id": "Konva.Ellipse#fillPatternX",
    "longname": "Konva.Ellipse#fillPatternX",
    "name": "fillPatternX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternX",
    "inherited": true,
    "description": "get/set fill pattern x",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern x\nvar fillPatternX = shape.fillPatternX();\n// set fill pattern x\nshape.fillPatternX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7721,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2002
  },
  {
    "id": "Konva.Ellipse#fillPatternY",
    "longname": "Konva.Ellipse#fillPatternY",
    "name": "fillPatternY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternY",
    "inherited": true,
    "description": "get/set fill pattern y",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern y\nvar fillPatternY = shape.fillPatternY();\n// set fill pattern y\nshape.fillPatternY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7734,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2003
  },
  {
    "id": "Konva.Ellipse#fillLinearGradientColorStops",
    "longname": "Konva.Ellipse#fillLinearGradientColorStops",
    "name": "fillLinearGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientColorStops",
    "inherited": true,
    "description": "get/set fill linear gradient color stops",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get fill linear gradient color stops\nvar colorStops = shape.fillLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillLinearGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "colorStops"
      }
    ],
    "meta": {
      "lineno": 7747,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2004
  },
  {
    "id": "Konva.Ellipse#strokeLinearGradientColorStops",
    "longname": "Konva.Ellipse#strokeLinearGradientColorStops",
    "name": "strokeLinearGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientColorStops",
    "inherited": true,
    "description": "get/set stroke linear gradient color stops",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get stroke linear gradient color stops\nvar colorStops = shape.strokeLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.strokeLinearGradientColorStops([0, 'red', 0.5, 'blue', 1, 'green']);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "colorStops"
      }
    ],
    "meta": {
      "lineno": 7762,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2005
  },
  {
    "id": "Konva.Ellipse#fillRadialGradientStartRadius",
    "longname": "Konva.Ellipse#fillRadialGradientStartRadius",
    "name": "fillRadialGradientStartRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartRadius",
    "inherited": true,
    "description": "get/set fill radial gradient start radius",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "radius"
      }
    ],
    "examples": [
      "// get radial gradient start radius\nvar startRadius = shape.fillRadialGradientStartRadius();\n\n// set radial gradient start radius\nshape.fillRadialGradientStartRadius(0);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7777,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2006
  },
  {
    "id": "Konva.Ellipse#fillRadialGradientEndRadius",
    "longname": "Konva.Ellipse#fillRadialGradientEndRadius",
    "name": "fillRadialGradientEndRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndRadius",
    "inherited": true,
    "description": "get/set fill radial gradient end radius",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "radius"
      }
    ],
    "examples": [
      "// get radial gradient end radius\nvar endRadius = shape.fillRadialGradientEndRadius();\n\n// set radial gradient end radius\nshape.fillRadialGradientEndRadius(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7791,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2007
  },
  {
    "id": "Konva.Ellipse#fillRadialGradientColorStops",
    "longname": "Konva.Ellipse#fillRadialGradientColorStops",
    "name": "fillRadialGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientColorStops",
    "inherited": true,
    "description": "get/set fill radial gradient color stops",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get fill radial gradient color stops\nvar colorStops = shape.fillRadialGradientColorStops();\n\n// create a radial gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillRadialGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7805,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2008
  },
  {
    "id": "Konva.Ellipse#fillPatternRepeat",
    "longname": "Konva.Ellipse#fillPatternRepeat",
    "name": "fillPatternRepeat",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternRepeat",
    "inherited": true,
    "description": "get/set fill pattern repeat.  Can be 'repeat', 'repeat-x', 'repeat-y', or 'no-repeat'.  The default is 'repeat'",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "repeat"
      }
    ],
    "examples": [
      "// get fill pattern repeat\nvar repeat = shape.fillPatternRepeat();\n\n// repeat pattern in x direction only\nshape.fillPatternRepeat('repeat-x');\n\n// do not repeat the pattern\nshape.fillPatternRepeat('no-repeat');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7820,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2009
  },
  {
    "id": "Konva.Ellipse#fillEnabled",
    "longname": "Konva.Ellipse#fillEnabled",
    "name": "fillEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillEnabled",
    "inherited": true,
    "description": "get/set fill enabled flag",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get fill enabled flag\nvar fillEnabled = shape.fillEnabled();\n\n// disable fill\nshape.fillEnabled(false);\n\n// enable fill\nshape.fillEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7837,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2010
  },
  {
    "id": "Konva.Ellipse#strokeEnabled",
    "longname": "Konva.Ellipse#strokeEnabled",
    "name": "strokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeEnabled",
    "inherited": true,
    "description": "get/set stroke enabled flag",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get stroke enabled flag\nvar strokeEnabled = shape.strokeEnabled();\n\n// disable stroke\nshape.strokeEnabled(false);\n\n// enable stroke\nshape.strokeEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7854,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2011
  },
  {
    "id": "Konva.Ellipse#shadowEnabled",
    "longname": "Konva.Ellipse#shadowEnabled",
    "name": "shadowEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowEnabled",
    "inherited": true,
    "description": "get/set shadow enabled flag",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get shadow enabled flag\nvar shadowEnabled = shape.shadowEnabled();\n\n// disable shadow\nshape.shadowEnabled(false);\n\n// enable shadow\nshape.shadowEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7871,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2012
  },
  {
    "id": "Konva.Ellipse#dashEnabled",
    "longname": "Konva.Ellipse#dashEnabled",
    "name": "dashEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#dashEnabled",
    "inherited": true,
    "description": "get/set dash enabled flag",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get dash enabled flag\nvar dashEnabled = shape.dashEnabled();\n\n// disable dash\nshape.dashEnabled(false);\n\n// enable dash\nshape.dashEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7888,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2013
  },
  {
    "id": "Konva.Ellipse#strokeScaleEnabled",
    "longname": "Konva.Ellipse#strokeScaleEnabled",
    "name": "strokeScaleEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeScaleEnabled",
    "inherited": true,
    "description": "get/set strokeScale enabled flag",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get stroke scale enabled flag\nvar strokeScaleEnabled = shape.strokeScaleEnabled();\n\n// disable stroke scale\nshape.strokeScaleEnabled(false);\n\n// enable stroke scale\nshape.strokeScaleEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7905,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2014
  },
  {
    "id": "Konva.Ellipse#fillPriority",
    "longname": "Konva.Ellipse#fillPriority",
    "name": "fillPriority",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPriority",
    "inherited": true,
    "description": "get/set fill priority.  can be color, pattern, linear-gradient, or radial-gradient.  The default is color.\n  This is handy if you want to toggle between different fill types.",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "priority"
      }
    ],
    "examples": [
      "// get fill priority\nvar fillPriority = shape.fillPriority();\n\n// set fill priority\nshape.fillPriority('linear-gradient');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7922,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2015
  },
  {
    "id": "Konva.Ellipse#fillPatternOffset",
    "longname": "Konva.Ellipse#fillPatternOffset",
    "name": "fillPatternOffset",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffset",
    "inherited": true,
    "description": "get/set fill pattern offset",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.y"
      }
    ],
    "examples": [
      "// get fill pattern offset\nvar patternOffset = shape.fillPatternOffset();\n\n// set fill pattern offset\nshape.fillPatternOffset({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7937,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2016
  },
  {
    "id": "Konva.Ellipse#fillPatternOffsetX",
    "longname": "Konva.Ellipse#fillPatternOffsetX",
    "name": "fillPatternOffsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffsetX",
    "inherited": true,
    "description": "get/set fill pattern offset x",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern offset x\nvar patternOffsetX = shape.fillPatternOffsetX();\n\n// set fill pattern offset x\nshape.fillPatternOffsetX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7956,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2017
  },
  {
    "id": "Konva.Ellipse#fillPatternOffsetY",
    "longname": "Konva.Ellipse#fillPatternOffsetY",
    "name": "fillPatternOffsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffsetY",
    "inherited": true,
    "description": "get/set fill pattern offset y",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern offset y\nvar patternOffsetY = shape.fillPatternOffsetY();\n\n// set fill pattern offset y\nshape.fillPatternOffsetY(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7970,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2018
  },
  {
    "id": "Konva.Ellipse#fillPatternScale",
    "longname": "Konva.Ellipse#fillPatternScale",
    "name": "fillPatternScale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScale",
    "inherited": true,
    "description": "get/set fill pattern scale",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.y"
      }
    ],
    "examples": [
      "// get fill pattern scale\nvar patternScale = shape.fillPatternScale();\n\n// set fill pattern scale\nshape.fillPatternScale({\n  x: 2,\n  y: 2\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7984,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2019
  },
  {
    "id": "Konva.Ellipse#fillPatternScaleX",
    "longname": "Konva.Ellipse#fillPatternScaleX",
    "name": "fillPatternScaleX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScaleX",
    "inherited": true,
    "description": "get/set fill pattern scale x",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern scale x\nvar patternScaleX = shape.fillPatternScaleX();\n\n// set fill pattern scale x\nshape.fillPatternScaleX(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8003,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2020
  },
  {
    "id": "Konva.Ellipse#fillPatternScaleY",
    "longname": "Konva.Ellipse#fillPatternScaleY",
    "name": "fillPatternScaleY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScaleY",
    "inherited": true,
    "description": "get/set fill pattern scale y",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern scale y\nvar patternScaleY = shape.fillPatternScaleY();\n\n// set fill pattern scale y\nshape.fillPatternScaleY(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8017,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2021
  },
  {
    "id": "Konva.Ellipse#fillLinearGradientStartPoint",
    "longname": "Konva.Ellipse#fillLinearGradientStartPoint",
    "name": "fillLinearGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPoint",
    "inherited": true,
    "description": "get/set fill linear gradient start point",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get fill linear gradient start point\nvar startPoint = shape.fillLinearGradientStartPoint();\n\n// set fill linear gradient start point\nshape.fillLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8034,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2022
  },
  {
    "id": "Konva.Ellipse#strokeLinearGradientStartPoint",
    "longname": "Konva.Ellipse#strokeLinearGradientStartPoint",
    "name": "strokeLinearGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientStartPoint",
    "inherited": true,
    "description": "get/set stroke linear gradient start point",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point\nvar startPoint = shape.strokeLinearGradientStartPoint();\n\n// set stroke linear gradient start point\nshape.strokeLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8056,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2023
  },
  {
    "id": "Konva.Ellipse#fillLinearGradientStartPointX",
    "longname": "Konva.Ellipse#fillLinearGradientStartPointX",
    "name": "fillLinearGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPointX",
    "inherited": true,
    "description": "get/set fill linear gradient start point x",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill linear gradient start point x\nvar startPointX = shape.fillLinearGradientStartPointX();\n\n// set fill linear gradient start point x\nshape.fillLinearGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8075,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2024
  },
  {
    "id": "Konva.Ellipse#linearLinearGradientStartPointX",
    "longname": "Konva.Ellipse#linearLinearGradientStartPointX",
    "name": "linearLinearGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#linearLinearGradientStartPointX",
    "inherited": true,
    "description": "get/set stroke linear gradient start point x",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point x\nvar startPointX = shape.strokeLinearGradientStartPointX();\n\n// set stroke linear gradient start point x\nshape.strokeLinearGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8089,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2025
  },
  {
    "id": "Konva.Ellipse#fillLinearGradientStartPointY",
    "longname": "Konva.Ellipse#fillLinearGradientStartPointY",
    "name": "fillLinearGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPointY",
    "inherited": true,
    "description": "get/set fill linear gradient start point y",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill linear gradient start point y\nvar startPointY = shape.fillLinearGradientStartPointY();\n\n// set fill linear gradient start point y\nshape.fillLinearGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8103,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2026
  },
  {
    "id": "Konva.Ellipse#strokeLinearGradientStartPointY",
    "longname": "Konva.Ellipse#strokeLinearGradientStartPointY",
    "name": "strokeLinearGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientStartPointY",
    "inherited": true,
    "description": "get/set stroke linear gradient start point y",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point y\nvar startPointY = shape.strokeLinearGradientStartPointY();\n\n// set stroke linear gradient start point y\nshape.strokeLinearGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8117,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2027
  },
  {
    "id": "Konva.Ellipse#fillLinearGradientEndPoint",
    "longname": "Konva.Ellipse#fillLinearGradientEndPoint",
    "name": "fillLinearGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPoint",
    "inherited": true,
    "description": "get/set fill linear gradient end point",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get fill linear gradient end point\nvar endPoint = shape.fillLinearGradientEndPoint();\n\n// set fill linear gradient end point\nshape.fillLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8134,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2028
  },
  {
    "id": "Konva.Ellipse#strokeLinearGradientEndPoint",
    "longname": "Konva.Ellipse#strokeLinearGradientEndPoint",
    "name": "strokeLinearGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPoint",
    "inherited": true,
    "description": "get/set stroke linear gradient end point",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point\nvar endPoint = shape.strokeLinearGradientEndPoint();\n\n// set stroke linear gradient end point\nshape.strokeLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8156,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2029
  },
  {
    "id": "Konva.Ellipse#fillLinearGradientEndPointX",
    "longname": "Konva.Ellipse#fillLinearGradientEndPointX",
    "name": "fillLinearGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPointX",
    "inherited": true,
    "description": "get/set fill linear gradient end point x",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill linear gradient end point x\nvar endPointX = shape.fillLinearGradientEndPointX();\n\n// set fill linear gradient end point x\nshape.fillLinearGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8175,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2030
  },
  {
    "id": "Konva.Ellipse#strokeLinearGradientEndPointX",
    "longname": "Konva.Ellipse#strokeLinearGradientEndPointX",
    "name": "strokeLinearGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPointX",
    "inherited": true,
    "description": "get/set fill linear gradient end point x",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point x\nvar endPointX = shape.strokeLinearGradientEndPointX();\n\n// set stroke linear gradient end point x\nshape.strokeLinearGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8189,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2031
  },
  {
    "id": "Konva.Ellipse#fillLinearGradientEndPointY",
    "longname": "Konva.Ellipse#fillLinearGradientEndPointY",
    "name": "fillLinearGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPointY",
    "inherited": true,
    "description": "get/set fill linear gradient end point y",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill linear gradient end point y\nvar endPointY = shape.fillLinearGradientEndPointY();\n\n// set fill linear gradient end point y\nshape.fillLinearGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8203,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2032
  },
  {
    "id": "Konva.Ellipse#strokeLinearGradientEndPointY",
    "longname": "Konva.Ellipse#strokeLinearGradientEndPointY",
    "name": "strokeLinearGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPointY",
    "inherited": true,
    "description": "get/set stroke linear gradient end point y",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point y\nvar endPointY = shape.strokeLinearGradientEndPointY();\n\n// set stroke linear gradient end point y\nshape.strokeLinearGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8217,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2033
  },
  {
    "id": "Konva.Ellipse#fillRadialGradientStartPoint",
    "longname": "Konva.Ellipse#fillRadialGradientStartPoint",
    "name": "fillRadialGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPoint",
    "inherited": true,
    "description": "get/set fill radial gradient start point",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get fill radial gradient start point\nvar startPoint = shape.fillRadialGradientStartPoint();\n\n// set fill radial gradient start point\nshape.fillRadialGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8234,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2034
  },
  {
    "id": "Konva.Ellipse#fillRadialGradientStartPointX",
    "longname": "Konva.Ellipse#fillRadialGradientStartPointX",
    "name": "fillRadialGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPointX",
    "inherited": true,
    "description": "get/set fill radial gradient start point x",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill radial gradient start point x\nvar startPointX = shape.fillRadialGradientStartPointX();\n\n// set fill radial gradient start point x\nshape.fillRadialGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8253,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2035
  },
  {
    "id": "Konva.Ellipse#fillRadialGradientStartPointY",
    "longname": "Konva.Ellipse#fillRadialGradientStartPointY",
    "name": "fillRadialGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPointY",
    "inherited": true,
    "description": "get/set fill radial gradient start point y",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill radial gradient start point y\nvar startPointY = shape.fillRadialGradientStartPointY();\n\n// set fill radial gradient start point y\nshape.fillRadialGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8267,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2036
  },
  {
    "id": "Konva.Ellipse#fillRadialGradientEndPoint",
    "longname": "Konva.Ellipse#fillRadialGradientEndPoint",
    "name": "fillRadialGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPoint",
    "inherited": true,
    "description": "get/set fill radial gradient end point",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get fill radial gradient end point\nvar endPoint = shape.fillRadialGradientEndPoint();\n\n// set fill radial gradient end point\nshape.fillRadialGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8284,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2037
  },
  {
    "id": "Konva.Ellipse#fillRadialGradientEndPointX",
    "longname": "Konva.Ellipse#fillRadialGradientEndPointX",
    "name": "fillRadialGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPointX",
    "inherited": true,
    "description": "get/set fill radial gradient end point x",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill radial gradient end point x\nvar endPointX = shape.fillRadialGradientEndPointX();\n\n// set fill radial gradient end point x\nshape.fillRadialGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8303,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2038
  },
  {
    "id": "Konva.Ellipse#fillRadialGradientEndPointY",
    "longname": "Konva.Ellipse#fillRadialGradientEndPointY",
    "name": "fillRadialGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPointY",
    "inherited": true,
    "description": "get/set fill radial gradient end point y",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill radial gradient end point y\nvar endPointY = shape.fillRadialGradientEndPointY();\n\n// set fill radial gradient end point y\nshape.fillRadialGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8317,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2039
  },
  {
    "id": "Konva.Ellipse#fillPatternRotation",
    "longname": "Konva.Ellipse#fillPatternRotation",
    "name": "fillPatternRotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternRotation",
    "inherited": true,
    "description": "get/set fill pattern rotation in degrees",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get fill pattern rotation\nvar patternRotation = shape.fillPatternRotation();\n\n// set fill pattern rotation\nshape.fillPatternRotation(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8331,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2040
  },
  {
    "id": "Konva.Ellipse#fillRule",
    "longname": "Konva.Ellipse#fillRule",
    "name": "fillRule",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRule",
    "inherited": true,
    "description": "get/set fill rule",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "CanvasFillRule"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get fill rule\nvar fillRule = shape.fillRule();\n\n// set fill rule\nshape.fillRule('evenodd');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8345,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2041
  },
  {
    "id": "Konva.Ellipse#clearCache",
    "longname": "Konva.Ellipse#clearCache",
    "name": "clearCache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#clearCache",
    "inherited": true,
    "description": "clear cached canvas",
    "memberof": "Konva.Ellipse",
    "examples": [
      "node.clearCache();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2632,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2042
  },
  {
    "id": "Konva.Ellipse#cache",
    "longname": "Konva.Ellipse#cache",
    "name": "cache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#cache",
    "inherited": true,
    "description": "cache node to improve drawing performance, apply filters, or create more accurate\n hit regions. For all basic shapes size of cache canvas will be automatically detected.\n If you need to cache your custom `Konva.Shape` instance you have to pass shape's bounding box\n properties. Look at [https://konvajs.org/docs/performance/Shape_Caching.html](https://konvajs.org/docs/performance/Shape_Caching.html) for more information.",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "increase canvas size by `offset` pixel in all directions.",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "when set to true, a red border will be drawn around the cached\n region for debugging purposes",
        "name": "config.drawBorder"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "change quality (or pixel ratio) of cached image. pixelRatio = 2 will produce 2x sized cache.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "control imageSmoothingEnabled property of created canvas for cache",
        "name": "config.imageSmoothingEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "change quality (or pixel ratio) of cached hit canvas.",
        "name": "config.hitCanvasPixelRatio"
      }
    ],
    "examples": [
      "// cache a shape with the x,y position of the bounding box at the center and\n// the width and height of the bounding box equal to the width and height of\n// the shape obtained from shape.width() and shape.height()\nimage.cache();\n\n// cache a node and define the bounding box position and size\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200\n});\n\n// cache a node and draw a red border around the bounding box\n// for debugging purposes\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200,\n  offset : 10,\n  drawBorder: true\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2650,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2043
  },
  {
    "id": "Konva.Ellipse#isCached",
    "longname": "Konva.Ellipse#isCached",
    "name": "isCached",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isCached",
    "inherited": true,
    "description": "determine if node is currently cached",
    "memberof": "Konva.Ellipse",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2788,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2044
  },
  {
    "id": "Konva.Ellipse#getClientRect",
    "longname": "Konva.Ellipse#getClientRect",
    "name": "getClientRect",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getClientRect",
    "inherited": true,
    "description": "Return client rectangle `{x, y, width, height}` of node. This rectangle also include all styling (strokes, shadows, etc).\nThe purpose of the method is similar to getBoundingClientRect API of the DOM.",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply transform to node for calculating rect?",
        "name": "config.skipTransform"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply shadow to the node for calculating bound box?",
        "name": "config.skipShadow"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply stroke to the node for calculating bound box?",
        "name": "config.skipStroke"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "calculate client rect relative to one of the parents",
        "name": "config.relativeTo"
      }
    ],
    "examples": [
      "var rect = new Konva.Rect({\n     width : 100,\n     height : 100,\n     x : 50,\n     y : 50,\n     strokeWidth : 4,\n     stroke : 'black',\n     offsetX : 50,\n     scaleY : 2\n});\n\n// get client rect without think off transformations (position, rotation, scale, offset, etc)\nrect.getClientRect({ skipTransform: true});\n// returns {\n//     x : -2,   // two pixels for stroke / 2\n//     y : -2,\n//     width : 104, // increased by 4 for stroke\n//     height : 104\n//}\n\n// get client rect with transformation applied\nrect.getClientRect();\n// returns Object {x: -2, y: 46, width: 104, height: 208}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "rect with `{x, y, width, height}` properties"
      }
    ],
    "meta": {
      "lineno": 2797,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2045
  },
  {
    "id": "Konva.Ellipse#on",
    "longname": "Konva.Ellipse#on",
    "name": "on",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#on",
    "inherited": true,
    "description": "bind events to the node. KonvaJS supports mouseover, mousemove,\n mouseout, mouseenter, mouseleave, mousedown, mouseup, wheel, contextmenu, click, dblclick, touchstart, touchmove,\n touchend, tap, dbltap, dragstart, dragmove, and dragend events.\n Pass in a string of events delimited by a space to bind multiple events at once\n such as 'mousedown mouseup mousemove'. Include a namespace to bind an\n event by name such as 'click.foobar'.",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'click', 'mousedown touchstart', 'mousedown.foo touchstart.foo'",
        "name": "evtStr"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The handler function. The first argument of that function is event object. Event object has `target` as main target of the event, `currentTarget` as current node listener and `evt` as native browser event.",
        "name": "handler"
      }
    ],
    "examples": [
      "// add click listener\nnode.on('click', function() {\n  console.log('you clicked me!');\n});\n\n// get the target node\nnode.on('click', function(evt) {\n  console.log(evt.target);\n});\n\n// stop event propagation\nnode.on('click', function(evt) {\n  evt.cancelBubble = true;\n});\n\n// bind multiple listeners\nnode.on('click touchstart', function() {\n  console.log('you clicked/touched me!');\n});\n\n// namespace listener\nnode.on('click.foo', function() {\n  console.log('you clicked/touched me!');\n});\n\n// get the event type\nnode.on('click tap', function(evt) {\n  var eventType = evt.type;\n});\n\n// get native event object\nnode.on('click tap', function(evt) {\n  var nativeEvent = evt.evt;\n});\n\n// for change events, get the old and new val\nnode.on('xChange', function(evt) {\n  var oldVal = evt.oldVal;\n  var newVal = evt.newVal;\n});\n\n// get event targets\n// with event delegations\nlayer.on('click', 'Group', function(evt) {\n  var shape = evt.target;\n  var group = evt.currentTarget;\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2919,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2046
  },
  {
    "id": "Konva.Ellipse#off",
    "longname": "Konva.Ellipse#off",
    "name": "off",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#off",
    "inherited": true,
    "description": "remove event bindings from the node. Pass in a string of\n event types delimmited by a space to remove multiple event\n bindings at once such as 'mousedown mouseup mousemove'.\n include a namespace to remove an event binding by name\n such as 'click.foobar'. If you only give a name like '.foobar',\n all events in that namespace will be removed.",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'click', 'mousedown touchstart', '.foobar'",
        "name": "evtStr"
      }
    ],
    "examples": [
      "// remove listener\nnode.off('click');\n\n// remove multiple listeners\nnode.off('click touchstart');\n\n// remove listener by name\nnode.off('click.foo');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3007,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2047
  },
  {
    "id": "Konva.Ellipse#remove",
    "longname": "Konva.Ellipse#remove",
    "name": "remove",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#remove",
    "inherited": true,
    "description": "remove a node from parent, but don't destroy. You can reuse the node later.",
    "memberof": "Konva.Ellipse",
    "examples": [
      "node.remove();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3088,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2048
  },
  {
    "id": "Konva.Ellipse#destroy",
    "longname": "Konva.Ellipse#destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#destroy",
    "inherited": true,
    "description": "remove and destroy a node. Kill it and delete forever! You should not reuse node after destroy().\nIf the node is a container (Group, Stage or Layer) it will destroy all children too.",
    "memberof": "Konva.Ellipse",
    "examples": [
      "node.destroy();"
    ],
    "meta": {
      "lineno": 3125,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2049
  },
  {
    "id": "Konva.Ellipse#getAttr",
    "longname": "Konva.Ellipse#getAttr",
    "name": "getAttr",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAttr",
    "inherited": true,
    "description": "get attr",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "attr"
      }
    ],
    "examples": [
      "var x = node.getAttr('x');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer",
            "String",
            "Object",
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3138,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2050
  },
  {
    "id": "Konva.Ellipse#getAncestors",
    "longname": "Konva.Ellipse#getAncestors",
    "name": "getAncestors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAncestors",
    "inherited": true,
    "description": "get ancestors",
    "memberof": "Konva.Ellipse",
    "examples": [
      "shape.getAncestors().forEach(function(node) {\n  console.log(node.getId());\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3155,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2051
  },
  {
    "id": "Konva.Ellipse#getAttrs",
    "longname": "Konva.Ellipse#getAttrs",
    "name": "getAttrs",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAttrs",
    "inherited": true,
    "description": "get attrs object literal",
    "memberof": "Konva.Ellipse",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3173,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2052
  },
  {
    "id": "Konva.Ellipse#setAttrs",
    "longname": "Konva.Ellipse#setAttrs",
    "name": "setAttrs",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#setAttrs",
    "inherited": true,
    "description": "set multiple attrs at once using an object literal",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "object containing key value pairs",
        "name": "config"
      }
    ],
    "examples": [
      "node.setAttrs({\n  x: 5,\n  fill: 'red'\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3182,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2053
  },
  {
    "id": "Konva.Ellipse#isListening",
    "longname": "Konva.Ellipse#isListening",
    "name": "isListening",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isListening",
    "inherited": true,
    "description": "determine if node is listening for events by taking into account ancestors.\n\nParent    | Self      | isListening\nlistening | listening |\n----------+-----------+------------\nT         | T         | T\nT         | F         | F\nF         | T         | F\nF         | F         | F",
    "memberof": "Konva.Ellipse",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3217,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2054
  },
  {
    "id": "Konva.Ellipse#isVisible",
    "longname": "Konva.Ellipse#isVisible",
    "name": "isVisible",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isVisible",
    "inherited": true,
    "description": "determine if node is visible by taking into account ancestors.\n\nParent    | Self      | isVisible\nvisible   | visible   |\n----------+-----------+------------\nT         | T         | T\nT         | F         | F\nF         | T         | F\nF         | F         | F",
    "memberof": "Konva.Ellipse",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3248,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2055
  },
  {
    "id": "Konva.Ellipse#show",
    "longname": "Konva.Ellipse#show",
    "name": "show",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#show",
    "inherited": true,
    "description": "show node. set visible = true",
    "memberof": "Konva.Ellipse",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3300,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2056
  },
  {
    "id": "Konva.Ellipse#hide",
    "longname": "Konva.Ellipse#hide",
    "name": "hide",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hide",
    "inherited": true,
    "description": "hide node.  Hidden nodes are no longer detectable",
    "memberof": "Konva.Ellipse",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3310,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2057
  },
  {
    "id": "Konva.Ellipse#getAbsoluteZIndex",
    "longname": "Konva.Ellipse#getAbsoluteZIndex",
    "name": "getAbsoluteZIndex",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteZIndex",
    "inherited": true,
    "description": "get absolute z-index which takes into account sibling\n and ancestor indices",
    "memberof": "Konva.Ellipse",
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3323,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2058
  },
  {
    "id": "Konva.Ellipse#getDepth",
    "longname": "Konva.Ellipse#getDepth",
    "name": "getDepth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getDepth",
    "inherited": true,
    "description": "get node depth in node tree.  Returns an integer.\n e.g. Stage depth will always be 0.  Layers will always be 1.  Groups and Shapes will always\n be >= 2",
    "memberof": "Konva.Ellipse",
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3355,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2059
  },
  {
    "id": "Konva.Ellipse#getRelativePointerPosition",
    "longname": "Konva.Ellipse#getRelativePointerPosition",
    "name": "getRelativePointerPosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getRelativePointerPosition",
    "inherited": true,
    "description": "get position of first pointer (like mouse or first touch) relative to local coordinates of current node",
    "memberof": "Konva.Ellipse",
    "examples": [
      "// let's think we have a rectangle at position x = 10, y = 10\n// now we clicked at x = 15, y = 15 of the stage\n// if you want to know position of the click, related to the rectangle you can use\nrect.getRelativePointerPosition();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3398,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2060
  },
  {
    "id": "Konva.Ellipse#getAbsolutePosition",
    "longname": "Konva.Ellipse#getAbsolutePosition",
    "name": "getAbsolutePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsolutePosition",
    "inherited": true,
    "description": "get absolute position of a node. That function can be used to calculate absolute position, but relative to any ancestor",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "optional ancestor node",
        "name": "Ancestor"
      }
    ],
    "examples": [
      "// returns absolute position relative to top-left corner of canvas\nnode.getAbsolutePosition();\n\n// calculate absolute position of node, inside stage\n// so stage transforms are ignored\nnode.getAbsolutePosition(stage)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3426,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2061
  },
  {
    "id": "Konva.Ellipse#move",
    "longname": "Konva.Ellipse#move",
    "name": "move",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#move",
    "inherited": true,
    "description": "move node by an amount relative to its current position",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "change"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "change.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "change.y"
      }
    ],
    "examples": [
      "// move node in x direction by 1px and y direction by 2px\nnode.move({\n  x: 1,\n  y: 2\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3514,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2062
  },
  {
    "id": "Konva.Ellipse#rotate",
    "longname": "Konva.Ellipse#rotate",
    "name": "rotate",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#rotate",
    "inherited": true,
    "description": "rotate node by an amount in degrees relative to its current rotation",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "theta"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3559,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2063
  },
  {
    "id": "Konva.Ellipse#moveToTop",
    "longname": "Konva.Ellipse#moveToTop",
    "name": "moveToTop",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveToTop",
    "inherited": true,
    "description": "move node to the top of its siblings",
    "memberof": "Konva.Ellipse",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3570,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2064
  },
  {
    "id": "Konva.Ellipse#moveUp",
    "longname": "Konva.Ellipse#moveUp",
    "name": "moveUp",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveUp",
    "inherited": true,
    "description": "move node up",
    "memberof": "Konva.Ellipse",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "flag is moved or not"
      }
    ],
    "meta": {
      "lineno": 3590,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2065
  },
  {
    "id": "Konva.Ellipse#moveDown",
    "longname": "Konva.Ellipse#moveDown",
    "name": "moveDown",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveDown",
    "inherited": true,
    "description": "move node down",
    "memberof": "Konva.Ellipse",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3610,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2066
  },
  {
    "id": "Konva.Ellipse#moveToBottom",
    "longname": "Konva.Ellipse#moveToBottom",
    "name": "moveToBottom",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveToBottom",
    "inherited": true,
    "description": "move node to the bottom of its siblings",
    "memberof": "Konva.Ellipse",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3630,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2067
  },
  {
    "id": "Konva.Ellipse#getAbsoluteOpacity",
    "longname": "Konva.Ellipse#getAbsoluteOpacity",
    "name": "getAbsoluteOpacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteOpacity",
    "inherited": true,
    "description": "get absolute opacity",
    "memberof": "Konva.Ellipse",
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3668,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2068
  },
  {
    "id": "Konva.Ellipse#moveTo",
    "longname": "Konva.Ellipse#moveTo",
    "name": "moveTo",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveTo",
    "inherited": true,
    "description": "move node to another container",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Container"
          ]
        },
        "name": "newContainer"
      }
    ],
    "examples": [
      "// move node from current layer into layer2\nnode.moveTo(layer2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3685,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2069
  },
  {
    "id": "Konva.Ellipse#toObject",
    "longname": "Konva.Ellipse#toObject",
    "name": "toObject",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toObject",
    "inherited": true,
    "description": "convert Node into an object for serialization.  Returns an object.",
    "memberof": "Konva.Ellipse",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3703,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2070
  },
  {
    "id": "Konva.Ellipse#toJSON",
    "longname": "Konva.Ellipse#toJSON",
    "name": "toJSON",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toJSON",
    "inherited": true,
    "description": "convert Node into a JSON string.  Returns a JSON string.",
    "memberof": "Konva.Ellipse",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3736,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2071
  },
  {
    "id": "Konva.Ellipse#getParent",
    "longname": "Konva.Ellipse#getParent",
    "name": "getParent",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getParent",
    "inherited": true,
    "description": "get parent container",
    "memberof": "Konva.Ellipse",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3745,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2072
  },
  {
    "id": "Konva.Ellipse#findAncestors",
    "longname": "Konva.Ellipse#findAncestors",
    "name": "findAncestors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#findAncestors",
    "inherited": true,
    "description": "get all ancestors (parent then parent of the parent, etc) of the node",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "selector for search",
        "name": "selector"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "show we think that node is ancestro itself?",
        "name": "includeSelf"
      },
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "optional": true,
        "description": "optional node where we need to stop searching (one of ancestors)",
        "name": "stopNode"
      }
    ],
    "examples": [
      "// get one of the parent group\nvar parentGroups = node.findAncestors('Group');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "[ancestors]"
      }
    ],
    "meta": {
      "lineno": 3754,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2073
  },
  {
    "id": "Konva.Ellipse#findAncestor",
    "longname": "Konva.Ellipse#findAncestor",
    "name": "findAncestor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#findAncestor",
    "inherited": true,
    "description": "get ancestor (parent or parent of the parent, etc) of the node that match passed selector",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "selector for search",
        "name": "selector"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "show we think that node is ancestro itself?",
        "name": "includeSelf"
      },
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "optional": true,
        "description": "optional node where we need to stop searching (one of ancestors)",
        "name": "stopNode"
      }
    ],
    "examples": [
      "// get one of the parent group\nvar group = node.findAncestors('.mygroup');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "description": "ancestor"
      }
    ],
    "meta": {
      "lineno": 3786,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2074
  },
  {
    "id": "Konva.Ellipse#getLayer",
    "longname": "Konva.Ellipse#getLayer",
    "name": "getLayer",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getLayer",
    "inherited": true,
    "description": "get layer ancestor",
    "memberof": "Konva.Ellipse",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Layer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3837,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2075
  },
  {
    "id": "Konva.Ellipse#getStage",
    "longname": "Konva.Ellipse#getStage",
    "name": "getStage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getStage",
    "inherited": true,
    "description": "get stage ancestor",
    "memberof": "Konva.Ellipse",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Stage"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3847,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2076
  },
  {
    "id": "Konva.Ellipse#fire",
    "longname": "Konva.Ellipse#fire",
    "name": "fire",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#fire",
    "inherited": true,
    "description": "fire event",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "event type.  can be a regular event, like click, mouseover, or mouseout, or it can be a custom event, like myCustomEvent",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "Event"
          ]
        },
        "optional": true,
        "description": "event object",
        "name": "evt"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "setting the value to false, or leaving it undefined, will result in the event\n not bubbling.  Setting the value to true will result in the event bubbling.",
        "name": "bubble"
      }
    ],
    "examples": [
      "// manually fire click event\nnode.fire('click');\n\n// fire custom event\nnode.fire('foo');\n\n// fire custom event with custom event object\nnode.fire('foo', {\n  bar: 10\n});\n\n// fire click event that bubbles\nnode.fire('click', null, true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3865,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2077
  },
  {
    "id": "Konva.Ellipse#getAbsoluteTransform",
    "longname": "Konva.Ellipse#getAbsoluteTransform",
    "name": "getAbsoluteTransform",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteTransform",
    "inherited": true,
    "description": "get absolute transform of the node which takes into\n account its ancestor transforms",
    "memberof": "Konva.Ellipse",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3901,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2078
  },
  {
    "id": "Konva.Ellipse#getAbsoluteScale",
    "longname": "Konva.Ellipse#getAbsoluteScale",
    "name": "getAbsoluteScale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteScale",
    "inherited": true,
    "description": "get absolute scale of the node which takes into\n account its ancestor scales",
    "memberof": "Konva.Ellipse",
    "examples": [
      "// get absolute scale x\nvar scaleX = node.getAbsoluteScale().x;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3961,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2079
  },
  {
    "id": "Konva.Ellipse#getAbsoluteRotation",
    "longname": "Konva.Ellipse#getAbsoluteRotation",
    "name": "getAbsoluteRotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteRotation",
    "inherited": true,
    "description": "get absolute rotation of the node which takes into\n account its ancestor rotations",
    "memberof": "Konva.Ellipse",
    "examples": [
      "// get absolute rotation\nvar rotation = node.getAbsoluteRotation();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3989,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2080
  },
  {
    "id": "Konva.Ellipse#getTransform",
    "longname": "Konva.Ellipse#getTransform",
    "name": "getTransform",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getTransform",
    "inherited": true,
    "description": "get transform of the node",
    "memberof": "Konva.Ellipse",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4009,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2081
  },
  {
    "id": "Konva.Ellipse#clone",
    "longname": "Konva.Ellipse#clone",
    "name": "clone",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#clone",
    "inherited": true,
    "description": "clone node.  Returns a new Node instance with identical attributes.  You can also override\n the node properties with an object literal, enabling you to use an existing node as a template\n for another node",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "override attrs",
        "name": "obj"
      }
    ],
    "examples": [
      "// simple clone\nvar clone = node.clone();\n\n// clone a node and override the x position\nvar clone = rect.clone({\n  x: 5\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4044,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2082
  },
  {
    "id": "Konva.Ellipse#toCanvas",
    "longname": "Konva.Ellipse#toCanvas",
    "name": "toCanvas",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toCanvas",
    "inherited": true,
    "description": "converts node into an canvas element.",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output canvas. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var canvas = node.toCanvas();"
    ],
    "meta": {
      "lineno": 4119,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2083
  },
  {
    "id": "Konva.Ellipse#toDataURL",
    "longname": "Konva.Ellipse#toDataURL",
    "name": "toDataURL",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toDataURL",
    "inherited": true,
    "description": "Creates a composite data URL (base64 string). If MIME type is not\nspecified, then \"image/png\" will result. For \"image/jpeg\", specify a quality\nlevel as quality (range 0.0 - 1.0)",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"image/png\" or \"image/jpeg\".\n \"image/png\" is the default",
        "name": "config.mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "jpeg quality.  If using an \"image/jpeg\" mimeType,\n you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n is very high quality",
        "name": "config.quality"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output image url. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4140,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2084
  },
  {
    "id": "Konva.Ellipse#toImage",
    "longname": "Konva.Ellipse#toImage",
    "name": "toImage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toImage",
    "inherited": true,
    "description": "converts node into an image.  Since the toImage\n method is asynchronous, the resulting image can only be retrieved from the config callback\n or the returned Promise.  toImage is most commonly used\n to cache complex drawings as an image so that they don't have to constantly be redrawn",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"image/png\" or \"image/jpeg\".\n \"image/png\" is the default",
        "name": "config.mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "jpeg quality.  If using an \"image/jpeg\" mimeType,\n you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n is very high quality",
        "name": "config.quality"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output image. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var image = node.toImage({\n  callback(img) {\n    // do stuff with img\n  }\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Image>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4172,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2085
  },
  {
    "id": "Konva.Ellipse#toBlob",
    "longname": "Konva.Ellipse#toBlob",
    "name": "toBlob",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toBlob",
    "inherited": true,
    "description": "Converts node into a blob.  Since the toBlob method is asynchronous,\n the resulting blob can only be retrieved from the config callback\n or the returned Promise.",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output canvas. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var blob = await node.toBlob({});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Blob>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4219,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2086
  },
  {
    "id": "Konva.Ellipse#getClassName",
    "longname": "Konva.Ellipse#getClassName",
    "name": "getClassName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getClassName",
    "inherited": true,
    "description": "get class name, which may return Stage, Layer, Group, or shape class names like Rect, Circle, Text, etc.",
    "memberof": "Konva.Ellipse",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4267,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2087
  },
  {
    "id": "Konva.Ellipse#getType",
    "longname": "Konva.Ellipse#getType",
    "name": "getType",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getType",
    "inherited": true,
    "description": "get the node type, which may return Stage, Layer, Group, or Shape",
    "memberof": "Konva.Ellipse",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4276,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2088
  },
  {
    "id": "Konva.Ellipse#addName",
    "longname": "Konva.Ellipse#addName",
    "name": "addName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#addName",
    "inherited": true,
    "description": "add name to node",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red');\nnode.addName('selected');\nnode.name(); // return 'red selected'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4324,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2089
  },
  {
    "id": "Konva.Ellipse#hasName",
    "longname": "Konva.Ellipse#hasName",
    "name": "hasName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hasName",
    "inherited": true,
    "description": "check is node has name",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red');\nnode.hasName('red');   // return true\nnode.hasName('selected'); // return false\nnode.hasName(''); // return false"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4343,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2090
  },
  {
    "id": "Konva.Ellipse#removeName",
    "longname": "Konva.Ellipse#removeName",
    "name": "removeName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#removeName",
    "inherited": true,
    "description": "remove name from node",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red selected');\nnode.removeName('selected');\nnode.hasName('selected'); // return false\nnode.name(); // return 'red'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4367,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2091
  },
  {
    "id": "Konva.Ellipse#setAttr",
    "longname": "Konva.Ellipse#setAttr",
    "name": "setAttr",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#setAttr",
    "inherited": true,
    "description": "set attr",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "attr"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "name": "val"
      }
    ],
    "examples": [
      "node.setAttr('x', 5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4388,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2092
  },
  {
    "id": "Konva.Ellipse#draw",
    "longname": "Konva.Ellipse#draw",
    "name": "draw",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#draw",
    "inherited": true,
    "description": "draw both scene and hit graphs.  If the node being drawn is the stage, all of the layers will be cleared and redrawn",
    "memberof": "Konva.Ellipse",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4511,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2093
  },
  {
    "id": "Konva.Ellipse#startDrag",
    "longname": "Konva.Ellipse#startDrag",
    "name": "startDrag",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#startDrag",
    "inherited": true,
    "description": "initiate drag and drop.",
    "memberof": "Konva.Ellipse",
    "meta": {
      "lineno": 4544,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2094
  },
  {
    "id": "Konva.Ellipse#stopDrag",
    "longname": "Konva.Ellipse#stopDrag",
    "name": "stopDrag",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#stopDrag",
    "inherited": true,
    "description": "stop drag and drop",
    "memberof": "Konva.Ellipse",
    "meta": {
      "lineno": 4590,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2095
  },
  {
    "id": "Konva.Ellipse#isDragging",
    "longname": "Konva.Ellipse#isDragging",
    "name": "isDragging",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isDragging",
    "inherited": true,
    "description": "determine if node is currently in drag and drop mode",
    "memberof": "Konva.Ellipse",
    "meta": {
      "lineno": 4607,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2096
  },
  {
    "id": "Konva.Ellipse#isClientRectOnScreen",
    "longname": "Konva.Ellipse#isClientRectOnScreen",
    "name": "isClientRectOnScreen",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isClientRectOnScreen",
    "inherited": true,
    "description": "determine if node (at least partially) is currently in user-visible area",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number",
            "Object"
          ]
        },
        "description": "optional margin in pixels",
        "name": "margin"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "margin.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "margin.y"
      }
    ],
    "examples": [
      "// get index\n// default calculations\nvar isOnScreen = node.isClientRectOnScreen()\n// increase object size (or screen size) for cases when objects close to the screen still need to be marked as \"visible\"\nvar isOnScreen = node.isClientRectOnScreen({ x: stage.width(), y: stage.height() })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4671,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2097
  },
  {
    "id": "Konva.Ellipse#zIndex",
    "longname": "Konva.Ellipse#zIndex",
    "name": "zIndex",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#zIndex",
    "inherited": true,
    "description": "get/set zIndex relative to the node's siblings who share the same parent.\nPlease remember that zIndex is not absolute (like in CSS). It is relative to parent element only.",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "index"
      }
    ],
    "examples": [
      "// get index\nvar index = node.zIndex();\n\n// set index\nnode.zIndex(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4764,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2098
  },
  {
    "id": "Konva.Ellipse#absolutePosition",
    "longname": "Konva.Ellipse#absolutePosition",
    "name": "absolutePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#absolutePosition",
    "inherited": true,
    "description": "get/set node absolute position",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "// get position\nvar position = node.absolutePosition();\n\n// set position\nnode.absolutePosition({\n  x: 5,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4779,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2099
  },
  {
    "id": "Konva.Ellipse#position",
    "longname": "Konva.Ellipse#position",
    "name": "position",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#position",
    "inherited": true,
    "description": "get/set node position relative to parent",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "// get position\nvar position = node.position();\n\n// set position\nnode.position({\n  x: 5,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4799,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2100
  },
  {
    "id": "Konva.Ellipse#x",
    "longname": "Konva.Ellipse#x",
    "name": "x",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#x",
    "inherited": true,
    "description": "get/set x position",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get x\nvar x = node.x();\n\n// set x\nnode.x(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4818,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2101
  },
  {
    "id": "Konva.Ellipse#y",
    "longname": "Konva.Ellipse#y",
    "name": "y",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#y",
    "inherited": true,
    "description": "get/set y position",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get y\nvar y = node.y();\n\n// set y\nnode.y(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4832,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2102
  },
  {
    "id": "Konva.Ellipse#globalCompositeOperation",
    "longname": "Konva.Ellipse#globalCompositeOperation",
    "name": "globalCompositeOperation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#globalCompositeOperation",
    "inherited": true,
    "description": "get/set globalCompositeOperation of a node. globalCompositeOperation DOESN'T affect hit graph of nodes. So they are still trigger to events as they have default \"source-over\" globalCompositeOperation.",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "type"
      }
    ],
    "examples": [
      "// get globalCompositeOperation\nvar globalCompositeOperation = shape.globalCompositeOperation();\n\n// set globalCompositeOperation\nshape.globalCompositeOperation('source-in');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4846,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2103
  },
  {
    "id": "Konva.Ellipse#opacity",
    "longname": "Konva.Ellipse#opacity",
    "name": "opacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#opacity",
    "inherited": true,
    "description": "get/set opacity.  Opacity values range from 0 to 1.\n A node with an opacity of 0 is fully transparent, and a node\n with an opacity of 1 is fully opaque",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "opacity"
      }
    ],
    "examples": [
      "// get opacity\nvar opacity = node.opacity();\n\n// set opacity\nnode.opacity(0.5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4860,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2104
  },
  {
    "id": "Konva.Ellipse#name",
    "longname": "Konva.Ellipse#name",
    "name": "name",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#name",
    "inherited": true,
    "description": "get/set name.",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "// get name\nvar name = node.name();\n\n// set name\nnode.name('foo');\n\n// also node may have multiple names (as css classes)\nnode.name('foo bar');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4876,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2105
  },
  {
    "id": "Konva.Ellipse#id",
    "longname": "Konva.Ellipse#id",
    "name": "id",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#id",
    "inherited": true,
    "description": "get/set id. Id is global for whole page.",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "id"
      }
    ],
    "examples": [
      "// get id\nvar name = node.id();\n\n// set id\nnode.id('foo');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4893,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2106
  },
  {
    "id": "Konva.Ellipse#rotation",
    "longname": "Konva.Ellipse#rotation",
    "name": "rotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#rotation",
    "inherited": true,
    "description": "get/set rotation in degrees",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get rotation in degrees\nvar rotation = node.rotation();\n\n// set rotation in degrees\nnode.rotation(45);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4907,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2107
  },
  {
    "id": "Konva.Ellipse#scale",
    "longname": "Konva.Ellipse#scale",
    "name": "scale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scale",
    "inherited": true,
    "description": "get/set scale",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.y"
      }
    ],
    "examples": [
      "// get scale\nvar scale = node.scale();\n\n// set scale\nshape.scale({\n  x: 2,\n  y: 3\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4921,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2108
  },
  {
    "id": "Konva.Ellipse#scaleX",
    "longname": "Konva.Ellipse#scaleX",
    "name": "scaleX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scaleX",
    "inherited": true,
    "description": "get/set scale x",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get scale x\nvar scaleX = node.scaleX();\n\n// set scale x\nnode.scaleX(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4940,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2109
  },
  {
    "id": "Konva.Ellipse#scaleY",
    "longname": "Konva.Ellipse#scaleY",
    "name": "scaleY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scaleY",
    "inherited": true,
    "description": "get/set scale y",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get scale y\nvar scaleY = node.scaleY();\n\n// set scale y\nnode.scaleY(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4954,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2110
  },
  {
    "id": "Konva.Ellipse#skew",
    "longname": "Konva.Ellipse#skew",
    "name": "skew",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skew",
    "inherited": true,
    "description": "get/set skew",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "skew"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "skew.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "skew.y"
      }
    ],
    "examples": [
      "// get skew\nvar skew = node.skew();\n\n// set skew\nnode.skew({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4968,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2111
  },
  {
    "id": "Konva.Ellipse#skewX",
    "longname": "Konva.Ellipse#skewX",
    "name": "skewX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skewX",
    "inherited": true,
    "description": "get/set skew x",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get skew x\nvar skewX = node.skewX();\n\n// set skew x\nnode.skewX(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4987,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2112
  },
  {
    "id": "Konva.Ellipse#skewY",
    "longname": "Konva.Ellipse#skewY",
    "name": "skewY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skewY",
    "inherited": true,
    "description": "get/set skew y",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get skew y\nvar skewY = node.skewY();\n\n// set skew y\nnode.skewY(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5001,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2113
  },
  {
    "id": "Konva.Ellipse#offsetX",
    "longname": "Konva.Ellipse#offsetX",
    "name": "offsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#offsetX",
    "inherited": true,
    "description": "get/set offset x",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get offset x\nvar offsetX = node.offsetX();\n\n// set offset x\nnode.offsetX(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5033,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2114
  },
  {
    "id": "Konva.Ellipse#offsetY",
    "longname": "Konva.Ellipse#offsetY",
    "name": "offsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#offsetY",
    "inherited": true,
    "description": "get/set offset y",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get offset y\nvar offsetY = node.offsetY();\n\n// set offset y\nnode.offsetY(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5047,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2115
  },
  {
    "id": "Konva.Ellipse#dragDistance",
    "longname": "Konva.Ellipse#dragDistance",
    "name": "dragDistance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#dragDistance",
    "inherited": true,
    "description": "get/set drag distance",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "distance"
      }
    ],
    "examples": [
      "// get drag distance\nvar dragDistance = node.dragDistance();\n\n// set distance\n// node starts dragging only if pointer moved more then 3 pixels\nnode.dragDistance(3);\n// or set globally\nKonva.dragDistance = 3;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5061,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2116
  },
  {
    "id": "Konva.Ellipse#width",
    "longname": "Konva.Ellipse#width",
    "name": "width",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#width",
    "inherited": true,
    "description": "get/set width",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "width"
      }
    ],
    "examples": [
      "// get width\nvar width = node.width();\n\n// set width\nnode.width(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5078,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2117
  },
  {
    "id": "Konva.Ellipse#height",
    "longname": "Konva.Ellipse#height",
    "name": "height",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#height",
    "inherited": true,
    "description": "get/set height",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "height"
      }
    ],
    "examples": [
      "// get height\nvar height = node.height();\n\n// set height\nnode.height(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5092,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2118
  },
  {
    "id": "Konva.Ellipse#listening",
    "longname": "Konva.Ellipse#listening",
    "name": "listening",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#listening",
    "inherited": true,
    "description": "get/set listening attr.  If you need to determine if a node is listening or not\n  by taking into account its parents, use the isListening() method\n  nodes with listening set to false will not be detected in hit graph\n  so they will be ignored in container.getIntersection() method",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "Can be true, or false.  The default is true.",
        "name": "listening"
      }
    ],
    "examples": [
      "// get listening attr\nvar listening = node.listening();\n\n// stop listening for events, remove node and all its children from hit graph\nnode.listening(false);\n\n// listen to events according to the parent\nnode.listening(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5106,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2119
  },
  {
    "id": "Konva.Ellipse#preventDefault",
    "longname": "Konva.Ellipse#preventDefault",
    "name": "preventDefault",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#preventDefault",
    "inherited": true,
    "description": "get/set preventDefault\nBy default all shapes will prevent default behavior\nof a browser on a pointer move or tap.\nthat will prevent native scrolling when you are trying to drag&drop a node\nbut sometimes you may need to enable default actions\nin that case you can set the property to false",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "preventDefault"
      }
    ],
    "examples": [
      "// get preventDefault\nvar shouldPrevent = shape.preventDefault();\n\n// set preventDefault\nshape.preventDefault(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5125,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2120
  },
  {
    "id": "Konva.Ellipse#filters",
    "longname": "Konva.Ellipse#filters",
    "name": "filters",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#filters",
    "inherited": true,
    "description": "get/set filters.  Filters are applied to cached canvases",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "array of filters",
        "name": "filters"
      }
    ],
    "examples": [
      "// get filters\nvar filters = node.filters();\n\n// set a single filter\nnode.cache();\nnode.filters([Konva.Filters.Blur]);\n\n// set multiple filters\nnode.cache();\nnode.filters([\n  Konva.Filters.Blur,\n  Konva.Filters.Sepia,\n  Konva.Filters.Invert\n]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5148,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2121
  },
  {
    "id": "Konva.Ellipse#visible",
    "longname": "Konva.Ellipse#visible",
    "name": "visible",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#visible",
    "inherited": true,
    "description": "get/set visible attr.  Can be true, or false.  The default is true.\n  If you need to determine if a node is visible or not\n  by taking into account its parents, use the isVisible() method",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "visible"
      }
    ],
    "examples": [
      "// get visible attr\nvar visible = node.visible();\n\n// make invisible\nnode.visible(false);\n\n// make visible (according to the parent)\nnode.visible(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5171,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2122
  },
  {
    "id": "Konva.Ellipse#transformsEnabled",
    "longname": "Konva.Ellipse#transformsEnabled",
    "name": "transformsEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#transformsEnabled",
    "inherited": true,
    "description": "get/set transforms that are enabled.  Can be \"all\", \"none\", or \"position\".  The default\n is \"all\"",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// enable position transform only to improve draw performance\nnode.transformsEnabled('position');\n\n// enable all transforms\nnode.transformsEnabled('all');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5191,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2123
  },
  {
    "id": "Konva.Ellipse#size",
    "longname": "Konva.Ellipse#size",
    "name": "size",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#size",
    "inherited": true,
    "description": "get/set node size",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "size"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size.height"
      }
    ],
    "examples": [
      "// get node size\nvar size = node.size();\nvar width = size.width;\nvar height = size.height;\n\n// set size\nnode.size({\n  width: 100,\n  height: 200\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5205,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2124
  },
  {
    "id": "Konva.Ellipse#dragBoundFunc",
    "longname": "Konva.Ellipse#dragBoundFunc",
    "name": "dragBoundFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#dragBoundFunc",
    "inherited": true,
    "description": "get/set drag bound function.  This is used to override the default\n drag and drop position.",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "name": "dragBoundFunc"
      }
    ],
    "examples": [
      "// get drag bound function\nvar dragBoundFunc = node.dragBoundFunc();\n\n// create vertical drag and drop\nnode.dragBoundFunc(function(pos){\n  // important pos - is absolute position of the node\n  // you should return absolute position too\n  return {\n    x: this.absolutePosition().x,\n    y: pos.y\n  };\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5226,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2125
  },
  {
    "id": "Konva.Ellipse#draggable",
    "longname": "Konva.Ellipse#draggable",
    "name": "draggable",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#draggable",
    "inherited": true,
    "description": "get/set draggable flag",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "draggable"
      }
    ],
    "examples": [
      "// get draggable flag\nvar draggable = node.draggable();\n\n// enable drag and drop\nnode.draggable(true);\n\n// disable drag and drop\nnode.draggable(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5248,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2126
  },
  {
    "id": "Konva.Ellipse#to",
    "longname": "Konva.Ellipse#to",
    "name": "to",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#to",
    "inherited": true,
    "description": "Tween node properties. Shorter usage of {@link Konva.Tween} object.",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "tween params",
        "name": "params"
      }
    ],
    "examples": [
      "circle.to({\n  x : 50,\n  duration : 0.5,\n  onUpdate: () => console.log('props updated'),\n  onFinish: () => console.log('finished'),\n});"
    ],
    "meta": {
      "lineno": 9588,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2127
  },
  {
    "id": "Konva.Ellipse#blurRadius",
    "longname": "Konva.Ellipse#blurRadius",
    "name": "blurRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#blurRadius",
    "inherited": true,
    "description": "get/set blur radius. Use with {@link Konva.Filters.Blur} filter",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "radius"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17517,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2128
  },
  {
    "id": "Konva.Ellipse#brightness",
    "longname": "Konva.Ellipse#brightness",
    "name": "brightness",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#brightness",
    "inherited": true,
    "description": "get/set filter brightness.  The brightness is a number between -1 and 1.&nbsp; Positive values\n brighten the pixels and negative values darken them. Use with {@link Konva.Filters.Brighten} filter.",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between -1 and 1",
        "name": "brightness"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17547,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2129
  },
  {
    "id": "Konva.Ellipse#contrast",
    "longname": "Konva.Ellipse#contrast",
    "name": "contrast",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#contrast",
    "inherited": true,
    "description": "get/set filter contrast.  The contrast is a number between -100 and 100.\nUse with {@link Konva.Filters.Contrast} filter.",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between -100 and 100",
        "name": "contrast"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17600,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2130
  },
  {
    "id": "Konva.Ellipse#embossStrength",
    "longname": "Konva.Ellipse#embossStrength",
    "name": "embossStrength",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossStrength",
    "inherited": true,
    "description": "get/set emboss strength. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1.  Default is 0.5",
        "name": "level"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17725,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2131
  },
  {
    "id": "Konva.Ellipse#embossWhiteLevel",
    "longname": "Konva.Ellipse#embossWhiteLevel",
    "name": "embossWhiteLevel",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossWhiteLevel",
    "inherited": true,
    "description": "get/set emboss white level. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1.  Default is 0.5",
        "name": "embossWhiteLevel"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17733,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2132
  },
  {
    "id": "Konva.Ellipse#embossDirection",
    "longname": "Konva.Ellipse#embossDirection",
    "name": "embossDirection",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossDirection",
    "inherited": true,
    "description": "get/set emboss direction. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "can be top-left, top, top-right, right, bottom-right, bottom, bottom-left or left\n  The default is top-left",
        "name": "embossDirection"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17741,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2133
  },
  {
    "id": "Konva.Ellipse#embossBlend",
    "longname": "Konva.Ellipse#embossBlend",
    "name": "embossBlend",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossBlend",
    "inherited": true,
    "description": "get/set emboss blend. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "embossBlend"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17750,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2134
  },
  {
    "id": "Konva.Ellipse#enhance",
    "longname": "Konva.Ellipse#enhance",
    "name": "enhance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#enhance",
    "inherited": true,
    "description": "get/set enhance. Use with {@link Konva.Filters.Enhance} filter. -1 to 1 values",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Float"
          ]
        },
        "name": "amount"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Float"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17864,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2135
  },
  {
    "id": "Konva.Ellipse#hue",
    "longname": "Konva.Ellipse#hue",
    "name": "hue",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hue",
    "inherited": true,
    "description": "get/set hsv hue in degrees. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between 0 and 359",
        "name": "hue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17896,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2136
  },
  {
    "id": "Konva.Ellipse#saturation",
    "longname": "Konva.Ellipse#saturation",
    "name": "saturation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#saturation",
    "inherited": true,
    "description": "get/set hsv saturation. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the saturation, 1.0 doubles, etc..",
        "name": "saturation"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17904,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2137
  },
  {
    "id": "Konva.Ellipse#luminance",
    "longname": "Konva.Ellipse#luminance",
    "name": "luminance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#luminance",
    "inherited": true,
    "description": "get/set hsl luminance. Use with {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "from -1 to 1",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17912,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2138
  },
  {
    "id": "Konva.Ellipse#value",
    "longname": "Konva.Ellipse#value",
    "name": "value",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#value",
    "inherited": true,
    "description": "get/set hsv value. Use with {@link Konva.Filters.HSV} filter.",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the value, 1.0 doubles, etc..",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18018,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2139
  },
  {
    "id": "Konva.Ellipse#kaleidoscopePower",
    "longname": "Konva.Ellipse#kaleidoscopePower",
    "name": "kaleidoscopePower",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#kaleidoscopePower",
    "inherited": true,
    "description": "get/set kaleidoscope power. Use with {@link Konva.Filters.Kaleidoscope} filter.",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "of kaleidoscope",
        "name": "power"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18243,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2140
  },
  {
    "id": "Konva.Ellipse#kaleidoscopeAngle",
    "longname": "Konva.Ellipse#kaleidoscopeAngle",
    "name": "kaleidoscopeAngle",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#kaleidoscopeAngle",
    "inherited": true,
    "description": "get/set kaleidoscope angle. Use with {@link Konva.Filters.Kaleidoscope} filter.",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "degrees"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18251,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2141
  },
  {
    "id": "Konva.Ellipse#noise",
    "longname": "Konva.Ellipse#noise",
    "name": "noise",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#noise",
    "inherited": true,
    "description": "get/set noise amount.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Noise} filter.",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "noise"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18437,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2142
  },
  {
    "id": "Konva.Ellipse#pixelSize",
    "longname": "Konva.Ellipse#pixelSize",
    "name": "pixelSize",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#pixelSize",
    "inherited": true,
    "description": "get/set pixel size. Use with {@link Konva.Filters.Pixelate} filter.",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "pixelSize"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18522,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2143
  },
  {
    "id": "Konva.Ellipse#levels",
    "longname": "Konva.Ellipse#levels",
    "name": "levels",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#levels",
    "inherited": true,
    "description": "get/set levels.  Must be a number between 0 and 1.  Use with {@link Konva.Filters.Posterize} filter.",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1",
        "name": "level"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18552,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2144
  },
  {
    "id": "Konva.Ellipse#red",
    "longname": "Konva.Ellipse#red",
    "name": "red",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#red",
    "inherited": true,
    "description": "get/set filter red value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "red"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18596,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2145
  },
  {
    "id": "Konva.Ellipse#green",
    "longname": "Konva.Ellipse#green",
    "name": "green",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#green",
    "inherited": true,
    "description": "get/set filter green value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "green"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18616,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2146
  },
  {
    "id": "Konva.Ellipse#blue",
    "longname": "Konva.Ellipse#blue",
    "name": "blue",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#blue",
    "inherited": true,
    "description": "get/set filter blue value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "blue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18625,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2147
  },
  {
    "id": "Konva.Ellipse#alpha",
    "longname": "Konva.Ellipse#alpha",
    "name": "alpha",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#alpha",
    "inherited": true,
    "description": "get/set filter alpha value. Use with {@link Konva.Filters.RGBA} filter.",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Float"
          ]
        },
        "description": "value between 0 and 1",
        "name": "alpha"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Float"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18718,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2148
  },
  {
    "id": "Konva.Ellipse#threshold",
    "longname": "Konva.Ellipse#threshold",
    "name": "threshold",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#threshold",
    "inherited": true,
    "description": "get/set threshold.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Threshold} or {@link Konva.Filters.Mask} filter.",
    "memberof": "Konva.Ellipse",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "threshold"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18809,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2149
  },
  {
    "id": "Konva.Image#hasShadow",
    "longname": "Konva.Image#hasShadow",
    "name": "hasShadow",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasShadow",
    "inherited": true,
    "overrides": "Konva.Shape#hasShadow",
    "description": "returns whether or not a shadow will be rendered",
    "memberof": "Konva.Image",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 6909,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2150
  },
  {
    "id": "Konva.Image#hasFill",
    "longname": "Konva.Image#hasFill",
    "name": "hasFill",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasFill",
    "inherited": true,
    "overrides": "Konva.Shape#hasFill",
    "description": "returns whether or not the shape will be filled",
    "memberof": "Konva.Image",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7009,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2151
  },
  {
    "id": "Konva.Image#hasStroke",
    "longname": "Konva.Image#hasStroke",
    "name": "hasStroke",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasStroke",
    "inherited": true,
    "overrides": "Konva.Shape#hasStroke",
    "description": "returns whether or not the shape will be stroked",
    "memberof": "Konva.Image",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7030,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2152
  },
  {
    "id": "Konva.Image#intersects",
    "longname": "Konva.Image#intersects",
    "name": "intersects",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#intersects",
    "inherited": true,
    "overrides": "Konva.Shape#intersects",
    "description": "determines if point is in the shape, regardless if other shapes are on top of it.  Note: because\n this method clears a temporary canvas and then redraws the shape, it performs very poorly if executed many times\n consecutively.  Please use the {@link Konva.Stage#getIntersection} method if at all possible\n because it performs much better",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "point"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "point.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "point.y"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7066,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2153
  },
  {
    "id": "Konva.Image#getSelfRect",
    "longname": "Konva.Image#getSelfRect",
    "name": "getSelfRect",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#getSelfRect",
    "inherited": true,
    "overrides": "Konva.Shape#getSelfRect",
    "description": "return self rectangle (x, y, width, height) of shape.\nThis method are not taken into account transformation and styles.",
    "memberof": "Konva.Image",
    "examples": [
      "rect.getSelfRect();  // return {x:0, y:0, width:rect.width(), height:rect.height()}\ncircle.getSelfRect();  // return {x: - circle.width() / 2, y: - circle.height() / 2, width:circle.width(), height:circle.height()}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "rect with `{x, y, width, height}` properties"
      }
    ],
    "meta": {
      "lineno": 7138,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2154
  },
  {
    "id": "Konva.Image#drawHitFromCache",
    "longname": "Konva.Image#drawHitFromCache",
    "name": "drawHitFromCache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#drawHitFromCache",
    "inherited": true,
    "overrides": "Konva.Shape#drawHitFromCache",
    "description": "draw hit graph using the cached scene canvas",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "alpha channel threshold that determines whether or not\n a pixel should be drawn onto the hit graph.  Must be a value between 0 and 255.\n The default is 0",
        "name": "alphaThreshold"
      }
    ],
    "examples": [
      "shape.cache();\nshape.drawHitFromCache();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7294,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2155
  },
  {
    "id": "Konva.Image#stroke",
    "longname": "Konva.Image#stroke",
    "name": "stroke",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#stroke",
    "inherited": true,
    "overrides": "Konva.Shape#stroke",
    "description": "get/set stroke color",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get stroke color\nvar stroke = shape.stroke();\n\n// set stroke color with color string\nshape.stroke('green');\n\n// set stroke color with hex\nshape.stroke('#00ff00');\n\n// set stroke color with rgb\nshape.stroke('rgb(0,255,0)');\n\n// set stroke color with rgba and make it 50% opaque\nshape.stroke('rgba(0,255,0,0.5');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7360,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2156
  },
  {
    "id": "Konva.Image#strokeWidth",
    "longname": "Konva.Image#strokeWidth",
    "name": "strokeWidth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeWidth",
    "inherited": true,
    "overrides": "Konva.Shape#strokeWidth",
    "description": "get/set stroke width",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "strokeWidth"
      }
    ],
    "examples": [
      "// get stroke width\nvar strokeWidth = shape.strokeWidth();\n\n// set stroke width\nshape.strokeWidth(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7383,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2157
  },
  {
    "id": "Konva.Image#fillAfterStrokeEnabled",
    "longname": "Konva.Image#fillAfterStrokeEnabled",
    "name": "fillAfterStrokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillAfterStrokeEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#fillAfterStrokeEnabled",
    "description": "get/set fillAfterStrokeEnabled property. By default Konva is drawing filling first, then stroke on top of the fill.\nIn rare situations you may want a different behavior. When you have a stroke first then fill on top of it.\nEspecially useful for Text objects.\nDefault is false.",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "fillAfterStrokeEnabled"
      }
    ],
    "examples": [
      "// get stroke width\nvar fillAfterStrokeEnabled = shape.fillAfterStrokeEnabled();\n\n// set stroke width\nshape.fillAfterStrokeEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7397,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2158
  },
  {
    "id": "Konva.Image#hitStrokeWidth",
    "longname": "Konva.Image#hitStrokeWidth",
    "name": "hitStrokeWidth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hitStrokeWidth",
    "inherited": true,
    "overrides": "Konva.Shape#hitStrokeWidth",
    "description": "get/set stroke width for hit detection. Default value is \"auto\", it means it will be equals to strokeWidth",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "hitStrokeWidth"
      }
    ],
    "examples": [
      "// get stroke width\nvar hitStrokeWidth = shape.hitStrokeWidth();\n\n// set hit stroke width\nshape.hitStrokeWidth(20);\n// set hit stroke width always equals to scene stroke width\nshape.hitStrokeWidth('auto');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7414,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2159
  },
  {
    "id": "Konva.Image#strokeHitEnabled",
    "longname": "Konva.Image#strokeHitEnabled",
    "name": "strokeHitEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeHitEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#strokeHitEnabled",
    "description": "**deprecated, use hitStrokeWidth instead!** get/set strokeHitEnabled property. Useful for performance optimization.\nYou may set `shape.strokeHitEnabled(false)`. In this case stroke will be no draw on hit canvas, so hit area\nof shape will be decreased (by lineWidth / 2). Remember that non closed line with `strokeHitEnabled = false`\nwill be not drawn on hit canvas, that is mean line will no trigger pointer events (like mouseover)\nDefault value is true.",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "strokeHitEnabled"
      }
    ],
    "examples": [
      "// get strokeHitEnabled\nvar strokeHitEnabled = shape.strokeHitEnabled();\n\n// set strokeHitEnabled\nshape.strokeHitEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7430,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2160
  },
  {
    "id": "Konva.Image#perfectDrawEnabled",
    "longname": "Konva.Image#perfectDrawEnabled",
    "name": "perfectDrawEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#perfectDrawEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#perfectDrawEnabled",
    "description": "get/set perfectDrawEnabled. If a shape has fill, stroke and opacity you may set `perfectDrawEnabled` to false to improve performance.\nSee http://konvajs.org/docs/performance/Disable_Perfect_Draw.html for more information.\nDefault value is true",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "perfectDrawEnabled"
      }
    ],
    "examples": [
      "// get perfectDrawEnabled\nvar perfectDrawEnabled = shape.perfectDrawEnabled();\n\n// set perfectDrawEnabled\nshape.perfectDrawEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7448,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2161
  },
  {
    "id": "Konva.Image#shadowForStrokeEnabled",
    "longname": "Konva.Image#shadowForStrokeEnabled",
    "name": "shadowForStrokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowForStrokeEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#shadowForStrokeEnabled",
    "description": "get/set shadowForStrokeEnabled. Useful for performance optimization.\nYou may set `shape.shadowForStrokeEnabled(false)`. In this case stroke will no effect shadow.\nRemember if you set `shadowForStrokeEnabled = false` for non closed line - that line will have no shadow!.\nDefault value is true",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "shadowForStrokeEnabled"
      }
    ],
    "examples": [
      "// get shadowForStrokeEnabled\nvar shadowForStrokeEnabled = shape.shadowForStrokeEnabled();\n\n// set shadowForStrokeEnabled\nshape.shadowForStrokeEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7464,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2162
  },
  {
    "id": "Konva.Image#lineJoin",
    "longname": "Konva.Image#lineJoin",
    "name": "lineJoin",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#lineJoin",
    "inherited": true,
    "overrides": "Konva.Shape#lineJoin",
    "description": "get/set line join.  Can be miter, round, or bevel.  The\n default is miter",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "lineJoin"
      }
    ],
    "examples": [
      "// get line join\nvar lineJoin = shape.lineJoin();\n\n// set line join\nshape.lineJoin('round');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7481,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2163
  },
  {
    "id": "Konva.Image#lineCap",
    "longname": "Konva.Image#lineCap",
    "name": "lineCap",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#lineCap",
    "inherited": true,
    "overrides": "Konva.Shape#lineCap",
    "description": "get/set line cap.  Can be butt, round, or square",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "lineCap"
      }
    ],
    "examples": [
      "// get line cap\nvar lineCap = shape.lineCap();\n\n// set line cap\nshape.lineCap('round');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7496,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2164
  },
  {
    "id": "Konva.Image#sceneFunc",
    "longname": "Konva.Image#sceneFunc",
    "name": "sceneFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#sceneFunc",
    "inherited": true,
    "overrides": "Konva.Shape#sceneFunc",
    "description": "get/set scene draw function. That function is used to draw the shape on a canvas.\nAlso that function will be used to draw hit area of the shape, in case if hitFunc is not defined.",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "drawing function",
        "name": "drawFunc"
      }
    ],
    "examples": [
      "// get scene draw function\nvar sceneFunc = shape.sceneFunc();\n\n// set scene draw function\nshape.sceneFunc(function(context, shape) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  // like stroke and fill\n  context.fillStrokeShape(shape);\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7510,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2165
  },
  {
    "id": "Konva.Image#hitFunc",
    "longname": "Konva.Image#hitFunc",
    "name": "hitFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hitFunc",
    "inherited": true,
    "overrides": "Konva.Shape#hitFunc",
    "description": "get/set hit draw function. That function is used to draw custom hit area of a shape.",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "drawing function",
        "name": "drawFunc"
      }
    ],
    "examples": [
      "// get hit draw function\nvar hitFunc = shape.hitFunc();\n\n// set hit draw function\nshape.hitFunc(function(context) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  context.fillStrokeShape(shape);\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7532,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2166
  },
  {
    "id": "Konva.Image#dash",
    "longname": "Konva.Image#dash",
    "name": "dash",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#dash",
    "inherited": true,
    "overrides": "Konva.Shape#dash",
    "description": "get/set dash array for stroke.",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "dash"
      }
    ],
    "examples": [
      "// apply dashed stroke that is 10px long and 5 pixels apart\n line.dash([10, 5]);\n // apply dashed stroke that is made up of alternating dashed\n // lines that are 10px long and 20px apart, and dots that have\n // a radius of 5px and are 20px apart\n line.dash([10, 20, 0.001, 20]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7552,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2167
  },
  {
    "id": "Konva.Image#shadowColor",
    "longname": "Konva.Image#shadowColor",
    "name": "shadowColor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowColor",
    "inherited": true,
    "overrides": "Konva.Shape#shadowColor",
    "description": "get/set shadow color",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get shadow color\nvar shadow = shape.shadowColor();\n\n// set shadow color with color string\nshape.shadowColor('green');\n\n// set shadow color with hex\nshape.shadowColor('#00ff00');\n\n// set shadow color with rgb\nshape.shadowColor('rgb(0,255,0)');\n\n// set shadow color with rgba and make it 50% opaque\nshape.shadowColor('rgba(0,255,0,0.5');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7579,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2168
  },
  {
    "id": "Konva.Image#shadowBlur",
    "longname": "Konva.Image#shadowBlur",
    "name": "shadowBlur",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowBlur",
    "inherited": true,
    "overrides": "Konva.Shape#shadowBlur",
    "description": "get/set shadow blur",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "blur"
      }
    ],
    "examples": [
      "// get shadow blur\nvar shadowBlur = shape.shadowBlur();\n\n// set shadow blur\nshape.shadowBlur(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7602,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2169
  },
  {
    "id": "Konva.Image#shadowOpacity",
    "longname": "Konva.Image#shadowOpacity",
    "name": "shadowOpacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOpacity",
    "inherited": true,
    "overrides": "Konva.Shape#shadowOpacity",
    "description": "get/set shadow opacity.  must be a value between 0 and 1",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "opacity"
      }
    ],
    "examples": [
      "// get shadow opacity\nvar shadowOpacity = shape.shadowOpacity();\n\n// set shadow opacity\nshape.shadowOpacity(0.5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7616,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2170
  },
  {
    "id": "Konva.Image#shadowOffset",
    "longname": "Konva.Image#shadowOffset",
    "name": "shadowOffset",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffset",
    "inherited": true,
    "overrides": "Konva.Shape#shadowOffset",
    "description": "get/set shadow offset",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.y"
      }
    ],
    "examples": [
      "// get shadow offset\nvar shadowOffset = shape.shadowOffset();\n\n// set shadow offset\nshape.shadowOffset({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7630,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2171
  },
  {
    "id": "Konva.Image#shadowOffsetX",
    "longname": "Konva.Image#shadowOffsetX",
    "name": "shadowOffsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffsetX",
    "inherited": true,
    "overrides": "Konva.Shape#shadowOffsetX",
    "description": "get/set shadow offset x",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get shadow offset x\nvar shadowOffsetX = shape.shadowOffsetX();\n\n// set shadow offset x\nshape.shadowOffsetX(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7649,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2172
  },
  {
    "id": "Konva.Image#shadowOffsetY",
    "longname": "Konva.Image#shadowOffsetY",
    "name": "shadowOffsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffsetY",
    "inherited": true,
    "overrides": "Konva.Shape#shadowOffsetY",
    "description": "get/set shadow offset y",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get shadow offset y\nvar shadowOffsetY = shape.shadowOffsetY();\n\n// set shadow offset y\nshape.shadowOffsetY(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7663,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2173
  },
  {
    "id": "Konva.Image#fillPatternImage",
    "longname": "Konva.Image#fillPatternImage",
    "name": "fillPatternImage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternImage",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternImage",
    "description": "get/set fill pattern image",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Image"
          ]
        },
        "description": "object",
        "name": "image"
      }
    ],
    "examples": [
      "// get fill pattern image\nvar fillPatternImage = shape.fillPatternImage();\n\n// set fill pattern image\nvar imageObj = new Image();\nimageObj.onload = function() {\n  shape.fillPatternImage(imageObj);\n};\nimageObj.src = 'path/to/image/jpg';"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Image"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7677,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2174
  },
  {
    "id": "Konva.Image#fill",
    "longname": "Konva.Image#fill",
    "name": "fill",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fill",
    "inherited": true,
    "overrides": "Konva.Shape#fill",
    "description": "get/set fill color",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get fill color\nvar fill = shape.fill();\n\n// set fill color with color string\nshape.fill('green');\n\n// set fill color with hex\nshape.fill('#00ff00');\n\n// set fill color with rgb\nshape.fill('rgb(0,255,0)');\n\n// set fill color with rgba and make it 50% opaque\nshape.fill('rgba(0,255,0,0.5');\n\n// shape without fill\nshape.fill(null);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7695,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2175
  },
  {
    "id": "Konva.Image#fillPatternX",
    "longname": "Konva.Image#fillPatternX",
    "name": "fillPatternX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternX",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternX",
    "description": "get/set fill pattern x",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern x\nvar fillPatternX = shape.fillPatternX();\n// set fill pattern x\nshape.fillPatternX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7721,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2176
  },
  {
    "id": "Konva.Image#fillPatternY",
    "longname": "Konva.Image#fillPatternY",
    "name": "fillPatternY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternY",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternY",
    "description": "get/set fill pattern y",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern y\nvar fillPatternY = shape.fillPatternY();\n// set fill pattern y\nshape.fillPatternY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7734,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2177
  },
  {
    "id": "Konva.Image#fillLinearGradientColorStops",
    "longname": "Konva.Image#fillLinearGradientColorStops",
    "name": "fillLinearGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientColorStops",
    "inherited": true,
    "overrides": "Konva.Shape#fillLinearGradientColorStops",
    "description": "get/set fill linear gradient color stops",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get fill linear gradient color stops\nvar colorStops = shape.fillLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillLinearGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "colorStops"
      }
    ],
    "meta": {
      "lineno": 7747,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2178
  },
  {
    "id": "Konva.Image#strokeLinearGradientColorStops",
    "longname": "Konva.Image#strokeLinearGradientColorStops",
    "name": "strokeLinearGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientColorStops",
    "inherited": true,
    "overrides": "Konva.Shape#strokeLinearGradientColorStops",
    "description": "get/set stroke linear gradient color stops",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get stroke linear gradient color stops\nvar colorStops = shape.strokeLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.strokeLinearGradientColorStops([0, 'red', 0.5, 'blue', 1, 'green']);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "colorStops"
      }
    ],
    "meta": {
      "lineno": 7762,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2179
  },
  {
    "id": "Konva.Image#fillRadialGradientStartRadius",
    "longname": "Konva.Image#fillRadialGradientStartRadius",
    "name": "fillRadialGradientStartRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartRadius",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientStartRadius",
    "description": "get/set fill radial gradient start radius",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "radius"
      }
    ],
    "examples": [
      "// get radial gradient start radius\nvar startRadius = shape.fillRadialGradientStartRadius();\n\n// set radial gradient start radius\nshape.fillRadialGradientStartRadius(0);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7777,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2180
  },
  {
    "id": "Konva.Image#fillRadialGradientEndRadius",
    "longname": "Konva.Image#fillRadialGradientEndRadius",
    "name": "fillRadialGradientEndRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndRadius",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientEndRadius",
    "description": "get/set fill radial gradient end radius",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "radius"
      }
    ],
    "examples": [
      "// get radial gradient end radius\nvar endRadius = shape.fillRadialGradientEndRadius();\n\n// set radial gradient end radius\nshape.fillRadialGradientEndRadius(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7791,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2181
  },
  {
    "id": "Konva.Image#fillRadialGradientColorStops",
    "longname": "Konva.Image#fillRadialGradientColorStops",
    "name": "fillRadialGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientColorStops",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientColorStops",
    "description": "get/set fill radial gradient color stops",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get fill radial gradient color stops\nvar colorStops = shape.fillRadialGradientColorStops();\n\n// create a radial gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillRadialGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7805,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2182
  },
  {
    "id": "Konva.Image#fillPatternRepeat",
    "longname": "Konva.Image#fillPatternRepeat",
    "name": "fillPatternRepeat",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternRepeat",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternRepeat",
    "description": "get/set fill pattern repeat.  Can be 'repeat', 'repeat-x', 'repeat-y', or 'no-repeat'.  The default is 'repeat'",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "repeat"
      }
    ],
    "examples": [
      "// get fill pattern repeat\nvar repeat = shape.fillPatternRepeat();\n\n// repeat pattern in x direction only\nshape.fillPatternRepeat('repeat-x');\n\n// do not repeat the pattern\nshape.fillPatternRepeat('no-repeat');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7820,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2183
  },
  {
    "id": "Konva.Image#fillEnabled",
    "longname": "Konva.Image#fillEnabled",
    "name": "fillEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#fillEnabled",
    "description": "get/set fill enabled flag",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get fill enabled flag\nvar fillEnabled = shape.fillEnabled();\n\n// disable fill\nshape.fillEnabled(false);\n\n// enable fill\nshape.fillEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7837,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2184
  },
  {
    "id": "Konva.Image#strokeEnabled",
    "longname": "Konva.Image#strokeEnabled",
    "name": "strokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#strokeEnabled",
    "description": "get/set stroke enabled flag",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get stroke enabled flag\nvar strokeEnabled = shape.strokeEnabled();\n\n// disable stroke\nshape.strokeEnabled(false);\n\n// enable stroke\nshape.strokeEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7854,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2185
  },
  {
    "id": "Konva.Image#shadowEnabled",
    "longname": "Konva.Image#shadowEnabled",
    "name": "shadowEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#shadowEnabled",
    "description": "get/set shadow enabled flag",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get shadow enabled flag\nvar shadowEnabled = shape.shadowEnabled();\n\n// disable shadow\nshape.shadowEnabled(false);\n\n// enable shadow\nshape.shadowEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7871,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2186
  },
  {
    "id": "Konva.Image#dashEnabled",
    "longname": "Konva.Image#dashEnabled",
    "name": "dashEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#dashEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#dashEnabled",
    "description": "get/set dash enabled flag",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get dash enabled flag\nvar dashEnabled = shape.dashEnabled();\n\n// disable dash\nshape.dashEnabled(false);\n\n// enable dash\nshape.dashEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7888,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2187
  },
  {
    "id": "Konva.Image#strokeScaleEnabled",
    "longname": "Konva.Image#strokeScaleEnabled",
    "name": "strokeScaleEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeScaleEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#strokeScaleEnabled",
    "description": "get/set strokeScale enabled flag",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get stroke scale enabled flag\nvar strokeScaleEnabled = shape.strokeScaleEnabled();\n\n// disable stroke scale\nshape.strokeScaleEnabled(false);\n\n// enable stroke scale\nshape.strokeScaleEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7905,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2188
  },
  {
    "id": "Konva.Image#fillPriority",
    "longname": "Konva.Image#fillPriority",
    "name": "fillPriority",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPriority",
    "inherited": true,
    "overrides": "Konva.Shape#fillPriority",
    "description": "get/set fill priority.  can be color, pattern, linear-gradient, or radial-gradient.  The default is color.\n  This is handy if you want to toggle between different fill types.",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "priority"
      }
    ],
    "examples": [
      "// get fill priority\nvar fillPriority = shape.fillPriority();\n\n// set fill priority\nshape.fillPriority('linear-gradient');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7922,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2189
  },
  {
    "id": "Konva.Image#fillPatternOffset",
    "longname": "Konva.Image#fillPatternOffset",
    "name": "fillPatternOffset",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffset",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternOffset",
    "description": "get/set fill pattern offset",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.y"
      }
    ],
    "examples": [
      "// get fill pattern offset\nvar patternOffset = shape.fillPatternOffset();\n\n// set fill pattern offset\nshape.fillPatternOffset({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7937,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2190
  },
  {
    "id": "Konva.Image#fillPatternOffsetX",
    "longname": "Konva.Image#fillPatternOffsetX",
    "name": "fillPatternOffsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffsetX",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternOffsetX",
    "description": "get/set fill pattern offset x",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern offset x\nvar patternOffsetX = shape.fillPatternOffsetX();\n\n// set fill pattern offset x\nshape.fillPatternOffsetX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7956,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2191
  },
  {
    "id": "Konva.Image#fillPatternOffsetY",
    "longname": "Konva.Image#fillPatternOffsetY",
    "name": "fillPatternOffsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffsetY",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternOffsetY",
    "description": "get/set fill pattern offset y",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern offset y\nvar patternOffsetY = shape.fillPatternOffsetY();\n\n// set fill pattern offset y\nshape.fillPatternOffsetY(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7970,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2192
  },
  {
    "id": "Konva.Image#fillPatternScale",
    "longname": "Konva.Image#fillPatternScale",
    "name": "fillPatternScale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScale",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternScale",
    "description": "get/set fill pattern scale",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.y"
      }
    ],
    "examples": [
      "// get fill pattern scale\nvar patternScale = shape.fillPatternScale();\n\n// set fill pattern scale\nshape.fillPatternScale({\n  x: 2,\n  y: 2\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7984,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2193
  },
  {
    "id": "Konva.Image#fillPatternScaleX",
    "longname": "Konva.Image#fillPatternScaleX",
    "name": "fillPatternScaleX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScaleX",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternScaleX",
    "description": "get/set fill pattern scale x",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern scale x\nvar patternScaleX = shape.fillPatternScaleX();\n\n// set fill pattern scale x\nshape.fillPatternScaleX(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8003,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2194
  },
  {
    "id": "Konva.Image#fillPatternScaleY",
    "longname": "Konva.Image#fillPatternScaleY",
    "name": "fillPatternScaleY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScaleY",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternScaleY",
    "description": "get/set fill pattern scale y",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern scale y\nvar patternScaleY = shape.fillPatternScaleY();\n\n// set fill pattern scale y\nshape.fillPatternScaleY(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8017,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2195
  },
  {
    "id": "Konva.Image#fillLinearGradientStartPoint",
    "longname": "Konva.Image#fillLinearGradientStartPoint",
    "name": "fillLinearGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPoint",
    "inherited": true,
    "overrides": "Konva.Shape#fillLinearGradientStartPoint",
    "description": "get/set fill linear gradient start point",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get fill linear gradient start point\nvar startPoint = shape.fillLinearGradientStartPoint();\n\n// set fill linear gradient start point\nshape.fillLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8034,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2196
  },
  {
    "id": "Konva.Image#strokeLinearGradientStartPoint",
    "longname": "Konva.Image#strokeLinearGradientStartPoint",
    "name": "strokeLinearGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientStartPoint",
    "inherited": true,
    "overrides": "Konva.Shape#strokeLinearGradientStartPoint",
    "description": "get/set stroke linear gradient start point",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point\nvar startPoint = shape.strokeLinearGradientStartPoint();\n\n// set stroke linear gradient start point\nshape.strokeLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8056,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2197
  },
  {
    "id": "Konva.Image#fillLinearGradientStartPointX",
    "longname": "Konva.Image#fillLinearGradientStartPointX",
    "name": "fillLinearGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPointX",
    "inherited": true,
    "overrides": "Konva.Shape#fillLinearGradientStartPointX",
    "description": "get/set fill linear gradient start point x",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill linear gradient start point x\nvar startPointX = shape.fillLinearGradientStartPointX();\n\n// set fill linear gradient start point x\nshape.fillLinearGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8075,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2198
  },
  {
    "id": "Konva.Image#linearLinearGradientStartPointX",
    "longname": "Konva.Image#linearLinearGradientStartPointX",
    "name": "linearLinearGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#linearLinearGradientStartPointX",
    "inherited": true,
    "overrides": "Konva.Shape#linearLinearGradientStartPointX",
    "description": "get/set stroke linear gradient start point x",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point x\nvar startPointX = shape.strokeLinearGradientStartPointX();\n\n// set stroke linear gradient start point x\nshape.strokeLinearGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8089,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2199
  },
  {
    "id": "Konva.Image#fillLinearGradientStartPointY",
    "longname": "Konva.Image#fillLinearGradientStartPointY",
    "name": "fillLinearGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPointY",
    "inherited": true,
    "overrides": "Konva.Shape#fillLinearGradientStartPointY",
    "description": "get/set fill linear gradient start point y",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill linear gradient start point y\nvar startPointY = shape.fillLinearGradientStartPointY();\n\n// set fill linear gradient start point y\nshape.fillLinearGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8103,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2200
  },
  {
    "id": "Konva.Image#strokeLinearGradientStartPointY",
    "longname": "Konva.Image#strokeLinearGradientStartPointY",
    "name": "strokeLinearGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientStartPointY",
    "inherited": true,
    "overrides": "Konva.Shape#strokeLinearGradientStartPointY",
    "description": "get/set stroke linear gradient start point y",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point y\nvar startPointY = shape.strokeLinearGradientStartPointY();\n\n// set stroke linear gradient start point y\nshape.strokeLinearGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8117,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2201
  },
  {
    "id": "Konva.Image#fillLinearGradientEndPoint",
    "longname": "Konva.Image#fillLinearGradientEndPoint",
    "name": "fillLinearGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPoint",
    "inherited": true,
    "overrides": "Konva.Shape#fillLinearGradientEndPoint",
    "description": "get/set fill linear gradient end point",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get fill linear gradient end point\nvar endPoint = shape.fillLinearGradientEndPoint();\n\n// set fill linear gradient end point\nshape.fillLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8134,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2202
  },
  {
    "id": "Konva.Image#strokeLinearGradientEndPoint",
    "longname": "Konva.Image#strokeLinearGradientEndPoint",
    "name": "strokeLinearGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPoint",
    "inherited": true,
    "overrides": "Konva.Shape#strokeLinearGradientEndPoint",
    "description": "get/set stroke linear gradient end point",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point\nvar endPoint = shape.strokeLinearGradientEndPoint();\n\n// set stroke linear gradient end point\nshape.strokeLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8156,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2203
  },
  {
    "id": "Konva.Image#fillLinearGradientEndPointX",
    "longname": "Konva.Image#fillLinearGradientEndPointX",
    "name": "fillLinearGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPointX",
    "inherited": true,
    "overrides": "Konva.Shape#fillLinearGradientEndPointX",
    "description": "get/set fill linear gradient end point x",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill linear gradient end point x\nvar endPointX = shape.fillLinearGradientEndPointX();\n\n// set fill linear gradient end point x\nshape.fillLinearGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8175,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2204
  },
  {
    "id": "Konva.Image#strokeLinearGradientEndPointX",
    "longname": "Konva.Image#strokeLinearGradientEndPointX",
    "name": "strokeLinearGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPointX",
    "inherited": true,
    "overrides": "Konva.Shape#strokeLinearGradientEndPointX",
    "description": "get/set fill linear gradient end point x",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point x\nvar endPointX = shape.strokeLinearGradientEndPointX();\n\n// set stroke linear gradient end point x\nshape.strokeLinearGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8189,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2205
  },
  {
    "id": "Konva.Image#fillLinearGradientEndPointY",
    "longname": "Konva.Image#fillLinearGradientEndPointY",
    "name": "fillLinearGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPointY",
    "inherited": true,
    "overrides": "Konva.Shape#fillLinearGradientEndPointY",
    "description": "get/set fill linear gradient end point y",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill linear gradient end point y\nvar endPointY = shape.fillLinearGradientEndPointY();\n\n// set fill linear gradient end point y\nshape.fillLinearGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8203,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2206
  },
  {
    "id": "Konva.Image#strokeLinearGradientEndPointY",
    "longname": "Konva.Image#strokeLinearGradientEndPointY",
    "name": "strokeLinearGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPointY",
    "inherited": true,
    "overrides": "Konva.Shape#strokeLinearGradientEndPointY",
    "description": "get/set stroke linear gradient end point y",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point y\nvar endPointY = shape.strokeLinearGradientEndPointY();\n\n// set stroke linear gradient end point y\nshape.strokeLinearGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8217,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2207
  },
  {
    "id": "Konva.Image#fillRadialGradientStartPoint",
    "longname": "Konva.Image#fillRadialGradientStartPoint",
    "name": "fillRadialGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPoint",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientStartPoint",
    "description": "get/set fill radial gradient start point",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get fill radial gradient start point\nvar startPoint = shape.fillRadialGradientStartPoint();\n\n// set fill radial gradient start point\nshape.fillRadialGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8234,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2208
  },
  {
    "id": "Konva.Image#fillRadialGradientStartPointX",
    "longname": "Konva.Image#fillRadialGradientStartPointX",
    "name": "fillRadialGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPointX",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientStartPointX",
    "description": "get/set fill radial gradient start point x",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill radial gradient start point x\nvar startPointX = shape.fillRadialGradientStartPointX();\n\n// set fill radial gradient start point x\nshape.fillRadialGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8253,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2209
  },
  {
    "id": "Konva.Image#fillRadialGradientStartPointY",
    "longname": "Konva.Image#fillRadialGradientStartPointY",
    "name": "fillRadialGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPointY",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientStartPointY",
    "description": "get/set fill radial gradient start point y",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill radial gradient start point y\nvar startPointY = shape.fillRadialGradientStartPointY();\n\n// set fill radial gradient start point y\nshape.fillRadialGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8267,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2210
  },
  {
    "id": "Konva.Image#fillRadialGradientEndPoint",
    "longname": "Konva.Image#fillRadialGradientEndPoint",
    "name": "fillRadialGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPoint",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientEndPoint",
    "description": "get/set fill radial gradient end point",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get fill radial gradient end point\nvar endPoint = shape.fillRadialGradientEndPoint();\n\n// set fill radial gradient end point\nshape.fillRadialGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8284,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2211
  },
  {
    "id": "Konva.Image#fillRadialGradientEndPointX",
    "longname": "Konva.Image#fillRadialGradientEndPointX",
    "name": "fillRadialGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPointX",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientEndPointX",
    "description": "get/set fill radial gradient end point x",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill radial gradient end point x\nvar endPointX = shape.fillRadialGradientEndPointX();\n\n// set fill radial gradient end point x\nshape.fillRadialGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8303,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2212
  },
  {
    "id": "Konva.Image#fillRadialGradientEndPointY",
    "longname": "Konva.Image#fillRadialGradientEndPointY",
    "name": "fillRadialGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPointY",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientEndPointY",
    "description": "get/set fill radial gradient end point y",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill radial gradient end point y\nvar endPointY = shape.fillRadialGradientEndPointY();\n\n// set fill radial gradient end point y\nshape.fillRadialGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8317,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2213
  },
  {
    "id": "Konva.Image#fillPatternRotation",
    "longname": "Konva.Image#fillPatternRotation",
    "name": "fillPatternRotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternRotation",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternRotation",
    "description": "get/set fill pattern rotation in degrees",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get fill pattern rotation\nvar patternRotation = shape.fillPatternRotation();\n\n// set fill pattern rotation\nshape.fillPatternRotation(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8331,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2214
  },
  {
    "id": "Konva.Image#fillRule",
    "longname": "Konva.Image#fillRule",
    "name": "fillRule",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRule",
    "inherited": true,
    "overrides": "Konva.Shape#fillRule",
    "description": "get/set fill rule",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "CanvasFillRule"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get fill rule\nvar fillRule = shape.fillRule();\n\n// set fill rule\nshape.fillRule('evenodd');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8345,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2215
  },
  {
    "id": "Konva.Image#clearCache",
    "longname": "Konva.Image#clearCache",
    "name": "clearCache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#clearCache",
    "inherited": true,
    "overrides": "Konva.Shape#clearCache",
    "description": "clear cached canvas",
    "memberof": "Konva.Image",
    "examples": [
      "node.clearCache();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2632,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2216
  },
  {
    "id": "Konva.Image#cache",
    "longname": "Konva.Image#cache",
    "name": "cache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#cache",
    "inherited": true,
    "overrides": "Konva.Shape#cache",
    "description": "cache node to improve drawing performance, apply filters, or create more accurate\n hit regions. For all basic shapes size of cache canvas will be automatically detected.\n If you need to cache your custom `Konva.Shape` instance you have to pass shape's bounding box\n properties. Look at [https://konvajs.org/docs/performance/Shape_Caching.html](https://konvajs.org/docs/performance/Shape_Caching.html) for more information.",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "increase canvas size by `offset` pixel in all directions.",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "when set to true, a red border will be drawn around the cached\n region for debugging purposes",
        "name": "config.drawBorder"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "change quality (or pixel ratio) of cached image. pixelRatio = 2 will produce 2x sized cache.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "control imageSmoothingEnabled property of created canvas for cache",
        "name": "config.imageSmoothingEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "change quality (or pixel ratio) of cached hit canvas.",
        "name": "config.hitCanvasPixelRatio"
      }
    ],
    "examples": [
      "// cache a shape with the x,y position of the bounding box at the center and\n// the width and height of the bounding box equal to the width and height of\n// the shape obtained from shape.width() and shape.height()\nimage.cache();\n\n// cache a node and define the bounding box position and size\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200\n});\n\n// cache a node and draw a red border around the bounding box\n// for debugging purposes\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200,\n  offset : 10,\n  drawBorder: true\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2650,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2217
  },
  {
    "id": "Konva.Image#isCached",
    "longname": "Konva.Image#isCached",
    "name": "isCached",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isCached",
    "inherited": true,
    "overrides": "Konva.Shape#isCached",
    "description": "determine if node is currently cached",
    "memberof": "Konva.Image",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2788,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2218
  },
  {
    "id": "Konva.Image#getClientRect",
    "longname": "Konva.Image#getClientRect",
    "name": "getClientRect",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getClientRect",
    "inherited": true,
    "overrides": "Konva.Shape#getClientRect",
    "description": "Return client rectangle `{x, y, width, height}` of node. This rectangle also include all styling (strokes, shadows, etc).\nThe purpose of the method is similar to getBoundingClientRect API of the DOM.",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply transform to node for calculating rect?",
        "name": "config.skipTransform"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply shadow to the node for calculating bound box?",
        "name": "config.skipShadow"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply stroke to the node for calculating bound box?",
        "name": "config.skipStroke"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "calculate client rect relative to one of the parents",
        "name": "config.relativeTo"
      }
    ],
    "examples": [
      "var rect = new Konva.Rect({\n     width : 100,\n     height : 100,\n     x : 50,\n     y : 50,\n     strokeWidth : 4,\n     stroke : 'black',\n     offsetX : 50,\n     scaleY : 2\n});\n\n// get client rect without think off transformations (position, rotation, scale, offset, etc)\nrect.getClientRect({ skipTransform: true});\n// returns {\n//     x : -2,   // two pixels for stroke / 2\n//     y : -2,\n//     width : 104, // increased by 4 for stroke\n//     height : 104\n//}\n\n// get client rect with transformation applied\nrect.getClientRect();\n// returns Object {x: -2, y: 46, width: 104, height: 208}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "rect with `{x, y, width, height}` properties"
      }
    ],
    "meta": {
      "lineno": 2797,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2219
  },
  {
    "id": "Konva.Image#on",
    "longname": "Konva.Image#on",
    "name": "on",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#on",
    "inherited": true,
    "overrides": "Konva.Shape#on",
    "description": "bind events to the node. KonvaJS supports mouseover, mousemove,\n mouseout, mouseenter, mouseleave, mousedown, mouseup, wheel, contextmenu, click, dblclick, touchstart, touchmove,\n touchend, tap, dbltap, dragstart, dragmove, and dragend events.\n Pass in a string of events delimited by a space to bind multiple events at once\n such as 'mousedown mouseup mousemove'. Include a namespace to bind an\n event by name such as 'click.foobar'.",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'click', 'mousedown touchstart', 'mousedown.foo touchstart.foo'",
        "name": "evtStr"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The handler function. The first argument of that function is event object. Event object has `target` as main target of the event, `currentTarget` as current node listener and `evt` as native browser event.",
        "name": "handler"
      }
    ],
    "examples": [
      "// add click listener\nnode.on('click', function() {\n  console.log('you clicked me!');\n});\n\n// get the target node\nnode.on('click', function(evt) {\n  console.log(evt.target);\n});\n\n// stop event propagation\nnode.on('click', function(evt) {\n  evt.cancelBubble = true;\n});\n\n// bind multiple listeners\nnode.on('click touchstart', function() {\n  console.log('you clicked/touched me!');\n});\n\n// namespace listener\nnode.on('click.foo', function() {\n  console.log('you clicked/touched me!');\n});\n\n// get the event type\nnode.on('click tap', function(evt) {\n  var eventType = evt.type;\n});\n\n// get native event object\nnode.on('click tap', function(evt) {\n  var nativeEvent = evt.evt;\n});\n\n// for change events, get the old and new val\nnode.on('xChange', function(evt) {\n  var oldVal = evt.oldVal;\n  var newVal = evt.newVal;\n});\n\n// get event targets\n// with event delegations\nlayer.on('click', 'Group', function(evt) {\n  var shape = evt.target;\n  var group = evt.currentTarget;\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2919,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2220
  },
  {
    "id": "Konva.Image#off",
    "longname": "Konva.Image#off",
    "name": "off",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#off",
    "inherited": true,
    "overrides": "Konva.Shape#off",
    "description": "remove event bindings from the node. Pass in a string of\n event types delimmited by a space to remove multiple event\n bindings at once such as 'mousedown mouseup mousemove'.\n include a namespace to remove an event binding by name\n such as 'click.foobar'. If you only give a name like '.foobar',\n all events in that namespace will be removed.",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'click', 'mousedown touchstart', '.foobar'",
        "name": "evtStr"
      }
    ],
    "examples": [
      "// remove listener\nnode.off('click');\n\n// remove multiple listeners\nnode.off('click touchstart');\n\n// remove listener by name\nnode.off('click.foo');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3007,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2221
  },
  {
    "id": "Konva.Image#remove",
    "longname": "Konva.Image#remove",
    "name": "remove",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#remove",
    "inherited": true,
    "overrides": "Konva.Shape#remove",
    "description": "remove a node from parent, but don't destroy. You can reuse the node later.",
    "memberof": "Konva.Image",
    "examples": [
      "node.remove();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3088,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2222
  },
  {
    "id": "Konva.Image#destroy",
    "longname": "Konva.Image#destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#destroy",
    "inherited": true,
    "overrides": "Konva.Shape#destroy",
    "description": "remove and destroy a node. Kill it and delete forever! You should not reuse node after destroy().\nIf the node is a container (Group, Stage or Layer) it will destroy all children too.",
    "memberof": "Konva.Image",
    "examples": [
      "node.destroy();"
    ],
    "meta": {
      "lineno": 3125,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2223
  },
  {
    "id": "Konva.Image#getAttr",
    "longname": "Konva.Image#getAttr",
    "name": "getAttr",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAttr",
    "inherited": true,
    "overrides": "Konva.Shape#getAttr",
    "description": "get attr",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "attr"
      }
    ],
    "examples": [
      "var x = node.getAttr('x');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer",
            "String",
            "Object",
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3138,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2224
  },
  {
    "id": "Konva.Image#getAncestors",
    "longname": "Konva.Image#getAncestors",
    "name": "getAncestors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAncestors",
    "inherited": true,
    "overrides": "Konva.Shape#getAncestors",
    "description": "get ancestors",
    "memberof": "Konva.Image",
    "examples": [
      "shape.getAncestors().forEach(function(node) {\n  console.log(node.getId());\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3155,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2225
  },
  {
    "id": "Konva.Image#getAttrs",
    "longname": "Konva.Image#getAttrs",
    "name": "getAttrs",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAttrs",
    "inherited": true,
    "overrides": "Konva.Shape#getAttrs",
    "description": "get attrs object literal",
    "memberof": "Konva.Image",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3173,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2226
  },
  {
    "id": "Konva.Image#setAttrs",
    "longname": "Konva.Image#setAttrs",
    "name": "setAttrs",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#setAttrs",
    "inherited": true,
    "overrides": "Konva.Shape#setAttrs",
    "description": "set multiple attrs at once using an object literal",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "object containing key value pairs",
        "name": "config"
      }
    ],
    "examples": [
      "node.setAttrs({\n  x: 5,\n  fill: 'red'\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3182,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2227
  },
  {
    "id": "Konva.Image#isListening",
    "longname": "Konva.Image#isListening",
    "name": "isListening",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isListening",
    "inherited": true,
    "overrides": "Konva.Shape#isListening",
    "description": "determine if node is listening for events by taking into account ancestors.\n\nParent    | Self      | isListening\nlistening | listening |\n----------+-----------+------------\nT         | T         | T\nT         | F         | F\nF         | T         | F\nF         | F         | F",
    "memberof": "Konva.Image",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3217,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2228
  },
  {
    "id": "Konva.Image#isVisible",
    "longname": "Konva.Image#isVisible",
    "name": "isVisible",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isVisible",
    "inherited": true,
    "overrides": "Konva.Shape#isVisible",
    "description": "determine if node is visible by taking into account ancestors.\n\nParent    | Self      | isVisible\nvisible   | visible   |\n----------+-----------+------------\nT         | T         | T\nT         | F         | F\nF         | T         | F\nF         | F         | F",
    "memberof": "Konva.Image",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3248,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2229
  },
  {
    "id": "Konva.Image#show",
    "longname": "Konva.Image#show",
    "name": "show",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#show",
    "inherited": true,
    "overrides": "Konva.Shape#show",
    "description": "show node. set visible = true",
    "memberof": "Konva.Image",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3300,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2230
  },
  {
    "id": "Konva.Image#hide",
    "longname": "Konva.Image#hide",
    "name": "hide",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hide",
    "inherited": true,
    "overrides": "Konva.Shape#hide",
    "description": "hide node.  Hidden nodes are no longer detectable",
    "memberof": "Konva.Image",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3310,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2231
  },
  {
    "id": "Konva.Image#getAbsoluteZIndex",
    "longname": "Konva.Image#getAbsoluteZIndex",
    "name": "getAbsoluteZIndex",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteZIndex",
    "inherited": true,
    "overrides": "Konva.Shape#getAbsoluteZIndex",
    "description": "get absolute z-index which takes into account sibling\n and ancestor indices",
    "memberof": "Konva.Image",
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3323,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2232
  },
  {
    "id": "Konva.Image#getDepth",
    "longname": "Konva.Image#getDepth",
    "name": "getDepth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getDepth",
    "inherited": true,
    "overrides": "Konva.Shape#getDepth",
    "description": "get node depth in node tree.  Returns an integer.\n e.g. Stage depth will always be 0.  Layers will always be 1.  Groups and Shapes will always\n be >= 2",
    "memberof": "Konva.Image",
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3355,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2233
  },
  {
    "id": "Konva.Image#getRelativePointerPosition",
    "longname": "Konva.Image#getRelativePointerPosition",
    "name": "getRelativePointerPosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getRelativePointerPosition",
    "inherited": true,
    "overrides": "Konva.Shape#getRelativePointerPosition",
    "description": "get position of first pointer (like mouse or first touch) relative to local coordinates of current node",
    "memberof": "Konva.Image",
    "examples": [
      "// let's think we have a rectangle at position x = 10, y = 10\n// now we clicked at x = 15, y = 15 of the stage\n// if you want to know position of the click, related to the rectangle you can use\nrect.getRelativePointerPosition();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3398,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2234
  },
  {
    "id": "Konva.Image#getAbsolutePosition",
    "longname": "Konva.Image#getAbsolutePosition",
    "name": "getAbsolutePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsolutePosition",
    "inherited": true,
    "overrides": "Konva.Shape#getAbsolutePosition",
    "description": "get absolute position of a node. That function can be used to calculate absolute position, but relative to any ancestor",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "optional ancestor node",
        "name": "Ancestor"
      }
    ],
    "examples": [
      "// returns absolute position relative to top-left corner of canvas\nnode.getAbsolutePosition();\n\n// calculate absolute position of node, inside stage\n// so stage transforms are ignored\nnode.getAbsolutePosition(stage)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3426,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2235
  },
  {
    "id": "Konva.Image#move",
    "longname": "Konva.Image#move",
    "name": "move",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#move",
    "inherited": true,
    "overrides": "Konva.Shape#move",
    "description": "move node by an amount relative to its current position",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "change"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "change.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "change.y"
      }
    ],
    "examples": [
      "// move node in x direction by 1px and y direction by 2px\nnode.move({\n  x: 1,\n  y: 2\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3514,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2236
  },
  {
    "id": "Konva.Image#rotate",
    "longname": "Konva.Image#rotate",
    "name": "rotate",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#rotate",
    "inherited": true,
    "overrides": "Konva.Shape#rotate",
    "description": "rotate node by an amount in degrees relative to its current rotation",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "theta"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3559,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2237
  },
  {
    "id": "Konva.Image#moveToTop",
    "longname": "Konva.Image#moveToTop",
    "name": "moveToTop",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveToTop",
    "inherited": true,
    "overrides": "Konva.Shape#moveToTop",
    "description": "move node to the top of its siblings",
    "memberof": "Konva.Image",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3570,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2238
  },
  {
    "id": "Konva.Image#moveUp",
    "longname": "Konva.Image#moveUp",
    "name": "moveUp",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveUp",
    "inherited": true,
    "overrides": "Konva.Shape#moveUp",
    "description": "move node up",
    "memberof": "Konva.Image",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "flag is moved or not"
      }
    ],
    "meta": {
      "lineno": 3590,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2239
  },
  {
    "id": "Konva.Image#moveDown",
    "longname": "Konva.Image#moveDown",
    "name": "moveDown",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveDown",
    "inherited": true,
    "overrides": "Konva.Shape#moveDown",
    "description": "move node down",
    "memberof": "Konva.Image",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3610,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2240
  },
  {
    "id": "Konva.Image#moveToBottom",
    "longname": "Konva.Image#moveToBottom",
    "name": "moveToBottom",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveToBottom",
    "inherited": true,
    "overrides": "Konva.Shape#moveToBottom",
    "description": "move node to the bottom of its siblings",
    "memberof": "Konva.Image",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3630,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2241
  },
  {
    "id": "Konva.Image#getAbsoluteOpacity",
    "longname": "Konva.Image#getAbsoluteOpacity",
    "name": "getAbsoluteOpacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteOpacity",
    "inherited": true,
    "overrides": "Konva.Shape#getAbsoluteOpacity",
    "description": "get absolute opacity",
    "memberof": "Konva.Image",
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3668,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2242
  },
  {
    "id": "Konva.Image#moveTo",
    "longname": "Konva.Image#moveTo",
    "name": "moveTo",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveTo",
    "inherited": true,
    "overrides": "Konva.Shape#moveTo",
    "description": "move node to another container",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Container"
          ]
        },
        "name": "newContainer"
      }
    ],
    "examples": [
      "// move node from current layer into layer2\nnode.moveTo(layer2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3685,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2243
  },
  {
    "id": "Konva.Image#toObject",
    "longname": "Konva.Image#toObject",
    "name": "toObject",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toObject",
    "inherited": true,
    "overrides": "Konva.Shape#toObject",
    "description": "convert Node into an object for serialization.  Returns an object.",
    "memberof": "Konva.Image",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3703,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2244
  },
  {
    "id": "Konva.Image#toJSON",
    "longname": "Konva.Image#toJSON",
    "name": "toJSON",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toJSON",
    "inherited": true,
    "overrides": "Konva.Shape#toJSON",
    "description": "convert Node into a JSON string.  Returns a JSON string.",
    "memberof": "Konva.Image",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3736,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2245
  },
  {
    "id": "Konva.Image#getParent",
    "longname": "Konva.Image#getParent",
    "name": "getParent",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getParent",
    "inherited": true,
    "overrides": "Konva.Shape#getParent",
    "description": "get parent container",
    "memberof": "Konva.Image",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3745,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2246
  },
  {
    "id": "Konva.Image#findAncestors",
    "longname": "Konva.Image#findAncestors",
    "name": "findAncestors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#findAncestors",
    "inherited": true,
    "overrides": "Konva.Shape#findAncestors",
    "description": "get all ancestors (parent then parent of the parent, etc) of the node",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "selector for search",
        "name": "selector"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "show we think that node is ancestro itself?",
        "name": "includeSelf"
      },
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "optional": true,
        "description": "optional node where we need to stop searching (one of ancestors)",
        "name": "stopNode"
      }
    ],
    "examples": [
      "// get one of the parent group\nvar parentGroups = node.findAncestors('Group');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "[ancestors]"
      }
    ],
    "meta": {
      "lineno": 3754,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2247
  },
  {
    "id": "Konva.Image#findAncestor",
    "longname": "Konva.Image#findAncestor",
    "name": "findAncestor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#findAncestor",
    "inherited": true,
    "overrides": "Konva.Shape#findAncestor",
    "description": "get ancestor (parent or parent of the parent, etc) of the node that match passed selector",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "selector for search",
        "name": "selector"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "show we think that node is ancestro itself?",
        "name": "includeSelf"
      },
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "optional": true,
        "description": "optional node where we need to stop searching (one of ancestors)",
        "name": "stopNode"
      }
    ],
    "examples": [
      "// get one of the parent group\nvar group = node.findAncestors('.mygroup');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "description": "ancestor"
      }
    ],
    "meta": {
      "lineno": 3786,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2248
  },
  {
    "id": "Konva.Image#getLayer",
    "longname": "Konva.Image#getLayer",
    "name": "getLayer",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getLayer",
    "inherited": true,
    "overrides": "Konva.Shape#getLayer",
    "description": "get layer ancestor",
    "memberof": "Konva.Image",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Layer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3837,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2249
  },
  {
    "id": "Konva.Image#getStage",
    "longname": "Konva.Image#getStage",
    "name": "getStage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getStage",
    "inherited": true,
    "overrides": "Konva.Shape#getStage",
    "description": "get stage ancestor",
    "memberof": "Konva.Image",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Stage"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3847,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2250
  },
  {
    "id": "Konva.Image#fire",
    "longname": "Konva.Image#fire",
    "name": "fire",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#fire",
    "inherited": true,
    "overrides": "Konva.Shape#fire",
    "description": "fire event",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "event type.  can be a regular event, like click, mouseover, or mouseout, or it can be a custom event, like myCustomEvent",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "Event"
          ]
        },
        "optional": true,
        "description": "event object",
        "name": "evt"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "setting the value to false, or leaving it undefined, will result in the event\n not bubbling.  Setting the value to true will result in the event bubbling.",
        "name": "bubble"
      }
    ],
    "examples": [
      "// manually fire click event\nnode.fire('click');\n\n// fire custom event\nnode.fire('foo');\n\n// fire custom event with custom event object\nnode.fire('foo', {\n  bar: 10\n});\n\n// fire click event that bubbles\nnode.fire('click', null, true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3865,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2251
  },
  {
    "id": "Konva.Image#getAbsoluteTransform",
    "longname": "Konva.Image#getAbsoluteTransform",
    "name": "getAbsoluteTransform",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteTransform",
    "inherited": true,
    "overrides": "Konva.Shape#getAbsoluteTransform",
    "description": "get absolute transform of the node which takes into\n account its ancestor transforms",
    "memberof": "Konva.Image",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3901,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2252
  },
  {
    "id": "Konva.Image#getAbsoluteScale",
    "longname": "Konva.Image#getAbsoluteScale",
    "name": "getAbsoluteScale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteScale",
    "inherited": true,
    "overrides": "Konva.Shape#getAbsoluteScale",
    "description": "get absolute scale of the node which takes into\n account its ancestor scales",
    "memberof": "Konva.Image",
    "examples": [
      "// get absolute scale x\nvar scaleX = node.getAbsoluteScale().x;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3961,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2253
  },
  {
    "id": "Konva.Image#getAbsoluteRotation",
    "longname": "Konva.Image#getAbsoluteRotation",
    "name": "getAbsoluteRotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteRotation",
    "inherited": true,
    "overrides": "Konva.Shape#getAbsoluteRotation",
    "description": "get absolute rotation of the node which takes into\n account its ancestor rotations",
    "memberof": "Konva.Image",
    "examples": [
      "// get absolute rotation\nvar rotation = node.getAbsoluteRotation();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3989,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2254
  },
  {
    "id": "Konva.Image#getTransform",
    "longname": "Konva.Image#getTransform",
    "name": "getTransform",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getTransform",
    "inherited": true,
    "overrides": "Konva.Shape#getTransform",
    "description": "get transform of the node",
    "memberof": "Konva.Image",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4009,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2255
  },
  {
    "id": "Konva.Image#clone",
    "longname": "Konva.Image#clone",
    "name": "clone",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#clone",
    "inherited": true,
    "overrides": "Konva.Shape#clone",
    "description": "clone node.  Returns a new Node instance with identical attributes.  You can also override\n the node properties with an object literal, enabling you to use an existing node as a template\n for another node",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "override attrs",
        "name": "obj"
      }
    ],
    "examples": [
      "// simple clone\nvar clone = node.clone();\n\n// clone a node and override the x position\nvar clone = rect.clone({\n  x: 5\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4044,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2256
  },
  {
    "id": "Konva.Image#toCanvas",
    "longname": "Konva.Image#toCanvas",
    "name": "toCanvas",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toCanvas",
    "inherited": true,
    "overrides": "Konva.Shape#toCanvas",
    "description": "converts node into an canvas element.",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output canvas. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var canvas = node.toCanvas();"
    ],
    "meta": {
      "lineno": 4119,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2257
  },
  {
    "id": "Konva.Image#toDataURL",
    "longname": "Konva.Image#toDataURL",
    "name": "toDataURL",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toDataURL",
    "inherited": true,
    "overrides": "Konva.Shape#toDataURL",
    "description": "Creates a composite data URL (base64 string). If MIME type is not\nspecified, then \"image/png\" will result. For \"image/jpeg\", specify a quality\nlevel as quality (range 0.0 - 1.0)",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"image/png\" or \"image/jpeg\".\n \"image/png\" is the default",
        "name": "config.mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "jpeg quality.  If using an \"image/jpeg\" mimeType,\n you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n is very high quality",
        "name": "config.quality"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output image url. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4140,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2258
  },
  {
    "id": "Konva.Image#toImage",
    "longname": "Konva.Image#toImage",
    "name": "toImage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toImage",
    "inherited": true,
    "overrides": "Konva.Shape#toImage",
    "description": "converts node into an image.  Since the toImage\n method is asynchronous, the resulting image can only be retrieved from the config callback\n or the returned Promise.  toImage is most commonly used\n to cache complex drawings as an image so that they don't have to constantly be redrawn",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"image/png\" or \"image/jpeg\".\n \"image/png\" is the default",
        "name": "config.mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "jpeg quality.  If using an \"image/jpeg\" mimeType,\n you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n is very high quality",
        "name": "config.quality"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output image. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var image = node.toImage({\n  callback(img) {\n    // do stuff with img\n  }\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Image>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4172,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2259
  },
  {
    "id": "Konva.Image#toBlob",
    "longname": "Konva.Image#toBlob",
    "name": "toBlob",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toBlob",
    "inherited": true,
    "overrides": "Konva.Shape#toBlob",
    "description": "Converts node into a blob.  Since the toBlob method is asynchronous,\n the resulting blob can only be retrieved from the config callback\n or the returned Promise.",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output canvas. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var blob = await node.toBlob({});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Blob>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4219,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2260
  },
  {
    "id": "Konva.Image#getClassName",
    "longname": "Konva.Image#getClassName",
    "name": "getClassName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getClassName",
    "inherited": true,
    "overrides": "Konva.Shape#getClassName",
    "description": "get class name, which may return Stage, Layer, Group, or shape class names like Rect, Circle, Text, etc.",
    "memberof": "Konva.Image",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4267,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2261
  },
  {
    "id": "Konva.Image#getType",
    "longname": "Konva.Image#getType",
    "name": "getType",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getType",
    "inherited": true,
    "overrides": "Konva.Shape#getType",
    "description": "get the node type, which may return Stage, Layer, Group, or Shape",
    "memberof": "Konva.Image",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4276,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2262
  },
  {
    "id": "Konva.Image#addName",
    "longname": "Konva.Image#addName",
    "name": "addName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#addName",
    "inherited": true,
    "overrides": "Konva.Shape#addName",
    "description": "add name to node",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red');\nnode.addName('selected');\nnode.name(); // return 'red selected'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4324,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2263
  },
  {
    "id": "Konva.Image#hasName",
    "longname": "Konva.Image#hasName",
    "name": "hasName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hasName",
    "inherited": true,
    "overrides": "Konva.Shape#hasName",
    "description": "check is node has name",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red');\nnode.hasName('red');   // return true\nnode.hasName('selected'); // return false\nnode.hasName(''); // return false"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4343,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2264
  },
  {
    "id": "Konva.Image#removeName",
    "longname": "Konva.Image#removeName",
    "name": "removeName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#removeName",
    "inherited": true,
    "overrides": "Konva.Shape#removeName",
    "description": "remove name from node",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red selected');\nnode.removeName('selected');\nnode.hasName('selected'); // return false\nnode.name(); // return 'red'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4367,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2265
  },
  {
    "id": "Konva.Image#setAttr",
    "longname": "Konva.Image#setAttr",
    "name": "setAttr",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#setAttr",
    "inherited": true,
    "overrides": "Konva.Shape#setAttr",
    "description": "set attr",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "attr"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "name": "val"
      }
    ],
    "examples": [
      "node.setAttr('x', 5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4388,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2266
  },
  {
    "id": "Konva.Image#draw",
    "longname": "Konva.Image#draw",
    "name": "draw",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#draw",
    "inherited": true,
    "overrides": "Konva.Shape#draw",
    "description": "draw both scene and hit graphs.  If the node being drawn is the stage, all of the layers will be cleared and redrawn",
    "memberof": "Konva.Image",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4511,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2267
  },
  {
    "id": "Konva.Image#startDrag",
    "longname": "Konva.Image#startDrag",
    "name": "startDrag",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#startDrag",
    "inherited": true,
    "overrides": "Konva.Shape#startDrag",
    "description": "initiate drag and drop.",
    "memberof": "Konva.Image",
    "meta": {
      "lineno": 4544,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2268
  },
  {
    "id": "Konva.Image#stopDrag",
    "longname": "Konva.Image#stopDrag",
    "name": "stopDrag",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#stopDrag",
    "inherited": true,
    "overrides": "Konva.Shape#stopDrag",
    "description": "stop drag and drop",
    "memberof": "Konva.Image",
    "meta": {
      "lineno": 4590,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2269
  },
  {
    "id": "Konva.Image#isDragging",
    "longname": "Konva.Image#isDragging",
    "name": "isDragging",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isDragging",
    "inherited": true,
    "overrides": "Konva.Shape#isDragging",
    "description": "determine if node is currently in drag and drop mode",
    "memberof": "Konva.Image",
    "meta": {
      "lineno": 4607,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2270
  },
  {
    "id": "Konva.Image#isClientRectOnScreen",
    "longname": "Konva.Image#isClientRectOnScreen",
    "name": "isClientRectOnScreen",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isClientRectOnScreen",
    "inherited": true,
    "overrides": "Konva.Shape#isClientRectOnScreen",
    "description": "determine if node (at least partially) is currently in user-visible area",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number",
            "Object"
          ]
        },
        "description": "optional margin in pixels",
        "name": "margin"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "margin.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "margin.y"
      }
    ],
    "examples": [
      "// get index\n// default calculations\nvar isOnScreen = node.isClientRectOnScreen()\n// increase object size (or screen size) for cases when objects close to the screen still need to be marked as \"visible\"\nvar isOnScreen = node.isClientRectOnScreen({ x: stage.width(), y: stage.height() })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4671,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2271
  },
  {
    "id": "Konva.Image#zIndex",
    "longname": "Konva.Image#zIndex",
    "name": "zIndex",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#zIndex",
    "inherited": true,
    "overrides": "Konva.Shape#zIndex",
    "description": "get/set zIndex relative to the node's siblings who share the same parent.\nPlease remember that zIndex is not absolute (like in CSS). It is relative to parent element only.",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "index"
      }
    ],
    "examples": [
      "// get index\nvar index = node.zIndex();\n\n// set index\nnode.zIndex(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4764,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2272
  },
  {
    "id": "Konva.Image#absolutePosition",
    "longname": "Konva.Image#absolutePosition",
    "name": "absolutePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#absolutePosition",
    "inherited": true,
    "overrides": "Konva.Shape#absolutePosition",
    "description": "get/set node absolute position",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "// get position\nvar position = node.absolutePosition();\n\n// set position\nnode.absolutePosition({\n  x: 5,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4779,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2273
  },
  {
    "id": "Konva.Image#position",
    "longname": "Konva.Image#position",
    "name": "position",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#position",
    "inherited": true,
    "overrides": "Konva.Shape#position",
    "description": "get/set node position relative to parent",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "// get position\nvar position = node.position();\n\n// set position\nnode.position({\n  x: 5,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4799,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2274
  },
  {
    "id": "Konva.Image#x",
    "longname": "Konva.Image#x",
    "name": "x",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#x",
    "inherited": true,
    "overrides": "Konva.Shape#x",
    "description": "get/set x position",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get x\nvar x = node.x();\n\n// set x\nnode.x(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4818,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2275
  },
  {
    "id": "Konva.Image#y",
    "longname": "Konva.Image#y",
    "name": "y",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#y",
    "inherited": true,
    "overrides": "Konva.Shape#y",
    "description": "get/set y position",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get y\nvar y = node.y();\n\n// set y\nnode.y(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4832,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2276
  },
  {
    "id": "Konva.Image#globalCompositeOperation",
    "longname": "Konva.Image#globalCompositeOperation",
    "name": "globalCompositeOperation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#globalCompositeOperation",
    "inherited": true,
    "overrides": "Konva.Shape#globalCompositeOperation",
    "description": "get/set globalCompositeOperation of a node. globalCompositeOperation DOESN'T affect hit graph of nodes. So they are still trigger to events as they have default \"source-over\" globalCompositeOperation.",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "type"
      }
    ],
    "examples": [
      "// get globalCompositeOperation\nvar globalCompositeOperation = shape.globalCompositeOperation();\n\n// set globalCompositeOperation\nshape.globalCompositeOperation('source-in');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4846,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2277
  },
  {
    "id": "Konva.Image#opacity",
    "longname": "Konva.Image#opacity",
    "name": "opacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#opacity",
    "inherited": true,
    "overrides": "Konva.Shape#opacity",
    "description": "get/set opacity.  Opacity values range from 0 to 1.\n A node with an opacity of 0 is fully transparent, and a node\n with an opacity of 1 is fully opaque",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "opacity"
      }
    ],
    "examples": [
      "// get opacity\nvar opacity = node.opacity();\n\n// set opacity\nnode.opacity(0.5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4860,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2278
  },
  {
    "id": "Konva.Image#name",
    "longname": "Konva.Image#name",
    "name": "name",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#name",
    "inherited": true,
    "overrides": "Konva.Shape#name",
    "description": "get/set name.",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "// get name\nvar name = node.name();\n\n// set name\nnode.name('foo');\n\n// also node may have multiple names (as css classes)\nnode.name('foo bar');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4876,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2279
  },
  {
    "id": "Konva.Image#id",
    "longname": "Konva.Image#id",
    "name": "id",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#id",
    "inherited": true,
    "overrides": "Konva.Shape#id",
    "description": "get/set id. Id is global for whole page.",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "id"
      }
    ],
    "examples": [
      "// get id\nvar name = node.id();\n\n// set id\nnode.id('foo');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4893,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2280
  },
  {
    "id": "Konva.Image#rotation",
    "longname": "Konva.Image#rotation",
    "name": "rotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#rotation",
    "inherited": true,
    "overrides": "Konva.Shape#rotation",
    "description": "get/set rotation in degrees",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get rotation in degrees\nvar rotation = node.rotation();\n\n// set rotation in degrees\nnode.rotation(45);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4907,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2281
  },
  {
    "id": "Konva.Image#scale",
    "longname": "Konva.Image#scale",
    "name": "scale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scale",
    "inherited": true,
    "overrides": "Konva.Shape#scale",
    "description": "get/set scale",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.y"
      }
    ],
    "examples": [
      "// get scale\nvar scale = node.scale();\n\n// set scale\nshape.scale({\n  x: 2,\n  y: 3\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4921,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2282
  },
  {
    "id": "Konva.Image#scaleX",
    "longname": "Konva.Image#scaleX",
    "name": "scaleX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scaleX",
    "inherited": true,
    "overrides": "Konva.Shape#scaleX",
    "description": "get/set scale x",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get scale x\nvar scaleX = node.scaleX();\n\n// set scale x\nnode.scaleX(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4940,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2283
  },
  {
    "id": "Konva.Image#scaleY",
    "longname": "Konva.Image#scaleY",
    "name": "scaleY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scaleY",
    "inherited": true,
    "overrides": "Konva.Shape#scaleY",
    "description": "get/set scale y",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get scale y\nvar scaleY = node.scaleY();\n\n// set scale y\nnode.scaleY(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4954,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2284
  },
  {
    "id": "Konva.Image#skew",
    "longname": "Konva.Image#skew",
    "name": "skew",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skew",
    "inherited": true,
    "overrides": "Konva.Shape#skew",
    "description": "get/set skew",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "skew"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "skew.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "skew.y"
      }
    ],
    "examples": [
      "// get skew\nvar skew = node.skew();\n\n// set skew\nnode.skew({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4968,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2285
  },
  {
    "id": "Konva.Image#skewX",
    "longname": "Konva.Image#skewX",
    "name": "skewX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skewX",
    "inherited": true,
    "overrides": "Konva.Shape#skewX",
    "description": "get/set skew x",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get skew x\nvar skewX = node.skewX();\n\n// set skew x\nnode.skewX(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4987,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2286
  },
  {
    "id": "Konva.Image#skewY",
    "longname": "Konva.Image#skewY",
    "name": "skewY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skewY",
    "inherited": true,
    "overrides": "Konva.Shape#skewY",
    "description": "get/set skew y",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get skew y\nvar skewY = node.skewY();\n\n// set skew y\nnode.skewY(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5001,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2287
  },
  {
    "id": "Konva.Image#offsetX",
    "longname": "Konva.Image#offsetX",
    "name": "offsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#offsetX",
    "inherited": true,
    "overrides": "Konva.Shape#offsetX",
    "description": "get/set offset x",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get offset x\nvar offsetX = node.offsetX();\n\n// set offset x\nnode.offsetX(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5033,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2288
  },
  {
    "id": "Konva.Image#offsetY",
    "longname": "Konva.Image#offsetY",
    "name": "offsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#offsetY",
    "inherited": true,
    "overrides": "Konva.Shape#offsetY",
    "description": "get/set offset y",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get offset y\nvar offsetY = node.offsetY();\n\n// set offset y\nnode.offsetY(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5047,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2289
  },
  {
    "id": "Konva.Image#dragDistance",
    "longname": "Konva.Image#dragDistance",
    "name": "dragDistance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#dragDistance",
    "inherited": true,
    "overrides": "Konva.Shape#dragDistance",
    "description": "get/set drag distance",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "distance"
      }
    ],
    "examples": [
      "// get drag distance\nvar dragDistance = node.dragDistance();\n\n// set distance\n// node starts dragging only if pointer moved more then 3 pixels\nnode.dragDistance(3);\n// or set globally\nKonva.dragDistance = 3;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5061,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2290
  },
  {
    "id": "Konva.Image#width",
    "longname": "Konva.Image#width",
    "name": "width",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#width",
    "inherited": true,
    "overrides": "Konva.Shape#width",
    "description": "get/set width",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "width"
      }
    ],
    "examples": [
      "// get width\nvar width = node.width();\n\n// set width\nnode.width(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5078,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2291
  },
  {
    "id": "Konva.Image#height",
    "longname": "Konva.Image#height",
    "name": "height",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#height",
    "inherited": true,
    "overrides": "Konva.Shape#height",
    "description": "get/set height",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "height"
      }
    ],
    "examples": [
      "// get height\nvar height = node.height();\n\n// set height\nnode.height(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5092,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2292
  },
  {
    "id": "Konva.Image#listening",
    "longname": "Konva.Image#listening",
    "name": "listening",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#listening",
    "inherited": true,
    "overrides": "Konva.Shape#listening",
    "description": "get/set listening attr.  If you need to determine if a node is listening or not\n  by taking into account its parents, use the isListening() method\n  nodes with listening set to false will not be detected in hit graph\n  so they will be ignored in container.getIntersection() method",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "Can be true, or false.  The default is true.",
        "name": "listening"
      }
    ],
    "examples": [
      "// get listening attr\nvar listening = node.listening();\n\n// stop listening for events, remove node and all its children from hit graph\nnode.listening(false);\n\n// listen to events according to the parent\nnode.listening(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5106,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2293
  },
  {
    "id": "Konva.Image#preventDefault",
    "longname": "Konva.Image#preventDefault",
    "name": "preventDefault",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#preventDefault",
    "inherited": true,
    "overrides": "Konva.Shape#preventDefault",
    "description": "get/set preventDefault\nBy default all shapes will prevent default behavior\nof a browser on a pointer move or tap.\nthat will prevent native scrolling when you are trying to drag&drop a node\nbut sometimes you may need to enable default actions\nin that case you can set the property to false",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "preventDefault"
      }
    ],
    "examples": [
      "// get preventDefault\nvar shouldPrevent = shape.preventDefault();\n\n// set preventDefault\nshape.preventDefault(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5125,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2294
  },
  {
    "id": "Konva.Image#filters",
    "longname": "Konva.Image#filters",
    "name": "filters",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#filters",
    "inherited": true,
    "overrides": "Konva.Shape#filters",
    "description": "get/set filters.  Filters are applied to cached canvases",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "array of filters",
        "name": "filters"
      }
    ],
    "examples": [
      "// get filters\nvar filters = node.filters();\n\n// set a single filter\nnode.cache();\nnode.filters([Konva.Filters.Blur]);\n\n// set multiple filters\nnode.cache();\nnode.filters([\n  Konva.Filters.Blur,\n  Konva.Filters.Sepia,\n  Konva.Filters.Invert\n]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5148,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2295
  },
  {
    "id": "Konva.Image#visible",
    "longname": "Konva.Image#visible",
    "name": "visible",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#visible",
    "inherited": true,
    "overrides": "Konva.Shape#visible",
    "description": "get/set visible attr.  Can be true, or false.  The default is true.\n  If you need to determine if a node is visible or not\n  by taking into account its parents, use the isVisible() method",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "visible"
      }
    ],
    "examples": [
      "// get visible attr\nvar visible = node.visible();\n\n// make invisible\nnode.visible(false);\n\n// make visible (according to the parent)\nnode.visible(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5171,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2296
  },
  {
    "id": "Konva.Image#transformsEnabled",
    "longname": "Konva.Image#transformsEnabled",
    "name": "transformsEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#transformsEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#transformsEnabled",
    "description": "get/set transforms that are enabled.  Can be \"all\", \"none\", or \"position\".  The default\n is \"all\"",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// enable position transform only to improve draw performance\nnode.transformsEnabled('position');\n\n// enable all transforms\nnode.transformsEnabled('all');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5191,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2297
  },
  {
    "id": "Konva.Image#size",
    "longname": "Konva.Image#size",
    "name": "size",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#size",
    "inherited": true,
    "overrides": "Konva.Shape#size",
    "description": "get/set node size",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "size"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size.height"
      }
    ],
    "examples": [
      "// get node size\nvar size = node.size();\nvar width = size.width;\nvar height = size.height;\n\n// set size\nnode.size({\n  width: 100,\n  height: 200\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5205,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2298
  },
  {
    "id": "Konva.Image#dragBoundFunc",
    "longname": "Konva.Image#dragBoundFunc",
    "name": "dragBoundFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#dragBoundFunc",
    "inherited": true,
    "overrides": "Konva.Shape#dragBoundFunc",
    "description": "get/set drag bound function.  This is used to override the default\n drag and drop position.",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "name": "dragBoundFunc"
      }
    ],
    "examples": [
      "// get drag bound function\nvar dragBoundFunc = node.dragBoundFunc();\n\n// create vertical drag and drop\nnode.dragBoundFunc(function(pos){\n  // important pos - is absolute position of the node\n  // you should return absolute position too\n  return {\n    x: this.absolutePosition().x,\n    y: pos.y\n  };\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5226,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2299
  },
  {
    "id": "Konva.Image#draggable",
    "longname": "Konva.Image#draggable",
    "name": "draggable",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#draggable",
    "inherited": true,
    "overrides": "Konva.Shape#draggable",
    "description": "get/set draggable flag",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "draggable"
      }
    ],
    "examples": [
      "// get draggable flag\nvar draggable = node.draggable();\n\n// enable drag and drop\nnode.draggable(true);\n\n// disable drag and drop\nnode.draggable(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5248,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2300
  },
  {
    "id": "Konva.Image#to",
    "longname": "Konva.Image#to",
    "name": "to",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#to",
    "inherited": true,
    "overrides": "Konva.Shape#to",
    "description": "Tween node properties. Shorter usage of {@link Konva.Tween} object.",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "tween params",
        "name": "params"
      }
    ],
    "examples": [
      "circle.to({\n  x : 50,\n  duration : 0.5,\n  onUpdate: () => console.log('props updated'),\n  onFinish: () => console.log('finished'),\n});"
    ],
    "meta": {
      "lineno": 9588,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2301
  },
  {
    "id": "Konva.Image#blurRadius",
    "longname": "Konva.Image#blurRadius",
    "name": "blurRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#blurRadius",
    "inherited": true,
    "overrides": "Konva.Shape#blurRadius",
    "description": "get/set blur radius. Use with {@link Konva.Filters.Blur} filter",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "radius"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17517,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2302
  },
  {
    "id": "Konva.Image#brightness",
    "longname": "Konva.Image#brightness",
    "name": "brightness",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#brightness",
    "inherited": true,
    "overrides": "Konva.Shape#brightness",
    "description": "get/set filter brightness.  The brightness is a number between -1 and 1.&nbsp; Positive values\n brighten the pixels and negative values darken them. Use with {@link Konva.Filters.Brighten} filter.",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between -1 and 1",
        "name": "brightness"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17547,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2303
  },
  {
    "id": "Konva.Image#contrast",
    "longname": "Konva.Image#contrast",
    "name": "contrast",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#contrast",
    "inherited": true,
    "overrides": "Konva.Shape#contrast",
    "description": "get/set filter contrast.  The contrast is a number between -100 and 100.\nUse with {@link Konva.Filters.Contrast} filter.",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between -100 and 100",
        "name": "contrast"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17600,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2304
  },
  {
    "id": "Konva.Image#embossStrength",
    "longname": "Konva.Image#embossStrength",
    "name": "embossStrength",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossStrength",
    "inherited": true,
    "overrides": "Konva.Shape#embossStrength",
    "description": "get/set emboss strength. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1.  Default is 0.5",
        "name": "level"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17725,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2305
  },
  {
    "id": "Konva.Image#embossWhiteLevel",
    "longname": "Konva.Image#embossWhiteLevel",
    "name": "embossWhiteLevel",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossWhiteLevel",
    "inherited": true,
    "overrides": "Konva.Shape#embossWhiteLevel",
    "description": "get/set emboss white level. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1.  Default is 0.5",
        "name": "embossWhiteLevel"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17733,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2306
  },
  {
    "id": "Konva.Image#embossDirection",
    "longname": "Konva.Image#embossDirection",
    "name": "embossDirection",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossDirection",
    "inherited": true,
    "overrides": "Konva.Shape#embossDirection",
    "description": "get/set emboss direction. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "can be top-left, top, top-right, right, bottom-right, bottom, bottom-left or left\n  The default is top-left",
        "name": "embossDirection"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17741,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2307
  },
  {
    "id": "Konva.Image#embossBlend",
    "longname": "Konva.Image#embossBlend",
    "name": "embossBlend",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossBlend",
    "inherited": true,
    "overrides": "Konva.Shape#embossBlend",
    "description": "get/set emboss blend. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "embossBlend"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17750,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2308
  },
  {
    "id": "Konva.Image#enhance",
    "longname": "Konva.Image#enhance",
    "name": "enhance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#enhance",
    "inherited": true,
    "overrides": "Konva.Shape#enhance",
    "description": "get/set enhance. Use with {@link Konva.Filters.Enhance} filter. -1 to 1 values",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Float"
          ]
        },
        "name": "amount"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Float"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17864,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2309
  },
  {
    "id": "Konva.Image#hue",
    "longname": "Konva.Image#hue",
    "name": "hue",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hue",
    "inherited": true,
    "overrides": "Konva.Shape#hue",
    "description": "get/set hsv hue in degrees. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between 0 and 359",
        "name": "hue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17896,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2310
  },
  {
    "id": "Konva.Image#saturation",
    "longname": "Konva.Image#saturation",
    "name": "saturation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#saturation",
    "inherited": true,
    "overrides": "Konva.Shape#saturation",
    "description": "get/set hsv saturation. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the saturation, 1.0 doubles, etc..",
        "name": "saturation"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17904,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2311
  },
  {
    "id": "Konva.Image#luminance",
    "longname": "Konva.Image#luminance",
    "name": "luminance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#luminance",
    "inherited": true,
    "overrides": "Konva.Shape#luminance",
    "description": "get/set hsl luminance. Use with {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "from -1 to 1",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17912,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2312
  },
  {
    "id": "Konva.Image#value",
    "longname": "Konva.Image#value",
    "name": "value",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#value",
    "inherited": true,
    "overrides": "Konva.Shape#value",
    "description": "get/set hsv value. Use with {@link Konva.Filters.HSV} filter.",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the value, 1.0 doubles, etc..",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18018,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2313
  },
  {
    "id": "Konva.Image#kaleidoscopePower",
    "longname": "Konva.Image#kaleidoscopePower",
    "name": "kaleidoscopePower",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#kaleidoscopePower",
    "inherited": true,
    "overrides": "Konva.Shape#kaleidoscopePower",
    "description": "get/set kaleidoscope power. Use with {@link Konva.Filters.Kaleidoscope} filter.",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "of kaleidoscope",
        "name": "power"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18243,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2314
  },
  {
    "id": "Konva.Image#kaleidoscopeAngle",
    "longname": "Konva.Image#kaleidoscopeAngle",
    "name": "kaleidoscopeAngle",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#kaleidoscopeAngle",
    "inherited": true,
    "overrides": "Konva.Shape#kaleidoscopeAngle",
    "description": "get/set kaleidoscope angle. Use with {@link Konva.Filters.Kaleidoscope} filter.",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "degrees"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18251,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2315
  },
  {
    "id": "Konva.Image#noise",
    "longname": "Konva.Image#noise",
    "name": "noise",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#noise",
    "inherited": true,
    "overrides": "Konva.Shape#noise",
    "description": "get/set noise amount.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Noise} filter.",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "noise"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18437,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2316
  },
  {
    "id": "Konva.Image#pixelSize",
    "longname": "Konva.Image#pixelSize",
    "name": "pixelSize",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#pixelSize",
    "inherited": true,
    "overrides": "Konva.Shape#pixelSize",
    "description": "get/set pixel size. Use with {@link Konva.Filters.Pixelate} filter.",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "pixelSize"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18522,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2317
  },
  {
    "id": "Konva.Image#levels",
    "longname": "Konva.Image#levels",
    "name": "levels",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#levels",
    "inherited": true,
    "overrides": "Konva.Shape#levels",
    "description": "get/set levels.  Must be a number between 0 and 1.  Use with {@link Konva.Filters.Posterize} filter.",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1",
        "name": "level"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18552,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2318
  },
  {
    "id": "Konva.Image#red",
    "longname": "Konva.Image#red",
    "name": "red",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#red",
    "inherited": true,
    "overrides": "Konva.Shape#red",
    "description": "get/set filter red value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "red"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18596,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2319
  },
  {
    "id": "Konva.Image#green",
    "longname": "Konva.Image#green",
    "name": "green",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#green",
    "inherited": true,
    "overrides": "Konva.Shape#green",
    "description": "get/set filter green value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "green"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18616,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2320
  },
  {
    "id": "Konva.Image#blue",
    "longname": "Konva.Image#blue",
    "name": "blue",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#blue",
    "inherited": true,
    "overrides": "Konva.Shape#blue",
    "description": "get/set filter blue value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "blue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18625,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2321
  },
  {
    "id": "Konva.Image#alpha",
    "longname": "Konva.Image#alpha",
    "name": "alpha",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#alpha",
    "inherited": true,
    "overrides": "Konva.Shape#alpha",
    "description": "get/set filter alpha value. Use with {@link Konva.Filters.RGBA} filter.",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Float"
          ]
        },
        "description": "value between 0 and 1",
        "name": "alpha"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Float"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18718,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2322
  },
  {
    "id": "Konva.Image#threshold",
    "longname": "Konva.Image#threshold",
    "name": "threshold",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#threshold",
    "inherited": true,
    "overrides": "Konva.Shape#threshold",
    "description": "get/set threshold.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Threshold} or {@link Konva.Filters.Mask} filter.",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "threshold"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18809,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2323
  },
  {
    "id": "Konva.Rect#hasShadow",
    "longname": "Konva.Rect#hasShadow",
    "name": "hasShadow",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasShadow",
    "inherited": true,
    "description": "returns whether or not a shadow will be rendered",
    "memberof": "Konva.Rect",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 6909,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2324
  },
  {
    "id": "Konva.Rect#hasFill",
    "longname": "Konva.Rect#hasFill",
    "name": "hasFill",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasFill",
    "inherited": true,
    "description": "returns whether or not the shape will be filled",
    "memberof": "Konva.Rect",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7009,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2325
  },
  {
    "id": "Konva.Rect#hasStroke",
    "longname": "Konva.Rect#hasStroke",
    "name": "hasStroke",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasStroke",
    "inherited": true,
    "description": "returns whether or not the shape will be stroked",
    "memberof": "Konva.Rect",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7030,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2326
  },
  {
    "id": "Konva.Rect#intersects",
    "longname": "Konva.Rect#intersects",
    "name": "intersects",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#intersects",
    "inherited": true,
    "description": "determines if point is in the shape, regardless if other shapes are on top of it.  Note: because\n this method clears a temporary canvas and then redraws the shape, it performs very poorly if executed many times\n consecutively.  Please use the {@link Konva.Stage#getIntersection} method if at all possible\n because it performs much better",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "point"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "point.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "point.y"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7066,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2327
  },
  {
    "id": "Konva.Rect#getSelfRect",
    "longname": "Konva.Rect#getSelfRect",
    "name": "getSelfRect",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#getSelfRect",
    "inherited": true,
    "description": "return self rectangle (x, y, width, height) of shape.\nThis method are not taken into account transformation and styles.",
    "memberof": "Konva.Rect",
    "examples": [
      "rect.getSelfRect();  // return {x:0, y:0, width:rect.width(), height:rect.height()}\ncircle.getSelfRect();  // return {x: - circle.width() / 2, y: - circle.height() / 2, width:circle.width(), height:circle.height()}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "rect with `{x, y, width, height}` properties"
      }
    ],
    "meta": {
      "lineno": 7138,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2328
  },
  {
    "id": "Konva.Rect#drawHitFromCache",
    "longname": "Konva.Rect#drawHitFromCache",
    "name": "drawHitFromCache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#drawHitFromCache",
    "inherited": true,
    "description": "draw hit graph using the cached scene canvas",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "alpha channel threshold that determines whether or not\n a pixel should be drawn onto the hit graph.  Must be a value between 0 and 255.\n The default is 0",
        "name": "alphaThreshold"
      }
    ],
    "examples": [
      "shape.cache();\nshape.drawHitFromCache();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7294,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2329
  },
  {
    "id": "Konva.Rect#stroke",
    "longname": "Konva.Rect#stroke",
    "name": "stroke",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#stroke",
    "inherited": true,
    "description": "get/set stroke color",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get stroke color\nvar stroke = shape.stroke();\n\n// set stroke color with color string\nshape.stroke('green');\n\n// set stroke color with hex\nshape.stroke('#00ff00');\n\n// set stroke color with rgb\nshape.stroke('rgb(0,255,0)');\n\n// set stroke color with rgba and make it 50% opaque\nshape.stroke('rgba(0,255,0,0.5');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7360,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2330
  },
  {
    "id": "Konva.Rect#strokeWidth",
    "longname": "Konva.Rect#strokeWidth",
    "name": "strokeWidth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeWidth",
    "inherited": true,
    "description": "get/set stroke width",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "strokeWidth"
      }
    ],
    "examples": [
      "// get stroke width\nvar strokeWidth = shape.strokeWidth();\n\n// set stroke width\nshape.strokeWidth(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7383,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2331
  },
  {
    "id": "Konva.Rect#fillAfterStrokeEnabled",
    "longname": "Konva.Rect#fillAfterStrokeEnabled",
    "name": "fillAfterStrokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillAfterStrokeEnabled",
    "inherited": true,
    "description": "get/set fillAfterStrokeEnabled property. By default Konva is drawing filling first, then stroke on top of the fill.\nIn rare situations you may want a different behavior. When you have a stroke first then fill on top of it.\nEspecially useful for Text objects.\nDefault is false.",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "fillAfterStrokeEnabled"
      }
    ],
    "examples": [
      "// get stroke width\nvar fillAfterStrokeEnabled = shape.fillAfterStrokeEnabled();\n\n// set stroke width\nshape.fillAfterStrokeEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7397,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2332
  },
  {
    "id": "Konva.Rect#hitStrokeWidth",
    "longname": "Konva.Rect#hitStrokeWidth",
    "name": "hitStrokeWidth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hitStrokeWidth",
    "inherited": true,
    "description": "get/set stroke width for hit detection. Default value is \"auto\", it means it will be equals to strokeWidth",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "hitStrokeWidth"
      }
    ],
    "examples": [
      "// get stroke width\nvar hitStrokeWidth = shape.hitStrokeWidth();\n\n// set hit stroke width\nshape.hitStrokeWidth(20);\n// set hit stroke width always equals to scene stroke width\nshape.hitStrokeWidth('auto');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7414,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2333
  },
  {
    "id": "Konva.Rect#strokeHitEnabled",
    "longname": "Konva.Rect#strokeHitEnabled",
    "name": "strokeHitEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeHitEnabled",
    "inherited": true,
    "description": "**deprecated, use hitStrokeWidth instead!** get/set strokeHitEnabled property. Useful for performance optimization.\nYou may set `shape.strokeHitEnabled(false)`. In this case stroke will be no draw on hit canvas, so hit area\nof shape will be decreased (by lineWidth / 2). Remember that non closed line with `strokeHitEnabled = false`\nwill be not drawn on hit canvas, that is mean line will no trigger pointer events (like mouseover)\nDefault value is true.",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "strokeHitEnabled"
      }
    ],
    "examples": [
      "// get strokeHitEnabled\nvar strokeHitEnabled = shape.strokeHitEnabled();\n\n// set strokeHitEnabled\nshape.strokeHitEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7430,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2334
  },
  {
    "id": "Konva.Rect#perfectDrawEnabled",
    "longname": "Konva.Rect#perfectDrawEnabled",
    "name": "perfectDrawEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#perfectDrawEnabled",
    "inherited": true,
    "description": "get/set perfectDrawEnabled. If a shape has fill, stroke and opacity you may set `perfectDrawEnabled` to false to improve performance.\nSee http://konvajs.org/docs/performance/Disable_Perfect_Draw.html for more information.\nDefault value is true",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "perfectDrawEnabled"
      }
    ],
    "examples": [
      "// get perfectDrawEnabled\nvar perfectDrawEnabled = shape.perfectDrawEnabled();\n\n// set perfectDrawEnabled\nshape.perfectDrawEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7448,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2335
  },
  {
    "id": "Konva.Rect#shadowForStrokeEnabled",
    "longname": "Konva.Rect#shadowForStrokeEnabled",
    "name": "shadowForStrokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowForStrokeEnabled",
    "inherited": true,
    "description": "get/set shadowForStrokeEnabled. Useful for performance optimization.\nYou may set `shape.shadowForStrokeEnabled(false)`. In this case stroke will no effect shadow.\nRemember if you set `shadowForStrokeEnabled = false` for non closed line - that line will have no shadow!.\nDefault value is true",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "shadowForStrokeEnabled"
      }
    ],
    "examples": [
      "// get shadowForStrokeEnabled\nvar shadowForStrokeEnabled = shape.shadowForStrokeEnabled();\n\n// set shadowForStrokeEnabled\nshape.shadowForStrokeEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7464,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2336
  },
  {
    "id": "Konva.Rect#lineJoin",
    "longname": "Konva.Rect#lineJoin",
    "name": "lineJoin",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#lineJoin",
    "inherited": true,
    "description": "get/set line join.  Can be miter, round, or bevel.  The\n default is miter",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "lineJoin"
      }
    ],
    "examples": [
      "// get line join\nvar lineJoin = shape.lineJoin();\n\n// set line join\nshape.lineJoin('round');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7481,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2337
  },
  {
    "id": "Konva.Rect#lineCap",
    "longname": "Konva.Rect#lineCap",
    "name": "lineCap",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#lineCap",
    "inherited": true,
    "description": "get/set line cap.  Can be butt, round, or square",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "lineCap"
      }
    ],
    "examples": [
      "// get line cap\nvar lineCap = shape.lineCap();\n\n// set line cap\nshape.lineCap('round');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7496,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2338
  },
  {
    "id": "Konva.Rect#sceneFunc",
    "longname": "Konva.Rect#sceneFunc",
    "name": "sceneFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#sceneFunc",
    "inherited": true,
    "description": "get/set scene draw function. That function is used to draw the shape on a canvas.\nAlso that function will be used to draw hit area of the shape, in case if hitFunc is not defined.",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "drawing function",
        "name": "drawFunc"
      }
    ],
    "examples": [
      "// get scene draw function\nvar sceneFunc = shape.sceneFunc();\n\n// set scene draw function\nshape.sceneFunc(function(context, shape) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  // like stroke and fill\n  context.fillStrokeShape(shape);\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7510,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2339
  },
  {
    "id": "Konva.Rect#hitFunc",
    "longname": "Konva.Rect#hitFunc",
    "name": "hitFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hitFunc",
    "inherited": true,
    "description": "get/set hit draw function. That function is used to draw custom hit area of a shape.",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "drawing function",
        "name": "drawFunc"
      }
    ],
    "examples": [
      "// get hit draw function\nvar hitFunc = shape.hitFunc();\n\n// set hit draw function\nshape.hitFunc(function(context) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  context.fillStrokeShape(shape);\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7532,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2340
  },
  {
    "id": "Konva.Rect#dash",
    "longname": "Konva.Rect#dash",
    "name": "dash",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#dash",
    "inherited": true,
    "overrides": "Konva.Shape#dash",
    "description": "get/set dash array for stroke.",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "dash"
      }
    ],
    "examples": [
      "// apply dashed stroke that is 10px long and 5 pixels apart\n line.dash([10, 5]);\n // apply dashed stroke that is made up of alternating dashed\n // lines that are 10px long and 20px apart, and dots that have\n // a radius of 5px and are 20px apart\n line.dash([10, 20, 0.001, 20]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7552,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2341
  },
  {
    "id": "Konva.Rect#shadowColor",
    "longname": "Konva.Rect#shadowColor",
    "name": "shadowColor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowColor",
    "inherited": true,
    "description": "get/set shadow color",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get shadow color\nvar shadow = shape.shadowColor();\n\n// set shadow color with color string\nshape.shadowColor('green');\n\n// set shadow color with hex\nshape.shadowColor('#00ff00');\n\n// set shadow color with rgb\nshape.shadowColor('rgb(0,255,0)');\n\n// set shadow color with rgba and make it 50% opaque\nshape.shadowColor('rgba(0,255,0,0.5');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7579,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2342
  },
  {
    "id": "Konva.Rect#shadowBlur",
    "longname": "Konva.Rect#shadowBlur",
    "name": "shadowBlur",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowBlur",
    "inherited": true,
    "description": "get/set shadow blur",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "blur"
      }
    ],
    "examples": [
      "// get shadow blur\nvar shadowBlur = shape.shadowBlur();\n\n// set shadow blur\nshape.shadowBlur(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7602,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2343
  },
  {
    "id": "Konva.Rect#shadowOpacity",
    "longname": "Konva.Rect#shadowOpacity",
    "name": "shadowOpacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOpacity",
    "inherited": true,
    "description": "get/set shadow opacity.  must be a value between 0 and 1",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "opacity"
      }
    ],
    "examples": [
      "// get shadow opacity\nvar shadowOpacity = shape.shadowOpacity();\n\n// set shadow opacity\nshape.shadowOpacity(0.5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7616,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2344
  },
  {
    "id": "Konva.Rect#shadowOffset",
    "longname": "Konva.Rect#shadowOffset",
    "name": "shadowOffset",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffset",
    "inherited": true,
    "description": "get/set shadow offset",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.y"
      }
    ],
    "examples": [
      "// get shadow offset\nvar shadowOffset = shape.shadowOffset();\n\n// set shadow offset\nshape.shadowOffset({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7630,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2345
  },
  {
    "id": "Konva.Rect#shadowOffsetX",
    "longname": "Konva.Rect#shadowOffsetX",
    "name": "shadowOffsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffsetX",
    "inherited": true,
    "description": "get/set shadow offset x",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get shadow offset x\nvar shadowOffsetX = shape.shadowOffsetX();\n\n// set shadow offset x\nshape.shadowOffsetX(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7649,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2346
  },
  {
    "id": "Konva.Rect#shadowOffsetY",
    "longname": "Konva.Rect#shadowOffsetY",
    "name": "shadowOffsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffsetY",
    "inherited": true,
    "description": "get/set shadow offset y",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get shadow offset y\nvar shadowOffsetY = shape.shadowOffsetY();\n\n// set shadow offset y\nshape.shadowOffsetY(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7663,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2347
  },
  {
    "id": "Konva.Rect#fillPatternImage",
    "longname": "Konva.Rect#fillPatternImage",
    "name": "fillPatternImage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternImage",
    "inherited": true,
    "description": "get/set fill pattern image",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Image"
          ]
        },
        "description": "object",
        "name": "image"
      }
    ],
    "examples": [
      "// get fill pattern image\nvar fillPatternImage = shape.fillPatternImage();\n\n// set fill pattern image\nvar imageObj = new Image();\nimageObj.onload = function() {\n  shape.fillPatternImage(imageObj);\n};\nimageObj.src = 'path/to/image/jpg';"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Image"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7677,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2348
  },
  {
    "id": "Konva.Rect#fill",
    "longname": "Konva.Rect#fill",
    "name": "fill",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fill",
    "inherited": true,
    "description": "get/set fill color",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get fill color\nvar fill = shape.fill();\n\n// set fill color with color string\nshape.fill('green');\n\n// set fill color with hex\nshape.fill('#00ff00');\n\n// set fill color with rgb\nshape.fill('rgb(0,255,0)');\n\n// set fill color with rgba and make it 50% opaque\nshape.fill('rgba(0,255,0,0.5');\n\n// shape without fill\nshape.fill(null);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7695,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2349
  },
  {
    "id": "Konva.Rect#fillPatternX",
    "longname": "Konva.Rect#fillPatternX",
    "name": "fillPatternX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternX",
    "inherited": true,
    "description": "get/set fill pattern x",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern x\nvar fillPatternX = shape.fillPatternX();\n// set fill pattern x\nshape.fillPatternX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7721,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2350
  },
  {
    "id": "Konva.Rect#fillPatternY",
    "longname": "Konva.Rect#fillPatternY",
    "name": "fillPatternY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternY",
    "inherited": true,
    "description": "get/set fill pattern y",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern y\nvar fillPatternY = shape.fillPatternY();\n// set fill pattern y\nshape.fillPatternY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7734,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2351
  },
  {
    "id": "Konva.Rect#fillLinearGradientColorStops",
    "longname": "Konva.Rect#fillLinearGradientColorStops",
    "name": "fillLinearGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientColorStops",
    "inherited": true,
    "description": "get/set fill linear gradient color stops",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get fill linear gradient color stops\nvar colorStops = shape.fillLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillLinearGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "colorStops"
      }
    ],
    "meta": {
      "lineno": 7747,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2352
  },
  {
    "id": "Konva.Rect#strokeLinearGradientColorStops",
    "longname": "Konva.Rect#strokeLinearGradientColorStops",
    "name": "strokeLinearGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientColorStops",
    "inherited": true,
    "description": "get/set stroke linear gradient color stops",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get stroke linear gradient color stops\nvar colorStops = shape.strokeLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.strokeLinearGradientColorStops([0, 'red', 0.5, 'blue', 1, 'green']);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "colorStops"
      }
    ],
    "meta": {
      "lineno": 7762,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2353
  },
  {
    "id": "Konva.Rect#fillRadialGradientStartRadius",
    "longname": "Konva.Rect#fillRadialGradientStartRadius",
    "name": "fillRadialGradientStartRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartRadius",
    "inherited": true,
    "description": "get/set fill radial gradient start radius",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "radius"
      }
    ],
    "examples": [
      "// get radial gradient start radius\nvar startRadius = shape.fillRadialGradientStartRadius();\n\n// set radial gradient start radius\nshape.fillRadialGradientStartRadius(0);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7777,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2354
  },
  {
    "id": "Konva.Rect#fillRadialGradientEndRadius",
    "longname": "Konva.Rect#fillRadialGradientEndRadius",
    "name": "fillRadialGradientEndRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndRadius",
    "inherited": true,
    "description": "get/set fill radial gradient end radius",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "radius"
      }
    ],
    "examples": [
      "// get radial gradient end radius\nvar endRadius = shape.fillRadialGradientEndRadius();\n\n// set radial gradient end radius\nshape.fillRadialGradientEndRadius(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7791,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2355
  },
  {
    "id": "Konva.Rect#fillRadialGradientColorStops",
    "longname": "Konva.Rect#fillRadialGradientColorStops",
    "name": "fillRadialGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientColorStops",
    "inherited": true,
    "description": "get/set fill radial gradient color stops",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get fill radial gradient color stops\nvar colorStops = shape.fillRadialGradientColorStops();\n\n// create a radial gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillRadialGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7805,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2356
  },
  {
    "id": "Konva.Rect#fillPatternRepeat",
    "longname": "Konva.Rect#fillPatternRepeat",
    "name": "fillPatternRepeat",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternRepeat",
    "inherited": true,
    "description": "get/set fill pattern repeat.  Can be 'repeat', 'repeat-x', 'repeat-y', or 'no-repeat'.  The default is 'repeat'",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "repeat"
      }
    ],
    "examples": [
      "// get fill pattern repeat\nvar repeat = shape.fillPatternRepeat();\n\n// repeat pattern in x direction only\nshape.fillPatternRepeat('repeat-x');\n\n// do not repeat the pattern\nshape.fillPatternRepeat('no-repeat');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7820,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2357
  },
  {
    "id": "Konva.Rect#fillEnabled",
    "longname": "Konva.Rect#fillEnabled",
    "name": "fillEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillEnabled",
    "inherited": true,
    "description": "get/set fill enabled flag",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get fill enabled flag\nvar fillEnabled = shape.fillEnabled();\n\n// disable fill\nshape.fillEnabled(false);\n\n// enable fill\nshape.fillEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7837,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2358
  },
  {
    "id": "Konva.Rect#strokeEnabled",
    "longname": "Konva.Rect#strokeEnabled",
    "name": "strokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeEnabled",
    "inherited": true,
    "description": "get/set stroke enabled flag",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get stroke enabled flag\nvar strokeEnabled = shape.strokeEnabled();\n\n// disable stroke\nshape.strokeEnabled(false);\n\n// enable stroke\nshape.strokeEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7854,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2359
  },
  {
    "id": "Konva.Rect#shadowEnabled",
    "longname": "Konva.Rect#shadowEnabled",
    "name": "shadowEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowEnabled",
    "inherited": true,
    "description": "get/set shadow enabled flag",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get shadow enabled flag\nvar shadowEnabled = shape.shadowEnabled();\n\n// disable shadow\nshape.shadowEnabled(false);\n\n// enable shadow\nshape.shadowEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7871,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2360
  },
  {
    "id": "Konva.Rect#dashEnabled",
    "longname": "Konva.Rect#dashEnabled",
    "name": "dashEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#dashEnabled",
    "inherited": true,
    "description": "get/set dash enabled flag",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get dash enabled flag\nvar dashEnabled = shape.dashEnabled();\n\n// disable dash\nshape.dashEnabled(false);\n\n// enable dash\nshape.dashEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7888,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2361
  },
  {
    "id": "Konva.Rect#strokeScaleEnabled",
    "longname": "Konva.Rect#strokeScaleEnabled",
    "name": "strokeScaleEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeScaleEnabled",
    "inherited": true,
    "description": "get/set strokeScale enabled flag",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get stroke scale enabled flag\nvar strokeScaleEnabled = shape.strokeScaleEnabled();\n\n// disable stroke scale\nshape.strokeScaleEnabled(false);\n\n// enable stroke scale\nshape.strokeScaleEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7905,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2362
  },
  {
    "id": "Konva.Rect#fillPriority",
    "longname": "Konva.Rect#fillPriority",
    "name": "fillPriority",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPriority",
    "inherited": true,
    "description": "get/set fill priority.  can be color, pattern, linear-gradient, or radial-gradient.  The default is color.\n  This is handy if you want to toggle between different fill types.",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "priority"
      }
    ],
    "examples": [
      "// get fill priority\nvar fillPriority = shape.fillPriority();\n\n// set fill priority\nshape.fillPriority('linear-gradient');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7922,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2363
  },
  {
    "id": "Konva.Rect#fillPatternOffset",
    "longname": "Konva.Rect#fillPatternOffset",
    "name": "fillPatternOffset",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffset",
    "inherited": true,
    "description": "get/set fill pattern offset",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.y"
      }
    ],
    "examples": [
      "// get fill pattern offset\nvar patternOffset = shape.fillPatternOffset();\n\n// set fill pattern offset\nshape.fillPatternOffset({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7937,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2364
  },
  {
    "id": "Konva.Rect#fillPatternOffsetX",
    "longname": "Konva.Rect#fillPatternOffsetX",
    "name": "fillPatternOffsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffsetX",
    "inherited": true,
    "description": "get/set fill pattern offset x",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern offset x\nvar patternOffsetX = shape.fillPatternOffsetX();\n\n// set fill pattern offset x\nshape.fillPatternOffsetX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7956,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2365
  },
  {
    "id": "Konva.Rect#fillPatternOffsetY",
    "longname": "Konva.Rect#fillPatternOffsetY",
    "name": "fillPatternOffsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffsetY",
    "inherited": true,
    "description": "get/set fill pattern offset y",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern offset y\nvar patternOffsetY = shape.fillPatternOffsetY();\n\n// set fill pattern offset y\nshape.fillPatternOffsetY(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7970,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2366
  },
  {
    "id": "Konva.Rect#fillPatternScale",
    "longname": "Konva.Rect#fillPatternScale",
    "name": "fillPatternScale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScale",
    "inherited": true,
    "description": "get/set fill pattern scale",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.y"
      }
    ],
    "examples": [
      "// get fill pattern scale\nvar patternScale = shape.fillPatternScale();\n\n// set fill pattern scale\nshape.fillPatternScale({\n  x: 2,\n  y: 2\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7984,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2367
  },
  {
    "id": "Konva.Rect#fillPatternScaleX",
    "longname": "Konva.Rect#fillPatternScaleX",
    "name": "fillPatternScaleX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScaleX",
    "inherited": true,
    "description": "get/set fill pattern scale x",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern scale x\nvar patternScaleX = shape.fillPatternScaleX();\n\n// set fill pattern scale x\nshape.fillPatternScaleX(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8003,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2368
  },
  {
    "id": "Konva.Rect#fillPatternScaleY",
    "longname": "Konva.Rect#fillPatternScaleY",
    "name": "fillPatternScaleY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScaleY",
    "inherited": true,
    "description": "get/set fill pattern scale y",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern scale y\nvar patternScaleY = shape.fillPatternScaleY();\n\n// set fill pattern scale y\nshape.fillPatternScaleY(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8017,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2369
  },
  {
    "id": "Konva.Rect#fillLinearGradientStartPoint",
    "longname": "Konva.Rect#fillLinearGradientStartPoint",
    "name": "fillLinearGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPoint",
    "inherited": true,
    "description": "get/set fill linear gradient start point",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get fill linear gradient start point\nvar startPoint = shape.fillLinearGradientStartPoint();\n\n// set fill linear gradient start point\nshape.fillLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8034,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2370
  },
  {
    "id": "Konva.Rect#strokeLinearGradientStartPoint",
    "longname": "Konva.Rect#strokeLinearGradientStartPoint",
    "name": "strokeLinearGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientStartPoint",
    "inherited": true,
    "description": "get/set stroke linear gradient start point",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point\nvar startPoint = shape.strokeLinearGradientStartPoint();\n\n// set stroke linear gradient start point\nshape.strokeLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8056,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2371
  },
  {
    "id": "Konva.Rect#fillLinearGradientStartPointX",
    "longname": "Konva.Rect#fillLinearGradientStartPointX",
    "name": "fillLinearGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPointX",
    "inherited": true,
    "description": "get/set fill linear gradient start point x",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill linear gradient start point x\nvar startPointX = shape.fillLinearGradientStartPointX();\n\n// set fill linear gradient start point x\nshape.fillLinearGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8075,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2372
  },
  {
    "id": "Konva.Rect#linearLinearGradientStartPointX",
    "longname": "Konva.Rect#linearLinearGradientStartPointX",
    "name": "linearLinearGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#linearLinearGradientStartPointX",
    "inherited": true,
    "description": "get/set stroke linear gradient start point x",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point x\nvar startPointX = shape.strokeLinearGradientStartPointX();\n\n// set stroke linear gradient start point x\nshape.strokeLinearGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8089,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2373
  },
  {
    "id": "Konva.Rect#fillLinearGradientStartPointY",
    "longname": "Konva.Rect#fillLinearGradientStartPointY",
    "name": "fillLinearGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPointY",
    "inherited": true,
    "description": "get/set fill linear gradient start point y",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill linear gradient start point y\nvar startPointY = shape.fillLinearGradientStartPointY();\n\n// set fill linear gradient start point y\nshape.fillLinearGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8103,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2374
  },
  {
    "id": "Konva.Rect#strokeLinearGradientStartPointY",
    "longname": "Konva.Rect#strokeLinearGradientStartPointY",
    "name": "strokeLinearGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientStartPointY",
    "inherited": true,
    "description": "get/set stroke linear gradient start point y",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point y\nvar startPointY = shape.strokeLinearGradientStartPointY();\n\n// set stroke linear gradient start point y\nshape.strokeLinearGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8117,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2375
  },
  {
    "id": "Konva.Rect#fillLinearGradientEndPoint",
    "longname": "Konva.Rect#fillLinearGradientEndPoint",
    "name": "fillLinearGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPoint",
    "inherited": true,
    "description": "get/set fill linear gradient end point",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get fill linear gradient end point\nvar endPoint = shape.fillLinearGradientEndPoint();\n\n// set fill linear gradient end point\nshape.fillLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8134,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2376
  },
  {
    "id": "Konva.Rect#strokeLinearGradientEndPoint",
    "longname": "Konva.Rect#strokeLinearGradientEndPoint",
    "name": "strokeLinearGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPoint",
    "inherited": true,
    "description": "get/set stroke linear gradient end point",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point\nvar endPoint = shape.strokeLinearGradientEndPoint();\n\n// set stroke linear gradient end point\nshape.strokeLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8156,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2377
  },
  {
    "id": "Konva.Rect#fillLinearGradientEndPointX",
    "longname": "Konva.Rect#fillLinearGradientEndPointX",
    "name": "fillLinearGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPointX",
    "inherited": true,
    "description": "get/set fill linear gradient end point x",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill linear gradient end point x\nvar endPointX = shape.fillLinearGradientEndPointX();\n\n// set fill linear gradient end point x\nshape.fillLinearGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8175,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2378
  },
  {
    "id": "Konva.Rect#strokeLinearGradientEndPointX",
    "longname": "Konva.Rect#strokeLinearGradientEndPointX",
    "name": "strokeLinearGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPointX",
    "inherited": true,
    "description": "get/set fill linear gradient end point x",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point x\nvar endPointX = shape.strokeLinearGradientEndPointX();\n\n// set stroke linear gradient end point x\nshape.strokeLinearGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8189,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2379
  },
  {
    "id": "Konva.Rect#fillLinearGradientEndPointY",
    "longname": "Konva.Rect#fillLinearGradientEndPointY",
    "name": "fillLinearGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPointY",
    "inherited": true,
    "description": "get/set fill linear gradient end point y",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill linear gradient end point y\nvar endPointY = shape.fillLinearGradientEndPointY();\n\n// set fill linear gradient end point y\nshape.fillLinearGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8203,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2380
  },
  {
    "id": "Konva.Rect#strokeLinearGradientEndPointY",
    "longname": "Konva.Rect#strokeLinearGradientEndPointY",
    "name": "strokeLinearGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPointY",
    "inherited": true,
    "description": "get/set stroke linear gradient end point y",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point y\nvar endPointY = shape.strokeLinearGradientEndPointY();\n\n// set stroke linear gradient end point y\nshape.strokeLinearGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8217,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2381
  },
  {
    "id": "Konva.Rect#fillRadialGradientStartPoint",
    "longname": "Konva.Rect#fillRadialGradientStartPoint",
    "name": "fillRadialGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPoint",
    "inherited": true,
    "description": "get/set fill radial gradient start point",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get fill radial gradient start point\nvar startPoint = shape.fillRadialGradientStartPoint();\n\n// set fill radial gradient start point\nshape.fillRadialGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8234,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2382
  },
  {
    "id": "Konva.Rect#fillRadialGradientStartPointX",
    "longname": "Konva.Rect#fillRadialGradientStartPointX",
    "name": "fillRadialGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPointX",
    "inherited": true,
    "description": "get/set fill radial gradient start point x",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill radial gradient start point x\nvar startPointX = shape.fillRadialGradientStartPointX();\n\n// set fill radial gradient start point x\nshape.fillRadialGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8253,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2383
  },
  {
    "id": "Konva.Rect#fillRadialGradientStartPointY",
    "longname": "Konva.Rect#fillRadialGradientStartPointY",
    "name": "fillRadialGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPointY",
    "inherited": true,
    "description": "get/set fill radial gradient start point y",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill radial gradient start point y\nvar startPointY = shape.fillRadialGradientStartPointY();\n\n// set fill radial gradient start point y\nshape.fillRadialGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8267,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2384
  },
  {
    "id": "Konva.Rect#fillRadialGradientEndPoint",
    "longname": "Konva.Rect#fillRadialGradientEndPoint",
    "name": "fillRadialGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPoint",
    "inherited": true,
    "description": "get/set fill radial gradient end point",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get fill radial gradient end point\nvar endPoint = shape.fillRadialGradientEndPoint();\n\n// set fill radial gradient end point\nshape.fillRadialGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8284,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2385
  },
  {
    "id": "Konva.Rect#fillRadialGradientEndPointX",
    "longname": "Konva.Rect#fillRadialGradientEndPointX",
    "name": "fillRadialGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPointX",
    "inherited": true,
    "description": "get/set fill radial gradient end point x",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill radial gradient end point x\nvar endPointX = shape.fillRadialGradientEndPointX();\n\n// set fill radial gradient end point x\nshape.fillRadialGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8303,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2386
  },
  {
    "id": "Konva.Rect#fillRadialGradientEndPointY",
    "longname": "Konva.Rect#fillRadialGradientEndPointY",
    "name": "fillRadialGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPointY",
    "inherited": true,
    "description": "get/set fill radial gradient end point y",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill radial gradient end point y\nvar endPointY = shape.fillRadialGradientEndPointY();\n\n// set fill radial gradient end point y\nshape.fillRadialGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8317,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2387
  },
  {
    "id": "Konva.Rect#fillPatternRotation",
    "longname": "Konva.Rect#fillPatternRotation",
    "name": "fillPatternRotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternRotation",
    "inherited": true,
    "description": "get/set fill pattern rotation in degrees",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get fill pattern rotation\nvar patternRotation = shape.fillPatternRotation();\n\n// set fill pattern rotation\nshape.fillPatternRotation(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8331,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2388
  },
  {
    "id": "Konva.Rect#fillRule",
    "longname": "Konva.Rect#fillRule",
    "name": "fillRule",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRule",
    "inherited": true,
    "description": "get/set fill rule",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "CanvasFillRule"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get fill rule\nvar fillRule = shape.fillRule();\n\n// set fill rule\nshape.fillRule('evenodd');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8345,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2389
  },
  {
    "id": "Konva.Rect#clearCache",
    "longname": "Konva.Rect#clearCache",
    "name": "clearCache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#clearCache",
    "inherited": true,
    "description": "clear cached canvas",
    "memberof": "Konva.Rect",
    "examples": [
      "node.clearCache();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2632,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2390
  },
  {
    "id": "Konva.Rect#cache",
    "longname": "Konva.Rect#cache",
    "name": "cache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#cache",
    "inherited": true,
    "description": "cache node to improve drawing performance, apply filters, or create more accurate\n hit regions. For all basic shapes size of cache canvas will be automatically detected.\n If you need to cache your custom `Konva.Shape` instance you have to pass shape's bounding box\n properties. Look at [https://konvajs.org/docs/performance/Shape_Caching.html](https://konvajs.org/docs/performance/Shape_Caching.html) for more information.",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "increase canvas size by `offset` pixel in all directions.",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "when set to true, a red border will be drawn around the cached\n region for debugging purposes",
        "name": "config.drawBorder"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "change quality (or pixel ratio) of cached image. pixelRatio = 2 will produce 2x sized cache.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "control imageSmoothingEnabled property of created canvas for cache",
        "name": "config.imageSmoothingEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "change quality (or pixel ratio) of cached hit canvas.",
        "name": "config.hitCanvasPixelRatio"
      }
    ],
    "examples": [
      "// cache a shape with the x,y position of the bounding box at the center and\n// the width and height of the bounding box equal to the width and height of\n// the shape obtained from shape.width() and shape.height()\nimage.cache();\n\n// cache a node and define the bounding box position and size\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200\n});\n\n// cache a node and draw a red border around the bounding box\n// for debugging purposes\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200,\n  offset : 10,\n  drawBorder: true\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2650,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2391
  },
  {
    "id": "Konva.Rect#isCached",
    "longname": "Konva.Rect#isCached",
    "name": "isCached",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isCached",
    "inherited": true,
    "description": "determine if node is currently cached",
    "memberof": "Konva.Rect",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2788,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2392
  },
  {
    "id": "Konva.Rect#getClientRect",
    "longname": "Konva.Rect#getClientRect",
    "name": "getClientRect",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getClientRect",
    "inherited": true,
    "description": "Return client rectangle `{x, y, width, height}` of node. This rectangle also include all styling (strokes, shadows, etc).\nThe purpose of the method is similar to getBoundingClientRect API of the DOM.",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply transform to node for calculating rect?",
        "name": "config.skipTransform"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply shadow to the node for calculating bound box?",
        "name": "config.skipShadow"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply stroke to the node for calculating bound box?",
        "name": "config.skipStroke"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "calculate client rect relative to one of the parents",
        "name": "config.relativeTo"
      }
    ],
    "examples": [
      "var rect = new Konva.Rect({\n     width : 100,\n     height : 100,\n     x : 50,\n     y : 50,\n     strokeWidth : 4,\n     stroke : 'black',\n     offsetX : 50,\n     scaleY : 2\n});\n\n// get client rect without think off transformations (position, rotation, scale, offset, etc)\nrect.getClientRect({ skipTransform: true});\n// returns {\n//     x : -2,   // two pixels for stroke / 2\n//     y : -2,\n//     width : 104, // increased by 4 for stroke\n//     height : 104\n//}\n\n// get client rect with transformation applied\nrect.getClientRect();\n// returns Object {x: -2, y: 46, width: 104, height: 208}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "rect with `{x, y, width, height}` properties"
      }
    ],
    "meta": {
      "lineno": 2797,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2393
  },
  {
    "id": "Konva.Rect#on",
    "longname": "Konva.Rect#on",
    "name": "on",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#on",
    "inherited": true,
    "description": "bind events to the node. KonvaJS supports mouseover, mousemove,\n mouseout, mouseenter, mouseleave, mousedown, mouseup, wheel, contextmenu, click, dblclick, touchstart, touchmove,\n touchend, tap, dbltap, dragstart, dragmove, and dragend events.\n Pass in a string of events delimited by a space to bind multiple events at once\n such as 'mousedown mouseup mousemove'. Include a namespace to bind an\n event by name such as 'click.foobar'.",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'click', 'mousedown touchstart', 'mousedown.foo touchstart.foo'",
        "name": "evtStr"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The handler function. The first argument of that function is event object. Event object has `target` as main target of the event, `currentTarget` as current node listener and `evt` as native browser event.",
        "name": "handler"
      }
    ],
    "examples": [
      "// add click listener\nnode.on('click', function() {\n  console.log('you clicked me!');\n});\n\n// get the target node\nnode.on('click', function(evt) {\n  console.log(evt.target);\n});\n\n// stop event propagation\nnode.on('click', function(evt) {\n  evt.cancelBubble = true;\n});\n\n// bind multiple listeners\nnode.on('click touchstart', function() {\n  console.log('you clicked/touched me!');\n});\n\n// namespace listener\nnode.on('click.foo', function() {\n  console.log('you clicked/touched me!');\n});\n\n// get the event type\nnode.on('click tap', function(evt) {\n  var eventType = evt.type;\n});\n\n// get native event object\nnode.on('click tap', function(evt) {\n  var nativeEvent = evt.evt;\n});\n\n// for change events, get the old and new val\nnode.on('xChange', function(evt) {\n  var oldVal = evt.oldVal;\n  var newVal = evt.newVal;\n});\n\n// get event targets\n// with event delegations\nlayer.on('click', 'Group', function(evt) {\n  var shape = evt.target;\n  var group = evt.currentTarget;\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2919,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2394
  },
  {
    "id": "Konva.Rect#off",
    "longname": "Konva.Rect#off",
    "name": "off",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#off",
    "inherited": true,
    "description": "remove event bindings from the node. Pass in a string of\n event types delimmited by a space to remove multiple event\n bindings at once such as 'mousedown mouseup mousemove'.\n include a namespace to remove an event binding by name\n such as 'click.foobar'. If you only give a name like '.foobar',\n all events in that namespace will be removed.",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'click', 'mousedown touchstart', '.foobar'",
        "name": "evtStr"
      }
    ],
    "examples": [
      "// remove listener\nnode.off('click');\n\n// remove multiple listeners\nnode.off('click touchstart');\n\n// remove listener by name\nnode.off('click.foo');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3007,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2395
  },
  {
    "id": "Konva.Rect#remove",
    "longname": "Konva.Rect#remove",
    "name": "remove",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#remove",
    "inherited": true,
    "description": "remove a node from parent, but don't destroy. You can reuse the node later.",
    "memberof": "Konva.Rect",
    "examples": [
      "node.remove();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3088,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2396
  },
  {
    "id": "Konva.Rect#destroy",
    "longname": "Konva.Rect#destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#destroy",
    "inherited": true,
    "description": "remove and destroy a node. Kill it and delete forever! You should not reuse node after destroy().\nIf the node is a container (Group, Stage or Layer) it will destroy all children too.",
    "memberof": "Konva.Rect",
    "examples": [
      "node.destroy();"
    ],
    "meta": {
      "lineno": 3125,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2397
  },
  {
    "id": "Konva.Rect#getAttr",
    "longname": "Konva.Rect#getAttr",
    "name": "getAttr",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAttr",
    "inherited": true,
    "description": "get attr",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "attr"
      }
    ],
    "examples": [
      "var x = node.getAttr('x');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer",
            "String",
            "Object",
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3138,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2398
  },
  {
    "id": "Konva.Rect#getAncestors",
    "longname": "Konva.Rect#getAncestors",
    "name": "getAncestors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAncestors",
    "inherited": true,
    "description": "get ancestors",
    "memberof": "Konva.Rect",
    "examples": [
      "shape.getAncestors().forEach(function(node) {\n  console.log(node.getId());\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3155,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2399
  },
  {
    "id": "Konva.Rect#getAttrs",
    "longname": "Konva.Rect#getAttrs",
    "name": "getAttrs",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAttrs",
    "inherited": true,
    "description": "get attrs object literal",
    "memberof": "Konva.Rect",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3173,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2400
  },
  {
    "id": "Konva.Rect#setAttrs",
    "longname": "Konva.Rect#setAttrs",
    "name": "setAttrs",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#setAttrs",
    "inherited": true,
    "description": "set multiple attrs at once using an object literal",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "object containing key value pairs",
        "name": "config"
      }
    ],
    "examples": [
      "node.setAttrs({\n  x: 5,\n  fill: 'red'\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3182,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2401
  },
  {
    "id": "Konva.Rect#isListening",
    "longname": "Konva.Rect#isListening",
    "name": "isListening",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isListening",
    "inherited": true,
    "description": "determine if node is listening for events by taking into account ancestors.\n\nParent    | Self      | isListening\nlistening | listening |\n----------+-----------+------------\nT         | T         | T\nT         | F         | F\nF         | T         | F\nF         | F         | F",
    "memberof": "Konva.Rect",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3217,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2402
  },
  {
    "id": "Konva.Rect#isVisible",
    "longname": "Konva.Rect#isVisible",
    "name": "isVisible",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isVisible",
    "inherited": true,
    "description": "determine if node is visible by taking into account ancestors.\n\nParent    | Self      | isVisible\nvisible   | visible   |\n----------+-----------+------------\nT         | T         | T\nT         | F         | F\nF         | T         | F\nF         | F         | F",
    "memberof": "Konva.Rect",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3248,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2403
  },
  {
    "id": "Konva.Rect#show",
    "longname": "Konva.Rect#show",
    "name": "show",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#show",
    "inherited": true,
    "description": "show node. set visible = true",
    "memberof": "Konva.Rect",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3300,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2404
  },
  {
    "id": "Konva.Rect#hide",
    "longname": "Konva.Rect#hide",
    "name": "hide",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hide",
    "inherited": true,
    "description": "hide node.  Hidden nodes are no longer detectable",
    "memberof": "Konva.Rect",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3310,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2405
  },
  {
    "id": "Konva.Rect#getAbsoluteZIndex",
    "longname": "Konva.Rect#getAbsoluteZIndex",
    "name": "getAbsoluteZIndex",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteZIndex",
    "inherited": true,
    "description": "get absolute z-index which takes into account sibling\n and ancestor indices",
    "memberof": "Konva.Rect",
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3323,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2406
  },
  {
    "id": "Konva.Rect#getDepth",
    "longname": "Konva.Rect#getDepth",
    "name": "getDepth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getDepth",
    "inherited": true,
    "description": "get node depth in node tree.  Returns an integer.\n e.g. Stage depth will always be 0.  Layers will always be 1.  Groups and Shapes will always\n be >= 2",
    "memberof": "Konva.Rect",
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3355,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2407
  },
  {
    "id": "Konva.Rect#getRelativePointerPosition",
    "longname": "Konva.Rect#getRelativePointerPosition",
    "name": "getRelativePointerPosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getRelativePointerPosition",
    "inherited": true,
    "description": "get position of first pointer (like mouse or first touch) relative to local coordinates of current node",
    "memberof": "Konva.Rect",
    "examples": [
      "// let's think we have a rectangle at position x = 10, y = 10\n// now we clicked at x = 15, y = 15 of the stage\n// if you want to know position of the click, related to the rectangle you can use\nrect.getRelativePointerPosition();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3398,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2408
  },
  {
    "id": "Konva.Rect#getAbsolutePosition",
    "longname": "Konva.Rect#getAbsolutePosition",
    "name": "getAbsolutePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsolutePosition",
    "inherited": true,
    "description": "get absolute position of a node. That function can be used to calculate absolute position, but relative to any ancestor",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "optional ancestor node",
        "name": "Ancestor"
      }
    ],
    "examples": [
      "// returns absolute position relative to top-left corner of canvas\nnode.getAbsolutePosition();\n\n// calculate absolute position of node, inside stage\n// so stage transforms are ignored\nnode.getAbsolutePosition(stage)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3426,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2409
  },
  {
    "id": "Konva.Rect#move",
    "longname": "Konva.Rect#move",
    "name": "move",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#move",
    "inherited": true,
    "description": "move node by an amount relative to its current position",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "change"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "change.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "change.y"
      }
    ],
    "examples": [
      "// move node in x direction by 1px and y direction by 2px\nnode.move({\n  x: 1,\n  y: 2\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3514,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2410
  },
  {
    "id": "Konva.Rect#rotate",
    "longname": "Konva.Rect#rotate",
    "name": "rotate",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#rotate",
    "inherited": true,
    "description": "rotate node by an amount in degrees relative to its current rotation",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "theta"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3559,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2411
  },
  {
    "id": "Konva.Rect#moveToTop",
    "longname": "Konva.Rect#moveToTop",
    "name": "moveToTop",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveToTop",
    "inherited": true,
    "description": "move node to the top of its siblings",
    "memberof": "Konva.Rect",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3570,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2412
  },
  {
    "id": "Konva.Rect#moveUp",
    "longname": "Konva.Rect#moveUp",
    "name": "moveUp",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveUp",
    "inherited": true,
    "description": "move node up",
    "memberof": "Konva.Rect",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "flag is moved or not"
      }
    ],
    "meta": {
      "lineno": 3590,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2413
  },
  {
    "id": "Konva.Rect#moveDown",
    "longname": "Konva.Rect#moveDown",
    "name": "moveDown",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveDown",
    "inherited": true,
    "description": "move node down",
    "memberof": "Konva.Rect",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3610,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2414
  },
  {
    "id": "Konva.Rect#moveToBottom",
    "longname": "Konva.Rect#moveToBottom",
    "name": "moveToBottom",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveToBottom",
    "inherited": true,
    "description": "move node to the bottom of its siblings",
    "memberof": "Konva.Rect",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3630,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2415
  },
  {
    "id": "Konva.Rect#getAbsoluteOpacity",
    "longname": "Konva.Rect#getAbsoluteOpacity",
    "name": "getAbsoluteOpacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteOpacity",
    "inherited": true,
    "description": "get absolute opacity",
    "memberof": "Konva.Rect",
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3668,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2416
  },
  {
    "id": "Konva.Rect#moveTo",
    "longname": "Konva.Rect#moveTo",
    "name": "moveTo",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveTo",
    "inherited": true,
    "description": "move node to another container",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Container"
          ]
        },
        "name": "newContainer"
      }
    ],
    "examples": [
      "// move node from current layer into layer2\nnode.moveTo(layer2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3685,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2417
  },
  {
    "id": "Konva.Rect#toObject",
    "longname": "Konva.Rect#toObject",
    "name": "toObject",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toObject",
    "inherited": true,
    "description": "convert Node into an object for serialization.  Returns an object.",
    "memberof": "Konva.Rect",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3703,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2418
  },
  {
    "id": "Konva.Rect#toJSON",
    "longname": "Konva.Rect#toJSON",
    "name": "toJSON",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toJSON",
    "inherited": true,
    "description": "convert Node into a JSON string.  Returns a JSON string.",
    "memberof": "Konva.Rect",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3736,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2419
  },
  {
    "id": "Konva.Rect#getParent",
    "longname": "Konva.Rect#getParent",
    "name": "getParent",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getParent",
    "inherited": true,
    "description": "get parent container",
    "memberof": "Konva.Rect",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3745,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2420
  },
  {
    "id": "Konva.Rect#findAncestors",
    "longname": "Konva.Rect#findAncestors",
    "name": "findAncestors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#findAncestors",
    "inherited": true,
    "description": "get all ancestors (parent then parent of the parent, etc) of the node",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "selector for search",
        "name": "selector"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "show we think that node is ancestro itself?",
        "name": "includeSelf"
      },
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "optional": true,
        "description": "optional node where we need to stop searching (one of ancestors)",
        "name": "stopNode"
      }
    ],
    "examples": [
      "// get one of the parent group\nvar parentGroups = node.findAncestors('Group');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "[ancestors]"
      }
    ],
    "meta": {
      "lineno": 3754,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2421
  },
  {
    "id": "Konva.Rect#findAncestor",
    "longname": "Konva.Rect#findAncestor",
    "name": "findAncestor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#findAncestor",
    "inherited": true,
    "description": "get ancestor (parent or parent of the parent, etc) of the node that match passed selector",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "selector for search",
        "name": "selector"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "show we think that node is ancestro itself?",
        "name": "includeSelf"
      },
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "optional": true,
        "description": "optional node where we need to stop searching (one of ancestors)",
        "name": "stopNode"
      }
    ],
    "examples": [
      "// get one of the parent group\nvar group = node.findAncestors('.mygroup');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "description": "ancestor"
      }
    ],
    "meta": {
      "lineno": 3786,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2422
  },
  {
    "id": "Konva.Rect#getLayer",
    "longname": "Konva.Rect#getLayer",
    "name": "getLayer",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getLayer",
    "inherited": true,
    "description": "get layer ancestor",
    "memberof": "Konva.Rect",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Layer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3837,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2423
  },
  {
    "id": "Konva.Rect#getStage",
    "longname": "Konva.Rect#getStage",
    "name": "getStage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getStage",
    "inherited": true,
    "description": "get stage ancestor",
    "memberof": "Konva.Rect",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Stage"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3847,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2424
  },
  {
    "id": "Konva.Rect#fire",
    "longname": "Konva.Rect#fire",
    "name": "fire",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#fire",
    "inherited": true,
    "description": "fire event",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "event type.  can be a regular event, like click, mouseover, or mouseout, or it can be a custom event, like myCustomEvent",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "Event"
          ]
        },
        "optional": true,
        "description": "event object",
        "name": "evt"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "setting the value to false, or leaving it undefined, will result in the event\n not bubbling.  Setting the value to true will result in the event bubbling.",
        "name": "bubble"
      }
    ],
    "examples": [
      "// manually fire click event\nnode.fire('click');\n\n// fire custom event\nnode.fire('foo');\n\n// fire custom event with custom event object\nnode.fire('foo', {\n  bar: 10\n});\n\n// fire click event that bubbles\nnode.fire('click', null, true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3865,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2425
  },
  {
    "id": "Konva.Rect#getAbsoluteTransform",
    "longname": "Konva.Rect#getAbsoluteTransform",
    "name": "getAbsoluteTransform",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteTransform",
    "inherited": true,
    "description": "get absolute transform of the node which takes into\n account its ancestor transforms",
    "memberof": "Konva.Rect",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3901,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2426
  },
  {
    "id": "Konva.Rect#getAbsoluteScale",
    "longname": "Konva.Rect#getAbsoluteScale",
    "name": "getAbsoluteScale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteScale",
    "inherited": true,
    "description": "get absolute scale of the node which takes into\n account its ancestor scales",
    "memberof": "Konva.Rect",
    "examples": [
      "// get absolute scale x\nvar scaleX = node.getAbsoluteScale().x;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3961,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2427
  },
  {
    "id": "Konva.Rect#getAbsoluteRotation",
    "longname": "Konva.Rect#getAbsoluteRotation",
    "name": "getAbsoluteRotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteRotation",
    "inherited": true,
    "description": "get absolute rotation of the node which takes into\n account its ancestor rotations",
    "memberof": "Konva.Rect",
    "examples": [
      "// get absolute rotation\nvar rotation = node.getAbsoluteRotation();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3989,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2428
  },
  {
    "id": "Konva.Rect#getTransform",
    "longname": "Konva.Rect#getTransform",
    "name": "getTransform",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getTransform",
    "inherited": true,
    "description": "get transform of the node",
    "memberof": "Konva.Rect",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4009,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2429
  },
  {
    "id": "Konva.Rect#clone",
    "longname": "Konva.Rect#clone",
    "name": "clone",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#clone",
    "inherited": true,
    "description": "clone node.  Returns a new Node instance with identical attributes.  You can also override\n the node properties with an object literal, enabling you to use an existing node as a template\n for another node",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "override attrs",
        "name": "obj"
      }
    ],
    "examples": [
      "// simple clone\nvar clone = node.clone();\n\n// clone a node and override the x position\nvar clone = rect.clone({\n  x: 5\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4044,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2430
  },
  {
    "id": "Konva.Rect#toCanvas",
    "longname": "Konva.Rect#toCanvas",
    "name": "toCanvas",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toCanvas",
    "inherited": true,
    "description": "converts node into an canvas element.",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output canvas. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var canvas = node.toCanvas();"
    ],
    "meta": {
      "lineno": 4119,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2431
  },
  {
    "id": "Konva.Rect#toDataURL",
    "longname": "Konva.Rect#toDataURL",
    "name": "toDataURL",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toDataURL",
    "inherited": true,
    "description": "Creates a composite data URL (base64 string). If MIME type is not\nspecified, then \"image/png\" will result. For \"image/jpeg\", specify a quality\nlevel as quality (range 0.0 - 1.0)",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"image/png\" or \"image/jpeg\".\n \"image/png\" is the default",
        "name": "config.mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "jpeg quality.  If using an \"image/jpeg\" mimeType,\n you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n is very high quality",
        "name": "config.quality"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output image url. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4140,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2432
  },
  {
    "id": "Konva.Rect#toImage",
    "longname": "Konva.Rect#toImage",
    "name": "toImage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toImage",
    "inherited": true,
    "description": "converts node into an image.  Since the toImage\n method is asynchronous, the resulting image can only be retrieved from the config callback\n or the returned Promise.  toImage is most commonly used\n to cache complex drawings as an image so that they don't have to constantly be redrawn",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"image/png\" or \"image/jpeg\".\n \"image/png\" is the default",
        "name": "config.mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "jpeg quality.  If using an \"image/jpeg\" mimeType,\n you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n is very high quality",
        "name": "config.quality"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output image. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var image = node.toImage({\n  callback(img) {\n    // do stuff with img\n  }\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Image>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4172,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2433
  },
  {
    "id": "Konva.Rect#toBlob",
    "longname": "Konva.Rect#toBlob",
    "name": "toBlob",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toBlob",
    "inherited": true,
    "description": "Converts node into a blob.  Since the toBlob method is asynchronous,\n the resulting blob can only be retrieved from the config callback\n or the returned Promise.",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output canvas. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var blob = await node.toBlob({});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Blob>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4219,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2434
  },
  {
    "id": "Konva.Rect#getClassName",
    "longname": "Konva.Rect#getClassName",
    "name": "getClassName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getClassName",
    "inherited": true,
    "description": "get class name, which may return Stage, Layer, Group, or shape class names like Rect, Circle, Text, etc.",
    "memberof": "Konva.Rect",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4267,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2435
  },
  {
    "id": "Konva.Rect#getType",
    "longname": "Konva.Rect#getType",
    "name": "getType",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getType",
    "inherited": true,
    "description": "get the node type, which may return Stage, Layer, Group, or Shape",
    "memberof": "Konva.Rect",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4276,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2436
  },
  {
    "id": "Konva.Rect#addName",
    "longname": "Konva.Rect#addName",
    "name": "addName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#addName",
    "inherited": true,
    "description": "add name to node",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red');\nnode.addName('selected');\nnode.name(); // return 'red selected'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4324,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2437
  },
  {
    "id": "Konva.Rect#hasName",
    "longname": "Konva.Rect#hasName",
    "name": "hasName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hasName",
    "inherited": true,
    "description": "check is node has name",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red');\nnode.hasName('red');   // return true\nnode.hasName('selected'); // return false\nnode.hasName(''); // return false"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4343,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2438
  },
  {
    "id": "Konva.Rect#removeName",
    "longname": "Konva.Rect#removeName",
    "name": "removeName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#removeName",
    "inherited": true,
    "description": "remove name from node",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red selected');\nnode.removeName('selected');\nnode.hasName('selected'); // return false\nnode.name(); // return 'red'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4367,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2439
  },
  {
    "id": "Konva.Rect#setAttr",
    "longname": "Konva.Rect#setAttr",
    "name": "setAttr",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#setAttr",
    "inherited": true,
    "description": "set attr",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "attr"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "name": "val"
      }
    ],
    "examples": [
      "node.setAttr('x', 5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4388,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2440
  },
  {
    "id": "Konva.Rect#draw",
    "longname": "Konva.Rect#draw",
    "name": "draw",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#draw",
    "inherited": true,
    "description": "draw both scene and hit graphs.  If the node being drawn is the stage, all of the layers will be cleared and redrawn",
    "memberof": "Konva.Rect",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4511,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2441
  },
  {
    "id": "Konva.Rect#startDrag",
    "longname": "Konva.Rect#startDrag",
    "name": "startDrag",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#startDrag",
    "inherited": true,
    "description": "initiate drag and drop.",
    "memberof": "Konva.Rect",
    "meta": {
      "lineno": 4544,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2442
  },
  {
    "id": "Konva.Rect#stopDrag",
    "longname": "Konva.Rect#stopDrag",
    "name": "stopDrag",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#stopDrag",
    "inherited": true,
    "description": "stop drag and drop",
    "memberof": "Konva.Rect",
    "meta": {
      "lineno": 4590,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2443
  },
  {
    "id": "Konva.Rect#isDragging",
    "longname": "Konva.Rect#isDragging",
    "name": "isDragging",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isDragging",
    "inherited": true,
    "description": "determine if node is currently in drag and drop mode",
    "memberof": "Konva.Rect",
    "meta": {
      "lineno": 4607,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2444
  },
  {
    "id": "Konva.Rect#isClientRectOnScreen",
    "longname": "Konva.Rect#isClientRectOnScreen",
    "name": "isClientRectOnScreen",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isClientRectOnScreen",
    "inherited": true,
    "description": "determine if node (at least partially) is currently in user-visible area",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number",
            "Object"
          ]
        },
        "description": "optional margin in pixels",
        "name": "margin"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "margin.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "margin.y"
      }
    ],
    "examples": [
      "// get index\n// default calculations\nvar isOnScreen = node.isClientRectOnScreen()\n// increase object size (or screen size) for cases when objects close to the screen still need to be marked as \"visible\"\nvar isOnScreen = node.isClientRectOnScreen({ x: stage.width(), y: stage.height() })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4671,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2445
  },
  {
    "id": "Konva.Rect#zIndex",
    "longname": "Konva.Rect#zIndex",
    "name": "zIndex",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#zIndex",
    "inherited": true,
    "description": "get/set zIndex relative to the node's siblings who share the same parent.\nPlease remember that zIndex is not absolute (like in CSS). It is relative to parent element only.",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "index"
      }
    ],
    "examples": [
      "// get index\nvar index = node.zIndex();\n\n// set index\nnode.zIndex(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4764,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2446
  },
  {
    "id": "Konva.Rect#absolutePosition",
    "longname": "Konva.Rect#absolutePosition",
    "name": "absolutePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#absolutePosition",
    "inherited": true,
    "description": "get/set node absolute position",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "// get position\nvar position = node.absolutePosition();\n\n// set position\nnode.absolutePosition({\n  x: 5,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4779,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2447
  },
  {
    "id": "Konva.Rect#position",
    "longname": "Konva.Rect#position",
    "name": "position",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#position",
    "inherited": true,
    "description": "get/set node position relative to parent",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "// get position\nvar position = node.position();\n\n// set position\nnode.position({\n  x: 5,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4799,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2448
  },
  {
    "id": "Konva.Rect#x",
    "longname": "Konva.Rect#x",
    "name": "x",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#x",
    "inherited": true,
    "description": "get/set x position",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get x\nvar x = node.x();\n\n// set x\nnode.x(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4818,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2449
  },
  {
    "id": "Konva.Rect#y",
    "longname": "Konva.Rect#y",
    "name": "y",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#y",
    "inherited": true,
    "description": "get/set y position",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get y\nvar y = node.y();\n\n// set y\nnode.y(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4832,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2450
  },
  {
    "id": "Konva.Rect#globalCompositeOperation",
    "longname": "Konva.Rect#globalCompositeOperation",
    "name": "globalCompositeOperation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#globalCompositeOperation",
    "inherited": true,
    "description": "get/set globalCompositeOperation of a node. globalCompositeOperation DOESN'T affect hit graph of nodes. So they are still trigger to events as they have default \"source-over\" globalCompositeOperation.",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "type"
      }
    ],
    "examples": [
      "// get globalCompositeOperation\nvar globalCompositeOperation = shape.globalCompositeOperation();\n\n// set globalCompositeOperation\nshape.globalCompositeOperation('source-in');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4846,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2451
  },
  {
    "id": "Konva.Rect#opacity",
    "longname": "Konva.Rect#opacity",
    "name": "opacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#opacity",
    "inherited": true,
    "description": "get/set opacity.  Opacity values range from 0 to 1.\n A node with an opacity of 0 is fully transparent, and a node\n with an opacity of 1 is fully opaque",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "opacity"
      }
    ],
    "examples": [
      "// get opacity\nvar opacity = node.opacity();\n\n// set opacity\nnode.opacity(0.5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4860,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2452
  },
  {
    "id": "Konva.Rect#name",
    "longname": "Konva.Rect#name",
    "name": "name",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#name",
    "inherited": true,
    "description": "get/set name.",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "// get name\nvar name = node.name();\n\n// set name\nnode.name('foo');\n\n// also node may have multiple names (as css classes)\nnode.name('foo bar');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4876,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2453
  },
  {
    "id": "Konva.Rect#id",
    "longname": "Konva.Rect#id",
    "name": "id",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#id",
    "inherited": true,
    "description": "get/set id. Id is global for whole page.",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "id"
      }
    ],
    "examples": [
      "// get id\nvar name = node.id();\n\n// set id\nnode.id('foo');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4893,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2454
  },
  {
    "id": "Konva.Rect#rotation",
    "longname": "Konva.Rect#rotation",
    "name": "rotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#rotation",
    "inherited": true,
    "description": "get/set rotation in degrees",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get rotation in degrees\nvar rotation = node.rotation();\n\n// set rotation in degrees\nnode.rotation(45);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4907,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2455
  },
  {
    "id": "Konva.Rect#scale",
    "longname": "Konva.Rect#scale",
    "name": "scale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scale",
    "inherited": true,
    "description": "get/set scale",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.y"
      }
    ],
    "examples": [
      "// get scale\nvar scale = node.scale();\n\n// set scale\nshape.scale({\n  x: 2,\n  y: 3\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4921,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2456
  },
  {
    "id": "Konva.Rect#scaleX",
    "longname": "Konva.Rect#scaleX",
    "name": "scaleX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scaleX",
    "inherited": true,
    "description": "get/set scale x",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get scale x\nvar scaleX = node.scaleX();\n\n// set scale x\nnode.scaleX(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4940,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2457
  },
  {
    "id": "Konva.Rect#scaleY",
    "longname": "Konva.Rect#scaleY",
    "name": "scaleY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scaleY",
    "inherited": true,
    "description": "get/set scale y",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get scale y\nvar scaleY = node.scaleY();\n\n// set scale y\nnode.scaleY(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4954,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2458
  },
  {
    "id": "Konva.Rect#skew",
    "longname": "Konva.Rect#skew",
    "name": "skew",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skew",
    "inherited": true,
    "description": "get/set skew",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "skew"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "skew.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "skew.y"
      }
    ],
    "examples": [
      "// get skew\nvar skew = node.skew();\n\n// set skew\nnode.skew({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4968,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2459
  },
  {
    "id": "Konva.Rect#skewX",
    "longname": "Konva.Rect#skewX",
    "name": "skewX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skewX",
    "inherited": true,
    "description": "get/set skew x",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get skew x\nvar skewX = node.skewX();\n\n// set skew x\nnode.skewX(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4987,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2460
  },
  {
    "id": "Konva.Rect#skewY",
    "longname": "Konva.Rect#skewY",
    "name": "skewY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skewY",
    "inherited": true,
    "description": "get/set skew y",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get skew y\nvar skewY = node.skewY();\n\n// set skew y\nnode.skewY(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5001,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2461
  },
  {
    "id": "Konva.Rect#offsetX",
    "longname": "Konva.Rect#offsetX",
    "name": "offsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#offsetX",
    "inherited": true,
    "description": "get/set offset x",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get offset x\nvar offsetX = node.offsetX();\n\n// set offset x\nnode.offsetX(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5033,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2462
  },
  {
    "id": "Konva.Rect#offsetY",
    "longname": "Konva.Rect#offsetY",
    "name": "offsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#offsetY",
    "inherited": true,
    "description": "get/set offset y",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get offset y\nvar offsetY = node.offsetY();\n\n// set offset y\nnode.offsetY(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5047,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2463
  },
  {
    "id": "Konva.Rect#dragDistance",
    "longname": "Konva.Rect#dragDistance",
    "name": "dragDistance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#dragDistance",
    "inherited": true,
    "description": "get/set drag distance",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "distance"
      }
    ],
    "examples": [
      "// get drag distance\nvar dragDistance = node.dragDistance();\n\n// set distance\n// node starts dragging only if pointer moved more then 3 pixels\nnode.dragDistance(3);\n// or set globally\nKonva.dragDistance = 3;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5061,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2464
  },
  {
    "id": "Konva.Rect#width",
    "longname": "Konva.Rect#width",
    "name": "width",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#width",
    "inherited": true,
    "description": "get/set width",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "width"
      }
    ],
    "examples": [
      "// get width\nvar width = node.width();\n\n// set width\nnode.width(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5078,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2465
  },
  {
    "id": "Konva.Rect#height",
    "longname": "Konva.Rect#height",
    "name": "height",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#height",
    "inherited": true,
    "description": "get/set height",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "height"
      }
    ],
    "examples": [
      "// get height\nvar height = node.height();\n\n// set height\nnode.height(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5092,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2466
  },
  {
    "id": "Konva.Rect#listening",
    "longname": "Konva.Rect#listening",
    "name": "listening",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#listening",
    "inherited": true,
    "description": "get/set listening attr.  If you need to determine if a node is listening or not\n  by taking into account its parents, use the isListening() method\n  nodes with listening set to false will not be detected in hit graph\n  so they will be ignored in container.getIntersection() method",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "Can be true, or false.  The default is true.",
        "name": "listening"
      }
    ],
    "examples": [
      "// get listening attr\nvar listening = node.listening();\n\n// stop listening for events, remove node and all its children from hit graph\nnode.listening(false);\n\n// listen to events according to the parent\nnode.listening(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5106,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2467
  },
  {
    "id": "Konva.Rect#preventDefault",
    "longname": "Konva.Rect#preventDefault",
    "name": "preventDefault",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#preventDefault",
    "inherited": true,
    "description": "get/set preventDefault\nBy default all shapes will prevent default behavior\nof a browser on a pointer move or tap.\nthat will prevent native scrolling when you are trying to drag&drop a node\nbut sometimes you may need to enable default actions\nin that case you can set the property to false",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "preventDefault"
      }
    ],
    "examples": [
      "// get preventDefault\nvar shouldPrevent = shape.preventDefault();\n\n// set preventDefault\nshape.preventDefault(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5125,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2468
  },
  {
    "id": "Konva.Rect#filters",
    "longname": "Konva.Rect#filters",
    "name": "filters",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#filters",
    "inherited": true,
    "description": "get/set filters.  Filters are applied to cached canvases",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "array of filters",
        "name": "filters"
      }
    ],
    "examples": [
      "// get filters\nvar filters = node.filters();\n\n// set a single filter\nnode.cache();\nnode.filters([Konva.Filters.Blur]);\n\n// set multiple filters\nnode.cache();\nnode.filters([\n  Konva.Filters.Blur,\n  Konva.Filters.Sepia,\n  Konva.Filters.Invert\n]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5148,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2469
  },
  {
    "id": "Konva.Rect#visible",
    "longname": "Konva.Rect#visible",
    "name": "visible",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#visible",
    "inherited": true,
    "description": "get/set visible attr.  Can be true, or false.  The default is true.\n  If you need to determine if a node is visible or not\n  by taking into account its parents, use the isVisible() method",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "visible"
      }
    ],
    "examples": [
      "// get visible attr\nvar visible = node.visible();\n\n// make invisible\nnode.visible(false);\n\n// make visible (according to the parent)\nnode.visible(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5171,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2470
  },
  {
    "id": "Konva.Rect#transformsEnabled",
    "longname": "Konva.Rect#transformsEnabled",
    "name": "transformsEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#transformsEnabled",
    "inherited": true,
    "description": "get/set transforms that are enabled.  Can be \"all\", \"none\", or \"position\".  The default\n is \"all\"",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// enable position transform only to improve draw performance\nnode.transformsEnabled('position');\n\n// enable all transforms\nnode.transformsEnabled('all');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5191,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2471
  },
  {
    "id": "Konva.Rect#size",
    "longname": "Konva.Rect#size",
    "name": "size",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#size",
    "inherited": true,
    "description": "get/set node size",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "size"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size.height"
      }
    ],
    "examples": [
      "// get node size\nvar size = node.size();\nvar width = size.width;\nvar height = size.height;\n\n// set size\nnode.size({\n  width: 100,\n  height: 200\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5205,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2472
  },
  {
    "id": "Konva.Rect#dragBoundFunc",
    "longname": "Konva.Rect#dragBoundFunc",
    "name": "dragBoundFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#dragBoundFunc",
    "inherited": true,
    "description": "get/set drag bound function.  This is used to override the default\n drag and drop position.",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "name": "dragBoundFunc"
      }
    ],
    "examples": [
      "// get drag bound function\nvar dragBoundFunc = node.dragBoundFunc();\n\n// create vertical drag and drop\nnode.dragBoundFunc(function(pos){\n  // important pos - is absolute position of the node\n  // you should return absolute position too\n  return {\n    x: this.absolutePosition().x,\n    y: pos.y\n  };\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5226,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2473
  },
  {
    "id": "Konva.Rect#draggable",
    "longname": "Konva.Rect#draggable",
    "name": "draggable",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#draggable",
    "inherited": true,
    "description": "get/set draggable flag",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "draggable"
      }
    ],
    "examples": [
      "// get draggable flag\nvar draggable = node.draggable();\n\n// enable drag and drop\nnode.draggable(true);\n\n// disable drag and drop\nnode.draggable(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5248,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2474
  },
  {
    "id": "Konva.Rect#to",
    "longname": "Konva.Rect#to",
    "name": "to",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#to",
    "inherited": true,
    "description": "Tween node properties. Shorter usage of {@link Konva.Tween} object.",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "tween params",
        "name": "params"
      }
    ],
    "examples": [
      "circle.to({\n  x : 50,\n  duration : 0.5,\n  onUpdate: () => console.log('props updated'),\n  onFinish: () => console.log('finished'),\n});"
    ],
    "meta": {
      "lineno": 9588,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2475
  },
  {
    "id": "Konva.Rect#blurRadius",
    "longname": "Konva.Rect#blurRadius",
    "name": "blurRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#blurRadius",
    "inherited": true,
    "description": "get/set blur radius. Use with {@link Konva.Filters.Blur} filter",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "radius"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17517,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2476
  },
  {
    "id": "Konva.Rect#brightness",
    "longname": "Konva.Rect#brightness",
    "name": "brightness",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#brightness",
    "inherited": true,
    "description": "get/set filter brightness.  The brightness is a number between -1 and 1.&nbsp; Positive values\n brighten the pixels and negative values darken them. Use with {@link Konva.Filters.Brighten} filter.",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between -1 and 1",
        "name": "brightness"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17547,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2477
  },
  {
    "id": "Konva.Rect#contrast",
    "longname": "Konva.Rect#contrast",
    "name": "contrast",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#contrast",
    "inherited": true,
    "description": "get/set filter contrast.  The contrast is a number between -100 and 100.\nUse with {@link Konva.Filters.Contrast} filter.",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between -100 and 100",
        "name": "contrast"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17600,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2478
  },
  {
    "id": "Konva.Rect#embossStrength",
    "longname": "Konva.Rect#embossStrength",
    "name": "embossStrength",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossStrength",
    "inherited": true,
    "description": "get/set emboss strength. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1.  Default is 0.5",
        "name": "level"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17725,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2479
  },
  {
    "id": "Konva.Rect#embossWhiteLevel",
    "longname": "Konva.Rect#embossWhiteLevel",
    "name": "embossWhiteLevel",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossWhiteLevel",
    "inherited": true,
    "description": "get/set emboss white level. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1.  Default is 0.5",
        "name": "embossWhiteLevel"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17733,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2480
  },
  {
    "id": "Konva.Rect#embossDirection",
    "longname": "Konva.Rect#embossDirection",
    "name": "embossDirection",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossDirection",
    "inherited": true,
    "description": "get/set emboss direction. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "can be top-left, top, top-right, right, bottom-right, bottom, bottom-left or left\n  The default is top-left",
        "name": "embossDirection"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17741,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2481
  },
  {
    "id": "Konva.Rect#embossBlend",
    "longname": "Konva.Rect#embossBlend",
    "name": "embossBlend",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossBlend",
    "inherited": true,
    "description": "get/set emboss blend. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "embossBlend"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17750,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2482
  },
  {
    "id": "Konva.Rect#enhance",
    "longname": "Konva.Rect#enhance",
    "name": "enhance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#enhance",
    "inherited": true,
    "description": "get/set enhance. Use with {@link Konva.Filters.Enhance} filter. -1 to 1 values",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Float"
          ]
        },
        "name": "amount"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Float"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17864,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2483
  },
  {
    "id": "Konva.Rect#hue",
    "longname": "Konva.Rect#hue",
    "name": "hue",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hue",
    "inherited": true,
    "description": "get/set hsv hue in degrees. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between 0 and 359",
        "name": "hue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17896,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2484
  },
  {
    "id": "Konva.Rect#saturation",
    "longname": "Konva.Rect#saturation",
    "name": "saturation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#saturation",
    "inherited": true,
    "description": "get/set hsv saturation. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the saturation, 1.0 doubles, etc..",
        "name": "saturation"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17904,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2485
  },
  {
    "id": "Konva.Rect#luminance",
    "longname": "Konva.Rect#luminance",
    "name": "luminance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#luminance",
    "inherited": true,
    "description": "get/set hsl luminance. Use with {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "from -1 to 1",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17912,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2486
  },
  {
    "id": "Konva.Rect#value",
    "longname": "Konva.Rect#value",
    "name": "value",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#value",
    "inherited": true,
    "description": "get/set hsv value. Use with {@link Konva.Filters.HSV} filter.",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the value, 1.0 doubles, etc..",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18018,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2487
  },
  {
    "id": "Konva.Rect#kaleidoscopePower",
    "longname": "Konva.Rect#kaleidoscopePower",
    "name": "kaleidoscopePower",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#kaleidoscopePower",
    "inherited": true,
    "description": "get/set kaleidoscope power. Use with {@link Konva.Filters.Kaleidoscope} filter.",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "of kaleidoscope",
        "name": "power"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18243,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2488
  },
  {
    "id": "Konva.Rect#kaleidoscopeAngle",
    "longname": "Konva.Rect#kaleidoscopeAngle",
    "name": "kaleidoscopeAngle",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#kaleidoscopeAngle",
    "inherited": true,
    "description": "get/set kaleidoscope angle. Use with {@link Konva.Filters.Kaleidoscope} filter.",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "degrees"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18251,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2489
  },
  {
    "id": "Konva.Rect#noise",
    "longname": "Konva.Rect#noise",
    "name": "noise",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#noise",
    "inherited": true,
    "description": "get/set noise amount.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Noise} filter.",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "noise"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18437,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2490
  },
  {
    "id": "Konva.Rect#pixelSize",
    "longname": "Konva.Rect#pixelSize",
    "name": "pixelSize",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#pixelSize",
    "inherited": true,
    "description": "get/set pixel size. Use with {@link Konva.Filters.Pixelate} filter.",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "pixelSize"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18522,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2491
  },
  {
    "id": "Konva.Rect#levels",
    "longname": "Konva.Rect#levels",
    "name": "levels",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#levels",
    "inherited": true,
    "description": "get/set levels.  Must be a number between 0 and 1.  Use with {@link Konva.Filters.Posterize} filter.",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1",
        "name": "level"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18552,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2492
  },
  {
    "id": "Konva.Rect#red",
    "longname": "Konva.Rect#red",
    "name": "red",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#red",
    "inherited": true,
    "description": "get/set filter red value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "red"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18596,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2493
  },
  {
    "id": "Konva.Rect#green",
    "longname": "Konva.Rect#green",
    "name": "green",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#green",
    "inherited": true,
    "description": "get/set filter green value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "green"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18616,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2494
  },
  {
    "id": "Konva.Rect#blue",
    "longname": "Konva.Rect#blue",
    "name": "blue",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#blue",
    "inherited": true,
    "description": "get/set filter blue value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "blue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18625,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2495
  },
  {
    "id": "Konva.Rect#alpha",
    "longname": "Konva.Rect#alpha",
    "name": "alpha",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#alpha",
    "inherited": true,
    "description": "get/set filter alpha value. Use with {@link Konva.Filters.RGBA} filter.",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Float"
          ]
        },
        "description": "value between 0 and 1",
        "name": "alpha"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Float"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18718,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2496
  },
  {
    "id": "Konva.Rect#threshold",
    "longname": "Konva.Rect#threshold",
    "name": "threshold",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#threshold",
    "inherited": true,
    "description": "get/set threshold.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Threshold} or {@link Konva.Filters.Mask} filter.",
    "memberof": "Konva.Rect",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "threshold"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18809,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2497
  },
  {
    "id": "Konva.RegularPolygon#hasShadow",
    "longname": "Konva.RegularPolygon#hasShadow",
    "name": "hasShadow",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasShadow",
    "inherited": true,
    "description": "returns whether or not a shadow will be rendered",
    "memberof": "Konva.RegularPolygon",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 6909,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2498
  },
  {
    "id": "Konva.RegularPolygon#hasFill",
    "longname": "Konva.RegularPolygon#hasFill",
    "name": "hasFill",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasFill",
    "inherited": true,
    "description": "returns whether or not the shape will be filled",
    "memberof": "Konva.RegularPolygon",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7009,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2499
  },
  {
    "id": "Konva.RegularPolygon#hasStroke",
    "longname": "Konva.RegularPolygon#hasStroke",
    "name": "hasStroke",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasStroke",
    "inherited": true,
    "description": "returns whether or not the shape will be stroked",
    "memberof": "Konva.RegularPolygon",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7030,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2500
  },
  {
    "id": "Konva.RegularPolygon#intersects",
    "longname": "Konva.RegularPolygon#intersects",
    "name": "intersects",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#intersects",
    "inherited": true,
    "description": "determines if point is in the shape, regardless if other shapes are on top of it.  Note: because\n this method clears a temporary canvas and then redraws the shape, it performs very poorly if executed many times\n consecutively.  Please use the {@link Konva.Stage#getIntersection} method if at all possible\n because it performs much better",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "point"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "point.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "point.y"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7066,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2501
  },
  {
    "id": "Konva.RegularPolygon#getSelfRect",
    "longname": "Konva.RegularPolygon#getSelfRect",
    "name": "getSelfRect",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#getSelfRect",
    "inherited": true,
    "overrides": "Konva.Shape#getSelfRect",
    "description": "return self rectangle (x, y, width, height) of shape.\nThis method are not taken into account transformation and styles.",
    "memberof": "Konva.RegularPolygon",
    "examples": [
      "rect.getSelfRect();  // return {x:0, y:0, width:rect.width(), height:rect.height()}\ncircle.getSelfRect();  // return {x: - circle.width() / 2, y: - circle.height() / 2, width:circle.width(), height:circle.height()}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "rect with `{x, y, width, height}` properties"
      }
    ],
    "meta": {
      "lineno": 7138,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2502
  },
  {
    "id": "Konva.RegularPolygon#drawHitFromCache",
    "longname": "Konva.RegularPolygon#drawHitFromCache",
    "name": "drawHitFromCache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#drawHitFromCache",
    "inherited": true,
    "description": "draw hit graph using the cached scene canvas",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "alpha channel threshold that determines whether or not\n a pixel should be drawn onto the hit graph.  Must be a value between 0 and 255.\n The default is 0",
        "name": "alphaThreshold"
      }
    ],
    "examples": [
      "shape.cache();\nshape.drawHitFromCache();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7294,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2503
  },
  {
    "id": "Konva.RegularPolygon#stroke",
    "longname": "Konva.RegularPolygon#stroke",
    "name": "stroke",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#stroke",
    "inherited": true,
    "description": "get/set stroke color",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get stroke color\nvar stroke = shape.stroke();\n\n// set stroke color with color string\nshape.stroke('green');\n\n// set stroke color with hex\nshape.stroke('#00ff00');\n\n// set stroke color with rgb\nshape.stroke('rgb(0,255,0)');\n\n// set stroke color with rgba and make it 50% opaque\nshape.stroke('rgba(0,255,0,0.5');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7360,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2504
  },
  {
    "id": "Konva.RegularPolygon#strokeWidth",
    "longname": "Konva.RegularPolygon#strokeWidth",
    "name": "strokeWidth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeWidth",
    "inherited": true,
    "description": "get/set stroke width",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "strokeWidth"
      }
    ],
    "examples": [
      "// get stroke width\nvar strokeWidth = shape.strokeWidth();\n\n// set stroke width\nshape.strokeWidth(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7383,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2505
  },
  {
    "id": "Konva.RegularPolygon#fillAfterStrokeEnabled",
    "longname": "Konva.RegularPolygon#fillAfterStrokeEnabled",
    "name": "fillAfterStrokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillAfterStrokeEnabled",
    "inherited": true,
    "description": "get/set fillAfterStrokeEnabled property. By default Konva is drawing filling first, then stroke on top of the fill.\nIn rare situations you may want a different behavior. When you have a stroke first then fill on top of it.\nEspecially useful for Text objects.\nDefault is false.",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "fillAfterStrokeEnabled"
      }
    ],
    "examples": [
      "// get stroke width\nvar fillAfterStrokeEnabled = shape.fillAfterStrokeEnabled();\n\n// set stroke width\nshape.fillAfterStrokeEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7397,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2506
  },
  {
    "id": "Konva.RegularPolygon#hitStrokeWidth",
    "longname": "Konva.RegularPolygon#hitStrokeWidth",
    "name": "hitStrokeWidth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hitStrokeWidth",
    "inherited": true,
    "description": "get/set stroke width for hit detection. Default value is \"auto\", it means it will be equals to strokeWidth",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "hitStrokeWidth"
      }
    ],
    "examples": [
      "// get stroke width\nvar hitStrokeWidth = shape.hitStrokeWidth();\n\n// set hit stroke width\nshape.hitStrokeWidth(20);\n// set hit stroke width always equals to scene stroke width\nshape.hitStrokeWidth('auto');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7414,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2507
  },
  {
    "id": "Konva.RegularPolygon#strokeHitEnabled",
    "longname": "Konva.RegularPolygon#strokeHitEnabled",
    "name": "strokeHitEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeHitEnabled",
    "inherited": true,
    "description": "**deprecated, use hitStrokeWidth instead!** get/set strokeHitEnabled property. Useful for performance optimization.\nYou may set `shape.strokeHitEnabled(false)`. In this case stroke will be no draw on hit canvas, so hit area\nof shape will be decreased (by lineWidth / 2). Remember that non closed line with `strokeHitEnabled = false`\nwill be not drawn on hit canvas, that is mean line will no trigger pointer events (like mouseover)\nDefault value is true.",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "strokeHitEnabled"
      }
    ],
    "examples": [
      "// get strokeHitEnabled\nvar strokeHitEnabled = shape.strokeHitEnabled();\n\n// set strokeHitEnabled\nshape.strokeHitEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7430,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2508
  },
  {
    "id": "Konva.RegularPolygon#perfectDrawEnabled",
    "longname": "Konva.RegularPolygon#perfectDrawEnabled",
    "name": "perfectDrawEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#perfectDrawEnabled",
    "inherited": true,
    "description": "get/set perfectDrawEnabled. If a shape has fill, stroke and opacity you may set `perfectDrawEnabled` to false to improve performance.\nSee http://konvajs.org/docs/performance/Disable_Perfect_Draw.html for more information.\nDefault value is true",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "perfectDrawEnabled"
      }
    ],
    "examples": [
      "// get perfectDrawEnabled\nvar perfectDrawEnabled = shape.perfectDrawEnabled();\n\n// set perfectDrawEnabled\nshape.perfectDrawEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7448,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2509
  },
  {
    "id": "Konva.RegularPolygon#shadowForStrokeEnabled",
    "longname": "Konva.RegularPolygon#shadowForStrokeEnabled",
    "name": "shadowForStrokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowForStrokeEnabled",
    "inherited": true,
    "description": "get/set shadowForStrokeEnabled. Useful for performance optimization.\nYou may set `shape.shadowForStrokeEnabled(false)`. In this case stroke will no effect shadow.\nRemember if you set `shadowForStrokeEnabled = false` for non closed line - that line will have no shadow!.\nDefault value is true",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "shadowForStrokeEnabled"
      }
    ],
    "examples": [
      "// get shadowForStrokeEnabled\nvar shadowForStrokeEnabled = shape.shadowForStrokeEnabled();\n\n// set shadowForStrokeEnabled\nshape.shadowForStrokeEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7464,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2510
  },
  {
    "id": "Konva.RegularPolygon#lineJoin",
    "longname": "Konva.RegularPolygon#lineJoin",
    "name": "lineJoin",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#lineJoin",
    "inherited": true,
    "description": "get/set line join.  Can be miter, round, or bevel.  The\n default is miter",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "lineJoin"
      }
    ],
    "examples": [
      "// get line join\nvar lineJoin = shape.lineJoin();\n\n// set line join\nshape.lineJoin('round');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7481,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2511
  },
  {
    "id": "Konva.RegularPolygon#lineCap",
    "longname": "Konva.RegularPolygon#lineCap",
    "name": "lineCap",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#lineCap",
    "inherited": true,
    "description": "get/set line cap.  Can be butt, round, or square",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "lineCap"
      }
    ],
    "examples": [
      "// get line cap\nvar lineCap = shape.lineCap();\n\n// set line cap\nshape.lineCap('round');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7496,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2512
  },
  {
    "id": "Konva.RegularPolygon#sceneFunc",
    "longname": "Konva.RegularPolygon#sceneFunc",
    "name": "sceneFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#sceneFunc",
    "inherited": true,
    "description": "get/set scene draw function. That function is used to draw the shape on a canvas.\nAlso that function will be used to draw hit area of the shape, in case if hitFunc is not defined.",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "drawing function",
        "name": "drawFunc"
      }
    ],
    "examples": [
      "// get scene draw function\nvar sceneFunc = shape.sceneFunc();\n\n// set scene draw function\nshape.sceneFunc(function(context, shape) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  // like stroke and fill\n  context.fillStrokeShape(shape);\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7510,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2513
  },
  {
    "id": "Konva.RegularPolygon#hitFunc",
    "longname": "Konva.RegularPolygon#hitFunc",
    "name": "hitFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hitFunc",
    "inherited": true,
    "description": "get/set hit draw function. That function is used to draw custom hit area of a shape.",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "drawing function",
        "name": "drawFunc"
      }
    ],
    "examples": [
      "// get hit draw function\nvar hitFunc = shape.hitFunc();\n\n// set hit draw function\nshape.hitFunc(function(context) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  context.fillStrokeShape(shape);\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7532,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2514
  },
  {
    "id": "Konva.RegularPolygon#dash",
    "longname": "Konva.RegularPolygon#dash",
    "name": "dash",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#dash",
    "inherited": true,
    "overrides": "Konva.Shape#dash",
    "description": "get/set dash array for stroke.",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "dash"
      }
    ],
    "examples": [
      "// apply dashed stroke that is 10px long and 5 pixels apart\n line.dash([10, 5]);\n // apply dashed stroke that is made up of alternating dashed\n // lines that are 10px long and 20px apart, and dots that have\n // a radius of 5px and are 20px apart\n line.dash([10, 20, 0.001, 20]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7552,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2515
  },
  {
    "id": "Konva.RegularPolygon#shadowColor",
    "longname": "Konva.RegularPolygon#shadowColor",
    "name": "shadowColor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowColor",
    "inherited": true,
    "description": "get/set shadow color",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get shadow color\nvar shadow = shape.shadowColor();\n\n// set shadow color with color string\nshape.shadowColor('green');\n\n// set shadow color with hex\nshape.shadowColor('#00ff00');\n\n// set shadow color with rgb\nshape.shadowColor('rgb(0,255,0)');\n\n// set shadow color with rgba and make it 50% opaque\nshape.shadowColor('rgba(0,255,0,0.5');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7579,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2516
  },
  {
    "id": "Konva.RegularPolygon#shadowBlur",
    "longname": "Konva.RegularPolygon#shadowBlur",
    "name": "shadowBlur",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowBlur",
    "inherited": true,
    "description": "get/set shadow blur",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "blur"
      }
    ],
    "examples": [
      "// get shadow blur\nvar shadowBlur = shape.shadowBlur();\n\n// set shadow blur\nshape.shadowBlur(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7602,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2517
  },
  {
    "id": "Konva.RegularPolygon#shadowOpacity",
    "longname": "Konva.RegularPolygon#shadowOpacity",
    "name": "shadowOpacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOpacity",
    "inherited": true,
    "description": "get/set shadow opacity.  must be a value between 0 and 1",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "opacity"
      }
    ],
    "examples": [
      "// get shadow opacity\nvar shadowOpacity = shape.shadowOpacity();\n\n// set shadow opacity\nshape.shadowOpacity(0.5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7616,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2518
  },
  {
    "id": "Konva.RegularPolygon#shadowOffset",
    "longname": "Konva.RegularPolygon#shadowOffset",
    "name": "shadowOffset",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffset",
    "inherited": true,
    "description": "get/set shadow offset",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.y"
      }
    ],
    "examples": [
      "// get shadow offset\nvar shadowOffset = shape.shadowOffset();\n\n// set shadow offset\nshape.shadowOffset({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7630,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2519
  },
  {
    "id": "Konva.RegularPolygon#shadowOffsetX",
    "longname": "Konva.RegularPolygon#shadowOffsetX",
    "name": "shadowOffsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffsetX",
    "inherited": true,
    "description": "get/set shadow offset x",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get shadow offset x\nvar shadowOffsetX = shape.shadowOffsetX();\n\n// set shadow offset x\nshape.shadowOffsetX(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7649,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2520
  },
  {
    "id": "Konva.RegularPolygon#shadowOffsetY",
    "longname": "Konva.RegularPolygon#shadowOffsetY",
    "name": "shadowOffsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffsetY",
    "inherited": true,
    "description": "get/set shadow offset y",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get shadow offset y\nvar shadowOffsetY = shape.shadowOffsetY();\n\n// set shadow offset y\nshape.shadowOffsetY(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7663,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2521
  },
  {
    "id": "Konva.RegularPolygon#fillPatternImage",
    "longname": "Konva.RegularPolygon#fillPatternImage",
    "name": "fillPatternImage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternImage",
    "inherited": true,
    "description": "get/set fill pattern image",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Image"
          ]
        },
        "description": "object",
        "name": "image"
      }
    ],
    "examples": [
      "// get fill pattern image\nvar fillPatternImage = shape.fillPatternImage();\n\n// set fill pattern image\nvar imageObj = new Image();\nimageObj.onload = function() {\n  shape.fillPatternImage(imageObj);\n};\nimageObj.src = 'path/to/image/jpg';"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Image"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7677,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2522
  },
  {
    "id": "Konva.RegularPolygon#fill",
    "longname": "Konva.RegularPolygon#fill",
    "name": "fill",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fill",
    "inherited": true,
    "description": "get/set fill color",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get fill color\nvar fill = shape.fill();\n\n// set fill color with color string\nshape.fill('green');\n\n// set fill color with hex\nshape.fill('#00ff00');\n\n// set fill color with rgb\nshape.fill('rgb(0,255,0)');\n\n// set fill color with rgba and make it 50% opaque\nshape.fill('rgba(0,255,0,0.5');\n\n// shape without fill\nshape.fill(null);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7695,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2523
  },
  {
    "id": "Konva.RegularPolygon#fillPatternX",
    "longname": "Konva.RegularPolygon#fillPatternX",
    "name": "fillPatternX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternX",
    "inherited": true,
    "description": "get/set fill pattern x",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern x\nvar fillPatternX = shape.fillPatternX();\n// set fill pattern x\nshape.fillPatternX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7721,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2524
  },
  {
    "id": "Konva.RegularPolygon#fillPatternY",
    "longname": "Konva.RegularPolygon#fillPatternY",
    "name": "fillPatternY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternY",
    "inherited": true,
    "description": "get/set fill pattern y",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern y\nvar fillPatternY = shape.fillPatternY();\n// set fill pattern y\nshape.fillPatternY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7734,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2525
  },
  {
    "id": "Konva.RegularPolygon#fillLinearGradientColorStops",
    "longname": "Konva.RegularPolygon#fillLinearGradientColorStops",
    "name": "fillLinearGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientColorStops",
    "inherited": true,
    "description": "get/set fill linear gradient color stops",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get fill linear gradient color stops\nvar colorStops = shape.fillLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillLinearGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "colorStops"
      }
    ],
    "meta": {
      "lineno": 7747,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2526
  },
  {
    "id": "Konva.RegularPolygon#strokeLinearGradientColorStops",
    "longname": "Konva.RegularPolygon#strokeLinearGradientColorStops",
    "name": "strokeLinearGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientColorStops",
    "inherited": true,
    "description": "get/set stroke linear gradient color stops",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get stroke linear gradient color stops\nvar colorStops = shape.strokeLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.strokeLinearGradientColorStops([0, 'red', 0.5, 'blue', 1, 'green']);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "colorStops"
      }
    ],
    "meta": {
      "lineno": 7762,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2527
  },
  {
    "id": "Konva.RegularPolygon#fillRadialGradientStartRadius",
    "longname": "Konva.RegularPolygon#fillRadialGradientStartRadius",
    "name": "fillRadialGradientStartRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartRadius",
    "inherited": true,
    "description": "get/set fill radial gradient start radius",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "radius"
      }
    ],
    "examples": [
      "// get radial gradient start radius\nvar startRadius = shape.fillRadialGradientStartRadius();\n\n// set radial gradient start radius\nshape.fillRadialGradientStartRadius(0);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7777,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2528
  },
  {
    "id": "Konva.RegularPolygon#fillRadialGradientEndRadius",
    "longname": "Konva.RegularPolygon#fillRadialGradientEndRadius",
    "name": "fillRadialGradientEndRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndRadius",
    "inherited": true,
    "description": "get/set fill radial gradient end radius",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "radius"
      }
    ],
    "examples": [
      "// get radial gradient end radius\nvar endRadius = shape.fillRadialGradientEndRadius();\n\n// set radial gradient end radius\nshape.fillRadialGradientEndRadius(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7791,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2529
  },
  {
    "id": "Konva.RegularPolygon#fillRadialGradientColorStops",
    "longname": "Konva.RegularPolygon#fillRadialGradientColorStops",
    "name": "fillRadialGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientColorStops",
    "inherited": true,
    "description": "get/set fill radial gradient color stops",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get fill radial gradient color stops\nvar colorStops = shape.fillRadialGradientColorStops();\n\n// create a radial gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillRadialGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7805,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2530
  },
  {
    "id": "Konva.RegularPolygon#fillPatternRepeat",
    "longname": "Konva.RegularPolygon#fillPatternRepeat",
    "name": "fillPatternRepeat",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternRepeat",
    "inherited": true,
    "description": "get/set fill pattern repeat.  Can be 'repeat', 'repeat-x', 'repeat-y', or 'no-repeat'.  The default is 'repeat'",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "repeat"
      }
    ],
    "examples": [
      "// get fill pattern repeat\nvar repeat = shape.fillPatternRepeat();\n\n// repeat pattern in x direction only\nshape.fillPatternRepeat('repeat-x');\n\n// do not repeat the pattern\nshape.fillPatternRepeat('no-repeat');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7820,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2531
  },
  {
    "id": "Konva.RegularPolygon#fillEnabled",
    "longname": "Konva.RegularPolygon#fillEnabled",
    "name": "fillEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillEnabled",
    "inherited": true,
    "description": "get/set fill enabled flag",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get fill enabled flag\nvar fillEnabled = shape.fillEnabled();\n\n// disable fill\nshape.fillEnabled(false);\n\n// enable fill\nshape.fillEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7837,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2532
  },
  {
    "id": "Konva.RegularPolygon#strokeEnabled",
    "longname": "Konva.RegularPolygon#strokeEnabled",
    "name": "strokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeEnabled",
    "inherited": true,
    "description": "get/set stroke enabled flag",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get stroke enabled flag\nvar strokeEnabled = shape.strokeEnabled();\n\n// disable stroke\nshape.strokeEnabled(false);\n\n// enable stroke\nshape.strokeEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7854,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2533
  },
  {
    "id": "Konva.RegularPolygon#shadowEnabled",
    "longname": "Konva.RegularPolygon#shadowEnabled",
    "name": "shadowEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowEnabled",
    "inherited": true,
    "description": "get/set shadow enabled flag",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get shadow enabled flag\nvar shadowEnabled = shape.shadowEnabled();\n\n// disable shadow\nshape.shadowEnabled(false);\n\n// enable shadow\nshape.shadowEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7871,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2534
  },
  {
    "id": "Konva.RegularPolygon#dashEnabled",
    "longname": "Konva.RegularPolygon#dashEnabled",
    "name": "dashEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#dashEnabled",
    "inherited": true,
    "description": "get/set dash enabled flag",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get dash enabled flag\nvar dashEnabled = shape.dashEnabled();\n\n// disable dash\nshape.dashEnabled(false);\n\n// enable dash\nshape.dashEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7888,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2535
  },
  {
    "id": "Konva.RegularPolygon#strokeScaleEnabled",
    "longname": "Konva.RegularPolygon#strokeScaleEnabled",
    "name": "strokeScaleEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeScaleEnabled",
    "inherited": true,
    "description": "get/set strokeScale enabled flag",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get stroke scale enabled flag\nvar strokeScaleEnabled = shape.strokeScaleEnabled();\n\n// disable stroke scale\nshape.strokeScaleEnabled(false);\n\n// enable stroke scale\nshape.strokeScaleEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7905,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2536
  },
  {
    "id": "Konva.RegularPolygon#fillPriority",
    "longname": "Konva.RegularPolygon#fillPriority",
    "name": "fillPriority",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPriority",
    "inherited": true,
    "description": "get/set fill priority.  can be color, pattern, linear-gradient, or radial-gradient.  The default is color.\n  This is handy if you want to toggle between different fill types.",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "priority"
      }
    ],
    "examples": [
      "// get fill priority\nvar fillPriority = shape.fillPriority();\n\n// set fill priority\nshape.fillPriority('linear-gradient');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7922,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2537
  },
  {
    "id": "Konva.RegularPolygon#fillPatternOffset",
    "longname": "Konva.RegularPolygon#fillPatternOffset",
    "name": "fillPatternOffset",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffset",
    "inherited": true,
    "description": "get/set fill pattern offset",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.y"
      }
    ],
    "examples": [
      "// get fill pattern offset\nvar patternOffset = shape.fillPatternOffset();\n\n// set fill pattern offset\nshape.fillPatternOffset({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7937,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2538
  },
  {
    "id": "Konva.RegularPolygon#fillPatternOffsetX",
    "longname": "Konva.RegularPolygon#fillPatternOffsetX",
    "name": "fillPatternOffsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffsetX",
    "inherited": true,
    "description": "get/set fill pattern offset x",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern offset x\nvar patternOffsetX = shape.fillPatternOffsetX();\n\n// set fill pattern offset x\nshape.fillPatternOffsetX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7956,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2539
  },
  {
    "id": "Konva.RegularPolygon#fillPatternOffsetY",
    "longname": "Konva.RegularPolygon#fillPatternOffsetY",
    "name": "fillPatternOffsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffsetY",
    "inherited": true,
    "description": "get/set fill pattern offset y",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern offset y\nvar patternOffsetY = shape.fillPatternOffsetY();\n\n// set fill pattern offset y\nshape.fillPatternOffsetY(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7970,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2540
  },
  {
    "id": "Konva.RegularPolygon#fillPatternScale",
    "longname": "Konva.RegularPolygon#fillPatternScale",
    "name": "fillPatternScale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScale",
    "inherited": true,
    "description": "get/set fill pattern scale",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.y"
      }
    ],
    "examples": [
      "// get fill pattern scale\nvar patternScale = shape.fillPatternScale();\n\n// set fill pattern scale\nshape.fillPatternScale({\n  x: 2,\n  y: 2\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7984,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2541
  },
  {
    "id": "Konva.RegularPolygon#fillPatternScaleX",
    "longname": "Konva.RegularPolygon#fillPatternScaleX",
    "name": "fillPatternScaleX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScaleX",
    "inherited": true,
    "description": "get/set fill pattern scale x",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern scale x\nvar patternScaleX = shape.fillPatternScaleX();\n\n// set fill pattern scale x\nshape.fillPatternScaleX(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8003,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2542
  },
  {
    "id": "Konva.RegularPolygon#fillPatternScaleY",
    "longname": "Konva.RegularPolygon#fillPatternScaleY",
    "name": "fillPatternScaleY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScaleY",
    "inherited": true,
    "description": "get/set fill pattern scale y",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern scale y\nvar patternScaleY = shape.fillPatternScaleY();\n\n// set fill pattern scale y\nshape.fillPatternScaleY(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8017,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2543
  },
  {
    "id": "Konva.RegularPolygon#fillLinearGradientStartPoint",
    "longname": "Konva.RegularPolygon#fillLinearGradientStartPoint",
    "name": "fillLinearGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPoint",
    "inherited": true,
    "description": "get/set fill linear gradient start point",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get fill linear gradient start point\nvar startPoint = shape.fillLinearGradientStartPoint();\n\n// set fill linear gradient start point\nshape.fillLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8034,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2544
  },
  {
    "id": "Konva.RegularPolygon#strokeLinearGradientStartPoint",
    "longname": "Konva.RegularPolygon#strokeLinearGradientStartPoint",
    "name": "strokeLinearGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientStartPoint",
    "inherited": true,
    "description": "get/set stroke linear gradient start point",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point\nvar startPoint = shape.strokeLinearGradientStartPoint();\n\n// set stroke linear gradient start point\nshape.strokeLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8056,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2545
  },
  {
    "id": "Konva.RegularPolygon#fillLinearGradientStartPointX",
    "longname": "Konva.RegularPolygon#fillLinearGradientStartPointX",
    "name": "fillLinearGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPointX",
    "inherited": true,
    "description": "get/set fill linear gradient start point x",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill linear gradient start point x\nvar startPointX = shape.fillLinearGradientStartPointX();\n\n// set fill linear gradient start point x\nshape.fillLinearGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8075,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2546
  },
  {
    "id": "Konva.RegularPolygon#linearLinearGradientStartPointX",
    "longname": "Konva.RegularPolygon#linearLinearGradientStartPointX",
    "name": "linearLinearGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#linearLinearGradientStartPointX",
    "inherited": true,
    "description": "get/set stroke linear gradient start point x",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point x\nvar startPointX = shape.strokeLinearGradientStartPointX();\n\n// set stroke linear gradient start point x\nshape.strokeLinearGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8089,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2547
  },
  {
    "id": "Konva.RegularPolygon#fillLinearGradientStartPointY",
    "longname": "Konva.RegularPolygon#fillLinearGradientStartPointY",
    "name": "fillLinearGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPointY",
    "inherited": true,
    "description": "get/set fill linear gradient start point y",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill linear gradient start point y\nvar startPointY = shape.fillLinearGradientStartPointY();\n\n// set fill linear gradient start point y\nshape.fillLinearGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8103,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2548
  },
  {
    "id": "Konva.RegularPolygon#strokeLinearGradientStartPointY",
    "longname": "Konva.RegularPolygon#strokeLinearGradientStartPointY",
    "name": "strokeLinearGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientStartPointY",
    "inherited": true,
    "description": "get/set stroke linear gradient start point y",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point y\nvar startPointY = shape.strokeLinearGradientStartPointY();\n\n// set stroke linear gradient start point y\nshape.strokeLinearGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8117,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2549
  },
  {
    "id": "Konva.RegularPolygon#fillLinearGradientEndPoint",
    "longname": "Konva.RegularPolygon#fillLinearGradientEndPoint",
    "name": "fillLinearGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPoint",
    "inherited": true,
    "description": "get/set fill linear gradient end point",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get fill linear gradient end point\nvar endPoint = shape.fillLinearGradientEndPoint();\n\n// set fill linear gradient end point\nshape.fillLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8134,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2550
  },
  {
    "id": "Konva.RegularPolygon#strokeLinearGradientEndPoint",
    "longname": "Konva.RegularPolygon#strokeLinearGradientEndPoint",
    "name": "strokeLinearGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPoint",
    "inherited": true,
    "description": "get/set stroke linear gradient end point",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point\nvar endPoint = shape.strokeLinearGradientEndPoint();\n\n// set stroke linear gradient end point\nshape.strokeLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8156,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2551
  },
  {
    "id": "Konva.RegularPolygon#fillLinearGradientEndPointX",
    "longname": "Konva.RegularPolygon#fillLinearGradientEndPointX",
    "name": "fillLinearGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPointX",
    "inherited": true,
    "description": "get/set fill linear gradient end point x",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill linear gradient end point x\nvar endPointX = shape.fillLinearGradientEndPointX();\n\n// set fill linear gradient end point x\nshape.fillLinearGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8175,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2552
  },
  {
    "id": "Konva.RegularPolygon#strokeLinearGradientEndPointX",
    "longname": "Konva.RegularPolygon#strokeLinearGradientEndPointX",
    "name": "strokeLinearGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPointX",
    "inherited": true,
    "description": "get/set fill linear gradient end point x",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point x\nvar endPointX = shape.strokeLinearGradientEndPointX();\n\n// set stroke linear gradient end point x\nshape.strokeLinearGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8189,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2553
  },
  {
    "id": "Konva.RegularPolygon#fillLinearGradientEndPointY",
    "longname": "Konva.RegularPolygon#fillLinearGradientEndPointY",
    "name": "fillLinearGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPointY",
    "inherited": true,
    "description": "get/set fill linear gradient end point y",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill linear gradient end point y\nvar endPointY = shape.fillLinearGradientEndPointY();\n\n// set fill linear gradient end point y\nshape.fillLinearGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8203,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2554
  },
  {
    "id": "Konva.RegularPolygon#strokeLinearGradientEndPointY",
    "longname": "Konva.RegularPolygon#strokeLinearGradientEndPointY",
    "name": "strokeLinearGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPointY",
    "inherited": true,
    "description": "get/set stroke linear gradient end point y",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point y\nvar endPointY = shape.strokeLinearGradientEndPointY();\n\n// set stroke linear gradient end point y\nshape.strokeLinearGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8217,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2555
  },
  {
    "id": "Konva.RegularPolygon#fillRadialGradientStartPoint",
    "longname": "Konva.RegularPolygon#fillRadialGradientStartPoint",
    "name": "fillRadialGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPoint",
    "inherited": true,
    "description": "get/set fill radial gradient start point",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get fill radial gradient start point\nvar startPoint = shape.fillRadialGradientStartPoint();\n\n// set fill radial gradient start point\nshape.fillRadialGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8234,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2556
  },
  {
    "id": "Konva.RegularPolygon#fillRadialGradientStartPointX",
    "longname": "Konva.RegularPolygon#fillRadialGradientStartPointX",
    "name": "fillRadialGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPointX",
    "inherited": true,
    "description": "get/set fill radial gradient start point x",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill radial gradient start point x\nvar startPointX = shape.fillRadialGradientStartPointX();\n\n// set fill radial gradient start point x\nshape.fillRadialGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8253,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2557
  },
  {
    "id": "Konva.RegularPolygon#fillRadialGradientStartPointY",
    "longname": "Konva.RegularPolygon#fillRadialGradientStartPointY",
    "name": "fillRadialGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPointY",
    "inherited": true,
    "description": "get/set fill radial gradient start point y",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill radial gradient start point y\nvar startPointY = shape.fillRadialGradientStartPointY();\n\n// set fill radial gradient start point y\nshape.fillRadialGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8267,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2558
  },
  {
    "id": "Konva.RegularPolygon#fillRadialGradientEndPoint",
    "longname": "Konva.RegularPolygon#fillRadialGradientEndPoint",
    "name": "fillRadialGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPoint",
    "inherited": true,
    "description": "get/set fill radial gradient end point",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get fill radial gradient end point\nvar endPoint = shape.fillRadialGradientEndPoint();\n\n// set fill radial gradient end point\nshape.fillRadialGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8284,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2559
  },
  {
    "id": "Konva.RegularPolygon#fillRadialGradientEndPointX",
    "longname": "Konva.RegularPolygon#fillRadialGradientEndPointX",
    "name": "fillRadialGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPointX",
    "inherited": true,
    "description": "get/set fill radial gradient end point x",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill radial gradient end point x\nvar endPointX = shape.fillRadialGradientEndPointX();\n\n// set fill radial gradient end point x\nshape.fillRadialGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8303,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2560
  },
  {
    "id": "Konva.RegularPolygon#fillRadialGradientEndPointY",
    "longname": "Konva.RegularPolygon#fillRadialGradientEndPointY",
    "name": "fillRadialGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPointY",
    "inherited": true,
    "description": "get/set fill radial gradient end point y",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill radial gradient end point y\nvar endPointY = shape.fillRadialGradientEndPointY();\n\n// set fill radial gradient end point y\nshape.fillRadialGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8317,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2561
  },
  {
    "id": "Konva.RegularPolygon#fillPatternRotation",
    "longname": "Konva.RegularPolygon#fillPatternRotation",
    "name": "fillPatternRotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternRotation",
    "inherited": true,
    "description": "get/set fill pattern rotation in degrees",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get fill pattern rotation\nvar patternRotation = shape.fillPatternRotation();\n\n// set fill pattern rotation\nshape.fillPatternRotation(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8331,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2562
  },
  {
    "id": "Konva.RegularPolygon#fillRule",
    "longname": "Konva.RegularPolygon#fillRule",
    "name": "fillRule",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRule",
    "inherited": true,
    "description": "get/set fill rule",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "CanvasFillRule"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get fill rule\nvar fillRule = shape.fillRule();\n\n// set fill rule\nshape.fillRule('evenodd');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8345,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2563
  },
  {
    "id": "Konva.RegularPolygon#clearCache",
    "longname": "Konva.RegularPolygon#clearCache",
    "name": "clearCache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#clearCache",
    "inherited": true,
    "description": "clear cached canvas",
    "memberof": "Konva.RegularPolygon",
    "examples": [
      "node.clearCache();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2632,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2564
  },
  {
    "id": "Konva.RegularPolygon#cache",
    "longname": "Konva.RegularPolygon#cache",
    "name": "cache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#cache",
    "inherited": true,
    "description": "cache node to improve drawing performance, apply filters, or create more accurate\n hit regions. For all basic shapes size of cache canvas will be automatically detected.\n If you need to cache your custom `Konva.Shape` instance you have to pass shape's bounding box\n properties. Look at [https://konvajs.org/docs/performance/Shape_Caching.html](https://konvajs.org/docs/performance/Shape_Caching.html) for more information.",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "increase canvas size by `offset` pixel in all directions.",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "when set to true, a red border will be drawn around the cached\n region for debugging purposes",
        "name": "config.drawBorder"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "change quality (or pixel ratio) of cached image. pixelRatio = 2 will produce 2x sized cache.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "control imageSmoothingEnabled property of created canvas for cache",
        "name": "config.imageSmoothingEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "change quality (or pixel ratio) of cached hit canvas.",
        "name": "config.hitCanvasPixelRatio"
      }
    ],
    "examples": [
      "// cache a shape with the x,y position of the bounding box at the center and\n// the width and height of the bounding box equal to the width and height of\n// the shape obtained from shape.width() and shape.height()\nimage.cache();\n\n// cache a node and define the bounding box position and size\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200\n});\n\n// cache a node and draw a red border around the bounding box\n// for debugging purposes\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200,\n  offset : 10,\n  drawBorder: true\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2650,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2565
  },
  {
    "id": "Konva.RegularPolygon#isCached",
    "longname": "Konva.RegularPolygon#isCached",
    "name": "isCached",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isCached",
    "inherited": true,
    "description": "determine if node is currently cached",
    "memberof": "Konva.RegularPolygon",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2788,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2566
  },
  {
    "id": "Konva.RegularPolygon#getClientRect",
    "longname": "Konva.RegularPolygon#getClientRect",
    "name": "getClientRect",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getClientRect",
    "inherited": true,
    "description": "Return client rectangle `{x, y, width, height}` of node. This rectangle also include all styling (strokes, shadows, etc).\nThe purpose of the method is similar to getBoundingClientRect API of the DOM.",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply transform to node for calculating rect?",
        "name": "config.skipTransform"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply shadow to the node for calculating bound box?",
        "name": "config.skipShadow"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply stroke to the node for calculating bound box?",
        "name": "config.skipStroke"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "calculate client rect relative to one of the parents",
        "name": "config.relativeTo"
      }
    ],
    "examples": [
      "var rect = new Konva.Rect({\n     width : 100,\n     height : 100,\n     x : 50,\n     y : 50,\n     strokeWidth : 4,\n     stroke : 'black',\n     offsetX : 50,\n     scaleY : 2\n});\n\n// get client rect without think off transformations (position, rotation, scale, offset, etc)\nrect.getClientRect({ skipTransform: true});\n// returns {\n//     x : -2,   // two pixels for stroke / 2\n//     y : -2,\n//     width : 104, // increased by 4 for stroke\n//     height : 104\n//}\n\n// get client rect with transformation applied\nrect.getClientRect();\n// returns Object {x: -2, y: 46, width: 104, height: 208}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "rect with `{x, y, width, height}` properties"
      }
    ],
    "meta": {
      "lineno": 2797,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2567
  },
  {
    "id": "Konva.RegularPolygon#on",
    "longname": "Konva.RegularPolygon#on",
    "name": "on",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#on",
    "inherited": true,
    "description": "bind events to the node. KonvaJS supports mouseover, mousemove,\n mouseout, mouseenter, mouseleave, mousedown, mouseup, wheel, contextmenu, click, dblclick, touchstart, touchmove,\n touchend, tap, dbltap, dragstart, dragmove, and dragend events.\n Pass in a string of events delimited by a space to bind multiple events at once\n such as 'mousedown mouseup mousemove'. Include a namespace to bind an\n event by name such as 'click.foobar'.",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'click', 'mousedown touchstart', 'mousedown.foo touchstart.foo'",
        "name": "evtStr"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The handler function. The first argument of that function is event object. Event object has `target` as main target of the event, `currentTarget` as current node listener and `evt` as native browser event.",
        "name": "handler"
      }
    ],
    "examples": [
      "// add click listener\nnode.on('click', function() {\n  console.log('you clicked me!');\n});\n\n// get the target node\nnode.on('click', function(evt) {\n  console.log(evt.target);\n});\n\n// stop event propagation\nnode.on('click', function(evt) {\n  evt.cancelBubble = true;\n});\n\n// bind multiple listeners\nnode.on('click touchstart', function() {\n  console.log('you clicked/touched me!');\n});\n\n// namespace listener\nnode.on('click.foo', function() {\n  console.log('you clicked/touched me!');\n});\n\n// get the event type\nnode.on('click tap', function(evt) {\n  var eventType = evt.type;\n});\n\n// get native event object\nnode.on('click tap', function(evt) {\n  var nativeEvent = evt.evt;\n});\n\n// for change events, get the old and new val\nnode.on('xChange', function(evt) {\n  var oldVal = evt.oldVal;\n  var newVal = evt.newVal;\n});\n\n// get event targets\n// with event delegations\nlayer.on('click', 'Group', function(evt) {\n  var shape = evt.target;\n  var group = evt.currentTarget;\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2919,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2568
  },
  {
    "id": "Konva.RegularPolygon#off",
    "longname": "Konva.RegularPolygon#off",
    "name": "off",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#off",
    "inherited": true,
    "description": "remove event bindings from the node. Pass in a string of\n event types delimmited by a space to remove multiple event\n bindings at once such as 'mousedown mouseup mousemove'.\n include a namespace to remove an event binding by name\n such as 'click.foobar'. If you only give a name like '.foobar',\n all events in that namespace will be removed.",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'click', 'mousedown touchstart', '.foobar'",
        "name": "evtStr"
      }
    ],
    "examples": [
      "// remove listener\nnode.off('click');\n\n// remove multiple listeners\nnode.off('click touchstart');\n\n// remove listener by name\nnode.off('click.foo');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3007,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2569
  },
  {
    "id": "Konva.RegularPolygon#remove",
    "longname": "Konva.RegularPolygon#remove",
    "name": "remove",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#remove",
    "inherited": true,
    "description": "remove a node from parent, but don't destroy. You can reuse the node later.",
    "memberof": "Konva.RegularPolygon",
    "examples": [
      "node.remove();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3088,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2570
  },
  {
    "id": "Konva.RegularPolygon#destroy",
    "longname": "Konva.RegularPolygon#destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#destroy",
    "inherited": true,
    "description": "remove and destroy a node. Kill it and delete forever! You should not reuse node after destroy().\nIf the node is a container (Group, Stage or Layer) it will destroy all children too.",
    "memberof": "Konva.RegularPolygon",
    "examples": [
      "node.destroy();"
    ],
    "meta": {
      "lineno": 3125,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2571
  },
  {
    "id": "Konva.RegularPolygon#getAttr",
    "longname": "Konva.RegularPolygon#getAttr",
    "name": "getAttr",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAttr",
    "inherited": true,
    "description": "get attr",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "attr"
      }
    ],
    "examples": [
      "var x = node.getAttr('x');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer",
            "String",
            "Object",
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3138,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2572
  },
  {
    "id": "Konva.RegularPolygon#getAncestors",
    "longname": "Konva.RegularPolygon#getAncestors",
    "name": "getAncestors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAncestors",
    "inherited": true,
    "description": "get ancestors",
    "memberof": "Konva.RegularPolygon",
    "examples": [
      "shape.getAncestors().forEach(function(node) {\n  console.log(node.getId());\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3155,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2573
  },
  {
    "id": "Konva.RegularPolygon#getAttrs",
    "longname": "Konva.RegularPolygon#getAttrs",
    "name": "getAttrs",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAttrs",
    "inherited": true,
    "description": "get attrs object literal",
    "memberof": "Konva.RegularPolygon",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3173,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2574
  },
  {
    "id": "Konva.RegularPolygon#setAttrs",
    "longname": "Konva.RegularPolygon#setAttrs",
    "name": "setAttrs",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#setAttrs",
    "inherited": true,
    "description": "set multiple attrs at once using an object literal",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "object containing key value pairs",
        "name": "config"
      }
    ],
    "examples": [
      "node.setAttrs({\n  x: 5,\n  fill: 'red'\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3182,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2575
  },
  {
    "id": "Konva.RegularPolygon#isListening",
    "longname": "Konva.RegularPolygon#isListening",
    "name": "isListening",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isListening",
    "inherited": true,
    "description": "determine if node is listening for events by taking into account ancestors.\n\nParent    | Self      | isListening\nlistening | listening |\n----------+-----------+------------\nT         | T         | T\nT         | F         | F\nF         | T         | F\nF         | F         | F",
    "memberof": "Konva.RegularPolygon",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3217,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2576
  },
  {
    "id": "Konva.RegularPolygon#isVisible",
    "longname": "Konva.RegularPolygon#isVisible",
    "name": "isVisible",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isVisible",
    "inherited": true,
    "description": "determine if node is visible by taking into account ancestors.\n\nParent    | Self      | isVisible\nvisible   | visible   |\n----------+-----------+------------\nT         | T         | T\nT         | F         | F\nF         | T         | F\nF         | F         | F",
    "memberof": "Konva.RegularPolygon",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3248,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2577
  },
  {
    "id": "Konva.RegularPolygon#show",
    "longname": "Konva.RegularPolygon#show",
    "name": "show",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#show",
    "inherited": true,
    "description": "show node. set visible = true",
    "memberof": "Konva.RegularPolygon",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3300,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2578
  },
  {
    "id": "Konva.RegularPolygon#hide",
    "longname": "Konva.RegularPolygon#hide",
    "name": "hide",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hide",
    "inherited": true,
    "description": "hide node.  Hidden nodes are no longer detectable",
    "memberof": "Konva.RegularPolygon",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3310,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2579
  },
  {
    "id": "Konva.RegularPolygon#getAbsoluteZIndex",
    "longname": "Konva.RegularPolygon#getAbsoluteZIndex",
    "name": "getAbsoluteZIndex",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteZIndex",
    "inherited": true,
    "description": "get absolute z-index which takes into account sibling\n and ancestor indices",
    "memberof": "Konva.RegularPolygon",
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3323,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2580
  },
  {
    "id": "Konva.RegularPolygon#getDepth",
    "longname": "Konva.RegularPolygon#getDepth",
    "name": "getDepth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getDepth",
    "inherited": true,
    "description": "get node depth in node tree.  Returns an integer.\n e.g. Stage depth will always be 0.  Layers will always be 1.  Groups and Shapes will always\n be >= 2",
    "memberof": "Konva.RegularPolygon",
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3355,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2581
  },
  {
    "id": "Konva.RegularPolygon#getRelativePointerPosition",
    "longname": "Konva.RegularPolygon#getRelativePointerPosition",
    "name": "getRelativePointerPosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getRelativePointerPosition",
    "inherited": true,
    "description": "get position of first pointer (like mouse or first touch) relative to local coordinates of current node",
    "memberof": "Konva.RegularPolygon",
    "examples": [
      "// let's think we have a rectangle at position x = 10, y = 10\n// now we clicked at x = 15, y = 15 of the stage\n// if you want to know position of the click, related to the rectangle you can use\nrect.getRelativePointerPosition();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3398,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2582
  },
  {
    "id": "Konva.RegularPolygon#getAbsolutePosition",
    "longname": "Konva.RegularPolygon#getAbsolutePosition",
    "name": "getAbsolutePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsolutePosition",
    "inherited": true,
    "description": "get absolute position of a node. That function can be used to calculate absolute position, but relative to any ancestor",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "optional ancestor node",
        "name": "Ancestor"
      }
    ],
    "examples": [
      "// returns absolute position relative to top-left corner of canvas\nnode.getAbsolutePosition();\n\n// calculate absolute position of node, inside stage\n// so stage transforms are ignored\nnode.getAbsolutePosition(stage)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3426,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2583
  },
  {
    "id": "Konva.RegularPolygon#move",
    "longname": "Konva.RegularPolygon#move",
    "name": "move",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#move",
    "inherited": true,
    "description": "move node by an amount relative to its current position",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "change"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "change.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "change.y"
      }
    ],
    "examples": [
      "// move node in x direction by 1px and y direction by 2px\nnode.move({\n  x: 1,\n  y: 2\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3514,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2584
  },
  {
    "id": "Konva.RegularPolygon#rotate",
    "longname": "Konva.RegularPolygon#rotate",
    "name": "rotate",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#rotate",
    "inherited": true,
    "description": "rotate node by an amount in degrees relative to its current rotation",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "theta"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3559,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2585
  },
  {
    "id": "Konva.RegularPolygon#moveToTop",
    "longname": "Konva.RegularPolygon#moveToTop",
    "name": "moveToTop",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveToTop",
    "inherited": true,
    "description": "move node to the top of its siblings",
    "memberof": "Konva.RegularPolygon",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3570,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2586
  },
  {
    "id": "Konva.RegularPolygon#moveUp",
    "longname": "Konva.RegularPolygon#moveUp",
    "name": "moveUp",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveUp",
    "inherited": true,
    "description": "move node up",
    "memberof": "Konva.RegularPolygon",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "flag is moved or not"
      }
    ],
    "meta": {
      "lineno": 3590,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2587
  },
  {
    "id": "Konva.RegularPolygon#moveDown",
    "longname": "Konva.RegularPolygon#moveDown",
    "name": "moveDown",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveDown",
    "inherited": true,
    "description": "move node down",
    "memberof": "Konva.RegularPolygon",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3610,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2588
  },
  {
    "id": "Konva.RegularPolygon#moveToBottom",
    "longname": "Konva.RegularPolygon#moveToBottom",
    "name": "moveToBottom",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveToBottom",
    "inherited": true,
    "description": "move node to the bottom of its siblings",
    "memberof": "Konva.RegularPolygon",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3630,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2589
  },
  {
    "id": "Konva.RegularPolygon#getAbsoluteOpacity",
    "longname": "Konva.RegularPolygon#getAbsoluteOpacity",
    "name": "getAbsoluteOpacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteOpacity",
    "inherited": true,
    "description": "get absolute opacity",
    "memberof": "Konva.RegularPolygon",
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3668,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2590
  },
  {
    "id": "Konva.RegularPolygon#moveTo",
    "longname": "Konva.RegularPolygon#moveTo",
    "name": "moveTo",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveTo",
    "inherited": true,
    "description": "move node to another container",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Container"
          ]
        },
        "name": "newContainer"
      }
    ],
    "examples": [
      "// move node from current layer into layer2\nnode.moveTo(layer2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3685,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2591
  },
  {
    "id": "Konva.RegularPolygon#toObject",
    "longname": "Konva.RegularPolygon#toObject",
    "name": "toObject",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toObject",
    "inherited": true,
    "description": "convert Node into an object for serialization.  Returns an object.",
    "memberof": "Konva.RegularPolygon",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3703,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2592
  },
  {
    "id": "Konva.RegularPolygon#toJSON",
    "longname": "Konva.RegularPolygon#toJSON",
    "name": "toJSON",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toJSON",
    "inherited": true,
    "description": "convert Node into a JSON string.  Returns a JSON string.",
    "memberof": "Konva.RegularPolygon",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3736,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2593
  },
  {
    "id": "Konva.RegularPolygon#getParent",
    "longname": "Konva.RegularPolygon#getParent",
    "name": "getParent",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getParent",
    "inherited": true,
    "description": "get parent container",
    "memberof": "Konva.RegularPolygon",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3745,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2594
  },
  {
    "id": "Konva.RegularPolygon#findAncestors",
    "longname": "Konva.RegularPolygon#findAncestors",
    "name": "findAncestors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#findAncestors",
    "inherited": true,
    "description": "get all ancestors (parent then parent of the parent, etc) of the node",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "selector for search",
        "name": "selector"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "show we think that node is ancestro itself?",
        "name": "includeSelf"
      },
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "optional": true,
        "description": "optional node where we need to stop searching (one of ancestors)",
        "name": "stopNode"
      }
    ],
    "examples": [
      "// get one of the parent group\nvar parentGroups = node.findAncestors('Group');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "[ancestors]"
      }
    ],
    "meta": {
      "lineno": 3754,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2595
  },
  {
    "id": "Konva.RegularPolygon#findAncestor",
    "longname": "Konva.RegularPolygon#findAncestor",
    "name": "findAncestor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#findAncestor",
    "inherited": true,
    "description": "get ancestor (parent or parent of the parent, etc) of the node that match passed selector",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "selector for search",
        "name": "selector"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "show we think that node is ancestro itself?",
        "name": "includeSelf"
      },
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "optional": true,
        "description": "optional node where we need to stop searching (one of ancestors)",
        "name": "stopNode"
      }
    ],
    "examples": [
      "// get one of the parent group\nvar group = node.findAncestors('.mygroup');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "description": "ancestor"
      }
    ],
    "meta": {
      "lineno": 3786,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2596
  },
  {
    "id": "Konva.RegularPolygon#getLayer",
    "longname": "Konva.RegularPolygon#getLayer",
    "name": "getLayer",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getLayer",
    "inherited": true,
    "description": "get layer ancestor",
    "memberof": "Konva.RegularPolygon",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Layer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3837,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2597
  },
  {
    "id": "Konva.RegularPolygon#getStage",
    "longname": "Konva.RegularPolygon#getStage",
    "name": "getStage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getStage",
    "inherited": true,
    "description": "get stage ancestor",
    "memberof": "Konva.RegularPolygon",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Stage"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3847,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2598
  },
  {
    "id": "Konva.RegularPolygon#fire",
    "longname": "Konva.RegularPolygon#fire",
    "name": "fire",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#fire",
    "inherited": true,
    "description": "fire event",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "event type.  can be a regular event, like click, mouseover, or mouseout, or it can be a custom event, like myCustomEvent",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "Event"
          ]
        },
        "optional": true,
        "description": "event object",
        "name": "evt"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "setting the value to false, or leaving it undefined, will result in the event\n not bubbling.  Setting the value to true will result in the event bubbling.",
        "name": "bubble"
      }
    ],
    "examples": [
      "// manually fire click event\nnode.fire('click');\n\n// fire custom event\nnode.fire('foo');\n\n// fire custom event with custom event object\nnode.fire('foo', {\n  bar: 10\n});\n\n// fire click event that bubbles\nnode.fire('click', null, true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3865,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2599
  },
  {
    "id": "Konva.RegularPolygon#getAbsoluteTransform",
    "longname": "Konva.RegularPolygon#getAbsoluteTransform",
    "name": "getAbsoluteTransform",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteTransform",
    "inherited": true,
    "description": "get absolute transform of the node which takes into\n account its ancestor transforms",
    "memberof": "Konva.RegularPolygon",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3901,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2600
  },
  {
    "id": "Konva.RegularPolygon#getAbsoluteScale",
    "longname": "Konva.RegularPolygon#getAbsoluteScale",
    "name": "getAbsoluteScale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteScale",
    "inherited": true,
    "description": "get absolute scale of the node which takes into\n account its ancestor scales",
    "memberof": "Konva.RegularPolygon",
    "examples": [
      "// get absolute scale x\nvar scaleX = node.getAbsoluteScale().x;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3961,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2601
  },
  {
    "id": "Konva.RegularPolygon#getAbsoluteRotation",
    "longname": "Konva.RegularPolygon#getAbsoluteRotation",
    "name": "getAbsoluteRotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteRotation",
    "inherited": true,
    "description": "get absolute rotation of the node which takes into\n account its ancestor rotations",
    "memberof": "Konva.RegularPolygon",
    "examples": [
      "// get absolute rotation\nvar rotation = node.getAbsoluteRotation();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3989,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2602
  },
  {
    "id": "Konva.RegularPolygon#getTransform",
    "longname": "Konva.RegularPolygon#getTransform",
    "name": "getTransform",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getTransform",
    "inherited": true,
    "description": "get transform of the node",
    "memberof": "Konva.RegularPolygon",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4009,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2603
  },
  {
    "id": "Konva.RegularPolygon#clone",
    "longname": "Konva.RegularPolygon#clone",
    "name": "clone",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#clone",
    "inherited": true,
    "description": "clone node.  Returns a new Node instance with identical attributes.  You can also override\n the node properties with an object literal, enabling you to use an existing node as a template\n for another node",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "override attrs",
        "name": "obj"
      }
    ],
    "examples": [
      "// simple clone\nvar clone = node.clone();\n\n// clone a node and override the x position\nvar clone = rect.clone({\n  x: 5\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4044,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2604
  },
  {
    "id": "Konva.RegularPolygon#toCanvas",
    "longname": "Konva.RegularPolygon#toCanvas",
    "name": "toCanvas",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toCanvas",
    "inherited": true,
    "description": "converts node into an canvas element.",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output canvas. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var canvas = node.toCanvas();"
    ],
    "meta": {
      "lineno": 4119,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2605
  },
  {
    "id": "Konva.RegularPolygon#toDataURL",
    "longname": "Konva.RegularPolygon#toDataURL",
    "name": "toDataURL",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toDataURL",
    "inherited": true,
    "description": "Creates a composite data URL (base64 string). If MIME type is not\nspecified, then \"image/png\" will result. For \"image/jpeg\", specify a quality\nlevel as quality (range 0.0 - 1.0)",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"image/png\" or \"image/jpeg\".\n \"image/png\" is the default",
        "name": "config.mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "jpeg quality.  If using an \"image/jpeg\" mimeType,\n you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n is very high quality",
        "name": "config.quality"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output image url. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4140,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2606
  },
  {
    "id": "Konva.RegularPolygon#toImage",
    "longname": "Konva.RegularPolygon#toImage",
    "name": "toImage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toImage",
    "inherited": true,
    "description": "converts node into an image.  Since the toImage\n method is asynchronous, the resulting image can only be retrieved from the config callback\n or the returned Promise.  toImage is most commonly used\n to cache complex drawings as an image so that they don't have to constantly be redrawn",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"image/png\" or \"image/jpeg\".\n \"image/png\" is the default",
        "name": "config.mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "jpeg quality.  If using an \"image/jpeg\" mimeType,\n you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n is very high quality",
        "name": "config.quality"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output image. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var image = node.toImage({\n  callback(img) {\n    // do stuff with img\n  }\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Image>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4172,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2607
  },
  {
    "id": "Konva.RegularPolygon#toBlob",
    "longname": "Konva.RegularPolygon#toBlob",
    "name": "toBlob",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toBlob",
    "inherited": true,
    "description": "Converts node into a blob.  Since the toBlob method is asynchronous,\n the resulting blob can only be retrieved from the config callback\n or the returned Promise.",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output canvas. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var blob = await node.toBlob({});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Blob>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4219,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2608
  },
  {
    "id": "Konva.RegularPolygon#getClassName",
    "longname": "Konva.RegularPolygon#getClassName",
    "name": "getClassName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getClassName",
    "inherited": true,
    "description": "get class name, which may return Stage, Layer, Group, or shape class names like Rect, Circle, Text, etc.",
    "memberof": "Konva.RegularPolygon",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4267,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2609
  },
  {
    "id": "Konva.RegularPolygon#getType",
    "longname": "Konva.RegularPolygon#getType",
    "name": "getType",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getType",
    "inherited": true,
    "description": "get the node type, which may return Stage, Layer, Group, or Shape",
    "memberof": "Konva.RegularPolygon",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4276,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2610
  },
  {
    "id": "Konva.RegularPolygon#addName",
    "longname": "Konva.RegularPolygon#addName",
    "name": "addName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#addName",
    "inherited": true,
    "description": "add name to node",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red');\nnode.addName('selected');\nnode.name(); // return 'red selected'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4324,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2611
  },
  {
    "id": "Konva.RegularPolygon#hasName",
    "longname": "Konva.RegularPolygon#hasName",
    "name": "hasName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hasName",
    "inherited": true,
    "description": "check is node has name",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red');\nnode.hasName('red');   // return true\nnode.hasName('selected'); // return false\nnode.hasName(''); // return false"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4343,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2612
  },
  {
    "id": "Konva.RegularPolygon#removeName",
    "longname": "Konva.RegularPolygon#removeName",
    "name": "removeName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#removeName",
    "inherited": true,
    "description": "remove name from node",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red selected');\nnode.removeName('selected');\nnode.hasName('selected'); // return false\nnode.name(); // return 'red'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4367,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2613
  },
  {
    "id": "Konva.RegularPolygon#setAttr",
    "longname": "Konva.RegularPolygon#setAttr",
    "name": "setAttr",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#setAttr",
    "inherited": true,
    "description": "set attr",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "attr"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "name": "val"
      }
    ],
    "examples": [
      "node.setAttr('x', 5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4388,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2614
  },
  {
    "id": "Konva.RegularPolygon#draw",
    "longname": "Konva.RegularPolygon#draw",
    "name": "draw",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#draw",
    "inherited": true,
    "description": "draw both scene and hit graphs.  If the node being drawn is the stage, all of the layers will be cleared and redrawn",
    "memberof": "Konva.RegularPolygon",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4511,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2615
  },
  {
    "id": "Konva.RegularPolygon#startDrag",
    "longname": "Konva.RegularPolygon#startDrag",
    "name": "startDrag",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#startDrag",
    "inherited": true,
    "description": "initiate drag and drop.",
    "memberof": "Konva.RegularPolygon",
    "meta": {
      "lineno": 4544,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2616
  },
  {
    "id": "Konva.RegularPolygon#stopDrag",
    "longname": "Konva.RegularPolygon#stopDrag",
    "name": "stopDrag",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#stopDrag",
    "inherited": true,
    "description": "stop drag and drop",
    "memberof": "Konva.RegularPolygon",
    "meta": {
      "lineno": 4590,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2617
  },
  {
    "id": "Konva.RegularPolygon#isDragging",
    "longname": "Konva.RegularPolygon#isDragging",
    "name": "isDragging",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isDragging",
    "inherited": true,
    "description": "determine if node is currently in drag and drop mode",
    "memberof": "Konva.RegularPolygon",
    "meta": {
      "lineno": 4607,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2618
  },
  {
    "id": "Konva.RegularPolygon#isClientRectOnScreen",
    "longname": "Konva.RegularPolygon#isClientRectOnScreen",
    "name": "isClientRectOnScreen",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isClientRectOnScreen",
    "inherited": true,
    "description": "determine if node (at least partially) is currently in user-visible area",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number",
            "Object"
          ]
        },
        "description": "optional margin in pixels",
        "name": "margin"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "margin.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "margin.y"
      }
    ],
    "examples": [
      "// get index\n// default calculations\nvar isOnScreen = node.isClientRectOnScreen()\n// increase object size (or screen size) for cases when objects close to the screen still need to be marked as \"visible\"\nvar isOnScreen = node.isClientRectOnScreen({ x: stage.width(), y: stage.height() })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4671,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2619
  },
  {
    "id": "Konva.RegularPolygon#zIndex",
    "longname": "Konva.RegularPolygon#zIndex",
    "name": "zIndex",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#zIndex",
    "inherited": true,
    "description": "get/set zIndex relative to the node's siblings who share the same parent.\nPlease remember that zIndex is not absolute (like in CSS). It is relative to parent element only.",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "index"
      }
    ],
    "examples": [
      "// get index\nvar index = node.zIndex();\n\n// set index\nnode.zIndex(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4764,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2620
  },
  {
    "id": "Konva.RegularPolygon#absolutePosition",
    "longname": "Konva.RegularPolygon#absolutePosition",
    "name": "absolutePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#absolutePosition",
    "inherited": true,
    "description": "get/set node absolute position",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "// get position\nvar position = node.absolutePosition();\n\n// set position\nnode.absolutePosition({\n  x: 5,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4779,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2621
  },
  {
    "id": "Konva.RegularPolygon#position",
    "longname": "Konva.RegularPolygon#position",
    "name": "position",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#position",
    "inherited": true,
    "description": "get/set node position relative to parent",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "// get position\nvar position = node.position();\n\n// set position\nnode.position({\n  x: 5,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4799,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2622
  },
  {
    "id": "Konva.RegularPolygon#x",
    "longname": "Konva.RegularPolygon#x",
    "name": "x",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#x",
    "inherited": true,
    "description": "get/set x position",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get x\nvar x = node.x();\n\n// set x\nnode.x(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4818,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2623
  },
  {
    "id": "Konva.RegularPolygon#y",
    "longname": "Konva.RegularPolygon#y",
    "name": "y",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#y",
    "inherited": true,
    "description": "get/set y position",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get y\nvar y = node.y();\n\n// set y\nnode.y(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4832,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2624
  },
  {
    "id": "Konva.RegularPolygon#globalCompositeOperation",
    "longname": "Konva.RegularPolygon#globalCompositeOperation",
    "name": "globalCompositeOperation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#globalCompositeOperation",
    "inherited": true,
    "description": "get/set globalCompositeOperation of a node. globalCompositeOperation DOESN'T affect hit graph of nodes. So they are still trigger to events as they have default \"source-over\" globalCompositeOperation.",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "type"
      }
    ],
    "examples": [
      "// get globalCompositeOperation\nvar globalCompositeOperation = shape.globalCompositeOperation();\n\n// set globalCompositeOperation\nshape.globalCompositeOperation('source-in');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4846,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2625
  },
  {
    "id": "Konva.RegularPolygon#opacity",
    "longname": "Konva.RegularPolygon#opacity",
    "name": "opacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#opacity",
    "inherited": true,
    "description": "get/set opacity.  Opacity values range from 0 to 1.\n A node with an opacity of 0 is fully transparent, and a node\n with an opacity of 1 is fully opaque",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "opacity"
      }
    ],
    "examples": [
      "// get opacity\nvar opacity = node.opacity();\n\n// set opacity\nnode.opacity(0.5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4860,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2626
  },
  {
    "id": "Konva.RegularPolygon#name",
    "longname": "Konva.RegularPolygon#name",
    "name": "name",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#name",
    "inherited": true,
    "description": "get/set name.",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "// get name\nvar name = node.name();\n\n// set name\nnode.name('foo');\n\n// also node may have multiple names (as css classes)\nnode.name('foo bar');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4876,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2627
  },
  {
    "id": "Konva.RegularPolygon#id",
    "longname": "Konva.RegularPolygon#id",
    "name": "id",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#id",
    "inherited": true,
    "description": "get/set id. Id is global for whole page.",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "id"
      }
    ],
    "examples": [
      "// get id\nvar name = node.id();\n\n// set id\nnode.id('foo');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4893,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2628
  },
  {
    "id": "Konva.RegularPolygon#rotation",
    "longname": "Konva.RegularPolygon#rotation",
    "name": "rotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#rotation",
    "inherited": true,
    "description": "get/set rotation in degrees",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get rotation in degrees\nvar rotation = node.rotation();\n\n// set rotation in degrees\nnode.rotation(45);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4907,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2629
  },
  {
    "id": "Konva.RegularPolygon#scale",
    "longname": "Konva.RegularPolygon#scale",
    "name": "scale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scale",
    "inherited": true,
    "description": "get/set scale",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.y"
      }
    ],
    "examples": [
      "// get scale\nvar scale = node.scale();\n\n// set scale\nshape.scale({\n  x: 2,\n  y: 3\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4921,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2630
  },
  {
    "id": "Konva.RegularPolygon#scaleX",
    "longname": "Konva.RegularPolygon#scaleX",
    "name": "scaleX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scaleX",
    "inherited": true,
    "description": "get/set scale x",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get scale x\nvar scaleX = node.scaleX();\n\n// set scale x\nnode.scaleX(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4940,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2631
  },
  {
    "id": "Konva.RegularPolygon#scaleY",
    "longname": "Konva.RegularPolygon#scaleY",
    "name": "scaleY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scaleY",
    "inherited": true,
    "description": "get/set scale y",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get scale y\nvar scaleY = node.scaleY();\n\n// set scale y\nnode.scaleY(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4954,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2632
  },
  {
    "id": "Konva.RegularPolygon#skew",
    "longname": "Konva.RegularPolygon#skew",
    "name": "skew",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skew",
    "inherited": true,
    "description": "get/set skew",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "skew"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "skew.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "skew.y"
      }
    ],
    "examples": [
      "// get skew\nvar skew = node.skew();\n\n// set skew\nnode.skew({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4968,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2633
  },
  {
    "id": "Konva.RegularPolygon#skewX",
    "longname": "Konva.RegularPolygon#skewX",
    "name": "skewX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skewX",
    "inherited": true,
    "description": "get/set skew x",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get skew x\nvar skewX = node.skewX();\n\n// set skew x\nnode.skewX(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4987,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2634
  },
  {
    "id": "Konva.RegularPolygon#skewY",
    "longname": "Konva.RegularPolygon#skewY",
    "name": "skewY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skewY",
    "inherited": true,
    "description": "get/set skew y",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get skew y\nvar skewY = node.skewY();\n\n// set skew y\nnode.skewY(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5001,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2635
  },
  {
    "id": "Konva.RegularPolygon#offsetX",
    "longname": "Konva.RegularPolygon#offsetX",
    "name": "offsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#offsetX",
    "inherited": true,
    "description": "get/set offset x",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get offset x\nvar offsetX = node.offsetX();\n\n// set offset x\nnode.offsetX(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5033,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2636
  },
  {
    "id": "Konva.RegularPolygon#offsetY",
    "longname": "Konva.RegularPolygon#offsetY",
    "name": "offsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#offsetY",
    "inherited": true,
    "description": "get/set offset y",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get offset y\nvar offsetY = node.offsetY();\n\n// set offset y\nnode.offsetY(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5047,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2637
  },
  {
    "id": "Konva.RegularPolygon#dragDistance",
    "longname": "Konva.RegularPolygon#dragDistance",
    "name": "dragDistance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#dragDistance",
    "inherited": true,
    "description": "get/set drag distance",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "distance"
      }
    ],
    "examples": [
      "// get drag distance\nvar dragDistance = node.dragDistance();\n\n// set distance\n// node starts dragging only if pointer moved more then 3 pixels\nnode.dragDistance(3);\n// or set globally\nKonva.dragDistance = 3;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5061,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2638
  },
  {
    "id": "Konva.RegularPolygon#width",
    "longname": "Konva.RegularPolygon#width",
    "name": "width",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#width",
    "inherited": true,
    "description": "get/set width",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "width"
      }
    ],
    "examples": [
      "// get width\nvar width = node.width();\n\n// set width\nnode.width(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5078,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2639
  },
  {
    "id": "Konva.RegularPolygon#height",
    "longname": "Konva.RegularPolygon#height",
    "name": "height",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#height",
    "inherited": true,
    "description": "get/set height",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "height"
      }
    ],
    "examples": [
      "// get height\nvar height = node.height();\n\n// set height\nnode.height(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5092,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2640
  },
  {
    "id": "Konva.RegularPolygon#listening",
    "longname": "Konva.RegularPolygon#listening",
    "name": "listening",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#listening",
    "inherited": true,
    "description": "get/set listening attr.  If you need to determine if a node is listening or not\n  by taking into account its parents, use the isListening() method\n  nodes with listening set to false will not be detected in hit graph\n  so they will be ignored in container.getIntersection() method",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "Can be true, or false.  The default is true.",
        "name": "listening"
      }
    ],
    "examples": [
      "// get listening attr\nvar listening = node.listening();\n\n// stop listening for events, remove node and all its children from hit graph\nnode.listening(false);\n\n// listen to events according to the parent\nnode.listening(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5106,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2641
  },
  {
    "id": "Konva.RegularPolygon#preventDefault",
    "longname": "Konva.RegularPolygon#preventDefault",
    "name": "preventDefault",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#preventDefault",
    "inherited": true,
    "description": "get/set preventDefault\nBy default all shapes will prevent default behavior\nof a browser on a pointer move or tap.\nthat will prevent native scrolling when you are trying to drag&drop a node\nbut sometimes you may need to enable default actions\nin that case you can set the property to false",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "preventDefault"
      }
    ],
    "examples": [
      "// get preventDefault\nvar shouldPrevent = shape.preventDefault();\n\n// set preventDefault\nshape.preventDefault(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5125,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2642
  },
  {
    "id": "Konva.RegularPolygon#filters",
    "longname": "Konva.RegularPolygon#filters",
    "name": "filters",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#filters",
    "inherited": true,
    "description": "get/set filters.  Filters are applied to cached canvases",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "array of filters",
        "name": "filters"
      }
    ],
    "examples": [
      "// get filters\nvar filters = node.filters();\n\n// set a single filter\nnode.cache();\nnode.filters([Konva.Filters.Blur]);\n\n// set multiple filters\nnode.cache();\nnode.filters([\n  Konva.Filters.Blur,\n  Konva.Filters.Sepia,\n  Konva.Filters.Invert\n]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5148,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2643
  },
  {
    "id": "Konva.RegularPolygon#visible",
    "longname": "Konva.RegularPolygon#visible",
    "name": "visible",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#visible",
    "inherited": true,
    "description": "get/set visible attr.  Can be true, or false.  The default is true.\n  If you need to determine if a node is visible or not\n  by taking into account its parents, use the isVisible() method",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "visible"
      }
    ],
    "examples": [
      "// get visible attr\nvar visible = node.visible();\n\n// make invisible\nnode.visible(false);\n\n// make visible (according to the parent)\nnode.visible(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5171,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2644
  },
  {
    "id": "Konva.RegularPolygon#transformsEnabled",
    "longname": "Konva.RegularPolygon#transformsEnabled",
    "name": "transformsEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#transformsEnabled",
    "inherited": true,
    "description": "get/set transforms that are enabled.  Can be \"all\", \"none\", or \"position\".  The default\n is \"all\"",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// enable position transform only to improve draw performance\nnode.transformsEnabled('position');\n\n// enable all transforms\nnode.transformsEnabled('all');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5191,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2645
  },
  {
    "id": "Konva.RegularPolygon#size",
    "longname": "Konva.RegularPolygon#size",
    "name": "size",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#size",
    "inherited": true,
    "description": "get/set node size",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "size"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size.height"
      }
    ],
    "examples": [
      "// get node size\nvar size = node.size();\nvar width = size.width;\nvar height = size.height;\n\n// set size\nnode.size({\n  width: 100,\n  height: 200\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5205,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2646
  },
  {
    "id": "Konva.RegularPolygon#dragBoundFunc",
    "longname": "Konva.RegularPolygon#dragBoundFunc",
    "name": "dragBoundFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#dragBoundFunc",
    "inherited": true,
    "description": "get/set drag bound function.  This is used to override the default\n drag and drop position.",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "name": "dragBoundFunc"
      }
    ],
    "examples": [
      "// get drag bound function\nvar dragBoundFunc = node.dragBoundFunc();\n\n// create vertical drag and drop\nnode.dragBoundFunc(function(pos){\n  // important pos - is absolute position of the node\n  // you should return absolute position too\n  return {\n    x: this.absolutePosition().x,\n    y: pos.y\n  };\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5226,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2647
  },
  {
    "id": "Konva.RegularPolygon#draggable",
    "longname": "Konva.RegularPolygon#draggable",
    "name": "draggable",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#draggable",
    "inherited": true,
    "description": "get/set draggable flag",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "draggable"
      }
    ],
    "examples": [
      "// get draggable flag\nvar draggable = node.draggable();\n\n// enable drag and drop\nnode.draggable(true);\n\n// disable drag and drop\nnode.draggable(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5248,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2648
  },
  {
    "id": "Konva.RegularPolygon#to",
    "longname": "Konva.RegularPolygon#to",
    "name": "to",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#to",
    "inherited": true,
    "description": "Tween node properties. Shorter usage of {@link Konva.Tween} object.",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "tween params",
        "name": "params"
      }
    ],
    "examples": [
      "circle.to({\n  x : 50,\n  duration : 0.5,\n  onUpdate: () => console.log('props updated'),\n  onFinish: () => console.log('finished'),\n});"
    ],
    "meta": {
      "lineno": 9588,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2649
  },
  {
    "id": "Konva.RegularPolygon#blurRadius",
    "longname": "Konva.RegularPolygon#blurRadius",
    "name": "blurRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#blurRadius",
    "inherited": true,
    "description": "get/set blur radius. Use with {@link Konva.Filters.Blur} filter",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "radius"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17517,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2650
  },
  {
    "id": "Konva.RegularPolygon#brightness",
    "longname": "Konva.RegularPolygon#brightness",
    "name": "brightness",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#brightness",
    "inherited": true,
    "description": "get/set filter brightness.  The brightness is a number between -1 and 1.&nbsp; Positive values\n brighten the pixels and negative values darken them. Use with {@link Konva.Filters.Brighten} filter.",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between -1 and 1",
        "name": "brightness"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17547,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2651
  },
  {
    "id": "Konva.RegularPolygon#contrast",
    "longname": "Konva.RegularPolygon#contrast",
    "name": "contrast",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#contrast",
    "inherited": true,
    "description": "get/set filter contrast.  The contrast is a number between -100 and 100.\nUse with {@link Konva.Filters.Contrast} filter.",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between -100 and 100",
        "name": "contrast"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17600,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2652
  },
  {
    "id": "Konva.RegularPolygon#embossStrength",
    "longname": "Konva.RegularPolygon#embossStrength",
    "name": "embossStrength",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossStrength",
    "inherited": true,
    "description": "get/set emboss strength. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1.  Default is 0.5",
        "name": "level"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17725,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2653
  },
  {
    "id": "Konva.RegularPolygon#embossWhiteLevel",
    "longname": "Konva.RegularPolygon#embossWhiteLevel",
    "name": "embossWhiteLevel",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossWhiteLevel",
    "inherited": true,
    "description": "get/set emboss white level. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1.  Default is 0.5",
        "name": "embossWhiteLevel"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17733,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2654
  },
  {
    "id": "Konva.RegularPolygon#embossDirection",
    "longname": "Konva.RegularPolygon#embossDirection",
    "name": "embossDirection",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossDirection",
    "inherited": true,
    "description": "get/set emboss direction. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "can be top-left, top, top-right, right, bottom-right, bottom, bottom-left or left\n  The default is top-left",
        "name": "embossDirection"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17741,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2655
  },
  {
    "id": "Konva.RegularPolygon#embossBlend",
    "longname": "Konva.RegularPolygon#embossBlend",
    "name": "embossBlend",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossBlend",
    "inherited": true,
    "description": "get/set emboss blend. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "embossBlend"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17750,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2656
  },
  {
    "id": "Konva.RegularPolygon#enhance",
    "longname": "Konva.RegularPolygon#enhance",
    "name": "enhance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#enhance",
    "inherited": true,
    "description": "get/set enhance. Use with {@link Konva.Filters.Enhance} filter. -1 to 1 values",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Float"
          ]
        },
        "name": "amount"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Float"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17864,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2657
  },
  {
    "id": "Konva.RegularPolygon#hue",
    "longname": "Konva.RegularPolygon#hue",
    "name": "hue",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hue",
    "inherited": true,
    "description": "get/set hsv hue in degrees. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between 0 and 359",
        "name": "hue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17896,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2658
  },
  {
    "id": "Konva.RegularPolygon#saturation",
    "longname": "Konva.RegularPolygon#saturation",
    "name": "saturation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#saturation",
    "inherited": true,
    "description": "get/set hsv saturation. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the saturation, 1.0 doubles, etc..",
        "name": "saturation"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17904,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2659
  },
  {
    "id": "Konva.RegularPolygon#luminance",
    "longname": "Konva.RegularPolygon#luminance",
    "name": "luminance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#luminance",
    "inherited": true,
    "description": "get/set hsl luminance. Use with {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "from -1 to 1",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17912,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2660
  },
  {
    "id": "Konva.RegularPolygon#value",
    "longname": "Konva.RegularPolygon#value",
    "name": "value",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#value",
    "inherited": true,
    "description": "get/set hsv value. Use with {@link Konva.Filters.HSV} filter.",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the value, 1.0 doubles, etc..",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18018,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2661
  },
  {
    "id": "Konva.RegularPolygon#kaleidoscopePower",
    "longname": "Konva.RegularPolygon#kaleidoscopePower",
    "name": "kaleidoscopePower",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#kaleidoscopePower",
    "inherited": true,
    "description": "get/set kaleidoscope power. Use with {@link Konva.Filters.Kaleidoscope} filter.",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "of kaleidoscope",
        "name": "power"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18243,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2662
  },
  {
    "id": "Konva.RegularPolygon#kaleidoscopeAngle",
    "longname": "Konva.RegularPolygon#kaleidoscopeAngle",
    "name": "kaleidoscopeAngle",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#kaleidoscopeAngle",
    "inherited": true,
    "description": "get/set kaleidoscope angle. Use with {@link Konva.Filters.Kaleidoscope} filter.",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "degrees"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18251,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2663
  },
  {
    "id": "Konva.RegularPolygon#noise",
    "longname": "Konva.RegularPolygon#noise",
    "name": "noise",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#noise",
    "inherited": true,
    "description": "get/set noise amount.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Noise} filter.",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "noise"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18437,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2664
  },
  {
    "id": "Konva.RegularPolygon#pixelSize",
    "longname": "Konva.RegularPolygon#pixelSize",
    "name": "pixelSize",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#pixelSize",
    "inherited": true,
    "description": "get/set pixel size. Use with {@link Konva.Filters.Pixelate} filter.",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "pixelSize"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18522,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2665
  },
  {
    "id": "Konva.RegularPolygon#levels",
    "longname": "Konva.RegularPolygon#levels",
    "name": "levels",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#levels",
    "inherited": true,
    "description": "get/set levels.  Must be a number between 0 and 1.  Use with {@link Konva.Filters.Posterize} filter.",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1",
        "name": "level"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18552,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2666
  },
  {
    "id": "Konva.RegularPolygon#red",
    "longname": "Konva.RegularPolygon#red",
    "name": "red",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#red",
    "inherited": true,
    "description": "get/set filter red value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "red"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18596,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2667
  },
  {
    "id": "Konva.RegularPolygon#green",
    "longname": "Konva.RegularPolygon#green",
    "name": "green",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#green",
    "inherited": true,
    "description": "get/set filter green value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "green"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18616,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2668
  },
  {
    "id": "Konva.RegularPolygon#blue",
    "longname": "Konva.RegularPolygon#blue",
    "name": "blue",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#blue",
    "inherited": true,
    "description": "get/set filter blue value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "blue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18625,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2669
  },
  {
    "id": "Konva.RegularPolygon#alpha",
    "longname": "Konva.RegularPolygon#alpha",
    "name": "alpha",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#alpha",
    "inherited": true,
    "description": "get/set filter alpha value. Use with {@link Konva.Filters.RGBA} filter.",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Float"
          ]
        },
        "description": "value between 0 and 1",
        "name": "alpha"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Float"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18718,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2670
  },
  {
    "id": "Konva.RegularPolygon#threshold",
    "longname": "Konva.RegularPolygon#threshold",
    "name": "threshold",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#threshold",
    "inherited": true,
    "description": "get/set threshold.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Threshold} or {@link Konva.Filters.Mask} filter.",
    "memberof": "Konva.RegularPolygon",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "threshold"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18809,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2671
  },
  {
    "id": "Konva.Ring#hasShadow",
    "longname": "Konva.Ring#hasShadow",
    "name": "hasShadow",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasShadow",
    "inherited": true,
    "description": "returns whether or not a shadow will be rendered",
    "memberof": "Konva.Ring",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 6909,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2672
  },
  {
    "id": "Konva.Ring#hasFill",
    "longname": "Konva.Ring#hasFill",
    "name": "hasFill",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasFill",
    "inherited": true,
    "description": "returns whether or not the shape will be filled",
    "memberof": "Konva.Ring",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7009,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2673
  },
  {
    "id": "Konva.Ring#hasStroke",
    "longname": "Konva.Ring#hasStroke",
    "name": "hasStroke",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasStroke",
    "inherited": true,
    "description": "returns whether or not the shape will be stroked",
    "memberof": "Konva.Ring",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7030,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2674
  },
  {
    "id": "Konva.Ring#intersects",
    "longname": "Konva.Ring#intersects",
    "name": "intersects",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#intersects",
    "inherited": true,
    "description": "determines if point is in the shape, regardless if other shapes are on top of it.  Note: because\n this method clears a temporary canvas and then redraws the shape, it performs very poorly if executed many times\n consecutively.  Please use the {@link Konva.Stage#getIntersection} method if at all possible\n because it performs much better",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "point"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "point.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "point.y"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7066,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2675
  },
  {
    "id": "Konva.Ring#getSelfRect",
    "longname": "Konva.Ring#getSelfRect",
    "name": "getSelfRect",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#getSelfRect",
    "inherited": true,
    "description": "return self rectangle (x, y, width, height) of shape.\nThis method are not taken into account transformation and styles.",
    "memberof": "Konva.Ring",
    "examples": [
      "rect.getSelfRect();  // return {x:0, y:0, width:rect.width(), height:rect.height()}\ncircle.getSelfRect();  // return {x: - circle.width() / 2, y: - circle.height() / 2, width:circle.width(), height:circle.height()}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "rect with `{x, y, width, height}` properties"
      }
    ],
    "meta": {
      "lineno": 7138,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2676
  },
  {
    "id": "Konva.Ring#drawHitFromCache",
    "longname": "Konva.Ring#drawHitFromCache",
    "name": "drawHitFromCache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#drawHitFromCache",
    "inherited": true,
    "description": "draw hit graph using the cached scene canvas",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "alpha channel threshold that determines whether or not\n a pixel should be drawn onto the hit graph.  Must be a value between 0 and 255.\n The default is 0",
        "name": "alphaThreshold"
      }
    ],
    "examples": [
      "shape.cache();\nshape.drawHitFromCache();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7294,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2677
  },
  {
    "id": "Konva.Ring#stroke",
    "longname": "Konva.Ring#stroke",
    "name": "stroke",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#stroke",
    "inherited": true,
    "description": "get/set stroke color",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get stroke color\nvar stroke = shape.stroke();\n\n// set stroke color with color string\nshape.stroke('green');\n\n// set stroke color with hex\nshape.stroke('#00ff00');\n\n// set stroke color with rgb\nshape.stroke('rgb(0,255,0)');\n\n// set stroke color with rgba and make it 50% opaque\nshape.stroke('rgba(0,255,0,0.5');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7360,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2678
  },
  {
    "id": "Konva.Ring#strokeWidth",
    "longname": "Konva.Ring#strokeWidth",
    "name": "strokeWidth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeWidth",
    "inherited": true,
    "description": "get/set stroke width",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "strokeWidth"
      }
    ],
    "examples": [
      "// get stroke width\nvar strokeWidth = shape.strokeWidth();\n\n// set stroke width\nshape.strokeWidth(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7383,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2679
  },
  {
    "id": "Konva.Ring#fillAfterStrokeEnabled",
    "longname": "Konva.Ring#fillAfterStrokeEnabled",
    "name": "fillAfterStrokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillAfterStrokeEnabled",
    "inherited": true,
    "description": "get/set fillAfterStrokeEnabled property. By default Konva is drawing filling first, then stroke on top of the fill.\nIn rare situations you may want a different behavior. When you have a stroke first then fill on top of it.\nEspecially useful for Text objects.\nDefault is false.",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "fillAfterStrokeEnabled"
      }
    ],
    "examples": [
      "// get stroke width\nvar fillAfterStrokeEnabled = shape.fillAfterStrokeEnabled();\n\n// set stroke width\nshape.fillAfterStrokeEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7397,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2680
  },
  {
    "id": "Konva.Ring#hitStrokeWidth",
    "longname": "Konva.Ring#hitStrokeWidth",
    "name": "hitStrokeWidth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hitStrokeWidth",
    "inherited": true,
    "description": "get/set stroke width for hit detection. Default value is \"auto\", it means it will be equals to strokeWidth",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "hitStrokeWidth"
      }
    ],
    "examples": [
      "// get stroke width\nvar hitStrokeWidth = shape.hitStrokeWidth();\n\n// set hit stroke width\nshape.hitStrokeWidth(20);\n// set hit stroke width always equals to scene stroke width\nshape.hitStrokeWidth('auto');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7414,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2681
  },
  {
    "id": "Konva.Ring#strokeHitEnabled",
    "longname": "Konva.Ring#strokeHitEnabled",
    "name": "strokeHitEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeHitEnabled",
    "inherited": true,
    "description": "**deprecated, use hitStrokeWidth instead!** get/set strokeHitEnabled property. Useful for performance optimization.\nYou may set `shape.strokeHitEnabled(false)`. In this case stroke will be no draw on hit canvas, so hit area\nof shape will be decreased (by lineWidth / 2). Remember that non closed line with `strokeHitEnabled = false`\nwill be not drawn on hit canvas, that is mean line will no trigger pointer events (like mouseover)\nDefault value is true.",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "strokeHitEnabled"
      }
    ],
    "examples": [
      "// get strokeHitEnabled\nvar strokeHitEnabled = shape.strokeHitEnabled();\n\n// set strokeHitEnabled\nshape.strokeHitEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7430,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2682
  },
  {
    "id": "Konva.Ring#perfectDrawEnabled",
    "longname": "Konva.Ring#perfectDrawEnabled",
    "name": "perfectDrawEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#perfectDrawEnabled",
    "inherited": true,
    "description": "get/set perfectDrawEnabled. If a shape has fill, stroke and opacity you may set `perfectDrawEnabled` to false to improve performance.\nSee http://konvajs.org/docs/performance/Disable_Perfect_Draw.html for more information.\nDefault value is true",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "perfectDrawEnabled"
      }
    ],
    "examples": [
      "// get perfectDrawEnabled\nvar perfectDrawEnabled = shape.perfectDrawEnabled();\n\n// set perfectDrawEnabled\nshape.perfectDrawEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7448,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2683
  },
  {
    "id": "Konva.Ring#shadowForStrokeEnabled",
    "longname": "Konva.Ring#shadowForStrokeEnabled",
    "name": "shadowForStrokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowForStrokeEnabled",
    "inherited": true,
    "description": "get/set shadowForStrokeEnabled. Useful for performance optimization.\nYou may set `shape.shadowForStrokeEnabled(false)`. In this case stroke will no effect shadow.\nRemember if you set `shadowForStrokeEnabled = false` for non closed line - that line will have no shadow!.\nDefault value is true",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "shadowForStrokeEnabled"
      }
    ],
    "examples": [
      "// get shadowForStrokeEnabled\nvar shadowForStrokeEnabled = shape.shadowForStrokeEnabled();\n\n// set shadowForStrokeEnabled\nshape.shadowForStrokeEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7464,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2684
  },
  {
    "id": "Konva.Ring#lineJoin",
    "longname": "Konva.Ring#lineJoin",
    "name": "lineJoin",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#lineJoin",
    "inherited": true,
    "description": "get/set line join.  Can be miter, round, or bevel.  The\n default is miter",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "lineJoin"
      }
    ],
    "examples": [
      "// get line join\nvar lineJoin = shape.lineJoin();\n\n// set line join\nshape.lineJoin('round');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7481,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2685
  },
  {
    "id": "Konva.Ring#lineCap",
    "longname": "Konva.Ring#lineCap",
    "name": "lineCap",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#lineCap",
    "inherited": true,
    "description": "get/set line cap.  Can be butt, round, or square",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "lineCap"
      }
    ],
    "examples": [
      "// get line cap\nvar lineCap = shape.lineCap();\n\n// set line cap\nshape.lineCap('round');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7496,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2686
  },
  {
    "id": "Konva.Ring#sceneFunc",
    "longname": "Konva.Ring#sceneFunc",
    "name": "sceneFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#sceneFunc",
    "inherited": true,
    "description": "get/set scene draw function. That function is used to draw the shape on a canvas.\nAlso that function will be used to draw hit area of the shape, in case if hitFunc is not defined.",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "drawing function",
        "name": "drawFunc"
      }
    ],
    "examples": [
      "// get scene draw function\nvar sceneFunc = shape.sceneFunc();\n\n// set scene draw function\nshape.sceneFunc(function(context, shape) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  // like stroke and fill\n  context.fillStrokeShape(shape);\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7510,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2687
  },
  {
    "id": "Konva.Ring#hitFunc",
    "longname": "Konva.Ring#hitFunc",
    "name": "hitFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hitFunc",
    "inherited": true,
    "description": "get/set hit draw function. That function is used to draw custom hit area of a shape.",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "drawing function",
        "name": "drawFunc"
      }
    ],
    "examples": [
      "// get hit draw function\nvar hitFunc = shape.hitFunc();\n\n// set hit draw function\nshape.hitFunc(function(context) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  context.fillStrokeShape(shape);\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7532,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2688
  },
  {
    "id": "Konva.Ring#dash",
    "longname": "Konva.Ring#dash",
    "name": "dash",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#dash",
    "inherited": true,
    "overrides": "Konva.Shape#dash",
    "description": "get/set dash array for stroke.",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "dash"
      }
    ],
    "examples": [
      "// apply dashed stroke that is 10px long and 5 pixels apart\n line.dash([10, 5]);\n // apply dashed stroke that is made up of alternating dashed\n // lines that are 10px long and 20px apart, and dots that have\n // a radius of 5px and are 20px apart\n line.dash([10, 20, 0.001, 20]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7552,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2689
  },
  {
    "id": "Konva.Ring#shadowColor",
    "longname": "Konva.Ring#shadowColor",
    "name": "shadowColor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowColor",
    "inherited": true,
    "description": "get/set shadow color",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get shadow color\nvar shadow = shape.shadowColor();\n\n// set shadow color with color string\nshape.shadowColor('green');\n\n// set shadow color with hex\nshape.shadowColor('#00ff00');\n\n// set shadow color with rgb\nshape.shadowColor('rgb(0,255,0)');\n\n// set shadow color with rgba and make it 50% opaque\nshape.shadowColor('rgba(0,255,0,0.5');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7579,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2690
  },
  {
    "id": "Konva.Ring#shadowBlur",
    "longname": "Konva.Ring#shadowBlur",
    "name": "shadowBlur",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowBlur",
    "inherited": true,
    "description": "get/set shadow blur",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "blur"
      }
    ],
    "examples": [
      "// get shadow blur\nvar shadowBlur = shape.shadowBlur();\n\n// set shadow blur\nshape.shadowBlur(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7602,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2691
  },
  {
    "id": "Konva.Ring#shadowOpacity",
    "longname": "Konva.Ring#shadowOpacity",
    "name": "shadowOpacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOpacity",
    "inherited": true,
    "description": "get/set shadow opacity.  must be a value between 0 and 1",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "opacity"
      }
    ],
    "examples": [
      "// get shadow opacity\nvar shadowOpacity = shape.shadowOpacity();\n\n// set shadow opacity\nshape.shadowOpacity(0.5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7616,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2692
  },
  {
    "id": "Konva.Ring#shadowOffset",
    "longname": "Konva.Ring#shadowOffset",
    "name": "shadowOffset",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffset",
    "inherited": true,
    "description": "get/set shadow offset",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.y"
      }
    ],
    "examples": [
      "// get shadow offset\nvar shadowOffset = shape.shadowOffset();\n\n// set shadow offset\nshape.shadowOffset({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7630,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2693
  },
  {
    "id": "Konva.Ring#shadowOffsetX",
    "longname": "Konva.Ring#shadowOffsetX",
    "name": "shadowOffsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffsetX",
    "inherited": true,
    "description": "get/set shadow offset x",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get shadow offset x\nvar shadowOffsetX = shape.shadowOffsetX();\n\n// set shadow offset x\nshape.shadowOffsetX(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7649,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2694
  },
  {
    "id": "Konva.Ring#shadowOffsetY",
    "longname": "Konva.Ring#shadowOffsetY",
    "name": "shadowOffsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffsetY",
    "inherited": true,
    "description": "get/set shadow offset y",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get shadow offset y\nvar shadowOffsetY = shape.shadowOffsetY();\n\n// set shadow offset y\nshape.shadowOffsetY(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7663,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2695
  },
  {
    "id": "Konva.Ring#fillPatternImage",
    "longname": "Konva.Ring#fillPatternImage",
    "name": "fillPatternImage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternImage",
    "inherited": true,
    "description": "get/set fill pattern image",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Image"
          ]
        },
        "description": "object",
        "name": "image"
      }
    ],
    "examples": [
      "// get fill pattern image\nvar fillPatternImage = shape.fillPatternImage();\n\n// set fill pattern image\nvar imageObj = new Image();\nimageObj.onload = function() {\n  shape.fillPatternImage(imageObj);\n};\nimageObj.src = 'path/to/image/jpg';"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Image"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7677,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2696
  },
  {
    "id": "Konva.Ring#fill",
    "longname": "Konva.Ring#fill",
    "name": "fill",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fill",
    "inherited": true,
    "description": "get/set fill color",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get fill color\nvar fill = shape.fill();\n\n// set fill color with color string\nshape.fill('green');\n\n// set fill color with hex\nshape.fill('#00ff00');\n\n// set fill color with rgb\nshape.fill('rgb(0,255,0)');\n\n// set fill color with rgba and make it 50% opaque\nshape.fill('rgba(0,255,0,0.5');\n\n// shape without fill\nshape.fill(null);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7695,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2697
  },
  {
    "id": "Konva.Ring#fillPatternX",
    "longname": "Konva.Ring#fillPatternX",
    "name": "fillPatternX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternX",
    "inherited": true,
    "description": "get/set fill pattern x",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern x\nvar fillPatternX = shape.fillPatternX();\n// set fill pattern x\nshape.fillPatternX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7721,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2698
  },
  {
    "id": "Konva.Ring#fillPatternY",
    "longname": "Konva.Ring#fillPatternY",
    "name": "fillPatternY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternY",
    "inherited": true,
    "description": "get/set fill pattern y",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern y\nvar fillPatternY = shape.fillPatternY();\n// set fill pattern y\nshape.fillPatternY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7734,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2699
  },
  {
    "id": "Konva.Ring#fillLinearGradientColorStops",
    "longname": "Konva.Ring#fillLinearGradientColorStops",
    "name": "fillLinearGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientColorStops",
    "inherited": true,
    "description": "get/set fill linear gradient color stops",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get fill linear gradient color stops\nvar colorStops = shape.fillLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillLinearGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "colorStops"
      }
    ],
    "meta": {
      "lineno": 7747,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2700
  },
  {
    "id": "Konva.Ring#strokeLinearGradientColorStops",
    "longname": "Konva.Ring#strokeLinearGradientColorStops",
    "name": "strokeLinearGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientColorStops",
    "inherited": true,
    "description": "get/set stroke linear gradient color stops",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get stroke linear gradient color stops\nvar colorStops = shape.strokeLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.strokeLinearGradientColorStops([0, 'red', 0.5, 'blue', 1, 'green']);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "colorStops"
      }
    ],
    "meta": {
      "lineno": 7762,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2701
  },
  {
    "id": "Konva.Ring#fillRadialGradientStartRadius",
    "longname": "Konva.Ring#fillRadialGradientStartRadius",
    "name": "fillRadialGradientStartRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartRadius",
    "inherited": true,
    "description": "get/set fill radial gradient start radius",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "radius"
      }
    ],
    "examples": [
      "// get radial gradient start radius\nvar startRadius = shape.fillRadialGradientStartRadius();\n\n// set radial gradient start radius\nshape.fillRadialGradientStartRadius(0);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7777,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2702
  },
  {
    "id": "Konva.Ring#fillRadialGradientEndRadius",
    "longname": "Konva.Ring#fillRadialGradientEndRadius",
    "name": "fillRadialGradientEndRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndRadius",
    "inherited": true,
    "description": "get/set fill radial gradient end radius",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "radius"
      }
    ],
    "examples": [
      "// get radial gradient end radius\nvar endRadius = shape.fillRadialGradientEndRadius();\n\n// set radial gradient end radius\nshape.fillRadialGradientEndRadius(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7791,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2703
  },
  {
    "id": "Konva.Ring#fillRadialGradientColorStops",
    "longname": "Konva.Ring#fillRadialGradientColorStops",
    "name": "fillRadialGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientColorStops",
    "inherited": true,
    "description": "get/set fill radial gradient color stops",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get fill radial gradient color stops\nvar colorStops = shape.fillRadialGradientColorStops();\n\n// create a radial gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillRadialGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7805,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2704
  },
  {
    "id": "Konva.Ring#fillPatternRepeat",
    "longname": "Konva.Ring#fillPatternRepeat",
    "name": "fillPatternRepeat",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternRepeat",
    "inherited": true,
    "description": "get/set fill pattern repeat.  Can be 'repeat', 'repeat-x', 'repeat-y', or 'no-repeat'.  The default is 'repeat'",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "repeat"
      }
    ],
    "examples": [
      "// get fill pattern repeat\nvar repeat = shape.fillPatternRepeat();\n\n// repeat pattern in x direction only\nshape.fillPatternRepeat('repeat-x');\n\n// do not repeat the pattern\nshape.fillPatternRepeat('no-repeat');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7820,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2705
  },
  {
    "id": "Konva.Ring#fillEnabled",
    "longname": "Konva.Ring#fillEnabled",
    "name": "fillEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillEnabled",
    "inherited": true,
    "description": "get/set fill enabled flag",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get fill enabled flag\nvar fillEnabled = shape.fillEnabled();\n\n// disable fill\nshape.fillEnabled(false);\n\n// enable fill\nshape.fillEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7837,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2706
  },
  {
    "id": "Konva.Ring#strokeEnabled",
    "longname": "Konva.Ring#strokeEnabled",
    "name": "strokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeEnabled",
    "inherited": true,
    "description": "get/set stroke enabled flag",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get stroke enabled flag\nvar strokeEnabled = shape.strokeEnabled();\n\n// disable stroke\nshape.strokeEnabled(false);\n\n// enable stroke\nshape.strokeEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7854,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2707
  },
  {
    "id": "Konva.Ring#shadowEnabled",
    "longname": "Konva.Ring#shadowEnabled",
    "name": "shadowEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowEnabled",
    "inherited": true,
    "description": "get/set shadow enabled flag",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get shadow enabled flag\nvar shadowEnabled = shape.shadowEnabled();\n\n// disable shadow\nshape.shadowEnabled(false);\n\n// enable shadow\nshape.shadowEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7871,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2708
  },
  {
    "id": "Konva.Ring#dashEnabled",
    "longname": "Konva.Ring#dashEnabled",
    "name": "dashEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#dashEnabled",
    "inherited": true,
    "description": "get/set dash enabled flag",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get dash enabled flag\nvar dashEnabled = shape.dashEnabled();\n\n// disable dash\nshape.dashEnabled(false);\n\n// enable dash\nshape.dashEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7888,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2709
  },
  {
    "id": "Konva.Ring#strokeScaleEnabled",
    "longname": "Konva.Ring#strokeScaleEnabled",
    "name": "strokeScaleEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeScaleEnabled",
    "inherited": true,
    "description": "get/set strokeScale enabled flag",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get stroke scale enabled flag\nvar strokeScaleEnabled = shape.strokeScaleEnabled();\n\n// disable stroke scale\nshape.strokeScaleEnabled(false);\n\n// enable stroke scale\nshape.strokeScaleEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7905,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2710
  },
  {
    "id": "Konva.Ring#fillPriority",
    "longname": "Konva.Ring#fillPriority",
    "name": "fillPriority",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPriority",
    "inherited": true,
    "description": "get/set fill priority.  can be color, pattern, linear-gradient, or radial-gradient.  The default is color.\n  This is handy if you want to toggle between different fill types.",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "priority"
      }
    ],
    "examples": [
      "// get fill priority\nvar fillPriority = shape.fillPriority();\n\n// set fill priority\nshape.fillPriority('linear-gradient');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7922,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2711
  },
  {
    "id": "Konva.Ring#fillPatternOffset",
    "longname": "Konva.Ring#fillPatternOffset",
    "name": "fillPatternOffset",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffset",
    "inherited": true,
    "description": "get/set fill pattern offset",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.y"
      }
    ],
    "examples": [
      "// get fill pattern offset\nvar patternOffset = shape.fillPatternOffset();\n\n// set fill pattern offset\nshape.fillPatternOffset({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7937,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2712
  },
  {
    "id": "Konva.Ring#fillPatternOffsetX",
    "longname": "Konva.Ring#fillPatternOffsetX",
    "name": "fillPatternOffsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffsetX",
    "inherited": true,
    "description": "get/set fill pattern offset x",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern offset x\nvar patternOffsetX = shape.fillPatternOffsetX();\n\n// set fill pattern offset x\nshape.fillPatternOffsetX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7956,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2713
  },
  {
    "id": "Konva.Ring#fillPatternOffsetY",
    "longname": "Konva.Ring#fillPatternOffsetY",
    "name": "fillPatternOffsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffsetY",
    "inherited": true,
    "description": "get/set fill pattern offset y",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern offset y\nvar patternOffsetY = shape.fillPatternOffsetY();\n\n// set fill pattern offset y\nshape.fillPatternOffsetY(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7970,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2714
  },
  {
    "id": "Konva.Ring#fillPatternScale",
    "longname": "Konva.Ring#fillPatternScale",
    "name": "fillPatternScale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScale",
    "inherited": true,
    "description": "get/set fill pattern scale",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.y"
      }
    ],
    "examples": [
      "// get fill pattern scale\nvar patternScale = shape.fillPatternScale();\n\n// set fill pattern scale\nshape.fillPatternScale({\n  x: 2,\n  y: 2\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7984,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2715
  },
  {
    "id": "Konva.Ring#fillPatternScaleX",
    "longname": "Konva.Ring#fillPatternScaleX",
    "name": "fillPatternScaleX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScaleX",
    "inherited": true,
    "description": "get/set fill pattern scale x",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern scale x\nvar patternScaleX = shape.fillPatternScaleX();\n\n// set fill pattern scale x\nshape.fillPatternScaleX(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8003,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2716
  },
  {
    "id": "Konva.Ring#fillPatternScaleY",
    "longname": "Konva.Ring#fillPatternScaleY",
    "name": "fillPatternScaleY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScaleY",
    "inherited": true,
    "description": "get/set fill pattern scale y",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern scale y\nvar patternScaleY = shape.fillPatternScaleY();\n\n// set fill pattern scale y\nshape.fillPatternScaleY(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8017,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2717
  },
  {
    "id": "Konva.Ring#fillLinearGradientStartPoint",
    "longname": "Konva.Ring#fillLinearGradientStartPoint",
    "name": "fillLinearGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPoint",
    "inherited": true,
    "description": "get/set fill linear gradient start point",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get fill linear gradient start point\nvar startPoint = shape.fillLinearGradientStartPoint();\n\n// set fill linear gradient start point\nshape.fillLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8034,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2718
  },
  {
    "id": "Konva.Ring#strokeLinearGradientStartPoint",
    "longname": "Konva.Ring#strokeLinearGradientStartPoint",
    "name": "strokeLinearGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientStartPoint",
    "inherited": true,
    "description": "get/set stroke linear gradient start point",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point\nvar startPoint = shape.strokeLinearGradientStartPoint();\n\n// set stroke linear gradient start point\nshape.strokeLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8056,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2719
  },
  {
    "id": "Konva.Ring#fillLinearGradientStartPointX",
    "longname": "Konva.Ring#fillLinearGradientStartPointX",
    "name": "fillLinearGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPointX",
    "inherited": true,
    "description": "get/set fill linear gradient start point x",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill linear gradient start point x\nvar startPointX = shape.fillLinearGradientStartPointX();\n\n// set fill linear gradient start point x\nshape.fillLinearGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8075,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2720
  },
  {
    "id": "Konva.Ring#linearLinearGradientStartPointX",
    "longname": "Konva.Ring#linearLinearGradientStartPointX",
    "name": "linearLinearGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#linearLinearGradientStartPointX",
    "inherited": true,
    "description": "get/set stroke linear gradient start point x",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point x\nvar startPointX = shape.strokeLinearGradientStartPointX();\n\n// set stroke linear gradient start point x\nshape.strokeLinearGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8089,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2721
  },
  {
    "id": "Konva.Ring#fillLinearGradientStartPointY",
    "longname": "Konva.Ring#fillLinearGradientStartPointY",
    "name": "fillLinearGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPointY",
    "inherited": true,
    "description": "get/set fill linear gradient start point y",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill linear gradient start point y\nvar startPointY = shape.fillLinearGradientStartPointY();\n\n// set fill linear gradient start point y\nshape.fillLinearGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8103,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2722
  },
  {
    "id": "Konva.Ring#strokeLinearGradientStartPointY",
    "longname": "Konva.Ring#strokeLinearGradientStartPointY",
    "name": "strokeLinearGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientStartPointY",
    "inherited": true,
    "description": "get/set stroke linear gradient start point y",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point y\nvar startPointY = shape.strokeLinearGradientStartPointY();\n\n// set stroke linear gradient start point y\nshape.strokeLinearGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8117,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2723
  },
  {
    "id": "Konva.Ring#fillLinearGradientEndPoint",
    "longname": "Konva.Ring#fillLinearGradientEndPoint",
    "name": "fillLinearGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPoint",
    "inherited": true,
    "description": "get/set fill linear gradient end point",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get fill linear gradient end point\nvar endPoint = shape.fillLinearGradientEndPoint();\n\n// set fill linear gradient end point\nshape.fillLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8134,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2724
  },
  {
    "id": "Konva.Ring#strokeLinearGradientEndPoint",
    "longname": "Konva.Ring#strokeLinearGradientEndPoint",
    "name": "strokeLinearGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPoint",
    "inherited": true,
    "description": "get/set stroke linear gradient end point",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point\nvar endPoint = shape.strokeLinearGradientEndPoint();\n\n// set stroke linear gradient end point\nshape.strokeLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8156,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2725
  },
  {
    "id": "Konva.Ring#fillLinearGradientEndPointX",
    "longname": "Konva.Ring#fillLinearGradientEndPointX",
    "name": "fillLinearGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPointX",
    "inherited": true,
    "description": "get/set fill linear gradient end point x",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill linear gradient end point x\nvar endPointX = shape.fillLinearGradientEndPointX();\n\n// set fill linear gradient end point x\nshape.fillLinearGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8175,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2726
  },
  {
    "id": "Konva.Ring#strokeLinearGradientEndPointX",
    "longname": "Konva.Ring#strokeLinearGradientEndPointX",
    "name": "strokeLinearGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPointX",
    "inherited": true,
    "description": "get/set fill linear gradient end point x",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point x\nvar endPointX = shape.strokeLinearGradientEndPointX();\n\n// set stroke linear gradient end point x\nshape.strokeLinearGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8189,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2727
  },
  {
    "id": "Konva.Ring#fillLinearGradientEndPointY",
    "longname": "Konva.Ring#fillLinearGradientEndPointY",
    "name": "fillLinearGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPointY",
    "inherited": true,
    "description": "get/set fill linear gradient end point y",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill linear gradient end point y\nvar endPointY = shape.fillLinearGradientEndPointY();\n\n// set fill linear gradient end point y\nshape.fillLinearGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8203,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2728
  },
  {
    "id": "Konva.Ring#strokeLinearGradientEndPointY",
    "longname": "Konva.Ring#strokeLinearGradientEndPointY",
    "name": "strokeLinearGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPointY",
    "inherited": true,
    "description": "get/set stroke linear gradient end point y",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point y\nvar endPointY = shape.strokeLinearGradientEndPointY();\n\n// set stroke linear gradient end point y\nshape.strokeLinearGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8217,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2729
  },
  {
    "id": "Konva.Ring#fillRadialGradientStartPoint",
    "longname": "Konva.Ring#fillRadialGradientStartPoint",
    "name": "fillRadialGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPoint",
    "inherited": true,
    "description": "get/set fill radial gradient start point",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get fill radial gradient start point\nvar startPoint = shape.fillRadialGradientStartPoint();\n\n// set fill radial gradient start point\nshape.fillRadialGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8234,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2730
  },
  {
    "id": "Konva.Ring#fillRadialGradientStartPointX",
    "longname": "Konva.Ring#fillRadialGradientStartPointX",
    "name": "fillRadialGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPointX",
    "inherited": true,
    "description": "get/set fill radial gradient start point x",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill radial gradient start point x\nvar startPointX = shape.fillRadialGradientStartPointX();\n\n// set fill radial gradient start point x\nshape.fillRadialGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8253,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2731
  },
  {
    "id": "Konva.Ring#fillRadialGradientStartPointY",
    "longname": "Konva.Ring#fillRadialGradientStartPointY",
    "name": "fillRadialGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPointY",
    "inherited": true,
    "description": "get/set fill radial gradient start point y",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill radial gradient start point y\nvar startPointY = shape.fillRadialGradientStartPointY();\n\n// set fill radial gradient start point y\nshape.fillRadialGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8267,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2732
  },
  {
    "id": "Konva.Ring#fillRadialGradientEndPoint",
    "longname": "Konva.Ring#fillRadialGradientEndPoint",
    "name": "fillRadialGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPoint",
    "inherited": true,
    "description": "get/set fill radial gradient end point",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get fill radial gradient end point\nvar endPoint = shape.fillRadialGradientEndPoint();\n\n// set fill radial gradient end point\nshape.fillRadialGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8284,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2733
  },
  {
    "id": "Konva.Ring#fillRadialGradientEndPointX",
    "longname": "Konva.Ring#fillRadialGradientEndPointX",
    "name": "fillRadialGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPointX",
    "inherited": true,
    "description": "get/set fill radial gradient end point x",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill radial gradient end point x\nvar endPointX = shape.fillRadialGradientEndPointX();\n\n// set fill radial gradient end point x\nshape.fillRadialGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8303,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2734
  },
  {
    "id": "Konva.Ring#fillRadialGradientEndPointY",
    "longname": "Konva.Ring#fillRadialGradientEndPointY",
    "name": "fillRadialGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPointY",
    "inherited": true,
    "description": "get/set fill radial gradient end point y",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill radial gradient end point y\nvar endPointY = shape.fillRadialGradientEndPointY();\n\n// set fill radial gradient end point y\nshape.fillRadialGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8317,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2735
  },
  {
    "id": "Konva.Ring#fillPatternRotation",
    "longname": "Konva.Ring#fillPatternRotation",
    "name": "fillPatternRotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternRotation",
    "inherited": true,
    "description": "get/set fill pattern rotation in degrees",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get fill pattern rotation\nvar patternRotation = shape.fillPatternRotation();\n\n// set fill pattern rotation\nshape.fillPatternRotation(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8331,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2736
  },
  {
    "id": "Konva.Ring#fillRule",
    "longname": "Konva.Ring#fillRule",
    "name": "fillRule",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRule",
    "inherited": true,
    "description": "get/set fill rule",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "CanvasFillRule"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get fill rule\nvar fillRule = shape.fillRule();\n\n// set fill rule\nshape.fillRule('evenodd');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8345,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2737
  },
  {
    "id": "Konva.Ring#clearCache",
    "longname": "Konva.Ring#clearCache",
    "name": "clearCache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#clearCache",
    "inherited": true,
    "description": "clear cached canvas",
    "memberof": "Konva.Ring",
    "examples": [
      "node.clearCache();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2632,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2738
  },
  {
    "id": "Konva.Ring#cache",
    "longname": "Konva.Ring#cache",
    "name": "cache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#cache",
    "inherited": true,
    "description": "cache node to improve drawing performance, apply filters, or create more accurate\n hit regions. For all basic shapes size of cache canvas will be automatically detected.\n If you need to cache your custom `Konva.Shape` instance you have to pass shape's bounding box\n properties. Look at [https://konvajs.org/docs/performance/Shape_Caching.html](https://konvajs.org/docs/performance/Shape_Caching.html) for more information.",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "increase canvas size by `offset` pixel in all directions.",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "when set to true, a red border will be drawn around the cached\n region for debugging purposes",
        "name": "config.drawBorder"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "change quality (or pixel ratio) of cached image. pixelRatio = 2 will produce 2x sized cache.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "control imageSmoothingEnabled property of created canvas for cache",
        "name": "config.imageSmoothingEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "change quality (or pixel ratio) of cached hit canvas.",
        "name": "config.hitCanvasPixelRatio"
      }
    ],
    "examples": [
      "// cache a shape with the x,y position of the bounding box at the center and\n// the width and height of the bounding box equal to the width and height of\n// the shape obtained from shape.width() and shape.height()\nimage.cache();\n\n// cache a node and define the bounding box position and size\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200\n});\n\n// cache a node and draw a red border around the bounding box\n// for debugging purposes\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200,\n  offset : 10,\n  drawBorder: true\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2650,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2739
  },
  {
    "id": "Konva.Ring#isCached",
    "longname": "Konva.Ring#isCached",
    "name": "isCached",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isCached",
    "inherited": true,
    "description": "determine if node is currently cached",
    "memberof": "Konva.Ring",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2788,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2740
  },
  {
    "id": "Konva.Ring#getClientRect",
    "longname": "Konva.Ring#getClientRect",
    "name": "getClientRect",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getClientRect",
    "inherited": true,
    "description": "Return client rectangle `{x, y, width, height}` of node. This rectangle also include all styling (strokes, shadows, etc).\nThe purpose of the method is similar to getBoundingClientRect API of the DOM.",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply transform to node for calculating rect?",
        "name": "config.skipTransform"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply shadow to the node for calculating bound box?",
        "name": "config.skipShadow"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply stroke to the node for calculating bound box?",
        "name": "config.skipStroke"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "calculate client rect relative to one of the parents",
        "name": "config.relativeTo"
      }
    ],
    "examples": [
      "var rect = new Konva.Rect({\n     width : 100,\n     height : 100,\n     x : 50,\n     y : 50,\n     strokeWidth : 4,\n     stroke : 'black',\n     offsetX : 50,\n     scaleY : 2\n});\n\n// get client rect without think off transformations (position, rotation, scale, offset, etc)\nrect.getClientRect({ skipTransform: true});\n// returns {\n//     x : -2,   // two pixels for stroke / 2\n//     y : -2,\n//     width : 104, // increased by 4 for stroke\n//     height : 104\n//}\n\n// get client rect with transformation applied\nrect.getClientRect();\n// returns Object {x: -2, y: 46, width: 104, height: 208}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "rect with `{x, y, width, height}` properties"
      }
    ],
    "meta": {
      "lineno": 2797,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2741
  },
  {
    "id": "Konva.Ring#on",
    "longname": "Konva.Ring#on",
    "name": "on",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#on",
    "inherited": true,
    "description": "bind events to the node. KonvaJS supports mouseover, mousemove,\n mouseout, mouseenter, mouseleave, mousedown, mouseup, wheel, contextmenu, click, dblclick, touchstart, touchmove,\n touchend, tap, dbltap, dragstart, dragmove, and dragend events.\n Pass in a string of events delimited by a space to bind multiple events at once\n such as 'mousedown mouseup mousemove'. Include a namespace to bind an\n event by name such as 'click.foobar'.",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'click', 'mousedown touchstart', 'mousedown.foo touchstart.foo'",
        "name": "evtStr"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The handler function. The first argument of that function is event object. Event object has `target` as main target of the event, `currentTarget` as current node listener and `evt` as native browser event.",
        "name": "handler"
      }
    ],
    "examples": [
      "// add click listener\nnode.on('click', function() {\n  console.log('you clicked me!');\n});\n\n// get the target node\nnode.on('click', function(evt) {\n  console.log(evt.target);\n});\n\n// stop event propagation\nnode.on('click', function(evt) {\n  evt.cancelBubble = true;\n});\n\n// bind multiple listeners\nnode.on('click touchstart', function() {\n  console.log('you clicked/touched me!');\n});\n\n// namespace listener\nnode.on('click.foo', function() {\n  console.log('you clicked/touched me!');\n});\n\n// get the event type\nnode.on('click tap', function(evt) {\n  var eventType = evt.type;\n});\n\n// get native event object\nnode.on('click tap', function(evt) {\n  var nativeEvent = evt.evt;\n});\n\n// for change events, get the old and new val\nnode.on('xChange', function(evt) {\n  var oldVal = evt.oldVal;\n  var newVal = evt.newVal;\n});\n\n// get event targets\n// with event delegations\nlayer.on('click', 'Group', function(evt) {\n  var shape = evt.target;\n  var group = evt.currentTarget;\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2919,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2742
  },
  {
    "id": "Konva.Ring#off",
    "longname": "Konva.Ring#off",
    "name": "off",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#off",
    "inherited": true,
    "description": "remove event bindings from the node. Pass in a string of\n event types delimmited by a space to remove multiple event\n bindings at once such as 'mousedown mouseup mousemove'.\n include a namespace to remove an event binding by name\n such as 'click.foobar'. If you only give a name like '.foobar',\n all events in that namespace will be removed.",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'click', 'mousedown touchstart', '.foobar'",
        "name": "evtStr"
      }
    ],
    "examples": [
      "// remove listener\nnode.off('click');\n\n// remove multiple listeners\nnode.off('click touchstart');\n\n// remove listener by name\nnode.off('click.foo');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3007,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2743
  },
  {
    "id": "Konva.Ring#remove",
    "longname": "Konva.Ring#remove",
    "name": "remove",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#remove",
    "inherited": true,
    "description": "remove a node from parent, but don't destroy. You can reuse the node later.",
    "memberof": "Konva.Ring",
    "examples": [
      "node.remove();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3088,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2744
  },
  {
    "id": "Konva.Ring#destroy",
    "longname": "Konva.Ring#destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#destroy",
    "inherited": true,
    "description": "remove and destroy a node. Kill it and delete forever! You should not reuse node after destroy().\nIf the node is a container (Group, Stage or Layer) it will destroy all children too.",
    "memberof": "Konva.Ring",
    "examples": [
      "node.destroy();"
    ],
    "meta": {
      "lineno": 3125,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2745
  },
  {
    "id": "Konva.Ring#getAttr",
    "longname": "Konva.Ring#getAttr",
    "name": "getAttr",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAttr",
    "inherited": true,
    "description": "get attr",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "attr"
      }
    ],
    "examples": [
      "var x = node.getAttr('x');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer",
            "String",
            "Object",
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3138,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2746
  },
  {
    "id": "Konva.Ring#getAncestors",
    "longname": "Konva.Ring#getAncestors",
    "name": "getAncestors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAncestors",
    "inherited": true,
    "description": "get ancestors",
    "memberof": "Konva.Ring",
    "examples": [
      "shape.getAncestors().forEach(function(node) {\n  console.log(node.getId());\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3155,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2747
  },
  {
    "id": "Konva.Ring#getAttrs",
    "longname": "Konva.Ring#getAttrs",
    "name": "getAttrs",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAttrs",
    "inherited": true,
    "description": "get attrs object literal",
    "memberof": "Konva.Ring",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3173,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2748
  },
  {
    "id": "Konva.Ring#setAttrs",
    "longname": "Konva.Ring#setAttrs",
    "name": "setAttrs",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#setAttrs",
    "inherited": true,
    "description": "set multiple attrs at once using an object literal",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "object containing key value pairs",
        "name": "config"
      }
    ],
    "examples": [
      "node.setAttrs({\n  x: 5,\n  fill: 'red'\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3182,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2749
  },
  {
    "id": "Konva.Ring#isListening",
    "longname": "Konva.Ring#isListening",
    "name": "isListening",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isListening",
    "inherited": true,
    "description": "determine if node is listening for events by taking into account ancestors.\n\nParent    | Self      | isListening\nlistening | listening |\n----------+-----------+------------\nT         | T         | T\nT         | F         | F\nF         | T         | F\nF         | F         | F",
    "memberof": "Konva.Ring",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3217,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2750
  },
  {
    "id": "Konva.Ring#isVisible",
    "longname": "Konva.Ring#isVisible",
    "name": "isVisible",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isVisible",
    "inherited": true,
    "description": "determine if node is visible by taking into account ancestors.\n\nParent    | Self      | isVisible\nvisible   | visible   |\n----------+-----------+------------\nT         | T         | T\nT         | F         | F\nF         | T         | F\nF         | F         | F",
    "memberof": "Konva.Ring",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3248,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2751
  },
  {
    "id": "Konva.Ring#show",
    "longname": "Konva.Ring#show",
    "name": "show",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#show",
    "inherited": true,
    "description": "show node. set visible = true",
    "memberof": "Konva.Ring",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3300,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2752
  },
  {
    "id": "Konva.Ring#hide",
    "longname": "Konva.Ring#hide",
    "name": "hide",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hide",
    "inherited": true,
    "description": "hide node.  Hidden nodes are no longer detectable",
    "memberof": "Konva.Ring",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3310,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2753
  },
  {
    "id": "Konva.Ring#getAbsoluteZIndex",
    "longname": "Konva.Ring#getAbsoluteZIndex",
    "name": "getAbsoluteZIndex",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteZIndex",
    "inherited": true,
    "description": "get absolute z-index which takes into account sibling\n and ancestor indices",
    "memberof": "Konva.Ring",
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3323,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2754
  },
  {
    "id": "Konva.Ring#getDepth",
    "longname": "Konva.Ring#getDepth",
    "name": "getDepth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getDepth",
    "inherited": true,
    "description": "get node depth in node tree.  Returns an integer.\n e.g. Stage depth will always be 0.  Layers will always be 1.  Groups and Shapes will always\n be >= 2",
    "memberof": "Konva.Ring",
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3355,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2755
  },
  {
    "id": "Konva.Ring#getRelativePointerPosition",
    "longname": "Konva.Ring#getRelativePointerPosition",
    "name": "getRelativePointerPosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getRelativePointerPosition",
    "inherited": true,
    "description": "get position of first pointer (like mouse or first touch) relative to local coordinates of current node",
    "memberof": "Konva.Ring",
    "examples": [
      "// let's think we have a rectangle at position x = 10, y = 10\n// now we clicked at x = 15, y = 15 of the stage\n// if you want to know position of the click, related to the rectangle you can use\nrect.getRelativePointerPosition();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3398,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2756
  },
  {
    "id": "Konva.Ring#getAbsolutePosition",
    "longname": "Konva.Ring#getAbsolutePosition",
    "name": "getAbsolutePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsolutePosition",
    "inherited": true,
    "description": "get absolute position of a node. That function can be used to calculate absolute position, but relative to any ancestor",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "optional ancestor node",
        "name": "Ancestor"
      }
    ],
    "examples": [
      "// returns absolute position relative to top-left corner of canvas\nnode.getAbsolutePosition();\n\n// calculate absolute position of node, inside stage\n// so stage transforms are ignored\nnode.getAbsolutePosition(stage)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3426,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2757
  },
  {
    "id": "Konva.Ring#move",
    "longname": "Konva.Ring#move",
    "name": "move",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#move",
    "inherited": true,
    "description": "move node by an amount relative to its current position",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "change"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "change.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "change.y"
      }
    ],
    "examples": [
      "// move node in x direction by 1px and y direction by 2px\nnode.move({\n  x: 1,\n  y: 2\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3514,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2758
  },
  {
    "id": "Konva.Ring#rotate",
    "longname": "Konva.Ring#rotate",
    "name": "rotate",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#rotate",
    "inherited": true,
    "description": "rotate node by an amount in degrees relative to its current rotation",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "theta"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3559,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2759
  },
  {
    "id": "Konva.Ring#moveToTop",
    "longname": "Konva.Ring#moveToTop",
    "name": "moveToTop",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveToTop",
    "inherited": true,
    "description": "move node to the top of its siblings",
    "memberof": "Konva.Ring",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3570,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2760
  },
  {
    "id": "Konva.Ring#moveUp",
    "longname": "Konva.Ring#moveUp",
    "name": "moveUp",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveUp",
    "inherited": true,
    "description": "move node up",
    "memberof": "Konva.Ring",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "flag is moved or not"
      }
    ],
    "meta": {
      "lineno": 3590,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2761
  },
  {
    "id": "Konva.Ring#moveDown",
    "longname": "Konva.Ring#moveDown",
    "name": "moveDown",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveDown",
    "inherited": true,
    "description": "move node down",
    "memberof": "Konva.Ring",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3610,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2762
  },
  {
    "id": "Konva.Ring#moveToBottom",
    "longname": "Konva.Ring#moveToBottom",
    "name": "moveToBottom",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveToBottom",
    "inherited": true,
    "description": "move node to the bottom of its siblings",
    "memberof": "Konva.Ring",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3630,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2763
  },
  {
    "id": "Konva.Ring#getAbsoluteOpacity",
    "longname": "Konva.Ring#getAbsoluteOpacity",
    "name": "getAbsoluteOpacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteOpacity",
    "inherited": true,
    "description": "get absolute opacity",
    "memberof": "Konva.Ring",
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3668,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2764
  },
  {
    "id": "Konva.Ring#moveTo",
    "longname": "Konva.Ring#moveTo",
    "name": "moveTo",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveTo",
    "inherited": true,
    "description": "move node to another container",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Container"
          ]
        },
        "name": "newContainer"
      }
    ],
    "examples": [
      "// move node from current layer into layer2\nnode.moveTo(layer2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3685,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2765
  },
  {
    "id": "Konva.Ring#toObject",
    "longname": "Konva.Ring#toObject",
    "name": "toObject",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toObject",
    "inherited": true,
    "description": "convert Node into an object for serialization.  Returns an object.",
    "memberof": "Konva.Ring",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3703,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2766
  },
  {
    "id": "Konva.Ring#toJSON",
    "longname": "Konva.Ring#toJSON",
    "name": "toJSON",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toJSON",
    "inherited": true,
    "description": "convert Node into a JSON string.  Returns a JSON string.",
    "memberof": "Konva.Ring",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3736,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2767
  },
  {
    "id": "Konva.Ring#getParent",
    "longname": "Konva.Ring#getParent",
    "name": "getParent",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getParent",
    "inherited": true,
    "description": "get parent container",
    "memberof": "Konva.Ring",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3745,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2768
  },
  {
    "id": "Konva.Ring#findAncestors",
    "longname": "Konva.Ring#findAncestors",
    "name": "findAncestors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#findAncestors",
    "inherited": true,
    "description": "get all ancestors (parent then parent of the parent, etc) of the node",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "selector for search",
        "name": "selector"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "show we think that node is ancestro itself?",
        "name": "includeSelf"
      },
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "optional": true,
        "description": "optional node where we need to stop searching (one of ancestors)",
        "name": "stopNode"
      }
    ],
    "examples": [
      "// get one of the parent group\nvar parentGroups = node.findAncestors('Group');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "[ancestors]"
      }
    ],
    "meta": {
      "lineno": 3754,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2769
  },
  {
    "id": "Konva.Ring#findAncestor",
    "longname": "Konva.Ring#findAncestor",
    "name": "findAncestor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#findAncestor",
    "inherited": true,
    "description": "get ancestor (parent or parent of the parent, etc) of the node that match passed selector",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "selector for search",
        "name": "selector"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "show we think that node is ancestro itself?",
        "name": "includeSelf"
      },
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "optional": true,
        "description": "optional node where we need to stop searching (one of ancestors)",
        "name": "stopNode"
      }
    ],
    "examples": [
      "// get one of the parent group\nvar group = node.findAncestors('.mygroup');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "description": "ancestor"
      }
    ],
    "meta": {
      "lineno": 3786,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2770
  },
  {
    "id": "Konva.Ring#getLayer",
    "longname": "Konva.Ring#getLayer",
    "name": "getLayer",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getLayer",
    "inherited": true,
    "description": "get layer ancestor",
    "memberof": "Konva.Ring",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Layer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3837,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2771
  },
  {
    "id": "Konva.Ring#getStage",
    "longname": "Konva.Ring#getStage",
    "name": "getStage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getStage",
    "inherited": true,
    "description": "get stage ancestor",
    "memberof": "Konva.Ring",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Stage"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3847,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2772
  },
  {
    "id": "Konva.Ring#fire",
    "longname": "Konva.Ring#fire",
    "name": "fire",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#fire",
    "inherited": true,
    "description": "fire event",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "event type.  can be a regular event, like click, mouseover, or mouseout, or it can be a custom event, like myCustomEvent",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "Event"
          ]
        },
        "optional": true,
        "description": "event object",
        "name": "evt"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "setting the value to false, or leaving it undefined, will result in the event\n not bubbling.  Setting the value to true will result in the event bubbling.",
        "name": "bubble"
      }
    ],
    "examples": [
      "// manually fire click event\nnode.fire('click');\n\n// fire custom event\nnode.fire('foo');\n\n// fire custom event with custom event object\nnode.fire('foo', {\n  bar: 10\n});\n\n// fire click event that bubbles\nnode.fire('click', null, true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3865,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2773
  },
  {
    "id": "Konva.Ring#getAbsoluteTransform",
    "longname": "Konva.Ring#getAbsoluteTransform",
    "name": "getAbsoluteTransform",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteTransform",
    "inherited": true,
    "description": "get absolute transform of the node which takes into\n account its ancestor transforms",
    "memberof": "Konva.Ring",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3901,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2774
  },
  {
    "id": "Konva.Ring#getAbsoluteScale",
    "longname": "Konva.Ring#getAbsoluteScale",
    "name": "getAbsoluteScale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteScale",
    "inherited": true,
    "description": "get absolute scale of the node which takes into\n account its ancestor scales",
    "memberof": "Konva.Ring",
    "examples": [
      "// get absolute scale x\nvar scaleX = node.getAbsoluteScale().x;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3961,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2775
  },
  {
    "id": "Konva.Ring#getAbsoluteRotation",
    "longname": "Konva.Ring#getAbsoluteRotation",
    "name": "getAbsoluteRotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteRotation",
    "inherited": true,
    "description": "get absolute rotation of the node which takes into\n account its ancestor rotations",
    "memberof": "Konva.Ring",
    "examples": [
      "// get absolute rotation\nvar rotation = node.getAbsoluteRotation();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3989,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2776
  },
  {
    "id": "Konva.Ring#getTransform",
    "longname": "Konva.Ring#getTransform",
    "name": "getTransform",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getTransform",
    "inherited": true,
    "description": "get transform of the node",
    "memberof": "Konva.Ring",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4009,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2777
  },
  {
    "id": "Konva.Ring#clone",
    "longname": "Konva.Ring#clone",
    "name": "clone",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#clone",
    "inherited": true,
    "description": "clone node.  Returns a new Node instance with identical attributes.  You can also override\n the node properties with an object literal, enabling you to use an existing node as a template\n for another node",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "override attrs",
        "name": "obj"
      }
    ],
    "examples": [
      "// simple clone\nvar clone = node.clone();\n\n// clone a node and override the x position\nvar clone = rect.clone({\n  x: 5\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4044,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2778
  },
  {
    "id": "Konva.Ring#toCanvas",
    "longname": "Konva.Ring#toCanvas",
    "name": "toCanvas",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toCanvas",
    "inherited": true,
    "description": "converts node into an canvas element.",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output canvas. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var canvas = node.toCanvas();"
    ],
    "meta": {
      "lineno": 4119,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2779
  },
  {
    "id": "Konva.Ring#toDataURL",
    "longname": "Konva.Ring#toDataURL",
    "name": "toDataURL",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toDataURL",
    "inherited": true,
    "description": "Creates a composite data URL (base64 string). If MIME type is not\nspecified, then \"image/png\" will result. For \"image/jpeg\", specify a quality\nlevel as quality (range 0.0 - 1.0)",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"image/png\" or \"image/jpeg\".\n \"image/png\" is the default",
        "name": "config.mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "jpeg quality.  If using an \"image/jpeg\" mimeType,\n you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n is very high quality",
        "name": "config.quality"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output image url. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4140,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2780
  },
  {
    "id": "Konva.Ring#toImage",
    "longname": "Konva.Ring#toImage",
    "name": "toImage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toImage",
    "inherited": true,
    "description": "converts node into an image.  Since the toImage\n method is asynchronous, the resulting image can only be retrieved from the config callback\n or the returned Promise.  toImage is most commonly used\n to cache complex drawings as an image so that they don't have to constantly be redrawn",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"image/png\" or \"image/jpeg\".\n \"image/png\" is the default",
        "name": "config.mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "jpeg quality.  If using an \"image/jpeg\" mimeType,\n you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n is very high quality",
        "name": "config.quality"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output image. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var image = node.toImage({\n  callback(img) {\n    // do stuff with img\n  }\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Image>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4172,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2781
  },
  {
    "id": "Konva.Ring#toBlob",
    "longname": "Konva.Ring#toBlob",
    "name": "toBlob",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toBlob",
    "inherited": true,
    "description": "Converts node into a blob.  Since the toBlob method is asynchronous,\n the resulting blob can only be retrieved from the config callback\n or the returned Promise.",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output canvas. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var blob = await node.toBlob({});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Blob>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4219,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2782
  },
  {
    "id": "Konva.Ring#getClassName",
    "longname": "Konva.Ring#getClassName",
    "name": "getClassName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getClassName",
    "inherited": true,
    "description": "get class name, which may return Stage, Layer, Group, or shape class names like Rect, Circle, Text, etc.",
    "memberof": "Konva.Ring",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4267,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2783
  },
  {
    "id": "Konva.Ring#getType",
    "longname": "Konva.Ring#getType",
    "name": "getType",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getType",
    "inherited": true,
    "description": "get the node type, which may return Stage, Layer, Group, or Shape",
    "memberof": "Konva.Ring",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4276,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2784
  },
  {
    "id": "Konva.Ring#addName",
    "longname": "Konva.Ring#addName",
    "name": "addName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#addName",
    "inherited": true,
    "description": "add name to node",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red');\nnode.addName('selected');\nnode.name(); // return 'red selected'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4324,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2785
  },
  {
    "id": "Konva.Ring#hasName",
    "longname": "Konva.Ring#hasName",
    "name": "hasName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hasName",
    "inherited": true,
    "description": "check is node has name",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red');\nnode.hasName('red');   // return true\nnode.hasName('selected'); // return false\nnode.hasName(''); // return false"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4343,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2786
  },
  {
    "id": "Konva.Ring#removeName",
    "longname": "Konva.Ring#removeName",
    "name": "removeName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#removeName",
    "inherited": true,
    "description": "remove name from node",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red selected');\nnode.removeName('selected');\nnode.hasName('selected'); // return false\nnode.name(); // return 'red'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4367,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2787
  },
  {
    "id": "Konva.Ring#setAttr",
    "longname": "Konva.Ring#setAttr",
    "name": "setAttr",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#setAttr",
    "inherited": true,
    "description": "set attr",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "attr"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "name": "val"
      }
    ],
    "examples": [
      "node.setAttr('x', 5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4388,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2788
  },
  {
    "id": "Konva.Ring#draw",
    "longname": "Konva.Ring#draw",
    "name": "draw",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#draw",
    "inherited": true,
    "description": "draw both scene and hit graphs.  If the node being drawn is the stage, all of the layers will be cleared and redrawn",
    "memberof": "Konva.Ring",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4511,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2789
  },
  {
    "id": "Konva.Ring#startDrag",
    "longname": "Konva.Ring#startDrag",
    "name": "startDrag",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#startDrag",
    "inherited": true,
    "description": "initiate drag and drop.",
    "memberof": "Konva.Ring",
    "meta": {
      "lineno": 4544,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2790
  },
  {
    "id": "Konva.Ring#stopDrag",
    "longname": "Konva.Ring#stopDrag",
    "name": "stopDrag",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#stopDrag",
    "inherited": true,
    "description": "stop drag and drop",
    "memberof": "Konva.Ring",
    "meta": {
      "lineno": 4590,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2791
  },
  {
    "id": "Konva.Ring#isDragging",
    "longname": "Konva.Ring#isDragging",
    "name": "isDragging",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isDragging",
    "inherited": true,
    "description": "determine if node is currently in drag and drop mode",
    "memberof": "Konva.Ring",
    "meta": {
      "lineno": 4607,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2792
  },
  {
    "id": "Konva.Ring#isClientRectOnScreen",
    "longname": "Konva.Ring#isClientRectOnScreen",
    "name": "isClientRectOnScreen",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isClientRectOnScreen",
    "inherited": true,
    "description": "determine if node (at least partially) is currently in user-visible area",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number",
            "Object"
          ]
        },
        "description": "optional margin in pixels",
        "name": "margin"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "margin.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "margin.y"
      }
    ],
    "examples": [
      "// get index\n// default calculations\nvar isOnScreen = node.isClientRectOnScreen()\n// increase object size (or screen size) for cases when objects close to the screen still need to be marked as \"visible\"\nvar isOnScreen = node.isClientRectOnScreen({ x: stage.width(), y: stage.height() })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4671,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2793
  },
  {
    "id": "Konva.Ring#zIndex",
    "longname": "Konva.Ring#zIndex",
    "name": "zIndex",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#zIndex",
    "inherited": true,
    "description": "get/set zIndex relative to the node's siblings who share the same parent.\nPlease remember that zIndex is not absolute (like in CSS). It is relative to parent element only.",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "index"
      }
    ],
    "examples": [
      "// get index\nvar index = node.zIndex();\n\n// set index\nnode.zIndex(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4764,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2794
  },
  {
    "id": "Konva.Ring#absolutePosition",
    "longname": "Konva.Ring#absolutePosition",
    "name": "absolutePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#absolutePosition",
    "inherited": true,
    "description": "get/set node absolute position",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "// get position\nvar position = node.absolutePosition();\n\n// set position\nnode.absolutePosition({\n  x: 5,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4779,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2795
  },
  {
    "id": "Konva.Ring#position",
    "longname": "Konva.Ring#position",
    "name": "position",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#position",
    "inherited": true,
    "description": "get/set node position relative to parent",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "// get position\nvar position = node.position();\n\n// set position\nnode.position({\n  x: 5,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4799,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2796
  },
  {
    "id": "Konva.Ring#x",
    "longname": "Konva.Ring#x",
    "name": "x",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#x",
    "inherited": true,
    "description": "get/set x position",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get x\nvar x = node.x();\n\n// set x\nnode.x(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4818,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2797
  },
  {
    "id": "Konva.Ring#y",
    "longname": "Konva.Ring#y",
    "name": "y",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#y",
    "inherited": true,
    "description": "get/set y position",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get y\nvar y = node.y();\n\n// set y\nnode.y(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4832,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2798
  },
  {
    "id": "Konva.Ring#globalCompositeOperation",
    "longname": "Konva.Ring#globalCompositeOperation",
    "name": "globalCompositeOperation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#globalCompositeOperation",
    "inherited": true,
    "description": "get/set globalCompositeOperation of a node. globalCompositeOperation DOESN'T affect hit graph of nodes. So they are still trigger to events as they have default \"source-over\" globalCompositeOperation.",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "type"
      }
    ],
    "examples": [
      "// get globalCompositeOperation\nvar globalCompositeOperation = shape.globalCompositeOperation();\n\n// set globalCompositeOperation\nshape.globalCompositeOperation('source-in');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4846,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2799
  },
  {
    "id": "Konva.Ring#opacity",
    "longname": "Konva.Ring#opacity",
    "name": "opacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#opacity",
    "inherited": true,
    "description": "get/set opacity.  Opacity values range from 0 to 1.\n A node with an opacity of 0 is fully transparent, and a node\n with an opacity of 1 is fully opaque",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "opacity"
      }
    ],
    "examples": [
      "// get opacity\nvar opacity = node.opacity();\n\n// set opacity\nnode.opacity(0.5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4860,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2800
  },
  {
    "id": "Konva.Ring#name",
    "longname": "Konva.Ring#name",
    "name": "name",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#name",
    "inherited": true,
    "description": "get/set name.",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "// get name\nvar name = node.name();\n\n// set name\nnode.name('foo');\n\n// also node may have multiple names (as css classes)\nnode.name('foo bar');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4876,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2801
  },
  {
    "id": "Konva.Ring#id",
    "longname": "Konva.Ring#id",
    "name": "id",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#id",
    "inherited": true,
    "description": "get/set id. Id is global for whole page.",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "id"
      }
    ],
    "examples": [
      "// get id\nvar name = node.id();\n\n// set id\nnode.id('foo');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4893,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2802
  },
  {
    "id": "Konva.Ring#rotation",
    "longname": "Konva.Ring#rotation",
    "name": "rotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#rotation",
    "inherited": true,
    "description": "get/set rotation in degrees",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get rotation in degrees\nvar rotation = node.rotation();\n\n// set rotation in degrees\nnode.rotation(45);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4907,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2803
  },
  {
    "id": "Konva.Ring#scale",
    "longname": "Konva.Ring#scale",
    "name": "scale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scale",
    "inherited": true,
    "description": "get/set scale",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.y"
      }
    ],
    "examples": [
      "// get scale\nvar scale = node.scale();\n\n// set scale\nshape.scale({\n  x: 2,\n  y: 3\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4921,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2804
  },
  {
    "id": "Konva.Ring#scaleX",
    "longname": "Konva.Ring#scaleX",
    "name": "scaleX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scaleX",
    "inherited": true,
    "description": "get/set scale x",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get scale x\nvar scaleX = node.scaleX();\n\n// set scale x\nnode.scaleX(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4940,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2805
  },
  {
    "id": "Konva.Ring#scaleY",
    "longname": "Konva.Ring#scaleY",
    "name": "scaleY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scaleY",
    "inherited": true,
    "description": "get/set scale y",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get scale y\nvar scaleY = node.scaleY();\n\n// set scale y\nnode.scaleY(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4954,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2806
  },
  {
    "id": "Konva.Ring#skew",
    "longname": "Konva.Ring#skew",
    "name": "skew",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skew",
    "inherited": true,
    "description": "get/set skew",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "skew"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "skew.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "skew.y"
      }
    ],
    "examples": [
      "// get skew\nvar skew = node.skew();\n\n// set skew\nnode.skew({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4968,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2807
  },
  {
    "id": "Konva.Ring#skewX",
    "longname": "Konva.Ring#skewX",
    "name": "skewX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skewX",
    "inherited": true,
    "description": "get/set skew x",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get skew x\nvar skewX = node.skewX();\n\n// set skew x\nnode.skewX(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4987,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2808
  },
  {
    "id": "Konva.Ring#skewY",
    "longname": "Konva.Ring#skewY",
    "name": "skewY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skewY",
    "inherited": true,
    "description": "get/set skew y",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get skew y\nvar skewY = node.skewY();\n\n// set skew y\nnode.skewY(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5001,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2809
  },
  {
    "id": "Konva.Ring#offsetX",
    "longname": "Konva.Ring#offsetX",
    "name": "offsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#offsetX",
    "inherited": true,
    "description": "get/set offset x",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get offset x\nvar offsetX = node.offsetX();\n\n// set offset x\nnode.offsetX(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5033,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2810
  },
  {
    "id": "Konva.Ring#offsetY",
    "longname": "Konva.Ring#offsetY",
    "name": "offsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#offsetY",
    "inherited": true,
    "description": "get/set offset y",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get offset y\nvar offsetY = node.offsetY();\n\n// set offset y\nnode.offsetY(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5047,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2811
  },
  {
    "id": "Konva.Ring#dragDistance",
    "longname": "Konva.Ring#dragDistance",
    "name": "dragDistance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#dragDistance",
    "inherited": true,
    "description": "get/set drag distance",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "distance"
      }
    ],
    "examples": [
      "// get drag distance\nvar dragDistance = node.dragDistance();\n\n// set distance\n// node starts dragging only if pointer moved more then 3 pixels\nnode.dragDistance(3);\n// or set globally\nKonva.dragDistance = 3;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5061,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2812
  },
  {
    "id": "Konva.Ring#width",
    "longname": "Konva.Ring#width",
    "name": "width",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#width",
    "inherited": true,
    "description": "get/set width",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "width"
      }
    ],
    "examples": [
      "// get width\nvar width = node.width();\n\n// set width\nnode.width(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5078,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2813
  },
  {
    "id": "Konva.Ring#height",
    "longname": "Konva.Ring#height",
    "name": "height",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#height",
    "inherited": true,
    "description": "get/set height",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "height"
      }
    ],
    "examples": [
      "// get height\nvar height = node.height();\n\n// set height\nnode.height(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5092,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2814
  },
  {
    "id": "Konva.Ring#listening",
    "longname": "Konva.Ring#listening",
    "name": "listening",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#listening",
    "inherited": true,
    "description": "get/set listening attr.  If you need to determine if a node is listening or not\n  by taking into account its parents, use the isListening() method\n  nodes with listening set to false will not be detected in hit graph\n  so they will be ignored in container.getIntersection() method",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "Can be true, or false.  The default is true.",
        "name": "listening"
      }
    ],
    "examples": [
      "// get listening attr\nvar listening = node.listening();\n\n// stop listening for events, remove node and all its children from hit graph\nnode.listening(false);\n\n// listen to events according to the parent\nnode.listening(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5106,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2815
  },
  {
    "id": "Konva.Ring#preventDefault",
    "longname": "Konva.Ring#preventDefault",
    "name": "preventDefault",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#preventDefault",
    "inherited": true,
    "description": "get/set preventDefault\nBy default all shapes will prevent default behavior\nof a browser on a pointer move or tap.\nthat will prevent native scrolling when you are trying to drag&drop a node\nbut sometimes you may need to enable default actions\nin that case you can set the property to false",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "preventDefault"
      }
    ],
    "examples": [
      "// get preventDefault\nvar shouldPrevent = shape.preventDefault();\n\n// set preventDefault\nshape.preventDefault(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5125,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2816
  },
  {
    "id": "Konva.Ring#filters",
    "longname": "Konva.Ring#filters",
    "name": "filters",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#filters",
    "inherited": true,
    "description": "get/set filters.  Filters are applied to cached canvases",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "array of filters",
        "name": "filters"
      }
    ],
    "examples": [
      "// get filters\nvar filters = node.filters();\n\n// set a single filter\nnode.cache();\nnode.filters([Konva.Filters.Blur]);\n\n// set multiple filters\nnode.cache();\nnode.filters([\n  Konva.Filters.Blur,\n  Konva.Filters.Sepia,\n  Konva.Filters.Invert\n]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5148,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2817
  },
  {
    "id": "Konva.Ring#visible",
    "longname": "Konva.Ring#visible",
    "name": "visible",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#visible",
    "inherited": true,
    "description": "get/set visible attr.  Can be true, or false.  The default is true.\n  If you need to determine if a node is visible or not\n  by taking into account its parents, use the isVisible() method",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "visible"
      }
    ],
    "examples": [
      "// get visible attr\nvar visible = node.visible();\n\n// make invisible\nnode.visible(false);\n\n// make visible (according to the parent)\nnode.visible(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5171,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2818
  },
  {
    "id": "Konva.Ring#transformsEnabled",
    "longname": "Konva.Ring#transformsEnabled",
    "name": "transformsEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#transformsEnabled",
    "inherited": true,
    "description": "get/set transforms that are enabled.  Can be \"all\", \"none\", or \"position\".  The default\n is \"all\"",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// enable position transform only to improve draw performance\nnode.transformsEnabled('position');\n\n// enable all transforms\nnode.transformsEnabled('all');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5191,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2819
  },
  {
    "id": "Konva.Ring#size",
    "longname": "Konva.Ring#size",
    "name": "size",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#size",
    "inherited": true,
    "description": "get/set node size",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "size"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size.height"
      }
    ],
    "examples": [
      "// get node size\nvar size = node.size();\nvar width = size.width;\nvar height = size.height;\n\n// set size\nnode.size({\n  width: 100,\n  height: 200\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5205,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2820
  },
  {
    "id": "Konva.Ring#dragBoundFunc",
    "longname": "Konva.Ring#dragBoundFunc",
    "name": "dragBoundFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#dragBoundFunc",
    "inherited": true,
    "description": "get/set drag bound function.  This is used to override the default\n drag and drop position.",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "name": "dragBoundFunc"
      }
    ],
    "examples": [
      "// get drag bound function\nvar dragBoundFunc = node.dragBoundFunc();\n\n// create vertical drag and drop\nnode.dragBoundFunc(function(pos){\n  // important pos - is absolute position of the node\n  // you should return absolute position too\n  return {\n    x: this.absolutePosition().x,\n    y: pos.y\n  };\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5226,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2821
  },
  {
    "id": "Konva.Ring#draggable",
    "longname": "Konva.Ring#draggable",
    "name": "draggable",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#draggable",
    "inherited": true,
    "description": "get/set draggable flag",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "draggable"
      }
    ],
    "examples": [
      "// get draggable flag\nvar draggable = node.draggable();\n\n// enable drag and drop\nnode.draggable(true);\n\n// disable drag and drop\nnode.draggable(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5248,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2822
  },
  {
    "id": "Konva.Ring#to",
    "longname": "Konva.Ring#to",
    "name": "to",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#to",
    "inherited": true,
    "description": "Tween node properties. Shorter usage of {@link Konva.Tween} object.",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "tween params",
        "name": "params"
      }
    ],
    "examples": [
      "circle.to({\n  x : 50,\n  duration : 0.5,\n  onUpdate: () => console.log('props updated'),\n  onFinish: () => console.log('finished'),\n});"
    ],
    "meta": {
      "lineno": 9588,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2823
  },
  {
    "id": "Konva.Ring#blurRadius",
    "longname": "Konva.Ring#blurRadius",
    "name": "blurRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#blurRadius",
    "inherited": true,
    "description": "get/set blur radius. Use with {@link Konva.Filters.Blur} filter",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "radius"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17517,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2824
  },
  {
    "id": "Konva.Ring#brightness",
    "longname": "Konva.Ring#brightness",
    "name": "brightness",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#brightness",
    "inherited": true,
    "description": "get/set filter brightness.  The brightness is a number between -1 and 1.&nbsp; Positive values\n brighten the pixels and negative values darken them. Use with {@link Konva.Filters.Brighten} filter.",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between -1 and 1",
        "name": "brightness"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17547,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2825
  },
  {
    "id": "Konva.Ring#contrast",
    "longname": "Konva.Ring#contrast",
    "name": "contrast",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#contrast",
    "inherited": true,
    "description": "get/set filter contrast.  The contrast is a number between -100 and 100.\nUse with {@link Konva.Filters.Contrast} filter.",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between -100 and 100",
        "name": "contrast"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17600,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2826
  },
  {
    "id": "Konva.Ring#embossStrength",
    "longname": "Konva.Ring#embossStrength",
    "name": "embossStrength",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossStrength",
    "inherited": true,
    "description": "get/set emboss strength. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1.  Default is 0.5",
        "name": "level"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17725,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2827
  },
  {
    "id": "Konva.Ring#embossWhiteLevel",
    "longname": "Konva.Ring#embossWhiteLevel",
    "name": "embossWhiteLevel",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossWhiteLevel",
    "inherited": true,
    "description": "get/set emboss white level. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1.  Default is 0.5",
        "name": "embossWhiteLevel"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17733,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2828
  },
  {
    "id": "Konva.Ring#embossDirection",
    "longname": "Konva.Ring#embossDirection",
    "name": "embossDirection",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossDirection",
    "inherited": true,
    "description": "get/set emboss direction. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "can be top-left, top, top-right, right, bottom-right, bottom, bottom-left or left\n  The default is top-left",
        "name": "embossDirection"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17741,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2829
  },
  {
    "id": "Konva.Ring#embossBlend",
    "longname": "Konva.Ring#embossBlend",
    "name": "embossBlend",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossBlend",
    "inherited": true,
    "description": "get/set emboss blend. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "embossBlend"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17750,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2830
  },
  {
    "id": "Konva.Ring#enhance",
    "longname": "Konva.Ring#enhance",
    "name": "enhance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#enhance",
    "inherited": true,
    "description": "get/set enhance. Use with {@link Konva.Filters.Enhance} filter. -1 to 1 values",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Float"
          ]
        },
        "name": "amount"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Float"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17864,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2831
  },
  {
    "id": "Konva.Ring#hue",
    "longname": "Konva.Ring#hue",
    "name": "hue",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hue",
    "inherited": true,
    "description": "get/set hsv hue in degrees. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between 0 and 359",
        "name": "hue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17896,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2832
  },
  {
    "id": "Konva.Ring#saturation",
    "longname": "Konva.Ring#saturation",
    "name": "saturation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#saturation",
    "inherited": true,
    "description": "get/set hsv saturation. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the saturation, 1.0 doubles, etc..",
        "name": "saturation"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17904,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2833
  },
  {
    "id": "Konva.Ring#luminance",
    "longname": "Konva.Ring#luminance",
    "name": "luminance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#luminance",
    "inherited": true,
    "description": "get/set hsl luminance. Use with {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "from -1 to 1",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17912,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2834
  },
  {
    "id": "Konva.Ring#value",
    "longname": "Konva.Ring#value",
    "name": "value",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#value",
    "inherited": true,
    "description": "get/set hsv value. Use with {@link Konva.Filters.HSV} filter.",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the value, 1.0 doubles, etc..",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18018,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2835
  },
  {
    "id": "Konva.Ring#kaleidoscopePower",
    "longname": "Konva.Ring#kaleidoscopePower",
    "name": "kaleidoscopePower",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#kaleidoscopePower",
    "inherited": true,
    "description": "get/set kaleidoscope power. Use with {@link Konva.Filters.Kaleidoscope} filter.",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "of kaleidoscope",
        "name": "power"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18243,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2836
  },
  {
    "id": "Konva.Ring#kaleidoscopeAngle",
    "longname": "Konva.Ring#kaleidoscopeAngle",
    "name": "kaleidoscopeAngle",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#kaleidoscopeAngle",
    "inherited": true,
    "description": "get/set kaleidoscope angle. Use with {@link Konva.Filters.Kaleidoscope} filter.",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "degrees"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18251,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2837
  },
  {
    "id": "Konva.Ring#noise",
    "longname": "Konva.Ring#noise",
    "name": "noise",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#noise",
    "inherited": true,
    "description": "get/set noise amount.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Noise} filter.",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "noise"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18437,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2838
  },
  {
    "id": "Konva.Ring#pixelSize",
    "longname": "Konva.Ring#pixelSize",
    "name": "pixelSize",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#pixelSize",
    "inherited": true,
    "description": "get/set pixel size. Use with {@link Konva.Filters.Pixelate} filter.",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "pixelSize"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18522,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2839
  },
  {
    "id": "Konva.Ring#levels",
    "longname": "Konva.Ring#levels",
    "name": "levels",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#levels",
    "inherited": true,
    "description": "get/set levels.  Must be a number between 0 and 1.  Use with {@link Konva.Filters.Posterize} filter.",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1",
        "name": "level"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18552,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2840
  },
  {
    "id": "Konva.Ring#red",
    "longname": "Konva.Ring#red",
    "name": "red",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#red",
    "inherited": true,
    "description": "get/set filter red value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "red"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18596,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2841
  },
  {
    "id": "Konva.Ring#green",
    "longname": "Konva.Ring#green",
    "name": "green",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#green",
    "inherited": true,
    "description": "get/set filter green value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "green"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18616,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2842
  },
  {
    "id": "Konva.Ring#blue",
    "longname": "Konva.Ring#blue",
    "name": "blue",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#blue",
    "inherited": true,
    "description": "get/set filter blue value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "blue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18625,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2843
  },
  {
    "id": "Konva.Ring#alpha",
    "longname": "Konva.Ring#alpha",
    "name": "alpha",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#alpha",
    "inherited": true,
    "description": "get/set filter alpha value. Use with {@link Konva.Filters.RGBA} filter.",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Float"
          ]
        },
        "description": "value between 0 and 1",
        "name": "alpha"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Float"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18718,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2844
  },
  {
    "id": "Konva.Ring#threshold",
    "longname": "Konva.Ring#threshold",
    "name": "threshold",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#threshold",
    "inherited": true,
    "description": "get/set threshold.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Threshold} or {@link Konva.Filters.Mask} filter.",
    "memberof": "Konva.Ring",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "threshold"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18809,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2845
  },
  {
    "id": "Konva.Sprite#hasShadow",
    "longname": "Konva.Sprite#hasShadow",
    "name": "hasShadow",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasShadow",
    "inherited": true,
    "overrides": "Konva.Shape#hasShadow",
    "description": "returns whether or not a shadow will be rendered",
    "memberof": "Konva.Sprite",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 6909,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2846
  },
  {
    "id": "Konva.Sprite#hasFill",
    "longname": "Konva.Sprite#hasFill",
    "name": "hasFill",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasFill",
    "inherited": true,
    "overrides": "Konva.Shape#hasFill",
    "description": "returns whether or not the shape will be filled",
    "memberof": "Konva.Sprite",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7009,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2847
  },
  {
    "id": "Konva.Sprite#hasStroke",
    "longname": "Konva.Sprite#hasStroke",
    "name": "hasStroke",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasStroke",
    "inherited": true,
    "overrides": "Konva.Shape#hasStroke",
    "description": "returns whether or not the shape will be stroked",
    "memberof": "Konva.Sprite",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7030,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2848
  },
  {
    "id": "Konva.Sprite#intersects",
    "longname": "Konva.Sprite#intersects",
    "name": "intersects",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#intersects",
    "inherited": true,
    "overrides": "Konva.Shape#intersects",
    "description": "determines if point is in the shape, regardless if other shapes are on top of it.  Note: because\n this method clears a temporary canvas and then redraws the shape, it performs very poorly if executed many times\n consecutively.  Please use the {@link Konva.Stage#getIntersection} method if at all possible\n because it performs much better",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "point"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "point.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "point.y"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7066,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2849
  },
  {
    "id": "Konva.Sprite#getSelfRect",
    "longname": "Konva.Sprite#getSelfRect",
    "name": "getSelfRect",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#getSelfRect",
    "inherited": true,
    "overrides": "Konva.Shape#getSelfRect",
    "description": "return self rectangle (x, y, width, height) of shape.\nThis method are not taken into account transformation and styles.",
    "memberof": "Konva.Sprite",
    "examples": [
      "rect.getSelfRect();  // return {x:0, y:0, width:rect.width(), height:rect.height()}\ncircle.getSelfRect();  // return {x: - circle.width() / 2, y: - circle.height() / 2, width:circle.width(), height:circle.height()}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "rect with `{x, y, width, height}` properties"
      }
    ],
    "meta": {
      "lineno": 7138,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2850
  },
  {
    "id": "Konva.Sprite#drawHitFromCache",
    "longname": "Konva.Sprite#drawHitFromCache",
    "name": "drawHitFromCache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#drawHitFromCache",
    "inherited": true,
    "overrides": "Konva.Shape#drawHitFromCache",
    "description": "draw hit graph using the cached scene canvas",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "alpha channel threshold that determines whether or not\n a pixel should be drawn onto the hit graph.  Must be a value between 0 and 255.\n The default is 0",
        "name": "alphaThreshold"
      }
    ],
    "examples": [
      "shape.cache();\nshape.drawHitFromCache();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7294,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2851
  },
  {
    "id": "Konva.Sprite#stroke",
    "longname": "Konva.Sprite#stroke",
    "name": "stroke",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#stroke",
    "inherited": true,
    "overrides": "Konva.Shape#stroke",
    "description": "get/set stroke color",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get stroke color\nvar stroke = shape.stroke();\n\n// set stroke color with color string\nshape.stroke('green');\n\n// set stroke color with hex\nshape.stroke('#00ff00');\n\n// set stroke color with rgb\nshape.stroke('rgb(0,255,0)');\n\n// set stroke color with rgba and make it 50% opaque\nshape.stroke('rgba(0,255,0,0.5');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7360,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2852
  },
  {
    "id": "Konva.Sprite#strokeWidth",
    "longname": "Konva.Sprite#strokeWidth",
    "name": "strokeWidth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeWidth",
    "inherited": true,
    "overrides": "Konva.Shape#strokeWidth",
    "description": "get/set stroke width",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "strokeWidth"
      }
    ],
    "examples": [
      "// get stroke width\nvar strokeWidth = shape.strokeWidth();\n\n// set stroke width\nshape.strokeWidth(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7383,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2853
  },
  {
    "id": "Konva.Sprite#fillAfterStrokeEnabled",
    "longname": "Konva.Sprite#fillAfterStrokeEnabled",
    "name": "fillAfterStrokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillAfterStrokeEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#fillAfterStrokeEnabled",
    "description": "get/set fillAfterStrokeEnabled property. By default Konva is drawing filling first, then stroke on top of the fill.\nIn rare situations you may want a different behavior. When you have a stroke first then fill on top of it.\nEspecially useful for Text objects.\nDefault is false.",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "fillAfterStrokeEnabled"
      }
    ],
    "examples": [
      "// get stroke width\nvar fillAfterStrokeEnabled = shape.fillAfterStrokeEnabled();\n\n// set stroke width\nshape.fillAfterStrokeEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7397,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2854
  },
  {
    "id": "Konva.Sprite#hitStrokeWidth",
    "longname": "Konva.Sprite#hitStrokeWidth",
    "name": "hitStrokeWidth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hitStrokeWidth",
    "inherited": true,
    "overrides": "Konva.Shape#hitStrokeWidth",
    "description": "get/set stroke width for hit detection. Default value is \"auto\", it means it will be equals to strokeWidth",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "hitStrokeWidth"
      }
    ],
    "examples": [
      "// get stroke width\nvar hitStrokeWidth = shape.hitStrokeWidth();\n\n// set hit stroke width\nshape.hitStrokeWidth(20);\n// set hit stroke width always equals to scene stroke width\nshape.hitStrokeWidth('auto');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7414,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2855
  },
  {
    "id": "Konva.Sprite#strokeHitEnabled",
    "longname": "Konva.Sprite#strokeHitEnabled",
    "name": "strokeHitEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeHitEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#strokeHitEnabled",
    "description": "**deprecated, use hitStrokeWidth instead!** get/set strokeHitEnabled property. Useful for performance optimization.\nYou may set `shape.strokeHitEnabled(false)`. In this case stroke will be no draw on hit canvas, so hit area\nof shape will be decreased (by lineWidth / 2). Remember that non closed line with `strokeHitEnabled = false`\nwill be not drawn on hit canvas, that is mean line will no trigger pointer events (like mouseover)\nDefault value is true.",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "strokeHitEnabled"
      }
    ],
    "examples": [
      "// get strokeHitEnabled\nvar strokeHitEnabled = shape.strokeHitEnabled();\n\n// set strokeHitEnabled\nshape.strokeHitEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7430,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2856
  },
  {
    "id": "Konva.Sprite#perfectDrawEnabled",
    "longname": "Konva.Sprite#perfectDrawEnabled",
    "name": "perfectDrawEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#perfectDrawEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#perfectDrawEnabled",
    "description": "get/set perfectDrawEnabled. If a shape has fill, stroke and opacity you may set `perfectDrawEnabled` to false to improve performance.\nSee http://konvajs.org/docs/performance/Disable_Perfect_Draw.html for more information.\nDefault value is true",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "perfectDrawEnabled"
      }
    ],
    "examples": [
      "// get perfectDrawEnabled\nvar perfectDrawEnabled = shape.perfectDrawEnabled();\n\n// set perfectDrawEnabled\nshape.perfectDrawEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7448,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2857
  },
  {
    "id": "Konva.Sprite#shadowForStrokeEnabled",
    "longname": "Konva.Sprite#shadowForStrokeEnabled",
    "name": "shadowForStrokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowForStrokeEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#shadowForStrokeEnabled",
    "description": "get/set shadowForStrokeEnabled. Useful for performance optimization.\nYou may set `shape.shadowForStrokeEnabled(false)`. In this case stroke will no effect shadow.\nRemember if you set `shadowForStrokeEnabled = false` for non closed line - that line will have no shadow!.\nDefault value is true",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "shadowForStrokeEnabled"
      }
    ],
    "examples": [
      "// get shadowForStrokeEnabled\nvar shadowForStrokeEnabled = shape.shadowForStrokeEnabled();\n\n// set shadowForStrokeEnabled\nshape.shadowForStrokeEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7464,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2858
  },
  {
    "id": "Konva.Sprite#lineJoin",
    "longname": "Konva.Sprite#lineJoin",
    "name": "lineJoin",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#lineJoin",
    "inherited": true,
    "overrides": "Konva.Shape#lineJoin",
    "description": "get/set line join.  Can be miter, round, or bevel.  The\n default is miter",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "lineJoin"
      }
    ],
    "examples": [
      "// get line join\nvar lineJoin = shape.lineJoin();\n\n// set line join\nshape.lineJoin('round');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7481,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2859
  },
  {
    "id": "Konva.Sprite#lineCap",
    "longname": "Konva.Sprite#lineCap",
    "name": "lineCap",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#lineCap",
    "inherited": true,
    "overrides": "Konva.Shape#lineCap",
    "description": "get/set line cap.  Can be butt, round, or square",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "lineCap"
      }
    ],
    "examples": [
      "// get line cap\nvar lineCap = shape.lineCap();\n\n// set line cap\nshape.lineCap('round');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7496,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2860
  },
  {
    "id": "Konva.Sprite#sceneFunc",
    "longname": "Konva.Sprite#sceneFunc",
    "name": "sceneFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#sceneFunc",
    "inherited": true,
    "overrides": "Konva.Shape#sceneFunc",
    "description": "get/set scene draw function. That function is used to draw the shape on a canvas.\nAlso that function will be used to draw hit area of the shape, in case if hitFunc is not defined.",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "drawing function",
        "name": "drawFunc"
      }
    ],
    "examples": [
      "// get scene draw function\nvar sceneFunc = shape.sceneFunc();\n\n// set scene draw function\nshape.sceneFunc(function(context, shape) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  // like stroke and fill\n  context.fillStrokeShape(shape);\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7510,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2861
  },
  {
    "id": "Konva.Sprite#hitFunc",
    "longname": "Konva.Sprite#hitFunc",
    "name": "hitFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hitFunc",
    "inherited": true,
    "overrides": "Konva.Shape#hitFunc",
    "description": "get/set hit draw function. That function is used to draw custom hit area of a shape.",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "drawing function",
        "name": "drawFunc"
      }
    ],
    "examples": [
      "// get hit draw function\nvar hitFunc = shape.hitFunc();\n\n// set hit draw function\nshape.hitFunc(function(context) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  context.fillStrokeShape(shape);\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7532,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2862
  },
  {
    "id": "Konva.Sprite#dash",
    "longname": "Konva.Sprite#dash",
    "name": "dash",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#dash",
    "inherited": true,
    "overrides": "Konva.Shape#dash",
    "description": "get/set dash array for stroke.",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "dash"
      }
    ],
    "examples": [
      "// apply dashed stroke that is 10px long and 5 pixels apart\n line.dash([10, 5]);\n // apply dashed stroke that is made up of alternating dashed\n // lines that are 10px long and 20px apart, and dots that have\n // a radius of 5px and are 20px apart\n line.dash([10, 20, 0.001, 20]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7552,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2863
  },
  {
    "id": "Konva.Sprite#shadowColor",
    "longname": "Konva.Sprite#shadowColor",
    "name": "shadowColor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowColor",
    "inherited": true,
    "overrides": "Konva.Shape#shadowColor",
    "description": "get/set shadow color",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get shadow color\nvar shadow = shape.shadowColor();\n\n// set shadow color with color string\nshape.shadowColor('green');\n\n// set shadow color with hex\nshape.shadowColor('#00ff00');\n\n// set shadow color with rgb\nshape.shadowColor('rgb(0,255,0)');\n\n// set shadow color with rgba and make it 50% opaque\nshape.shadowColor('rgba(0,255,0,0.5');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7579,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2864
  },
  {
    "id": "Konva.Sprite#shadowBlur",
    "longname": "Konva.Sprite#shadowBlur",
    "name": "shadowBlur",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowBlur",
    "inherited": true,
    "overrides": "Konva.Shape#shadowBlur",
    "description": "get/set shadow blur",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "blur"
      }
    ],
    "examples": [
      "// get shadow blur\nvar shadowBlur = shape.shadowBlur();\n\n// set shadow blur\nshape.shadowBlur(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7602,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2865
  },
  {
    "id": "Konva.Sprite#shadowOpacity",
    "longname": "Konva.Sprite#shadowOpacity",
    "name": "shadowOpacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOpacity",
    "inherited": true,
    "overrides": "Konva.Shape#shadowOpacity",
    "description": "get/set shadow opacity.  must be a value between 0 and 1",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "opacity"
      }
    ],
    "examples": [
      "// get shadow opacity\nvar shadowOpacity = shape.shadowOpacity();\n\n// set shadow opacity\nshape.shadowOpacity(0.5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7616,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2866
  },
  {
    "id": "Konva.Sprite#shadowOffset",
    "longname": "Konva.Sprite#shadowOffset",
    "name": "shadowOffset",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffset",
    "inherited": true,
    "overrides": "Konva.Shape#shadowOffset",
    "description": "get/set shadow offset",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.y"
      }
    ],
    "examples": [
      "// get shadow offset\nvar shadowOffset = shape.shadowOffset();\n\n// set shadow offset\nshape.shadowOffset({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7630,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2867
  },
  {
    "id": "Konva.Sprite#shadowOffsetX",
    "longname": "Konva.Sprite#shadowOffsetX",
    "name": "shadowOffsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffsetX",
    "inherited": true,
    "overrides": "Konva.Shape#shadowOffsetX",
    "description": "get/set shadow offset x",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get shadow offset x\nvar shadowOffsetX = shape.shadowOffsetX();\n\n// set shadow offset x\nshape.shadowOffsetX(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7649,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2868
  },
  {
    "id": "Konva.Sprite#shadowOffsetY",
    "longname": "Konva.Sprite#shadowOffsetY",
    "name": "shadowOffsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffsetY",
    "inherited": true,
    "overrides": "Konva.Shape#shadowOffsetY",
    "description": "get/set shadow offset y",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get shadow offset y\nvar shadowOffsetY = shape.shadowOffsetY();\n\n// set shadow offset y\nshape.shadowOffsetY(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7663,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2869
  },
  {
    "id": "Konva.Sprite#fillPatternImage",
    "longname": "Konva.Sprite#fillPatternImage",
    "name": "fillPatternImage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternImage",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternImage",
    "description": "get/set fill pattern image",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Image"
          ]
        },
        "description": "object",
        "name": "image"
      }
    ],
    "examples": [
      "// get fill pattern image\nvar fillPatternImage = shape.fillPatternImage();\n\n// set fill pattern image\nvar imageObj = new Image();\nimageObj.onload = function() {\n  shape.fillPatternImage(imageObj);\n};\nimageObj.src = 'path/to/image/jpg';"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Image"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7677,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2870
  },
  {
    "id": "Konva.Sprite#fill",
    "longname": "Konva.Sprite#fill",
    "name": "fill",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fill",
    "inherited": true,
    "overrides": "Konva.Shape#fill",
    "description": "get/set fill color",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get fill color\nvar fill = shape.fill();\n\n// set fill color with color string\nshape.fill('green');\n\n// set fill color with hex\nshape.fill('#00ff00');\n\n// set fill color with rgb\nshape.fill('rgb(0,255,0)');\n\n// set fill color with rgba and make it 50% opaque\nshape.fill('rgba(0,255,0,0.5');\n\n// shape without fill\nshape.fill(null);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7695,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2871
  },
  {
    "id": "Konva.Sprite#fillPatternX",
    "longname": "Konva.Sprite#fillPatternX",
    "name": "fillPatternX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternX",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternX",
    "description": "get/set fill pattern x",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern x\nvar fillPatternX = shape.fillPatternX();\n// set fill pattern x\nshape.fillPatternX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7721,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2872
  },
  {
    "id": "Konva.Sprite#fillPatternY",
    "longname": "Konva.Sprite#fillPatternY",
    "name": "fillPatternY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternY",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternY",
    "description": "get/set fill pattern y",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern y\nvar fillPatternY = shape.fillPatternY();\n// set fill pattern y\nshape.fillPatternY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7734,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2873
  },
  {
    "id": "Konva.Sprite#fillLinearGradientColorStops",
    "longname": "Konva.Sprite#fillLinearGradientColorStops",
    "name": "fillLinearGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientColorStops",
    "inherited": true,
    "overrides": "Konva.Shape#fillLinearGradientColorStops",
    "description": "get/set fill linear gradient color stops",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get fill linear gradient color stops\nvar colorStops = shape.fillLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillLinearGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "colorStops"
      }
    ],
    "meta": {
      "lineno": 7747,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2874
  },
  {
    "id": "Konva.Sprite#strokeLinearGradientColorStops",
    "longname": "Konva.Sprite#strokeLinearGradientColorStops",
    "name": "strokeLinearGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientColorStops",
    "inherited": true,
    "overrides": "Konva.Shape#strokeLinearGradientColorStops",
    "description": "get/set stroke linear gradient color stops",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get stroke linear gradient color stops\nvar colorStops = shape.strokeLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.strokeLinearGradientColorStops([0, 'red', 0.5, 'blue', 1, 'green']);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "colorStops"
      }
    ],
    "meta": {
      "lineno": 7762,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2875
  },
  {
    "id": "Konva.Sprite#fillRadialGradientStartRadius",
    "longname": "Konva.Sprite#fillRadialGradientStartRadius",
    "name": "fillRadialGradientStartRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartRadius",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientStartRadius",
    "description": "get/set fill radial gradient start radius",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "radius"
      }
    ],
    "examples": [
      "// get radial gradient start radius\nvar startRadius = shape.fillRadialGradientStartRadius();\n\n// set radial gradient start radius\nshape.fillRadialGradientStartRadius(0);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7777,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2876
  },
  {
    "id": "Konva.Sprite#fillRadialGradientEndRadius",
    "longname": "Konva.Sprite#fillRadialGradientEndRadius",
    "name": "fillRadialGradientEndRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndRadius",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientEndRadius",
    "description": "get/set fill radial gradient end radius",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "radius"
      }
    ],
    "examples": [
      "// get radial gradient end radius\nvar endRadius = shape.fillRadialGradientEndRadius();\n\n// set radial gradient end radius\nshape.fillRadialGradientEndRadius(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7791,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2877
  },
  {
    "id": "Konva.Sprite#fillRadialGradientColorStops",
    "longname": "Konva.Sprite#fillRadialGradientColorStops",
    "name": "fillRadialGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientColorStops",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientColorStops",
    "description": "get/set fill radial gradient color stops",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get fill radial gradient color stops\nvar colorStops = shape.fillRadialGradientColorStops();\n\n// create a radial gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillRadialGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7805,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2878
  },
  {
    "id": "Konva.Sprite#fillPatternRepeat",
    "longname": "Konva.Sprite#fillPatternRepeat",
    "name": "fillPatternRepeat",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternRepeat",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternRepeat",
    "description": "get/set fill pattern repeat.  Can be 'repeat', 'repeat-x', 'repeat-y', or 'no-repeat'.  The default is 'repeat'",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "repeat"
      }
    ],
    "examples": [
      "// get fill pattern repeat\nvar repeat = shape.fillPatternRepeat();\n\n// repeat pattern in x direction only\nshape.fillPatternRepeat('repeat-x');\n\n// do not repeat the pattern\nshape.fillPatternRepeat('no-repeat');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7820,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2879
  },
  {
    "id": "Konva.Sprite#fillEnabled",
    "longname": "Konva.Sprite#fillEnabled",
    "name": "fillEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#fillEnabled",
    "description": "get/set fill enabled flag",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get fill enabled flag\nvar fillEnabled = shape.fillEnabled();\n\n// disable fill\nshape.fillEnabled(false);\n\n// enable fill\nshape.fillEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7837,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2880
  },
  {
    "id": "Konva.Sprite#strokeEnabled",
    "longname": "Konva.Sprite#strokeEnabled",
    "name": "strokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#strokeEnabled",
    "description": "get/set stroke enabled flag",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get stroke enabled flag\nvar strokeEnabled = shape.strokeEnabled();\n\n// disable stroke\nshape.strokeEnabled(false);\n\n// enable stroke\nshape.strokeEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7854,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2881
  },
  {
    "id": "Konva.Sprite#shadowEnabled",
    "longname": "Konva.Sprite#shadowEnabled",
    "name": "shadowEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#shadowEnabled",
    "description": "get/set shadow enabled flag",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get shadow enabled flag\nvar shadowEnabled = shape.shadowEnabled();\n\n// disable shadow\nshape.shadowEnabled(false);\n\n// enable shadow\nshape.shadowEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7871,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2882
  },
  {
    "id": "Konva.Sprite#dashEnabled",
    "longname": "Konva.Sprite#dashEnabled",
    "name": "dashEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#dashEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#dashEnabled",
    "description": "get/set dash enabled flag",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get dash enabled flag\nvar dashEnabled = shape.dashEnabled();\n\n// disable dash\nshape.dashEnabled(false);\n\n// enable dash\nshape.dashEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7888,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2883
  },
  {
    "id": "Konva.Sprite#strokeScaleEnabled",
    "longname": "Konva.Sprite#strokeScaleEnabled",
    "name": "strokeScaleEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeScaleEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#strokeScaleEnabled",
    "description": "get/set strokeScale enabled flag",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get stroke scale enabled flag\nvar strokeScaleEnabled = shape.strokeScaleEnabled();\n\n// disable stroke scale\nshape.strokeScaleEnabled(false);\n\n// enable stroke scale\nshape.strokeScaleEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7905,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2884
  },
  {
    "id": "Konva.Sprite#fillPriority",
    "longname": "Konva.Sprite#fillPriority",
    "name": "fillPriority",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPriority",
    "inherited": true,
    "overrides": "Konva.Shape#fillPriority",
    "description": "get/set fill priority.  can be color, pattern, linear-gradient, or radial-gradient.  The default is color.\n  This is handy if you want to toggle between different fill types.",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "priority"
      }
    ],
    "examples": [
      "// get fill priority\nvar fillPriority = shape.fillPriority();\n\n// set fill priority\nshape.fillPriority('linear-gradient');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7922,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2885
  },
  {
    "id": "Konva.Sprite#fillPatternOffset",
    "longname": "Konva.Sprite#fillPatternOffset",
    "name": "fillPatternOffset",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffset",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternOffset",
    "description": "get/set fill pattern offset",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.y"
      }
    ],
    "examples": [
      "// get fill pattern offset\nvar patternOffset = shape.fillPatternOffset();\n\n// set fill pattern offset\nshape.fillPatternOffset({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7937,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2886
  },
  {
    "id": "Konva.Sprite#fillPatternOffsetX",
    "longname": "Konva.Sprite#fillPatternOffsetX",
    "name": "fillPatternOffsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffsetX",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternOffsetX",
    "description": "get/set fill pattern offset x",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern offset x\nvar patternOffsetX = shape.fillPatternOffsetX();\n\n// set fill pattern offset x\nshape.fillPatternOffsetX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7956,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2887
  },
  {
    "id": "Konva.Sprite#fillPatternOffsetY",
    "longname": "Konva.Sprite#fillPatternOffsetY",
    "name": "fillPatternOffsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffsetY",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternOffsetY",
    "description": "get/set fill pattern offset y",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern offset y\nvar patternOffsetY = shape.fillPatternOffsetY();\n\n// set fill pattern offset y\nshape.fillPatternOffsetY(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7970,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2888
  },
  {
    "id": "Konva.Sprite#fillPatternScale",
    "longname": "Konva.Sprite#fillPatternScale",
    "name": "fillPatternScale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScale",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternScale",
    "description": "get/set fill pattern scale",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.y"
      }
    ],
    "examples": [
      "// get fill pattern scale\nvar patternScale = shape.fillPatternScale();\n\n// set fill pattern scale\nshape.fillPatternScale({\n  x: 2,\n  y: 2\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7984,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2889
  },
  {
    "id": "Konva.Sprite#fillPatternScaleX",
    "longname": "Konva.Sprite#fillPatternScaleX",
    "name": "fillPatternScaleX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScaleX",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternScaleX",
    "description": "get/set fill pattern scale x",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern scale x\nvar patternScaleX = shape.fillPatternScaleX();\n\n// set fill pattern scale x\nshape.fillPatternScaleX(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8003,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2890
  },
  {
    "id": "Konva.Sprite#fillPatternScaleY",
    "longname": "Konva.Sprite#fillPatternScaleY",
    "name": "fillPatternScaleY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScaleY",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternScaleY",
    "description": "get/set fill pattern scale y",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern scale y\nvar patternScaleY = shape.fillPatternScaleY();\n\n// set fill pattern scale y\nshape.fillPatternScaleY(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8017,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2891
  },
  {
    "id": "Konva.Sprite#fillLinearGradientStartPoint",
    "longname": "Konva.Sprite#fillLinearGradientStartPoint",
    "name": "fillLinearGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPoint",
    "inherited": true,
    "overrides": "Konva.Shape#fillLinearGradientStartPoint",
    "description": "get/set fill linear gradient start point",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get fill linear gradient start point\nvar startPoint = shape.fillLinearGradientStartPoint();\n\n// set fill linear gradient start point\nshape.fillLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8034,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2892
  },
  {
    "id": "Konva.Sprite#strokeLinearGradientStartPoint",
    "longname": "Konva.Sprite#strokeLinearGradientStartPoint",
    "name": "strokeLinearGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientStartPoint",
    "inherited": true,
    "overrides": "Konva.Shape#strokeLinearGradientStartPoint",
    "description": "get/set stroke linear gradient start point",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point\nvar startPoint = shape.strokeLinearGradientStartPoint();\n\n// set stroke linear gradient start point\nshape.strokeLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8056,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2893
  },
  {
    "id": "Konva.Sprite#fillLinearGradientStartPointX",
    "longname": "Konva.Sprite#fillLinearGradientStartPointX",
    "name": "fillLinearGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPointX",
    "inherited": true,
    "overrides": "Konva.Shape#fillLinearGradientStartPointX",
    "description": "get/set fill linear gradient start point x",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill linear gradient start point x\nvar startPointX = shape.fillLinearGradientStartPointX();\n\n// set fill linear gradient start point x\nshape.fillLinearGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8075,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2894
  },
  {
    "id": "Konva.Sprite#linearLinearGradientStartPointX",
    "longname": "Konva.Sprite#linearLinearGradientStartPointX",
    "name": "linearLinearGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#linearLinearGradientStartPointX",
    "inherited": true,
    "overrides": "Konva.Shape#linearLinearGradientStartPointX",
    "description": "get/set stroke linear gradient start point x",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point x\nvar startPointX = shape.strokeLinearGradientStartPointX();\n\n// set stroke linear gradient start point x\nshape.strokeLinearGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8089,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2895
  },
  {
    "id": "Konva.Sprite#fillLinearGradientStartPointY",
    "longname": "Konva.Sprite#fillLinearGradientStartPointY",
    "name": "fillLinearGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPointY",
    "inherited": true,
    "overrides": "Konva.Shape#fillLinearGradientStartPointY",
    "description": "get/set fill linear gradient start point y",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill linear gradient start point y\nvar startPointY = shape.fillLinearGradientStartPointY();\n\n// set fill linear gradient start point y\nshape.fillLinearGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8103,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2896
  },
  {
    "id": "Konva.Sprite#strokeLinearGradientStartPointY",
    "longname": "Konva.Sprite#strokeLinearGradientStartPointY",
    "name": "strokeLinearGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientStartPointY",
    "inherited": true,
    "overrides": "Konva.Shape#strokeLinearGradientStartPointY",
    "description": "get/set stroke linear gradient start point y",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point y\nvar startPointY = shape.strokeLinearGradientStartPointY();\n\n// set stroke linear gradient start point y\nshape.strokeLinearGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8117,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2897
  },
  {
    "id": "Konva.Sprite#fillLinearGradientEndPoint",
    "longname": "Konva.Sprite#fillLinearGradientEndPoint",
    "name": "fillLinearGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPoint",
    "inherited": true,
    "overrides": "Konva.Shape#fillLinearGradientEndPoint",
    "description": "get/set fill linear gradient end point",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get fill linear gradient end point\nvar endPoint = shape.fillLinearGradientEndPoint();\n\n// set fill linear gradient end point\nshape.fillLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8134,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2898
  },
  {
    "id": "Konva.Sprite#strokeLinearGradientEndPoint",
    "longname": "Konva.Sprite#strokeLinearGradientEndPoint",
    "name": "strokeLinearGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPoint",
    "inherited": true,
    "overrides": "Konva.Shape#strokeLinearGradientEndPoint",
    "description": "get/set stroke linear gradient end point",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point\nvar endPoint = shape.strokeLinearGradientEndPoint();\n\n// set stroke linear gradient end point\nshape.strokeLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8156,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2899
  },
  {
    "id": "Konva.Sprite#fillLinearGradientEndPointX",
    "longname": "Konva.Sprite#fillLinearGradientEndPointX",
    "name": "fillLinearGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPointX",
    "inherited": true,
    "overrides": "Konva.Shape#fillLinearGradientEndPointX",
    "description": "get/set fill linear gradient end point x",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill linear gradient end point x\nvar endPointX = shape.fillLinearGradientEndPointX();\n\n// set fill linear gradient end point x\nshape.fillLinearGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8175,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2900
  },
  {
    "id": "Konva.Sprite#strokeLinearGradientEndPointX",
    "longname": "Konva.Sprite#strokeLinearGradientEndPointX",
    "name": "strokeLinearGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPointX",
    "inherited": true,
    "overrides": "Konva.Shape#strokeLinearGradientEndPointX",
    "description": "get/set fill linear gradient end point x",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point x\nvar endPointX = shape.strokeLinearGradientEndPointX();\n\n// set stroke linear gradient end point x\nshape.strokeLinearGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8189,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2901
  },
  {
    "id": "Konva.Sprite#fillLinearGradientEndPointY",
    "longname": "Konva.Sprite#fillLinearGradientEndPointY",
    "name": "fillLinearGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPointY",
    "inherited": true,
    "overrides": "Konva.Shape#fillLinearGradientEndPointY",
    "description": "get/set fill linear gradient end point y",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill linear gradient end point y\nvar endPointY = shape.fillLinearGradientEndPointY();\n\n// set fill linear gradient end point y\nshape.fillLinearGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8203,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2902
  },
  {
    "id": "Konva.Sprite#strokeLinearGradientEndPointY",
    "longname": "Konva.Sprite#strokeLinearGradientEndPointY",
    "name": "strokeLinearGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPointY",
    "inherited": true,
    "overrides": "Konva.Shape#strokeLinearGradientEndPointY",
    "description": "get/set stroke linear gradient end point y",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point y\nvar endPointY = shape.strokeLinearGradientEndPointY();\n\n// set stroke linear gradient end point y\nshape.strokeLinearGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8217,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2903
  },
  {
    "id": "Konva.Sprite#fillRadialGradientStartPoint",
    "longname": "Konva.Sprite#fillRadialGradientStartPoint",
    "name": "fillRadialGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPoint",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientStartPoint",
    "description": "get/set fill radial gradient start point",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get fill radial gradient start point\nvar startPoint = shape.fillRadialGradientStartPoint();\n\n// set fill radial gradient start point\nshape.fillRadialGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8234,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2904
  },
  {
    "id": "Konva.Sprite#fillRadialGradientStartPointX",
    "longname": "Konva.Sprite#fillRadialGradientStartPointX",
    "name": "fillRadialGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPointX",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientStartPointX",
    "description": "get/set fill radial gradient start point x",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill radial gradient start point x\nvar startPointX = shape.fillRadialGradientStartPointX();\n\n// set fill radial gradient start point x\nshape.fillRadialGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8253,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2905
  },
  {
    "id": "Konva.Sprite#fillRadialGradientStartPointY",
    "longname": "Konva.Sprite#fillRadialGradientStartPointY",
    "name": "fillRadialGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPointY",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientStartPointY",
    "description": "get/set fill radial gradient start point y",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill radial gradient start point y\nvar startPointY = shape.fillRadialGradientStartPointY();\n\n// set fill radial gradient start point y\nshape.fillRadialGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8267,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2906
  },
  {
    "id": "Konva.Sprite#fillRadialGradientEndPoint",
    "longname": "Konva.Sprite#fillRadialGradientEndPoint",
    "name": "fillRadialGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPoint",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientEndPoint",
    "description": "get/set fill radial gradient end point",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get fill radial gradient end point\nvar endPoint = shape.fillRadialGradientEndPoint();\n\n// set fill radial gradient end point\nshape.fillRadialGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8284,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2907
  },
  {
    "id": "Konva.Sprite#fillRadialGradientEndPointX",
    "longname": "Konva.Sprite#fillRadialGradientEndPointX",
    "name": "fillRadialGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPointX",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientEndPointX",
    "description": "get/set fill radial gradient end point x",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill radial gradient end point x\nvar endPointX = shape.fillRadialGradientEndPointX();\n\n// set fill radial gradient end point x\nshape.fillRadialGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8303,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2908
  },
  {
    "id": "Konva.Sprite#fillRadialGradientEndPointY",
    "longname": "Konva.Sprite#fillRadialGradientEndPointY",
    "name": "fillRadialGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPointY",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientEndPointY",
    "description": "get/set fill radial gradient end point y",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill radial gradient end point y\nvar endPointY = shape.fillRadialGradientEndPointY();\n\n// set fill radial gradient end point y\nshape.fillRadialGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8317,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2909
  },
  {
    "id": "Konva.Sprite#fillPatternRotation",
    "longname": "Konva.Sprite#fillPatternRotation",
    "name": "fillPatternRotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternRotation",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternRotation",
    "description": "get/set fill pattern rotation in degrees",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get fill pattern rotation\nvar patternRotation = shape.fillPatternRotation();\n\n// set fill pattern rotation\nshape.fillPatternRotation(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8331,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2910
  },
  {
    "id": "Konva.Sprite#fillRule",
    "longname": "Konva.Sprite#fillRule",
    "name": "fillRule",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRule",
    "inherited": true,
    "overrides": "Konva.Shape#fillRule",
    "description": "get/set fill rule",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "CanvasFillRule"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get fill rule\nvar fillRule = shape.fillRule();\n\n// set fill rule\nshape.fillRule('evenodd');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8345,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2911
  },
  {
    "id": "Konva.Sprite#clearCache",
    "longname": "Konva.Sprite#clearCache",
    "name": "clearCache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#clearCache",
    "inherited": true,
    "overrides": "Konva.Shape#clearCache",
    "description": "clear cached canvas",
    "memberof": "Konva.Sprite",
    "examples": [
      "node.clearCache();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2632,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2912
  },
  {
    "id": "Konva.Sprite#cache",
    "longname": "Konva.Sprite#cache",
    "name": "cache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#cache",
    "inherited": true,
    "overrides": "Konva.Shape#cache",
    "description": "cache node to improve drawing performance, apply filters, or create more accurate\n hit regions. For all basic shapes size of cache canvas will be automatically detected.\n If you need to cache your custom `Konva.Shape` instance you have to pass shape's bounding box\n properties. Look at [https://konvajs.org/docs/performance/Shape_Caching.html](https://konvajs.org/docs/performance/Shape_Caching.html) for more information.",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "increase canvas size by `offset` pixel in all directions.",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "when set to true, a red border will be drawn around the cached\n region for debugging purposes",
        "name": "config.drawBorder"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "change quality (or pixel ratio) of cached image. pixelRatio = 2 will produce 2x sized cache.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "control imageSmoothingEnabled property of created canvas for cache",
        "name": "config.imageSmoothingEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "change quality (or pixel ratio) of cached hit canvas.",
        "name": "config.hitCanvasPixelRatio"
      }
    ],
    "examples": [
      "// cache a shape with the x,y position of the bounding box at the center and\n// the width and height of the bounding box equal to the width and height of\n// the shape obtained from shape.width() and shape.height()\nimage.cache();\n\n// cache a node and define the bounding box position and size\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200\n});\n\n// cache a node and draw a red border around the bounding box\n// for debugging purposes\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200,\n  offset : 10,\n  drawBorder: true\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2650,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2913
  },
  {
    "id": "Konva.Sprite#isCached",
    "longname": "Konva.Sprite#isCached",
    "name": "isCached",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isCached",
    "inherited": true,
    "overrides": "Konva.Shape#isCached",
    "description": "determine if node is currently cached",
    "memberof": "Konva.Sprite",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2788,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2914
  },
  {
    "id": "Konva.Sprite#getClientRect",
    "longname": "Konva.Sprite#getClientRect",
    "name": "getClientRect",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getClientRect",
    "inherited": true,
    "overrides": "Konva.Shape#getClientRect",
    "description": "Return client rectangle `{x, y, width, height}` of node. This rectangle also include all styling (strokes, shadows, etc).\nThe purpose of the method is similar to getBoundingClientRect API of the DOM.",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply transform to node for calculating rect?",
        "name": "config.skipTransform"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply shadow to the node for calculating bound box?",
        "name": "config.skipShadow"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply stroke to the node for calculating bound box?",
        "name": "config.skipStroke"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "calculate client rect relative to one of the parents",
        "name": "config.relativeTo"
      }
    ],
    "examples": [
      "var rect = new Konva.Rect({\n     width : 100,\n     height : 100,\n     x : 50,\n     y : 50,\n     strokeWidth : 4,\n     stroke : 'black',\n     offsetX : 50,\n     scaleY : 2\n});\n\n// get client rect without think off transformations (position, rotation, scale, offset, etc)\nrect.getClientRect({ skipTransform: true});\n// returns {\n//     x : -2,   // two pixels for stroke / 2\n//     y : -2,\n//     width : 104, // increased by 4 for stroke\n//     height : 104\n//}\n\n// get client rect with transformation applied\nrect.getClientRect();\n// returns Object {x: -2, y: 46, width: 104, height: 208}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "rect with `{x, y, width, height}` properties"
      }
    ],
    "meta": {
      "lineno": 2797,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2915
  },
  {
    "id": "Konva.Sprite#on",
    "longname": "Konva.Sprite#on",
    "name": "on",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#on",
    "inherited": true,
    "overrides": "Konva.Shape#on",
    "description": "bind events to the node. KonvaJS supports mouseover, mousemove,\n mouseout, mouseenter, mouseleave, mousedown, mouseup, wheel, contextmenu, click, dblclick, touchstart, touchmove,\n touchend, tap, dbltap, dragstart, dragmove, and dragend events.\n Pass in a string of events delimited by a space to bind multiple events at once\n such as 'mousedown mouseup mousemove'. Include a namespace to bind an\n event by name such as 'click.foobar'.",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'click', 'mousedown touchstart', 'mousedown.foo touchstart.foo'",
        "name": "evtStr"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The handler function. The first argument of that function is event object. Event object has `target` as main target of the event, `currentTarget` as current node listener and `evt` as native browser event.",
        "name": "handler"
      }
    ],
    "examples": [
      "// add click listener\nnode.on('click', function() {\n  console.log('you clicked me!');\n});\n\n// get the target node\nnode.on('click', function(evt) {\n  console.log(evt.target);\n});\n\n// stop event propagation\nnode.on('click', function(evt) {\n  evt.cancelBubble = true;\n});\n\n// bind multiple listeners\nnode.on('click touchstart', function() {\n  console.log('you clicked/touched me!');\n});\n\n// namespace listener\nnode.on('click.foo', function() {\n  console.log('you clicked/touched me!');\n});\n\n// get the event type\nnode.on('click tap', function(evt) {\n  var eventType = evt.type;\n});\n\n// get native event object\nnode.on('click tap', function(evt) {\n  var nativeEvent = evt.evt;\n});\n\n// for change events, get the old and new val\nnode.on('xChange', function(evt) {\n  var oldVal = evt.oldVal;\n  var newVal = evt.newVal;\n});\n\n// get event targets\n// with event delegations\nlayer.on('click', 'Group', function(evt) {\n  var shape = evt.target;\n  var group = evt.currentTarget;\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2919,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2916
  },
  {
    "id": "Konva.Sprite#off",
    "longname": "Konva.Sprite#off",
    "name": "off",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#off",
    "inherited": true,
    "overrides": "Konva.Shape#off",
    "description": "remove event bindings from the node. Pass in a string of\n event types delimmited by a space to remove multiple event\n bindings at once such as 'mousedown mouseup mousemove'.\n include a namespace to remove an event binding by name\n such as 'click.foobar'. If you only give a name like '.foobar',\n all events in that namespace will be removed.",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'click', 'mousedown touchstart', '.foobar'",
        "name": "evtStr"
      }
    ],
    "examples": [
      "// remove listener\nnode.off('click');\n\n// remove multiple listeners\nnode.off('click touchstart');\n\n// remove listener by name\nnode.off('click.foo');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3007,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2917
  },
  {
    "id": "Konva.Sprite#remove",
    "longname": "Konva.Sprite#remove",
    "name": "remove",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#remove",
    "inherited": true,
    "overrides": "Konva.Shape#remove",
    "description": "remove a node from parent, but don't destroy. You can reuse the node later.",
    "memberof": "Konva.Sprite",
    "examples": [
      "node.remove();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3088,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2918
  },
  {
    "id": "Konva.Sprite#destroy",
    "longname": "Konva.Sprite#destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#destroy",
    "inherited": true,
    "overrides": "Konva.Shape#destroy",
    "description": "remove and destroy a node. Kill it and delete forever! You should not reuse node after destroy().\nIf the node is a container (Group, Stage or Layer) it will destroy all children too.",
    "memberof": "Konva.Sprite",
    "examples": [
      "node.destroy();"
    ],
    "meta": {
      "lineno": 3125,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2919
  },
  {
    "id": "Konva.Sprite#getAttr",
    "longname": "Konva.Sprite#getAttr",
    "name": "getAttr",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAttr",
    "inherited": true,
    "overrides": "Konva.Shape#getAttr",
    "description": "get attr",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "attr"
      }
    ],
    "examples": [
      "var x = node.getAttr('x');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer",
            "String",
            "Object",
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3138,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2920
  },
  {
    "id": "Konva.Sprite#getAncestors",
    "longname": "Konva.Sprite#getAncestors",
    "name": "getAncestors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAncestors",
    "inherited": true,
    "overrides": "Konva.Shape#getAncestors",
    "description": "get ancestors",
    "memberof": "Konva.Sprite",
    "examples": [
      "shape.getAncestors().forEach(function(node) {\n  console.log(node.getId());\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3155,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2921
  },
  {
    "id": "Konva.Sprite#getAttrs",
    "longname": "Konva.Sprite#getAttrs",
    "name": "getAttrs",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAttrs",
    "inherited": true,
    "overrides": "Konva.Shape#getAttrs",
    "description": "get attrs object literal",
    "memberof": "Konva.Sprite",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3173,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2922
  },
  {
    "id": "Konva.Sprite#setAttrs",
    "longname": "Konva.Sprite#setAttrs",
    "name": "setAttrs",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#setAttrs",
    "inherited": true,
    "overrides": "Konva.Shape#setAttrs",
    "description": "set multiple attrs at once using an object literal",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "object containing key value pairs",
        "name": "config"
      }
    ],
    "examples": [
      "node.setAttrs({\n  x: 5,\n  fill: 'red'\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3182,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2923
  },
  {
    "id": "Konva.Sprite#isListening",
    "longname": "Konva.Sprite#isListening",
    "name": "isListening",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isListening",
    "inherited": true,
    "overrides": "Konva.Shape#isListening",
    "description": "determine if node is listening for events by taking into account ancestors.\n\nParent    | Self      | isListening\nlistening | listening |\n----------+-----------+------------\nT         | T         | T\nT         | F         | F\nF         | T         | F\nF         | F         | F",
    "memberof": "Konva.Sprite",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3217,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2924
  },
  {
    "id": "Konva.Sprite#isVisible",
    "longname": "Konva.Sprite#isVisible",
    "name": "isVisible",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isVisible",
    "inherited": true,
    "overrides": "Konva.Shape#isVisible",
    "description": "determine if node is visible by taking into account ancestors.\n\nParent    | Self      | isVisible\nvisible   | visible   |\n----------+-----------+------------\nT         | T         | T\nT         | F         | F\nF         | T         | F\nF         | F         | F",
    "memberof": "Konva.Sprite",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3248,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2925
  },
  {
    "id": "Konva.Sprite#show",
    "longname": "Konva.Sprite#show",
    "name": "show",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#show",
    "inherited": true,
    "overrides": "Konva.Shape#show",
    "description": "show node. set visible = true",
    "memberof": "Konva.Sprite",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3300,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2926
  },
  {
    "id": "Konva.Sprite#hide",
    "longname": "Konva.Sprite#hide",
    "name": "hide",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hide",
    "inherited": true,
    "overrides": "Konva.Shape#hide",
    "description": "hide node.  Hidden nodes are no longer detectable",
    "memberof": "Konva.Sprite",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3310,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2927
  },
  {
    "id": "Konva.Sprite#getAbsoluteZIndex",
    "longname": "Konva.Sprite#getAbsoluteZIndex",
    "name": "getAbsoluteZIndex",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteZIndex",
    "inherited": true,
    "overrides": "Konva.Shape#getAbsoluteZIndex",
    "description": "get absolute z-index which takes into account sibling\n and ancestor indices",
    "memberof": "Konva.Sprite",
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3323,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2928
  },
  {
    "id": "Konva.Sprite#getDepth",
    "longname": "Konva.Sprite#getDepth",
    "name": "getDepth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getDepth",
    "inherited": true,
    "overrides": "Konva.Shape#getDepth",
    "description": "get node depth in node tree.  Returns an integer.\n e.g. Stage depth will always be 0.  Layers will always be 1.  Groups and Shapes will always\n be >= 2",
    "memberof": "Konva.Sprite",
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3355,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2929
  },
  {
    "id": "Konva.Sprite#getRelativePointerPosition",
    "longname": "Konva.Sprite#getRelativePointerPosition",
    "name": "getRelativePointerPosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getRelativePointerPosition",
    "inherited": true,
    "overrides": "Konva.Shape#getRelativePointerPosition",
    "description": "get position of first pointer (like mouse or first touch) relative to local coordinates of current node",
    "memberof": "Konva.Sprite",
    "examples": [
      "// let's think we have a rectangle at position x = 10, y = 10\n// now we clicked at x = 15, y = 15 of the stage\n// if you want to know position of the click, related to the rectangle you can use\nrect.getRelativePointerPosition();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3398,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2930
  },
  {
    "id": "Konva.Sprite#getAbsolutePosition",
    "longname": "Konva.Sprite#getAbsolutePosition",
    "name": "getAbsolutePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsolutePosition",
    "inherited": true,
    "overrides": "Konva.Shape#getAbsolutePosition",
    "description": "get absolute position of a node. That function can be used to calculate absolute position, but relative to any ancestor",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "optional ancestor node",
        "name": "Ancestor"
      }
    ],
    "examples": [
      "// returns absolute position relative to top-left corner of canvas\nnode.getAbsolutePosition();\n\n// calculate absolute position of node, inside stage\n// so stage transforms are ignored\nnode.getAbsolutePosition(stage)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3426,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2931
  },
  {
    "id": "Konva.Sprite#move",
    "longname": "Konva.Sprite#move",
    "name": "move",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#move",
    "inherited": true,
    "overrides": "Konva.Shape#move",
    "description": "move node by an amount relative to its current position",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "change"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "change.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "change.y"
      }
    ],
    "examples": [
      "// move node in x direction by 1px and y direction by 2px\nnode.move({\n  x: 1,\n  y: 2\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3514,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2932
  },
  {
    "id": "Konva.Sprite#rotate",
    "longname": "Konva.Sprite#rotate",
    "name": "rotate",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#rotate",
    "inherited": true,
    "overrides": "Konva.Shape#rotate",
    "description": "rotate node by an amount in degrees relative to its current rotation",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "theta"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3559,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2933
  },
  {
    "id": "Konva.Sprite#moveToTop",
    "longname": "Konva.Sprite#moveToTop",
    "name": "moveToTop",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveToTop",
    "inherited": true,
    "overrides": "Konva.Shape#moveToTop",
    "description": "move node to the top of its siblings",
    "memberof": "Konva.Sprite",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3570,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2934
  },
  {
    "id": "Konva.Sprite#moveUp",
    "longname": "Konva.Sprite#moveUp",
    "name": "moveUp",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveUp",
    "inherited": true,
    "overrides": "Konva.Shape#moveUp",
    "description": "move node up",
    "memberof": "Konva.Sprite",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "flag is moved or not"
      }
    ],
    "meta": {
      "lineno": 3590,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2935
  },
  {
    "id": "Konva.Sprite#moveDown",
    "longname": "Konva.Sprite#moveDown",
    "name": "moveDown",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveDown",
    "inherited": true,
    "overrides": "Konva.Shape#moveDown",
    "description": "move node down",
    "memberof": "Konva.Sprite",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3610,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2936
  },
  {
    "id": "Konva.Sprite#moveToBottom",
    "longname": "Konva.Sprite#moveToBottom",
    "name": "moveToBottom",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveToBottom",
    "inherited": true,
    "overrides": "Konva.Shape#moveToBottom",
    "description": "move node to the bottom of its siblings",
    "memberof": "Konva.Sprite",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3630,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2937
  },
  {
    "id": "Konva.Sprite#getAbsoluteOpacity",
    "longname": "Konva.Sprite#getAbsoluteOpacity",
    "name": "getAbsoluteOpacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteOpacity",
    "inherited": true,
    "overrides": "Konva.Shape#getAbsoluteOpacity",
    "description": "get absolute opacity",
    "memberof": "Konva.Sprite",
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3668,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2938
  },
  {
    "id": "Konva.Sprite#moveTo",
    "longname": "Konva.Sprite#moveTo",
    "name": "moveTo",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveTo",
    "inherited": true,
    "overrides": "Konva.Shape#moveTo",
    "description": "move node to another container",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Container"
          ]
        },
        "name": "newContainer"
      }
    ],
    "examples": [
      "// move node from current layer into layer2\nnode.moveTo(layer2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3685,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2939
  },
  {
    "id": "Konva.Sprite#toObject",
    "longname": "Konva.Sprite#toObject",
    "name": "toObject",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toObject",
    "inherited": true,
    "overrides": "Konva.Shape#toObject",
    "description": "convert Node into an object for serialization.  Returns an object.",
    "memberof": "Konva.Sprite",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3703,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2940
  },
  {
    "id": "Konva.Sprite#toJSON",
    "longname": "Konva.Sprite#toJSON",
    "name": "toJSON",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toJSON",
    "inherited": true,
    "overrides": "Konva.Shape#toJSON",
    "description": "convert Node into a JSON string.  Returns a JSON string.",
    "memberof": "Konva.Sprite",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3736,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2941
  },
  {
    "id": "Konva.Sprite#getParent",
    "longname": "Konva.Sprite#getParent",
    "name": "getParent",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getParent",
    "inherited": true,
    "overrides": "Konva.Shape#getParent",
    "description": "get parent container",
    "memberof": "Konva.Sprite",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3745,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2942
  },
  {
    "id": "Konva.Sprite#findAncestors",
    "longname": "Konva.Sprite#findAncestors",
    "name": "findAncestors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#findAncestors",
    "inherited": true,
    "overrides": "Konva.Shape#findAncestors",
    "description": "get all ancestors (parent then parent of the parent, etc) of the node",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "selector for search",
        "name": "selector"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "show we think that node is ancestro itself?",
        "name": "includeSelf"
      },
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "optional": true,
        "description": "optional node where we need to stop searching (one of ancestors)",
        "name": "stopNode"
      }
    ],
    "examples": [
      "// get one of the parent group\nvar parentGroups = node.findAncestors('Group');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "[ancestors]"
      }
    ],
    "meta": {
      "lineno": 3754,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2943
  },
  {
    "id": "Konva.Sprite#findAncestor",
    "longname": "Konva.Sprite#findAncestor",
    "name": "findAncestor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#findAncestor",
    "inherited": true,
    "overrides": "Konva.Shape#findAncestor",
    "description": "get ancestor (parent or parent of the parent, etc) of the node that match passed selector",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "selector for search",
        "name": "selector"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "show we think that node is ancestro itself?",
        "name": "includeSelf"
      },
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "optional": true,
        "description": "optional node where we need to stop searching (one of ancestors)",
        "name": "stopNode"
      }
    ],
    "examples": [
      "// get one of the parent group\nvar group = node.findAncestors('.mygroup');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "description": "ancestor"
      }
    ],
    "meta": {
      "lineno": 3786,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2944
  },
  {
    "id": "Konva.Sprite#getLayer",
    "longname": "Konva.Sprite#getLayer",
    "name": "getLayer",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getLayer",
    "inherited": true,
    "overrides": "Konva.Shape#getLayer",
    "description": "get layer ancestor",
    "memberof": "Konva.Sprite",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Layer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3837,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2945
  },
  {
    "id": "Konva.Sprite#getStage",
    "longname": "Konva.Sprite#getStage",
    "name": "getStage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getStage",
    "inherited": true,
    "overrides": "Konva.Shape#getStage",
    "description": "get stage ancestor",
    "memberof": "Konva.Sprite",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Stage"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3847,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2946
  },
  {
    "id": "Konva.Sprite#fire",
    "longname": "Konva.Sprite#fire",
    "name": "fire",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#fire",
    "inherited": true,
    "overrides": "Konva.Shape#fire",
    "description": "fire event",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "event type.  can be a regular event, like click, mouseover, or mouseout, or it can be a custom event, like myCustomEvent",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "Event"
          ]
        },
        "optional": true,
        "description": "event object",
        "name": "evt"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "setting the value to false, or leaving it undefined, will result in the event\n not bubbling.  Setting the value to true will result in the event bubbling.",
        "name": "bubble"
      }
    ],
    "examples": [
      "// manually fire click event\nnode.fire('click');\n\n// fire custom event\nnode.fire('foo');\n\n// fire custom event with custom event object\nnode.fire('foo', {\n  bar: 10\n});\n\n// fire click event that bubbles\nnode.fire('click', null, true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3865,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2947
  },
  {
    "id": "Konva.Sprite#getAbsoluteTransform",
    "longname": "Konva.Sprite#getAbsoluteTransform",
    "name": "getAbsoluteTransform",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteTransform",
    "inherited": true,
    "overrides": "Konva.Shape#getAbsoluteTransform",
    "description": "get absolute transform of the node which takes into\n account its ancestor transforms",
    "memberof": "Konva.Sprite",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3901,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2948
  },
  {
    "id": "Konva.Sprite#getAbsoluteScale",
    "longname": "Konva.Sprite#getAbsoluteScale",
    "name": "getAbsoluteScale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteScale",
    "inherited": true,
    "overrides": "Konva.Shape#getAbsoluteScale",
    "description": "get absolute scale of the node which takes into\n account its ancestor scales",
    "memberof": "Konva.Sprite",
    "examples": [
      "// get absolute scale x\nvar scaleX = node.getAbsoluteScale().x;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3961,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2949
  },
  {
    "id": "Konva.Sprite#getAbsoluteRotation",
    "longname": "Konva.Sprite#getAbsoluteRotation",
    "name": "getAbsoluteRotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteRotation",
    "inherited": true,
    "overrides": "Konva.Shape#getAbsoluteRotation",
    "description": "get absolute rotation of the node which takes into\n account its ancestor rotations",
    "memberof": "Konva.Sprite",
    "examples": [
      "// get absolute rotation\nvar rotation = node.getAbsoluteRotation();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3989,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2950
  },
  {
    "id": "Konva.Sprite#getTransform",
    "longname": "Konva.Sprite#getTransform",
    "name": "getTransform",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getTransform",
    "inherited": true,
    "overrides": "Konva.Shape#getTransform",
    "description": "get transform of the node",
    "memberof": "Konva.Sprite",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4009,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2951
  },
  {
    "id": "Konva.Sprite#clone",
    "longname": "Konva.Sprite#clone",
    "name": "clone",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#clone",
    "inherited": true,
    "overrides": "Konva.Shape#clone",
    "description": "clone node.  Returns a new Node instance with identical attributes.  You can also override\n the node properties with an object literal, enabling you to use an existing node as a template\n for another node",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "override attrs",
        "name": "obj"
      }
    ],
    "examples": [
      "// simple clone\nvar clone = node.clone();\n\n// clone a node and override the x position\nvar clone = rect.clone({\n  x: 5\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4044,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2952
  },
  {
    "id": "Konva.Sprite#toCanvas",
    "longname": "Konva.Sprite#toCanvas",
    "name": "toCanvas",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toCanvas",
    "inherited": true,
    "overrides": "Konva.Shape#toCanvas",
    "description": "converts node into an canvas element.",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output canvas. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var canvas = node.toCanvas();"
    ],
    "meta": {
      "lineno": 4119,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2953
  },
  {
    "id": "Konva.Sprite#toDataURL",
    "longname": "Konva.Sprite#toDataURL",
    "name": "toDataURL",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toDataURL",
    "inherited": true,
    "overrides": "Konva.Shape#toDataURL",
    "description": "Creates a composite data URL (base64 string). If MIME type is not\nspecified, then \"image/png\" will result. For \"image/jpeg\", specify a quality\nlevel as quality (range 0.0 - 1.0)",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"image/png\" or \"image/jpeg\".\n \"image/png\" is the default",
        "name": "config.mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "jpeg quality.  If using an \"image/jpeg\" mimeType,\n you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n is very high quality",
        "name": "config.quality"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output image url. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4140,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2954
  },
  {
    "id": "Konva.Sprite#toImage",
    "longname": "Konva.Sprite#toImage",
    "name": "toImage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toImage",
    "inherited": true,
    "overrides": "Konva.Shape#toImage",
    "description": "converts node into an image.  Since the toImage\n method is asynchronous, the resulting image can only be retrieved from the config callback\n or the returned Promise.  toImage is most commonly used\n to cache complex drawings as an image so that they don't have to constantly be redrawn",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"image/png\" or \"image/jpeg\".\n \"image/png\" is the default",
        "name": "config.mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "jpeg quality.  If using an \"image/jpeg\" mimeType,\n you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n is very high quality",
        "name": "config.quality"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output image. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var image = node.toImage({\n  callback(img) {\n    // do stuff with img\n  }\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Image>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4172,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2955
  },
  {
    "id": "Konva.Sprite#toBlob",
    "longname": "Konva.Sprite#toBlob",
    "name": "toBlob",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toBlob",
    "inherited": true,
    "overrides": "Konva.Shape#toBlob",
    "description": "Converts node into a blob.  Since the toBlob method is asynchronous,\n the resulting blob can only be retrieved from the config callback\n or the returned Promise.",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output canvas. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var blob = await node.toBlob({});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Blob>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4219,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2956
  },
  {
    "id": "Konva.Sprite#getClassName",
    "longname": "Konva.Sprite#getClassName",
    "name": "getClassName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getClassName",
    "inherited": true,
    "overrides": "Konva.Shape#getClassName",
    "description": "get class name, which may return Stage, Layer, Group, or shape class names like Rect, Circle, Text, etc.",
    "memberof": "Konva.Sprite",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4267,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2957
  },
  {
    "id": "Konva.Sprite#getType",
    "longname": "Konva.Sprite#getType",
    "name": "getType",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getType",
    "inherited": true,
    "overrides": "Konva.Shape#getType",
    "description": "get the node type, which may return Stage, Layer, Group, or Shape",
    "memberof": "Konva.Sprite",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4276,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2958
  },
  {
    "id": "Konva.Sprite#addName",
    "longname": "Konva.Sprite#addName",
    "name": "addName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#addName",
    "inherited": true,
    "overrides": "Konva.Shape#addName",
    "description": "add name to node",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red');\nnode.addName('selected');\nnode.name(); // return 'red selected'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4324,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2959
  },
  {
    "id": "Konva.Sprite#hasName",
    "longname": "Konva.Sprite#hasName",
    "name": "hasName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hasName",
    "inherited": true,
    "overrides": "Konva.Shape#hasName",
    "description": "check is node has name",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red');\nnode.hasName('red');   // return true\nnode.hasName('selected'); // return false\nnode.hasName(''); // return false"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4343,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2960
  },
  {
    "id": "Konva.Sprite#removeName",
    "longname": "Konva.Sprite#removeName",
    "name": "removeName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#removeName",
    "inherited": true,
    "overrides": "Konva.Shape#removeName",
    "description": "remove name from node",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red selected');\nnode.removeName('selected');\nnode.hasName('selected'); // return false\nnode.name(); // return 'red'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4367,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2961
  },
  {
    "id": "Konva.Sprite#setAttr",
    "longname": "Konva.Sprite#setAttr",
    "name": "setAttr",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#setAttr",
    "inherited": true,
    "overrides": "Konva.Shape#setAttr",
    "description": "set attr",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "attr"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "name": "val"
      }
    ],
    "examples": [
      "node.setAttr('x', 5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4388,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2962
  },
  {
    "id": "Konva.Sprite#draw",
    "longname": "Konva.Sprite#draw",
    "name": "draw",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#draw",
    "inherited": true,
    "overrides": "Konva.Shape#draw",
    "description": "draw both scene and hit graphs.  If the node being drawn is the stage, all of the layers will be cleared and redrawn",
    "memberof": "Konva.Sprite",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4511,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2963
  },
  {
    "id": "Konva.Sprite#startDrag",
    "longname": "Konva.Sprite#startDrag",
    "name": "startDrag",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#startDrag",
    "inherited": true,
    "overrides": "Konva.Shape#startDrag",
    "description": "initiate drag and drop.",
    "memberof": "Konva.Sprite",
    "meta": {
      "lineno": 4544,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2964
  },
  {
    "id": "Konva.Sprite#stopDrag",
    "longname": "Konva.Sprite#stopDrag",
    "name": "stopDrag",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#stopDrag",
    "inherited": true,
    "overrides": "Konva.Shape#stopDrag",
    "description": "stop drag and drop",
    "memberof": "Konva.Sprite",
    "meta": {
      "lineno": 4590,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2965
  },
  {
    "id": "Konva.Sprite#isDragging",
    "longname": "Konva.Sprite#isDragging",
    "name": "isDragging",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isDragging",
    "inherited": true,
    "overrides": "Konva.Shape#isDragging",
    "description": "determine if node is currently in drag and drop mode",
    "memberof": "Konva.Sprite",
    "meta": {
      "lineno": 4607,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2966
  },
  {
    "id": "Konva.Sprite#isClientRectOnScreen",
    "longname": "Konva.Sprite#isClientRectOnScreen",
    "name": "isClientRectOnScreen",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isClientRectOnScreen",
    "inherited": true,
    "overrides": "Konva.Shape#isClientRectOnScreen",
    "description": "determine if node (at least partially) is currently in user-visible area",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number",
            "Object"
          ]
        },
        "description": "optional margin in pixels",
        "name": "margin"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "margin.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "margin.y"
      }
    ],
    "examples": [
      "// get index\n// default calculations\nvar isOnScreen = node.isClientRectOnScreen()\n// increase object size (or screen size) for cases when objects close to the screen still need to be marked as \"visible\"\nvar isOnScreen = node.isClientRectOnScreen({ x: stage.width(), y: stage.height() })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4671,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2967
  },
  {
    "id": "Konva.Sprite#zIndex",
    "longname": "Konva.Sprite#zIndex",
    "name": "zIndex",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#zIndex",
    "inherited": true,
    "overrides": "Konva.Shape#zIndex",
    "description": "get/set zIndex relative to the node's siblings who share the same parent.\nPlease remember that zIndex is not absolute (like in CSS). It is relative to parent element only.",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "index"
      }
    ],
    "examples": [
      "// get index\nvar index = node.zIndex();\n\n// set index\nnode.zIndex(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4764,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2968
  },
  {
    "id": "Konva.Sprite#absolutePosition",
    "longname": "Konva.Sprite#absolutePosition",
    "name": "absolutePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#absolutePosition",
    "inherited": true,
    "overrides": "Konva.Shape#absolutePosition",
    "description": "get/set node absolute position",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "// get position\nvar position = node.absolutePosition();\n\n// set position\nnode.absolutePosition({\n  x: 5,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4779,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2969
  },
  {
    "id": "Konva.Sprite#position",
    "longname": "Konva.Sprite#position",
    "name": "position",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#position",
    "inherited": true,
    "overrides": "Konva.Shape#position",
    "description": "get/set node position relative to parent",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "// get position\nvar position = node.position();\n\n// set position\nnode.position({\n  x: 5,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4799,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2970
  },
  {
    "id": "Konva.Sprite#x",
    "longname": "Konva.Sprite#x",
    "name": "x",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#x",
    "inherited": true,
    "overrides": "Konva.Shape#x",
    "description": "get/set x position",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get x\nvar x = node.x();\n\n// set x\nnode.x(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4818,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2971
  },
  {
    "id": "Konva.Sprite#y",
    "longname": "Konva.Sprite#y",
    "name": "y",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#y",
    "inherited": true,
    "overrides": "Konva.Shape#y",
    "description": "get/set y position",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get y\nvar y = node.y();\n\n// set y\nnode.y(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4832,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2972
  },
  {
    "id": "Konva.Sprite#globalCompositeOperation",
    "longname": "Konva.Sprite#globalCompositeOperation",
    "name": "globalCompositeOperation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#globalCompositeOperation",
    "inherited": true,
    "overrides": "Konva.Shape#globalCompositeOperation",
    "description": "get/set globalCompositeOperation of a node. globalCompositeOperation DOESN'T affect hit graph of nodes. So they are still trigger to events as they have default \"source-over\" globalCompositeOperation.",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "type"
      }
    ],
    "examples": [
      "// get globalCompositeOperation\nvar globalCompositeOperation = shape.globalCompositeOperation();\n\n// set globalCompositeOperation\nshape.globalCompositeOperation('source-in');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4846,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2973
  },
  {
    "id": "Konva.Sprite#opacity",
    "longname": "Konva.Sprite#opacity",
    "name": "opacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#opacity",
    "inherited": true,
    "overrides": "Konva.Shape#opacity",
    "description": "get/set opacity.  Opacity values range from 0 to 1.\n A node with an opacity of 0 is fully transparent, and a node\n with an opacity of 1 is fully opaque",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "opacity"
      }
    ],
    "examples": [
      "// get opacity\nvar opacity = node.opacity();\n\n// set opacity\nnode.opacity(0.5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4860,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2974
  },
  {
    "id": "Konva.Sprite#name",
    "longname": "Konva.Sprite#name",
    "name": "name",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#name",
    "inherited": true,
    "overrides": "Konva.Shape#name",
    "description": "get/set name.",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "// get name\nvar name = node.name();\n\n// set name\nnode.name('foo');\n\n// also node may have multiple names (as css classes)\nnode.name('foo bar');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4876,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2975
  },
  {
    "id": "Konva.Sprite#id",
    "longname": "Konva.Sprite#id",
    "name": "id",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#id",
    "inherited": true,
    "overrides": "Konva.Shape#id",
    "description": "get/set id. Id is global for whole page.",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "id"
      }
    ],
    "examples": [
      "// get id\nvar name = node.id();\n\n// set id\nnode.id('foo');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4893,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2976
  },
  {
    "id": "Konva.Sprite#rotation",
    "longname": "Konva.Sprite#rotation",
    "name": "rotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#rotation",
    "inherited": true,
    "overrides": "Konva.Shape#rotation",
    "description": "get/set rotation in degrees",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get rotation in degrees\nvar rotation = node.rotation();\n\n// set rotation in degrees\nnode.rotation(45);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4907,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2977
  },
  {
    "id": "Konva.Sprite#scale",
    "longname": "Konva.Sprite#scale",
    "name": "scale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scale",
    "inherited": true,
    "overrides": "Konva.Shape#scale",
    "description": "get/set scale",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.y"
      }
    ],
    "examples": [
      "// get scale\nvar scale = node.scale();\n\n// set scale\nshape.scale({\n  x: 2,\n  y: 3\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4921,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2978
  },
  {
    "id": "Konva.Sprite#scaleX",
    "longname": "Konva.Sprite#scaleX",
    "name": "scaleX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scaleX",
    "inherited": true,
    "overrides": "Konva.Shape#scaleX",
    "description": "get/set scale x",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get scale x\nvar scaleX = node.scaleX();\n\n// set scale x\nnode.scaleX(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4940,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2979
  },
  {
    "id": "Konva.Sprite#scaleY",
    "longname": "Konva.Sprite#scaleY",
    "name": "scaleY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scaleY",
    "inherited": true,
    "overrides": "Konva.Shape#scaleY",
    "description": "get/set scale y",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get scale y\nvar scaleY = node.scaleY();\n\n// set scale y\nnode.scaleY(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4954,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2980
  },
  {
    "id": "Konva.Sprite#skew",
    "longname": "Konva.Sprite#skew",
    "name": "skew",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skew",
    "inherited": true,
    "overrides": "Konva.Shape#skew",
    "description": "get/set skew",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "skew"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "skew.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "skew.y"
      }
    ],
    "examples": [
      "// get skew\nvar skew = node.skew();\n\n// set skew\nnode.skew({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4968,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2981
  },
  {
    "id": "Konva.Sprite#skewX",
    "longname": "Konva.Sprite#skewX",
    "name": "skewX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skewX",
    "inherited": true,
    "overrides": "Konva.Shape#skewX",
    "description": "get/set skew x",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get skew x\nvar skewX = node.skewX();\n\n// set skew x\nnode.skewX(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4987,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2982
  },
  {
    "id": "Konva.Sprite#skewY",
    "longname": "Konva.Sprite#skewY",
    "name": "skewY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skewY",
    "inherited": true,
    "overrides": "Konva.Shape#skewY",
    "description": "get/set skew y",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get skew y\nvar skewY = node.skewY();\n\n// set skew y\nnode.skewY(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5001,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2983
  },
  {
    "id": "Konva.Sprite#offsetX",
    "longname": "Konva.Sprite#offsetX",
    "name": "offsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#offsetX",
    "inherited": true,
    "overrides": "Konva.Shape#offsetX",
    "description": "get/set offset x",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get offset x\nvar offsetX = node.offsetX();\n\n// set offset x\nnode.offsetX(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5033,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2984
  },
  {
    "id": "Konva.Sprite#offsetY",
    "longname": "Konva.Sprite#offsetY",
    "name": "offsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#offsetY",
    "inherited": true,
    "overrides": "Konva.Shape#offsetY",
    "description": "get/set offset y",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get offset y\nvar offsetY = node.offsetY();\n\n// set offset y\nnode.offsetY(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5047,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2985
  },
  {
    "id": "Konva.Sprite#dragDistance",
    "longname": "Konva.Sprite#dragDistance",
    "name": "dragDistance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#dragDistance",
    "inherited": true,
    "overrides": "Konva.Shape#dragDistance",
    "description": "get/set drag distance",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "distance"
      }
    ],
    "examples": [
      "// get drag distance\nvar dragDistance = node.dragDistance();\n\n// set distance\n// node starts dragging only if pointer moved more then 3 pixels\nnode.dragDistance(3);\n// or set globally\nKonva.dragDistance = 3;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5061,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2986
  },
  {
    "id": "Konva.Sprite#width",
    "longname": "Konva.Sprite#width",
    "name": "width",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#width",
    "inherited": true,
    "overrides": "Konva.Shape#width",
    "description": "get/set width",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "width"
      }
    ],
    "examples": [
      "// get width\nvar width = node.width();\n\n// set width\nnode.width(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5078,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2987
  },
  {
    "id": "Konva.Sprite#height",
    "longname": "Konva.Sprite#height",
    "name": "height",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#height",
    "inherited": true,
    "overrides": "Konva.Shape#height",
    "description": "get/set height",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "height"
      }
    ],
    "examples": [
      "// get height\nvar height = node.height();\n\n// set height\nnode.height(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5092,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2988
  },
  {
    "id": "Konva.Sprite#listening",
    "longname": "Konva.Sprite#listening",
    "name": "listening",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#listening",
    "inherited": true,
    "overrides": "Konva.Shape#listening",
    "description": "get/set listening attr.  If you need to determine if a node is listening or not\n  by taking into account its parents, use the isListening() method\n  nodes with listening set to false will not be detected in hit graph\n  so they will be ignored in container.getIntersection() method",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "Can be true, or false.  The default is true.",
        "name": "listening"
      }
    ],
    "examples": [
      "// get listening attr\nvar listening = node.listening();\n\n// stop listening for events, remove node and all its children from hit graph\nnode.listening(false);\n\n// listen to events according to the parent\nnode.listening(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5106,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2989
  },
  {
    "id": "Konva.Sprite#preventDefault",
    "longname": "Konva.Sprite#preventDefault",
    "name": "preventDefault",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#preventDefault",
    "inherited": true,
    "overrides": "Konva.Shape#preventDefault",
    "description": "get/set preventDefault\nBy default all shapes will prevent default behavior\nof a browser on a pointer move or tap.\nthat will prevent native scrolling when you are trying to drag&drop a node\nbut sometimes you may need to enable default actions\nin that case you can set the property to false",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "preventDefault"
      }
    ],
    "examples": [
      "// get preventDefault\nvar shouldPrevent = shape.preventDefault();\n\n// set preventDefault\nshape.preventDefault(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5125,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2990
  },
  {
    "id": "Konva.Sprite#filters",
    "longname": "Konva.Sprite#filters",
    "name": "filters",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#filters",
    "inherited": true,
    "overrides": "Konva.Shape#filters",
    "description": "get/set filters.  Filters are applied to cached canvases",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "array of filters",
        "name": "filters"
      }
    ],
    "examples": [
      "// get filters\nvar filters = node.filters();\n\n// set a single filter\nnode.cache();\nnode.filters([Konva.Filters.Blur]);\n\n// set multiple filters\nnode.cache();\nnode.filters([\n  Konva.Filters.Blur,\n  Konva.Filters.Sepia,\n  Konva.Filters.Invert\n]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5148,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2991
  },
  {
    "id": "Konva.Sprite#visible",
    "longname": "Konva.Sprite#visible",
    "name": "visible",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#visible",
    "inherited": true,
    "overrides": "Konva.Shape#visible",
    "description": "get/set visible attr.  Can be true, or false.  The default is true.\n  If you need to determine if a node is visible or not\n  by taking into account its parents, use the isVisible() method",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "visible"
      }
    ],
    "examples": [
      "// get visible attr\nvar visible = node.visible();\n\n// make invisible\nnode.visible(false);\n\n// make visible (according to the parent)\nnode.visible(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5171,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2992
  },
  {
    "id": "Konva.Sprite#transformsEnabled",
    "longname": "Konva.Sprite#transformsEnabled",
    "name": "transformsEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#transformsEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#transformsEnabled",
    "description": "get/set transforms that are enabled.  Can be \"all\", \"none\", or \"position\".  The default\n is \"all\"",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// enable position transform only to improve draw performance\nnode.transformsEnabled('position');\n\n// enable all transforms\nnode.transformsEnabled('all');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5191,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2993
  },
  {
    "id": "Konva.Sprite#size",
    "longname": "Konva.Sprite#size",
    "name": "size",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#size",
    "inherited": true,
    "overrides": "Konva.Shape#size",
    "description": "get/set node size",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "size"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size.height"
      }
    ],
    "examples": [
      "// get node size\nvar size = node.size();\nvar width = size.width;\nvar height = size.height;\n\n// set size\nnode.size({\n  width: 100,\n  height: 200\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5205,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2994
  },
  {
    "id": "Konva.Sprite#dragBoundFunc",
    "longname": "Konva.Sprite#dragBoundFunc",
    "name": "dragBoundFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#dragBoundFunc",
    "inherited": true,
    "overrides": "Konva.Shape#dragBoundFunc",
    "description": "get/set drag bound function.  This is used to override the default\n drag and drop position.",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "name": "dragBoundFunc"
      }
    ],
    "examples": [
      "// get drag bound function\nvar dragBoundFunc = node.dragBoundFunc();\n\n// create vertical drag and drop\nnode.dragBoundFunc(function(pos){\n  // important pos - is absolute position of the node\n  // you should return absolute position too\n  return {\n    x: this.absolutePosition().x,\n    y: pos.y\n  };\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5226,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2995
  },
  {
    "id": "Konva.Sprite#draggable",
    "longname": "Konva.Sprite#draggable",
    "name": "draggable",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#draggable",
    "inherited": true,
    "overrides": "Konva.Shape#draggable",
    "description": "get/set draggable flag",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "draggable"
      }
    ],
    "examples": [
      "// get draggable flag\nvar draggable = node.draggable();\n\n// enable drag and drop\nnode.draggable(true);\n\n// disable drag and drop\nnode.draggable(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5248,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2996
  },
  {
    "id": "Konva.Sprite#to",
    "longname": "Konva.Sprite#to",
    "name": "to",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#to",
    "inherited": true,
    "overrides": "Konva.Shape#to",
    "description": "Tween node properties. Shorter usage of {@link Konva.Tween} object.",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "tween params",
        "name": "params"
      }
    ],
    "examples": [
      "circle.to({\n  x : 50,\n  duration : 0.5,\n  onUpdate: () => console.log('props updated'),\n  onFinish: () => console.log('finished'),\n});"
    ],
    "meta": {
      "lineno": 9588,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2997
  },
  {
    "id": "Konva.Sprite#blurRadius",
    "longname": "Konva.Sprite#blurRadius",
    "name": "blurRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#blurRadius",
    "inherited": true,
    "overrides": "Konva.Shape#blurRadius",
    "description": "get/set blur radius. Use with {@link Konva.Filters.Blur} filter",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "radius"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17517,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2998
  },
  {
    "id": "Konva.Sprite#brightness",
    "longname": "Konva.Sprite#brightness",
    "name": "brightness",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#brightness",
    "inherited": true,
    "overrides": "Konva.Shape#brightness",
    "description": "get/set filter brightness.  The brightness is a number between -1 and 1.&nbsp; Positive values\n brighten the pixels and negative values darken them. Use with {@link Konva.Filters.Brighten} filter.",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between -1 and 1",
        "name": "brightness"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17547,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2999
  },
  {
    "id": "Konva.Sprite#contrast",
    "longname": "Konva.Sprite#contrast",
    "name": "contrast",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#contrast",
    "inherited": true,
    "overrides": "Konva.Shape#contrast",
    "description": "get/set filter contrast.  The contrast is a number between -100 and 100.\nUse with {@link Konva.Filters.Contrast} filter.",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between -100 and 100",
        "name": "contrast"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17600,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3000
  },
  {
    "id": "Konva.Sprite#embossStrength",
    "longname": "Konva.Sprite#embossStrength",
    "name": "embossStrength",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossStrength",
    "inherited": true,
    "overrides": "Konva.Shape#embossStrength",
    "description": "get/set emboss strength. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1.  Default is 0.5",
        "name": "level"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17725,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3001
  },
  {
    "id": "Konva.Sprite#embossWhiteLevel",
    "longname": "Konva.Sprite#embossWhiteLevel",
    "name": "embossWhiteLevel",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossWhiteLevel",
    "inherited": true,
    "overrides": "Konva.Shape#embossWhiteLevel",
    "description": "get/set emboss white level. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1.  Default is 0.5",
        "name": "embossWhiteLevel"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17733,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3002
  },
  {
    "id": "Konva.Sprite#embossDirection",
    "longname": "Konva.Sprite#embossDirection",
    "name": "embossDirection",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossDirection",
    "inherited": true,
    "overrides": "Konva.Shape#embossDirection",
    "description": "get/set emboss direction. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "can be top-left, top, top-right, right, bottom-right, bottom, bottom-left or left\n  The default is top-left",
        "name": "embossDirection"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17741,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3003
  },
  {
    "id": "Konva.Sprite#embossBlend",
    "longname": "Konva.Sprite#embossBlend",
    "name": "embossBlend",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossBlend",
    "inherited": true,
    "overrides": "Konva.Shape#embossBlend",
    "description": "get/set emboss blend. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "embossBlend"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17750,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3004
  },
  {
    "id": "Konva.Sprite#enhance",
    "longname": "Konva.Sprite#enhance",
    "name": "enhance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#enhance",
    "inherited": true,
    "overrides": "Konva.Shape#enhance",
    "description": "get/set enhance. Use with {@link Konva.Filters.Enhance} filter. -1 to 1 values",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Float"
          ]
        },
        "name": "amount"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Float"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17864,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3005
  },
  {
    "id": "Konva.Sprite#hue",
    "longname": "Konva.Sprite#hue",
    "name": "hue",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hue",
    "inherited": true,
    "overrides": "Konva.Shape#hue",
    "description": "get/set hsv hue in degrees. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between 0 and 359",
        "name": "hue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17896,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3006
  },
  {
    "id": "Konva.Sprite#saturation",
    "longname": "Konva.Sprite#saturation",
    "name": "saturation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#saturation",
    "inherited": true,
    "overrides": "Konva.Shape#saturation",
    "description": "get/set hsv saturation. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the saturation, 1.0 doubles, etc..",
        "name": "saturation"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17904,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3007
  },
  {
    "id": "Konva.Sprite#luminance",
    "longname": "Konva.Sprite#luminance",
    "name": "luminance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#luminance",
    "inherited": true,
    "overrides": "Konva.Shape#luminance",
    "description": "get/set hsl luminance. Use with {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "from -1 to 1",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17912,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3008
  },
  {
    "id": "Konva.Sprite#value",
    "longname": "Konva.Sprite#value",
    "name": "value",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#value",
    "inherited": true,
    "overrides": "Konva.Shape#value",
    "description": "get/set hsv value. Use with {@link Konva.Filters.HSV} filter.",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the value, 1.0 doubles, etc..",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18018,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3009
  },
  {
    "id": "Konva.Sprite#kaleidoscopePower",
    "longname": "Konva.Sprite#kaleidoscopePower",
    "name": "kaleidoscopePower",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#kaleidoscopePower",
    "inherited": true,
    "overrides": "Konva.Shape#kaleidoscopePower",
    "description": "get/set kaleidoscope power. Use with {@link Konva.Filters.Kaleidoscope} filter.",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "of kaleidoscope",
        "name": "power"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18243,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3010
  },
  {
    "id": "Konva.Sprite#kaleidoscopeAngle",
    "longname": "Konva.Sprite#kaleidoscopeAngle",
    "name": "kaleidoscopeAngle",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#kaleidoscopeAngle",
    "inherited": true,
    "overrides": "Konva.Shape#kaleidoscopeAngle",
    "description": "get/set kaleidoscope angle. Use with {@link Konva.Filters.Kaleidoscope} filter.",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "degrees"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18251,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3011
  },
  {
    "id": "Konva.Sprite#noise",
    "longname": "Konva.Sprite#noise",
    "name": "noise",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#noise",
    "inherited": true,
    "overrides": "Konva.Shape#noise",
    "description": "get/set noise amount.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Noise} filter.",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "noise"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18437,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3012
  },
  {
    "id": "Konva.Sprite#pixelSize",
    "longname": "Konva.Sprite#pixelSize",
    "name": "pixelSize",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#pixelSize",
    "inherited": true,
    "overrides": "Konva.Shape#pixelSize",
    "description": "get/set pixel size. Use with {@link Konva.Filters.Pixelate} filter.",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "pixelSize"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18522,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3013
  },
  {
    "id": "Konva.Sprite#levels",
    "longname": "Konva.Sprite#levels",
    "name": "levels",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#levels",
    "inherited": true,
    "overrides": "Konva.Shape#levels",
    "description": "get/set levels.  Must be a number between 0 and 1.  Use with {@link Konva.Filters.Posterize} filter.",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1",
        "name": "level"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18552,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3014
  },
  {
    "id": "Konva.Sprite#red",
    "longname": "Konva.Sprite#red",
    "name": "red",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#red",
    "inherited": true,
    "overrides": "Konva.Shape#red",
    "description": "get/set filter red value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "red"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18596,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3015
  },
  {
    "id": "Konva.Sprite#green",
    "longname": "Konva.Sprite#green",
    "name": "green",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#green",
    "inherited": true,
    "overrides": "Konva.Shape#green",
    "description": "get/set filter green value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "green"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18616,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3016
  },
  {
    "id": "Konva.Sprite#blue",
    "longname": "Konva.Sprite#blue",
    "name": "blue",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#blue",
    "inherited": true,
    "overrides": "Konva.Shape#blue",
    "description": "get/set filter blue value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "blue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18625,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3017
  },
  {
    "id": "Konva.Sprite#alpha",
    "longname": "Konva.Sprite#alpha",
    "name": "alpha",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#alpha",
    "inherited": true,
    "overrides": "Konva.Shape#alpha",
    "description": "get/set filter alpha value. Use with {@link Konva.Filters.RGBA} filter.",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Float"
          ]
        },
        "description": "value between 0 and 1",
        "name": "alpha"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Float"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18718,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3018
  },
  {
    "id": "Konva.Sprite#threshold",
    "longname": "Konva.Sprite#threshold",
    "name": "threshold",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#threshold",
    "inherited": true,
    "overrides": "Konva.Shape#threshold",
    "description": "get/set threshold.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Threshold} or {@link Konva.Filters.Mask} filter.",
    "memberof": "Konva.Sprite",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "threshold"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18809,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3019
  },
  {
    "id": "Konva.Star#hasShadow",
    "longname": "Konva.Star#hasShadow",
    "name": "hasShadow",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasShadow",
    "inherited": true,
    "description": "returns whether or not a shadow will be rendered",
    "memberof": "Konva.Star",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 6909,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3020
  },
  {
    "id": "Konva.Star#hasFill",
    "longname": "Konva.Star#hasFill",
    "name": "hasFill",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasFill",
    "inherited": true,
    "description": "returns whether or not the shape will be filled",
    "memberof": "Konva.Star",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7009,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3021
  },
  {
    "id": "Konva.Star#hasStroke",
    "longname": "Konva.Star#hasStroke",
    "name": "hasStroke",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasStroke",
    "inherited": true,
    "description": "returns whether or not the shape will be stroked",
    "memberof": "Konva.Star",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7030,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3022
  },
  {
    "id": "Konva.Star#intersects",
    "longname": "Konva.Star#intersects",
    "name": "intersects",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#intersects",
    "inherited": true,
    "description": "determines if point is in the shape, regardless if other shapes are on top of it.  Note: because\n this method clears a temporary canvas and then redraws the shape, it performs very poorly if executed many times\n consecutively.  Please use the {@link Konva.Stage#getIntersection} method if at all possible\n because it performs much better",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "point"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "point.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "point.y"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7066,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3023
  },
  {
    "id": "Konva.Star#getSelfRect",
    "longname": "Konva.Star#getSelfRect",
    "name": "getSelfRect",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#getSelfRect",
    "inherited": true,
    "description": "return self rectangle (x, y, width, height) of shape.\nThis method are not taken into account transformation and styles.",
    "memberof": "Konva.Star",
    "examples": [
      "rect.getSelfRect();  // return {x:0, y:0, width:rect.width(), height:rect.height()}\ncircle.getSelfRect();  // return {x: - circle.width() / 2, y: - circle.height() / 2, width:circle.width(), height:circle.height()}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "rect with `{x, y, width, height}` properties"
      }
    ],
    "meta": {
      "lineno": 7138,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3024
  },
  {
    "id": "Konva.Star#drawHitFromCache",
    "longname": "Konva.Star#drawHitFromCache",
    "name": "drawHitFromCache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#drawHitFromCache",
    "inherited": true,
    "description": "draw hit graph using the cached scene canvas",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "alpha channel threshold that determines whether or not\n a pixel should be drawn onto the hit graph.  Must be a value between 0 and 255.\n The default is 0",
        "name": "alphaThreshold"
      }
    ],
    "examples": [
      "shape.cache();\nshape.drawHitFromCache();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7294,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3025
  },
  {
    "id": "Konva.Star#stroke",
    "longname": "Konva.Star#stroke",
    "name": "stroke",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#stroke",
    "inherited": true,
    "description": "get/set stroke color",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get stroke color\nvar stroke = shape.stroke();\n\n// set stroke color with color string\nshape.stroke('green');\n\n// set stroke color with hex\nshape.stroke('#00ff00');\n\n// set stroke color with rgb\nshape.stroke('rgb(0,255,0)');\n\n// set stroke color with rgba and make it 50% opaque\nshape.stroke('rgba(0,255,0,0.5');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7360,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3026
  },
  {
    "id": "Konva.Star#strokeWidth",
    "longname": "Konva.Star#strokeWidth",
    "name": "strokeWidth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeWidth",
    "inherited": true,
    "description": "get/set stroke width",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "strokeWidth"
      }
    ],
    "examples": [
      "// get stroke width\nvar strokeWidth = shape.strokeWidth();\n\n// set stroke width\nshape.strokeWidth(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7383,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3027
  },
  {
    "id": "Konva.Star#fillAfterStrokeEnabled",
    "longname": "Konva.Star#fillAfterStrokeEnabled",
    "name": "fillAfterStrokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillAfterStrokeEnabled",
    "inherited": true,
    "description": "get/set fillAfterStrokeEnabled property. By default Konva is drawing filling first, then stroke on top of the fill.\nIn rare situations you may want a different behavior. When you have a stroke first then fill on top of it.\nEspecially useful for Text objects.\nDefault is false.",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "fillAfterStrokeEnabled"
      }
    ],
    "examples": [
      "// get stroke width\nvar fillAfterStrokeEnabled = shape.fillAfterStrokeEnabled();\n\n// set stroke width\nshape.fillAfterStrokeEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7397,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3028
  },
  {
    "id": "Konva.Star#hitStrokeWidth",
    "longname": "Konva.Star#hitStrokeWidth",
    "name": "hitStrokeWidth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hitStrokeWidth",
    "inherited": true,
    "description": "get/set stroke width for hit detection. Default value is \"auto\", it means it will be equals to strokeWidth",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "hitStrokeWidth"
      }
    ],
    "examples": [
      "// get stroke width\nvar hitStrokeWidth = shape.hitStrokeWidth();\n\n// set hit stroke width\nshape.hitStrokeWidth(20);\n// set hit stroke width always equals to scene stroke width\nshape.hitStrokeWidth('auto');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7414,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3029
  },
  {
    "id": "Konva.Star#strokeHitEnabled",
    "longname": "Konva.Star#strokeHitEnabled",
    "name": "strokeHitEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeHitEnabled",
    "inherited": true,
    "description": "**deprecated, use hitStrokeWidth instead!** get/set strokeHitEnabled property. Useful for performance optimization.\nYou may set `shape.strokeHitEnabled(false)`. In this case stroke will be no draw on hit canvas, so hit area\nof shape will be decreased (by lineWidth / 2). Remember that non closed line with `strokeHitEnabled = false`\nwill be not drawn on hit canvas, that is mean line will no trigger pointer events (like mouseover)\nDefault value is true.",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "strokeHitEnabled"
      }
    ],
    "examples": [
      "// get strokeHitEnabled\nvar strokeHitEnabled = shape.strokeHitEnabled();\n\n// set strokeHitEnabled\nshape.strokeHitEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7430,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3030
  },
  {
    "id": "Konva.Star#perfectDrawEnabled",
    "longname": "Konva.Star#perfectDrawEnabled",
    "name": "perfectDrawEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#perfectDrawEnabled",
    "inherited": true,
    "description": "get/set perfectDrawEnabled. If a shape has fill, stroke and opacity you may set `perfectDrawEnabled` to false to improve performance.\nSee http://konvajs.org/docs/performance/Disable_Perfect_Draw.html for more information.\nDefault value is true",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "perfectDrawEnabled"
      }
    ],
    "examples": [
      "// get perfectDrawEnabled\nvar perfectDrawEnabled = shape.perfectDrawEnabled();\n\n// set perfectDrawEnabled\nshape.perfectDrawEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7448,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3031
  },
  {
    "id": "Konva.Star#shadowForStrokeEnabled",
    "longname": "Konva.Star#shadowForStrokeEnabled",
    "name": "shadowForStrokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowForStrokeEnabled",
    "inherited": true,
    "description": "get/set shadowForStrokeEnabled. Useful for performance optimization.\nYou may set `shape.shadowForStrokeEnabled(false)`. In this case stroke will no effect shadow.\nRemember if you set `shadowForStrokeEnabled = false` for non closed line - that line will have no shadow!.\nDefault value is true",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "shadowForStrokeEnabled"
      }
    ],
    "examples": [
      "// get shadowForStrokeEnabled\nvar shadowForStrokeEnabled = shape.shadowForStrokeEnabled();\n\n// set shadowForStrokeEnabled\nshape.shadowForStrokeEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7464,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3032
  },
  {
    "id": "Konva.Star#lineJoin",
    "longname": "Konva.Star#lineJoin",
    "name": "lineJoin",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#lineJoin",
    "inherited": true,
    "description": "get/set line join.  Can be miter, round, or bevel.  The\n default is miter",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "lineJoin"
      }
    ],
    "examples": [
      "// get line join\nvar lineJoin = shape.lineJoin();\n\n// set line join\nshape.lineJoin('round');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7481,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3033
  },
  {
    "id": "Konva.Star#lineCap",
    "longname": "Konva.Star#lineCap",
    "name": "lineCap",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#lineCap",
    "inherited": true,
    "description": "get/set line cap.  Can be butt, round, or square",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "lineCap"
      }
    ],
    "examples": [
      "// get line cap\nvar lineCap = shape.lineCap();\n\n// set line cap\nshape.lineCap('round');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7496,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3034
  },
  {
    "id": "Konva.Star#sceneFunc",
    "longname": "Konva.Star#sceneFunc",
    "name": "sceneFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#sceneFunc",
    "inherited": true,
    "description": "get/set scene draw function. That function is used to draw the shape on a canvas.\nAlso that function will be used to draw hit area of the shape, in case if hitFunc is not defined.",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "drawing function",
        "name": "drawFunc"
      }
    ],
    "examples": [
      "// get scene draw function\nvar sceneFunc = shape.sceneFunc();\n\n// set scene draw function\nshape.sceneFunc(function(context, shape) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  // like stroke and fill\n  context.fillStrokeShape(shape);\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7510,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3035
  },
  {
    "id": "Konva.Star#hitFunc",
    "longname": "Konva.Star#hitFunc",
    "name": "hitFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hitFunc",
    "inherited": true,
    "description": "get/set hit draw function. That function is used to draw custom hit area of a shape.",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "drawing function",
        "name": "drawFunc"
      }
    ],
    "examples": [
      "// get hit draw function\nvar hitFunc = shape.hitFunc();\n\n// set hit draw function\nshape.hitFunc(function(context) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  context.fillStrokeShape(shape);\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7532,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3036
  },
  {
    "id": "Konva.Star#dash",
    "longname": "Konva.Star#dash",
    "name": "dash",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#dash",
    "inherited": true,
    "overrides": "Konva.Shape#dash",
    "description": "get/set dash array for stroke.",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "dash"
      }
    ],
    "examples": [
      "// apply dashed stroke that is 10px long and 5 pixels apart\n line.dash([10, 5]);\n // apply dashed stroke that is made up of alternating dashed\n // lines that are 10px long and 20px apart, and dots that have\n // a radius of 5px and are 20px apart\n line.dash([10, 20, 0.001, 20]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7552,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3037
  },
  {
    "id": "Konva.Star#shadowColor",
    "longname": "Konva.Star#shadowColor",
    "name": "shadowColor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowColor",
    "inherited": true,
    "description": "get/set shadow color",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get shadow color\nvar shadow = shape.shadowColor();\n\n// set shadow color with color string\nshape.shadowColor('green');\n\n// set shadow color with hex\nshape.shadowColor('#00ff00');\n\n// set shadow color with rgb\nshape.shadowColor('rgb(0,255,0)');\n\n// set shadow color with rgba and make it 50% opaque\nshape.shadowColor('rgba(0,255,0,0.5');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7579,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3038
  },
  {
    "id": "Konva.Star#shadowBlur",
    "longname": "Konva.Star#shadowBlur",
    "name": "shadowBlur",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowBlur",
    "inherited": true,
    "description": "get/set shadow blur",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "blur"
      }
    ],
    "examples": [
      "// get shadow blur\nvar shadowBlur = shape.shadowBlur();\n\n// set shadow blur\nshape.shadowBlur(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7602,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3039
  },
  {
    "id": "Konva.Star#shadowOpacity",
    "longname": "Konva.Star#shadowOpacity",
    "name": "shadowOpacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOpacity",
    "inherited": true,
    "description": "get/set shadow opacity.  must be a value between 0 and 1",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "opacity"
      }
    ],
    "examples": [
      "// get shadow opacity\nvar shadowOpacity = shape.shadowOpacity();\n\n// set shadow opacity\nshape.shadowOpacity(0.5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7616,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3040
  },
  {
    "id": "Konva.Star#shadowOffset",
    "longname": "Konva.Star#shadowOffset",
    "name": "shadowOffset",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffset",
    "inherited": true,
    "description": "get/set shadow offset",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.y"
      }
    ],
    "examples": [
      "// get shadow offset\nvar shadowOffset = shape.shadowOffset();\n\n// set shadow offset\nshape.shadowOffset({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7630,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3041
  },
  {
    "id": "Konva.Star#shadowOffsetX",
    "longname": "Konva.Star#shadowOffsetX",
    "name": "shadowOffsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffsetX",
    "inherited": true,
    "description": "get/set shadow offset x",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get shadow offset x\nvar shadowOffsetX = shape.shadowOffsetX();\n\n// set shadow offset x\nshape.shadowOffsetX(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7649,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3042
  },
  {
    "id": "Konva.Star#shadowOffsetY",
    "longname": "Konva.Star#shadowOffsetY",
    "name": "shadowOffsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffsetY",
    "inherited": true,
    "description": "get/set shadow offset y",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get shadow offset y\nvar shadowOffsetY = shape.shadowOffsetY();\n\n// set shadow offset y\nshape.shadowOffsetY(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7663,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3043
  },
  {
    "id": "Konva.Star#fillPatternImage",
    "longname": "Konva.Star#fillPatternImage",
    "name": "fillPatternImage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternImage",
    "inherited": true,
    "description": "get/set fill pattern image",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Image"
          ]
        },
        "description": "object",
        "name": "image"
      }
    ],
    "examples": [
      "// get fill pattern image\nvar fillPatternImage = shape.fillPatternImage();\n\n// set fill pattern image\nvar imageObj = new Image();\nimageObj.onload = function() {\n  shape.fillPatternImage(imageObj);\n};\nimageObj.src = 'path/to/image/jpg';"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Image"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7677,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3044
  },
  {
    "id": "Konva.Star#fill",
    "longname": "Konva.Star#fill",
    "name": "fill",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fill",
    "inherited": true,
    "description": "get/set fill color",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get fill color\nvar fill = shape.fill();\n\n// set fill color with color string\nshape.fill('green');\n\n// set fill color with hex\nshape.fill('#00ff00');\n\n// set fill color with rgb\nshape.fill('rgb(0,255,0)');\n\n// set fill color with rgba and make it 50% opaque\nshape.fill('rgba(0,255,0,0.5');\n\n// shape without fill\nshape.fill(null);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7695,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3045
  },
  {
    "id": "Konva.Star#fillPatternX",
    "longname": "Konva.Star#fillPatternX",
    "name": "fillPatternX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternX",
    "inherited": true,
    "description": "get/set fill pattern x",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern x\nvar fillPatternX = shape.fillPatternX();\n// set fill pattern x\nshape.fillPatternX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7721,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3046
  },
  {
    "id": "Konva.Star#fillPatternY",
    "longname": "Konva.Star#fillPatternY",
    "name": "fillPatternY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternY",
    "inherited": true,
    "description": "get/set fill pattern y",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern y\nvar fillPatternY = shape.fillPatternY();\n// set fill pattern y\nshape.fillPatternY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7734,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3047
  },
  {
    "id": "Konva.Star#fillLinearGradientColorStops",
    "longname": "Konva.Star#fillLinearGradientColorStops",
    "name": "fillLinearGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientColorStops",
    "inherited": true,
    "description": "get/set fill linear gradient color stops",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get fill linear gradient color stops\nvar colorStops = shape.fillLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillLinearGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "colorStops"
      }
    ],
    "meta": {
      "lineno": 7747,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3048
  },
  {
    "id": "Konva.Star#strokeLinearGradientColorStops",
    "longname": "Konva.Star#strokeLinearGradientColorStops",
    "name": "strokeLinearGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientColorStops",
    "inherited": true,
    "description": "get/set stroke linear gradient color stops",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get stroke linear gradient color stops\nvar colorStops = shape.strokeLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.strokeLinearGradientColorStops([0, 'red', 0.5, 'blue', 1, 'green']);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "colorStops"
      }
    ],
    "meta": {
      "lineno": 7762,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3049
  },
  {
    "id": "Konva.Star#fillRadialGradientStartRadius",
    "longname": "Konva.Star#fillRadialGradientStartRadius",
    "name": "fillRadialGradientStartRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartRadius",
    "inherited": true,
    "description": "get/set fill radial gradient start radius",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "radius"
      }
    ],
    "examples": [
      "// get radial gradient start radius\nvar startRadius = shape.fillRadialGradientStartRadius();\n\n// set radial gradient start radius\nshape.fillRadialGradientStartRadius(0);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7777,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3050
  },
  {
    "id": "Konva.Star#fillRadialGradientEndRadius",
    "longname": "Konva.Star#fillRadialGradientEndRadius",
    "name": "fillRadialGradientEndRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndRadius",
    "inherited": true,
    "description": "get/set fill radial gradient end radius",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "radius"
      }
    ],
    "examples": [
      "// get radial gradient end radius\nvar endRadius = shape.fillRadialGradientEndRadius();\n\n// set radial gradient end radius\nshape.fillRadialGradientEndRadius(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7791,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3051
  },
  {
    "id": "Konva.Star#fillRadialGradientColorStops",
    "longname": "Konva.Star#fillRadialGradientColorStops",
    "name": "fillRadialGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientColorStops",
    "inherited": true,
    "description": "get/set fill radial gradient color stops",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get fill radial gradient color stops\nvar colorStops = shape.fillRadialGradientColorStops();\n\n// create a radial gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillRadialGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7805,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3052
  },
  {
    "id": "Konva.Star#fillPatternRepeat",
    "longname": "Konva.Star#fillPatternRepeat",
    "name": "fillPatternRepeat",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternRepeat",
    "inherited": true,
    "description": "get/set fill pattern repeat.  Can be 'repeat', 'repeat-x', 'repeat-y', or 'no-repeat'.  The default is 'repeat'",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "repeat"
      }
    ],
    "examples": [
      "// get fill pattern repeat\nvar repeat = shape.fillPatternRepeat();\n\n// repeat pattern in x direction only\nshape.fillPatternRepeat('repeat-x');\n\n// do not repeat the pattern\nshape.fillPatternRepeat('no-repeat');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7820,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3053
  },
  {
    "id": "Konva.Star#fillEnabled",
    "longname": "Konva.Star#fillEnabled",
    "name": "fillEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillEnabled",
    "inherited": true,
    "description": "get/set fill enabled flag",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get fill enabled flag\nvar fillEnabled = shape.fillEnabled();\n\n// disable fill\nshape.fillEnabled(false);\n\n// enable fill\nshape.fillEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7837,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3054
  },
  {
    "id": "Konva.Star#strokeEnabled",
    "longname": "Konva.Star#strokeEnabled",
    "name": "strokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeEnabled",
    "inherited": true,
    "description": "get/set stroke enabled flag",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get stroke enabled flag\nvar strokeEnabled = shape.strokeEnabled();\n\n// disable stroke\nshape.strokeEnabled(false);\n\n// enable stroke\nshape.strokeEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7854,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3055
  },
  {
    "id": "Konva.Star#shadowEnabled",
    "longname": "Konva.Star#shadowEnabled",
    "name": "shadowEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowEnabled",
    "inherited": true,
    "description": "get/set shadow enabled flag",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get shadow enabled flag\nvar shadowEnabled = shape.shadowEnabled();\n\n// disable shadow\nshape.shadowEnabled(false);\n\n// enable shadow\nshape.shadowEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7871,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3056
  },
  {
    "id": "Konva.Star#dashEnabled",
    "longname": "Konva.Star#dashEnabled",
    "name": "dashEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#dashEnabled",
    "inherited": true,
    "description": "get/set dash enabled flag",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get dash enabled flag\nvar dashEnabled = shape.dashEnabled();\n\n// disable dash\nshape.dashEnabled(false);\n\n// enable dash\nshape.dashEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7888,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3057
  },
  {
    "id": "Konva.Star#strokeScaleEnabled",
    "longname": "Konva.Star#strokeScaleEnabled",
    "name": "strokeScaleEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeScaleEnabled",
    "inherited": true,
    "description": "get/set strokeScale enabled flag",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get stroke scale enabled flag\nvar strokeScaleEnabled = shape.strokeScaleEnabled();\n\n// disable stroke scale\nshape.strokeScaleEnabled(false);\n\n// enable stroke scale\nshape.strokeScaleEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7905,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3058
  },
  {
    "id": "Konva.Star#fillPriority",
    "longname": "Konva.Star#fillPriority",
    "name": "fillPriority",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPriority",
    "inherited": true,
    "description": "get/set fill priority.  can be color, pattern, linear-gradient, or radial-gradient.  The default is color.\n  This is handy if you want to toggle between different fill types.",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "priority"
      }
    ],
    "examples": [
      "// get fill priority\nvar fillPriority = shape.fillPriority();\n\n// set fill priority\nshape.fillPriority('linear-gradient');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7922,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3059
  },
  {
    "id": "Konva.Star#fillPatternOffset",
    "longname": "Konva.Star#fillPatternOffset",
    "name": "fillPatternOffset",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffset",
    "inherited": true,
    "description": "get/set fill pattern offset",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.y"
      }
    ],
    "examples": [
      "// get fill pattern offset\nvar patternOffset = shape.fillPatternOffset();\n\n// set fill pattern offset\nshape.fillPatternOffset({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7937,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3060
  },
  {
    "id": "Konva.Star#fillPatternOffsetX",
    "longname": "Konva.Star#fillPatternOffsetX",
    "name": "fillPatternOffsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffsetX",
    "inherited": true,
    "description": "get/set fill pattern offset x",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern offset x\nvar patternOffsetX = shape.fillPatternOffsetX();\n\n// set fill pattern offset x\nshape.fillPatternOffsetX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7956,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3061
  },
  {
    "id": "Konva.Star#fillPatternOffsetY",
    "longname": "Konva.Star#fillPatternOffsetY",
    "name": "fillPatternOffsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffsetY",
    "inherited": true,
    "description": "get/set fill pattern offset y",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern offset y\nvar patternOffsetY = shape.fillPatternOffsetY();\n\n// set fill pattern offset y\nshape.fillPatternOffsetY(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7970,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3062
  },
  {
    "id": "Konva.Star#fillPatternScale",
    "longname": "Konva.Star#fillPatternScale",
    "name": "fillPatternScale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScale",
    "inherited": true,
    "description": "get/set fill pattern scale",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.y"
      }
    ],
    "examples": [
      "// get fill pattern scale\nvar patternScale = shape.fillPatternScale();\n\n// set fill pattern scale\nshape.fillPatternScale({\n  x: 2,\n  y: 2\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7984,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3063
  },
  {
    "id": "Konva.Star#fillPatternScaleX",
    "longname": "Konva.Star#fillPatternScaleX",
    "name": "fillPatternScaleX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScaleX",
    "inherited": true,
    "description": "get/set fill pattern scale x",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern scale x\nvar patternScaleX = shape.fillPatternScaleX();\n\n// set fill pattern scale x\nshape.fillPatternScaleX(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8003,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3064
  },
  {
    "id": "Konva.Star#fillPatternScaleY",
    "longname": "Konva.Star#fillPatternScaleY",
    "name": "fillPatternScaleY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScaleY",
    "inherited": true,
    "description": "get/set fill pattern scale y",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern scale y\nvar patternScaleY = shape.fillPatternScaleY();\n\n// set fill pattern scale y\nshape.fillPatternScaleY(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8017,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3065
  },
  {
    "id": "Konva.Star#fillLinearGradientStartPoint",
    "longname": "Konva.Star#fillLinearGradientStartPoint",
    "name": "fillLinearGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPoint",
    "inherited": true,
    "description": "get/set fill linear gradient start point",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get fill linear gradient start point\nvar startPoint = shape.fillLinearGradientStartPoint();\n\n// set fill linear gradient start point\nshape.fillLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8034,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3066
  },
  {
    "id": "Konva.Star#strokeLinearGradientStartPoint",
    "longname": "Konva.Star#strokeLinearGradientStartPoint",
    "name": "strokeLinearGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientStartPoint",
    "inherited": true,
    "description": "get/set stroke linear gradient start point",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point\nvar startPoint = shape.strokeLinearGradientStartPoint();\n\n// set stroke linear gradient start point\nshape.strokeLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8056,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3067
  },
  {
    "id": "Konva.Star#fillLinearGradientStartPointX",
    "longname": "Konva.Star#fillLinearGradientStartPointX",
    "name": "fillLinearGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPointX",
    "inherited": true,
    "description": "get/set fill linear gradient start point x",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill linear gradient start point x\nvar startPointX = shape.fillLinearGradientStartPointX();\n\n// set fill linear gradient start point x\nshape.fillLinearGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8075,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3068
  },
  {
    "id": "Konva.Star#linearLinearGradientStartPointX",
    "longname": "Konva.Star#linearLinearGradientStartPointX",
    "name": "linearLinearGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#linearLinearGradientStartPointX",
    "inherited": true,
    "description": "get/set stroke linear gradient start point x",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point x\nvar startPointX = shape.strokeLinearGradientStartPointX();\n\n// set stroke linear gradient start point x\nshape.strokeLinearGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8089,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3069
  },
  {
    "id": "Konva.Star#fillLinearGradientStartPointY",
    "longname": "Konva.Star#fillLinearGradientStartPointY",
    "name": "fillLinearGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPointY",
    "inherited": true,
    "description": "get/set fill linear gradient start point y",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill linear gradient start point y\nvar startPointY = shape.fillLinearGradientStartPointY();\n\n// set fill linear gradient start point y\nshape.fillLinearGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8103,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3070
  },
  {
    "id": "Konva.Star#strokeLinearGradientStartPointY",
    "longname": "Konva.Star#strokeLinearGradientStartPointY",
    "name": "strokeLinearGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientStartPointY",
    "inherited": true,
    "description": "get/set stroke linear gradient start point y",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point y\nvar startPointY = shape.strokeLinearGradientStartPointY();\n\n// set stroke linear gradient start point y\nshape.strokeLinearGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8117,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3071
  },
  {
    "id": "Konva.Star#fillLinearGradientEndPoint",
    "longname": "Konva.Star#fillLinearGradientEndPoint",
    "name": "fillLinearGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPoint",
    "inherited": true,
    "description": "get/set fill linear gradient end point",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get fill linear gradient end point\nvar endPoint = shape.fillLinearGradientEndPoint();\n\n// set fill linear gradient end point\nshape.fillLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8134,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3072
  },
  {
    "id": "Konva.Star#strokeLinearGradientEndPoint",
    "longname": "Konva.Star#strokeLinearGradientEndPoint",
    "name": "strokeLinearGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPoint",
    "inherited": true,
    "description": "get/set stroke linear gradient end point",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point\nvar endPoint = shape.strokeLinearGradientEndPoint();\n\n// set stroke linear gradient end point\nshape.strokeLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8156,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3073
  },
  {
    "id": "Konva.Star#fillLinearGradientEndPointX",
    "longname": "Konva.Star#fillLinearGradientEndPointX",
    "name": "fillLinearGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPointX",
    "inherited": true,
    "description": "get/set fill linear gradient end point x",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill linear gradient end point x\nvar endPointX = shape.fillLinearGradientEndPointX();\n\n// set fill linear gradient end point x\nshape.fillLinearGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8175,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3074
  },
  {
    "id": "Konva.Star#strokeLinearGradientEndPointX",
    "longname": "Konva.Star#strokeLinearGradientEndPointX",
    "name": "strokeLinearGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPointX",
    "inherited": true,
    "description": "get/set fill linear gradient end point x",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point x\nvar endPointX = shape.strokeLinearGradientEndPointX();\n\n// set stroke linear gradient end point x\nshape.strokeLinearGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8189,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3075
  },
  {
    "id": "Konva.Star#fillLinearGradientEndPointY",
    "longname": "Konva.Star#fillLinearGradientEndPointY",
    "name": "fillLinearGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPointY",
    "inherited": true,
    "description": "get/set fill linear gradient end point y",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill linear gradient end point y\nvar endPointY = shape.fillLinearGradientEndPointY();\n\n// set fill linear gradient end point y\nshape.fillLinearGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8203,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3076
  },
  {
    "id": "Konva.Star#strokeLinearGradientEndPointY",
    "longname": "Konva.Star#strokeLinearGradientEndPointY",
    "name": "strokeLinearGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPointY",
    "inherited": true,
    "description": "get/set stroke linear gradient end point y",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point y\nvar endPointY = shape.strokeLinearGradientEndPointY();\n\n// set stroke linear gradient end point y\nshape.strokeLinearGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8217,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3077
  },
  {
    "id": "Konva.Star#fillRadialGradientStartPoint",
    "longname": "Konva.Star#fillRadialGradientStartPoint",
    "name": "fillRadialGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPoint",
    "inherited": true,
    "description": "get/set fill radial gradient start point",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get fill radial gradient start point\nvar startPoint = shape.fillRadialGradientStartPoint();\n\n// set fill radial gradient start point\nshape.fillRadialGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8234,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3078
  },
  {
    "id": "Konva.Star#fillRadialGradientStartPointX",
    "longname": "Konva.Star#fillRadialGradientStartPointX",
    "name": "fillRadialGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPointX",
    "inherited": true,
    "description": "get/set fill radial gradient start point x",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill radial gradient start point x\nvar startPointX = shape.fillRadialGradientStartPointX();\n\n// set fill radial gradient start point x\nshape.fillRadialGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8253,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3079
  },
  {
    "id": "Konva.Star#fillRadialGradientStartPointY",
    "longname": "Konva.Star#fillRadialGradientStartPointY",
    "name": "fillRadialGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPointY",
    "inherited": true,
    "description": "get/set fill radial gradient start point y",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill radial gradient start point y\nvar startPointY = shape.fillRadialGradientStartPointY();\n\n// set fill radial gradient start point y\nshape.fillRadialGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8267,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3080
  },
  {
    "id": "Konva.Star#fillRadialGradientEndPoint",
    "longname": "Konva.Star#fillRadialGradientEndPoint",
    "name": "fillRadialGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPoint",
    "inherited": true,
    "description": "get/set fill radial gradient end point",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get fill radial gradient end point\nvar endPoint = shape.fillRadialGradientEndPoint();\n\n// set fill radial gradient end point\nshape.fillRadialGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8284,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3081
  },
  {
    "id": "Konva.Star#fillRadialGradientEndPointX",
    "longname": "Konva.Star#fillRadialGradientEndPointX",
    "name": "fillRadialGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPointX",
    "inherited": true,
    "description": "get/set fill radial gradient end point x",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill radial gradient end point x\nvar endPointX = shape.fillRadialGradientEndPointX();\n\n// set fill radial gradient end point x\nshape.fillRadialGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8303,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3082
  },
  {
    "id": "Konva.Star#fillRadialGradientEndPointY",
    "longname": "Konva.Star#fillRadialGradientEndPointY",
    "name": "fillRadialGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPointY",
    "inherited": true,
    "description": "get/set fill radial gradient end point y",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill radial gradient end point y\nvar endPointY = shape.fillRadialGradientEndPointY();\n\n// set fill radial gradient end point y\nshape.fillRadialGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8317,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3083
  },
  {
    "id": "Konva.Star#fillPatternRotation",
    "longname": "Konva.Star#fillPatternRotation",
    "name": "fillPatternRotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternRotation",
    "inherited": true,
    "description": "get/set fill pattern rotation in degrees",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get fill pattern rotation\nvar patternRotation = shape.fillPatternRotation();\n\n// set fill pattern rotation\nshape.fillPatternRotation(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8331,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3084
  },
  {
    "id": "Konva.Star#fillRule",
    "longname": "Konva.Star#fillRule",
    "name": "fillRule",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRule",
    "inherited": true,
    "description": "get/set fill rule",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "CanvasFillRule"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get fill rule\nvar fillRule = shape.fillRule();\n\n// set fill rule\nshape.fillRule('evenodd');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8345,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3085
  },
  {
    "id": "Konva.Star#clearCache",
    "longname": "Konva.Star#clearCache",
    "name": "clearCache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#clearCache",
    "inherited": true,
    "description": "clear cached canvas",
    "memberof": "Konva.Star",
    "examples": [
      "node.clearCache();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2632,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3086
  },
  {
    "id": "Konva.Star#cache",
    "longname": "Konva.Star#cache",
    "name": "cache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#cache",
    "inherited": true,
    "description": "cache node to improve drawing performance, apply filters, or create more accurate\n hit regions. For all basic shapes size of cache canvas will be automatically detected.\n If you need to cache your custom `Konva.Shape` instance you have to pass shape's bounding box\n properties. Look at [https://konvajs.org/docs/performance/Shape_Caching.html](https://konvajs.org/docs/performance/Shape_Caching.html) for more information.",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "increase canvas size by `offset` pixel in all directions.",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "when set to true, a red border will be drawn around the cached\n region for debugging purposes",
        "name": "config.drawBorder"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "change quality (or pixel ratio) of cached image. pixelRatio = 2 will produce 2x sized cache.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "control imageSmoothingEnabled property of created canvas for cache",
        "name": "config.imageSmoothingEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "change quality (or pixel ratio) of cached hit canvas.",
        "name": "config.hitCanvasPixelRatio"
      }
    ],
    "examples": [
      "// cache a shape with the x,y position of the bounding box at the center and\n// the width and height of the bounding box equal to the width and height of\n// the shape obtained from shape.width() and shape.height()\nimage.cache();\n\n// cache a node and define the bounding box position and size\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200\n});\n\n// cache a node and draw a red border around the bounding box\n// for debugging purposes\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200,\n  offset : 10,\n  drawBorder: true\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2650,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3087
  },
  {
    "id": "Konva.Star#isCached",
    "longname": "Konva.Star#isCached",
    "name": "isCached",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isCached",
    "inherited": true,
    "description": "determine if node is currently cached",
    "memberof": "Konva.Star",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2788,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3088
  },
  {
    "id": "Konva.Star#getClientRect",
    "longname": "Konva.Star#getClientRect",
    "name": "getClientRect",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getClientRect",
    "inherited": true,
    "description": "Return client rectangle `{x, y, width, height}` of node. This rectangle also include all styling (strokes, shadows, etc).\nThe purpose of the method is similar to getBoundingClientRect API of the DOM.",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply transform to node for calculating rect?",
        "name": "config.skipTransform"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply shadow to the node for calculating bound box?",
        "name": "config.skipShadow"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply stroke to the node for calculating bound box?",
        "name": "config.skipStroke"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "calculate client rect relative to one of the parents",
        "name": "config.relativeTo"
      }
    ],
    "examples": [
      "var rect = new Konva.Rect({\n     width : 100,\n     height : 100,\n     x : 50,\n     y : 50,\n     strokeWidth : 4,\n     stroke : 'black',\n     offsetX : 50,\n     scaleY : 2\n});\n\n// get client rect without think off transformations (position, rotation, scale, offset, etc)\nrect.getClientRect({ skipTransform: true});\n// returns {\n//     x : -2,   // two pixels for stroke / 2\n//     y : -2,\n//     width : 104, // increased by 4 for stroke\n//     height : 104\n//}\n\n// get client rect with transformation applied\nrect.getClientRect();\n// returns Object {x: -2, y: 46, width: 104, height: 208}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "rect with `{x, y, width, height}` properties"
      }
    ],
    "meta": {
      "lineno": 2797,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3089
  },
  {
    "id": "Konva.Star#on",
    "longname": "Konva.Star#on",
    "name": "on",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#on",
    "inherited": true,
    "description": "bind events to the node. KonvaJS supports mouseover, mousemove,\n mouseout, mouseenter, mouseleave, mousedown, mouseup, wheel, contextmenu, click, dblclick, touchstart, touchmove,\n touchend, tap, dbltap, dragstart, dragmove, and dragend events.\n Pass in a string of events delimited by a space to bind multiple events at once\n such as 'mousedown mouseup mousemove'. Include a namespace to bind an\n event by name such as 'click.foobar'.",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'click', 'mousedown touchstart', 'mousedown.foo touchstart.foo'",
        "name": "evtStr"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The handler function. The first argument of that function is event object. Event object has `target` as main target of the event, `currentTarget` as current node listener and `evt` as native browser event.",
        "name": "handler"
      }
    ],
    "examples": [
      "// add click listener\nnode.on('click', function() {\n  console.log('you clicked me!');\n});\n\n// get the target node\nnode.on('click', function(evt) {\n  console.log(evt.target);\n});\n\n// stop event propagation\nnode.on('click', function(evt) {\n  evt.cancelBubble = true;\n});\n\n// bind multiple listeners\nnode.on('click touchstart', function() {\n  console.log('you clicked/touched me!');\n});\n\n// namespace listener\nnode.on('click.foo', function() {\n  console.log('you clicked/touched me!');\n});\n\n// get the event type\nnode.on('click tap', function(evt) {\n  var eventType = evt.type;\n});\n\n// get native event object\nnode.on('click tap', function(evt) {\n  var nativeEvent = evt.evt;\n});\n\n// for change events, get the old and new val\nnode.on('xChange', function(evt) {\n  var oldVal = evt.oldVal;\n  var newVal = evt.newVal;\n});\n\n// get event targets\n// with event delegations\nlayer.on('click', 'Group', function(evt) {\n  var shape = evt.target;\n  var group = evt.currentTarget;\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2919,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3090
  },
  {
    "id": "Konva.Star#off",
    "longname": "Konva.Star#off",
    "name": "off",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#off",
    "inherited": true,
    "description": "remove event bindings from the node. Pass in a string of\n event types delimmited by a space to remove multiple event\n bindings at once such as 'mousedown mouseup mousemove'.\n include a namespace to remove an event binding by name\n such as 'click.foobar'. If you only give a name like '.foobar',\n all events in that namespace will be removed.",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'click', 'mousedown touchstart', '.foobar'",
        "name": "evtStr"
      }
    ],
    "examples": [
      "// remove listener\nnode.off('click');\n\n// remove multiple listeners\nnode.off('click touchstart');\n\n// remove listener by name\nnode.off('click.foo');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3007,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3091
  },
  {
    "id": "Konva.Star#remove",
    "longname": "Konva.Star#remove",
    "name": "remove",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#remove",
    "inherited": true,
    "description": "remove a node from parent, but don't destroy. You can reuse the node later.",
    "memberof": "Konva.Star",
    "examples": [
      "node.remove();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3088,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3092
  },
  {
    "id": "Konva.Star#destroy",
    "longname": "Konva.Star#destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#destroy",
    "inherited": true,
    "description": "remove and destroy a node. Kill it and delete forever! You should not reuse node after destroy().\nIf the node is a container (Group, Stage or Layer) it will destroy all children too.",
    "memberof": "Konva.Star",
    "examples": [
      "node.destroy();"
    ],
    "meta": {
      "lineno": 3125,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3093
  },
  {
    "id": "Konva.Star#getAttr",
    "longname": "Konva.Star#getAttr",
    "name": "getAttr",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAttr",
    "inherited": true,
    "description": "get attr",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "attr"
      }
    ],
    "examples": [
      "var x = node.getAttr('x');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer",
            "String",
            "Object",
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3138,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3094
  },
  {
    "id": "Konva.Star#getAncestors",
    "longname": "Konva.Star#getAncestors",
    "name": "getAncestors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAncestors",
    "inherited": true,
    "description": "get ancestors",
    "memberof": "Konva.Star",
    "examples": [
      "shape.getAncestors().forEach(function(node) {\n  console.log(node.getId());\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3155,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3095
  },
  {
    "id": "Konva.Star#getAttrs",
    "longname": "Konva.Star#getAttrs",
    "name": "getAttrs",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAttrs",
    "inherited": true,
    "description": "get attrs object literal",
    "memberof": "Konva.Star",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3173,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3096
  },
  {
    "id": "Konva.Star#setAttrs",
    "longname": "Konva.Star#setAttrs",
    "name": "setAttrs",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#setAttrs",
    "inherited": true,
    "description": "set multiple attrs at once using an object literal",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "object containing key value pairs",
        "name": "config"
      }
    ],
    "examples": [
      "node.setAttrs({\n  x: 5,\n  fill: 'red'\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3182,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3097
  },
  {
    "id": "Konva.Star#isListening",
    "longname": "Konva.Star#isListening",
    "name": "isListening",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isListening",
    "inherited": true,
    "description": "determine if node is listening for events by taking into account ancestors.\n\nParent    | Self      | isListening\nlistening | listening |\n----------+-----------+------------\nT         | T         | T\nT         | F         | F\nF         | T         | F\nF         | F         | F",
    "memberof": "Konva.Star",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3217,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3098
  },
  {
    "id": "Konva.Star#isVisible",
    "longname": "Konva.Star#isVisible",
    "name": "isVisible",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isVisible",
    "inherited": true,
    "description": "determine if node is visible by taking into account ancestors.\n\nParent    | Self      | isVisible\nvisible   | visible   |\n----------+-----------+------------\nT         | T         | T\nT         | F         | F\nF         | T         | F\nF         | F         | F",
    "memberof": "Konva.Star",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3248,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3099
  },
  {
    "id": "Konva.Star#show",
    "longname": "Konva.Star#show",
    "name": "show",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#show",
    "inherited": true,
    "description": "show node. set visible = true",
    "memberof": "Konva.Star",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3300,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3100
  },
  {
    "id": "Konva.Star#hide",
    "longname": "Konva.Star#hide",
    "name": "hide",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hide",
    "inherited": true,
    "description": "hide node.  Hidden nodes are no longer detectable",
    "memberof": "Konva.Star",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3310,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3101
  },
  {
    "id": "Konva.Star#getAbsoluteZIndex",
    "longname": "Konva.Star#getAbsoluteZIndex",
    "name": "getAbsoluteZIndex",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteZIndex",
    "inherited": true,
    "description": "get absolute z-index which takes into account sibling\n and ancestor indices",
    "memberof": "Konva.Star",
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3323,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3102
  },
  {
    "id": "Konva.Star#getDepth",
    "longname": "Konva.Star#getDepth",
    "name": "getDepth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getDepth",
    "inherited": true,
    "description": "get node depth in node tree.  Returns an integer.\n e.g. Stage depth will always be 0.  Layers will always be 1.  Groups and Shapes will always\n be >= 2",
    "memberof": "Konva.Star",
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3355,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3103
  },
  {
    "id": "Konva.Star#getRelativePointerPosition",
    "longname": "Konva.Star#getRelativePointerPosition",
    "name": "getRelativePointerPosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getRelativePointerPosition",
    "inherited": true,
    "description": "get position of first pointer (like mouse or first touch) relative to local coordinates of current node",
    "memberof": "Konva.Star",
    "examples": [
      "// let's think we have a rectangle at position x = 10, y = 10\n// now we clicked at x = 15, y = 15 of the stage\n// if you want to know position of the click, related to the rectangle you can use\nrect.getRelativePointerPosition();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3398,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3104
  },
  {
    "id": "Konva.Star#getAbsolutePosition",
    "longname": "Konva.Star#getAbsolutePosition",
    "name": "getAbsolutePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsolutePosition",
    "inherited": true,
    "description": "get absolute position of a node. That function can be used to calculate absolute position, but relative to any ancestor",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "optional ancestor node",
        "name": "Ancestor"
      }
    ],
    "examples": [
      "// returns absolute position relative to top-left corner of canvas\nnode.getAbsolutePosition();\n\n// calculate absolute position of node, inside stage\n// so stage transforms are ignored\nnode.getAbsolutePosition(stage)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3426,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3105
  },
  {
    "id": "Konva.Star#move",
    "longname": "Konva.Star#move",
    "name": "move",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#move",
    "inherited": true,
    "description": "move node by an amount relative to its current position",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "change"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "change.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "change.y"
      }
    ],
    "examples": [
      "// move node in x direction by 1px and y direction by 2px\nnode.move({\n  x: 1,\n  y: 2\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3514,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3106
  },
  {
    "id": "Konva.Star#rotate",
    "longname": "Konva.Star#rotate",
    "name": "rotate",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#rotate",
    "inherited": true,
    "description": "rotate node by an amount in degrees relative to its current rotation",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "theta"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3559,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3107
  },
  {
    "id": "Konva.Star#moveToTop",
    "longname": "Konva.Star#moveToTop",
    "name": "moveToTop",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveToTop",
    "inherited": true,
    "description": "move node to the top of its siblings",
    "memberof": "Konva.Star",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3570,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3108
  },
  {
    "id": "Konva.Star#moveUp",
    "longname": "Konva.Star#moveUp",
    "name": "moveUp",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveUp",
    "inherited": true,
    "description": "move node up",
    "memberof": "Konva.Star",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "flag is moved or not"
      }
    ],
    "meta": {
      "lineno": 3590,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3109
  },
  {
    "id": "Konva.Star#moveDown",
    "longname": "Konva.Star#moveDown",
    "name": "moveDown",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveDown",
    "inherited": true,
    "description": "move node down",
    "memberof": "Konva.Star",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3610,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3110
  },
  {
    "id": "Konva.Star#moveToBottom",
    "longname": "Konva.Star#moveToBottom",
    "name": "moveToBottom",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveToBottom",
    "inherited": true,
    "description": "move node to the bottom of its siblings",
    "memberof": "Konva.Star",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3630,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3111
  },
  {
    "id": "Konva.Star#getAbsoluteOpacity",
    "longname": "Konva.Star#getAbsoluteOpacity",
    "name": "getAbsoluteOpacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteOpacity",
    "inherited": true,
    "description": "get absolute opacity",
    "memberof": "Konva.Star",
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3668,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3112
  },
  {
    "id": "Konva.Star#moveTo",
    "longname": "Konva.Star#moveTo",
    "name": "moveTo",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveTo",
    "inherited": true,
    "description": "move node to another container",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Container"
          ]
        },
        "name": "newContainer"
      }
    ],
    "examples": [
      "// move node from current layer into layer2\nnode.moveTo(layer2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3685,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3113
  },
  {
    "id": "Konva.Star#toObject",
    "longname": "Konva.Star#toObject",
    "name": "toObject",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toObject",
    "inherited": true,
    "description": "convert Node into an object for serialization.  Returns an object.",
    "memberof": "Konva.Star",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3703,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3114
  },
  {
    "id": "Konva.Star#toJSON",
    "longname": "Konva.Star#toJSON",
    "name": "toJSON",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toJSON",
    "inherited": true,
    "description": "convert Node into a JSON string.  Returns a JSON string.",
    "memberof": "Konva.Star",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3736,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3115
  },
  {
    "id": "Konva.Star#getParent",
    "longname": "Konva.Star#getParent",
    "name": "getParent",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getParent",
    "inherited": true,
    "description": "get parent container",
    "memberof": "Konva.Star",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3745,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3116
  },
  {
    "id": "Konva.Star#findAncestors",
    "longname": "Konva.Star#findAncestors",
    "name": "findAncestors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#findAncestors",
    "inherited": true,
    "description": "get all ancestors (parent then parent of the parent, etc) of the node",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "selector for search",
        "name": "selector"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "show we think that node is ancestro itself?",
        "name": "includeSelf"
      },
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "optional": true,
        "description": "optional node where we need to stop searching (one of ancestors)",
        "name": "stopNode"
      }
    ],
    "examples": [
      "// get one of the parent group\nvar parentGroups = node.findAncestors('Group');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "[ancestors]"
      }
    ],
    "meta": {
      "lineno": 3754,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3117
  },
  {
    "id": "Konva.Star#findAncestor",
    "longname": "Konva.Star#findAncestor",
    "name": "findAncestor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#findAncestor",
    "inherited": true,
    "description": "get ancestor (parent or parent of the parent, etc) of the node that match passed selector",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "selector for search",
        "name": "selector"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "show we think that node is ancestro itself?",
        "name": "includeSelf"
      },
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "optional": true,
        "description": "optional node where we need to stop searching (one of ancestors)",
        "name": "stopNode"
      }
    ],
    "examples": [
      "// get one of the parent group\nvar group = node.findAncestors('.mygroup');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "description": "ancestor"
      }
    ],
    "meta": {
      "lineno": 3786,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3118
  },
  {
    "id": "Konva.Star#getLayer",
    "longname": "Konva.Star#getLayer",
    "name": "getLayer",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getLayer",
    "inherited": true,
    "description": "get layer ancestor",
    "memberof": "Konva.Star",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Layer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3837,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3119
  },
  {
    "id": "Konva.Star#getStage",
    "longname": "Konva.Star#getStage",
    "name": "getStage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getStage",
    "inherited": true,
    "description": "get stage ancestor",
    "memberof": "Konva.Star",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Stage"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3847,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3120
  },
  {
    "id": "Konva.Star#fire",
    "longname": "Konva.Star#fire",
    "name": "fire",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#fire",
    "inherited": true,
    "description": "fire event",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "event type.  can be a regular event, like click, mouseover, or mouseout, or it can be a custom event, like myCustomEvent",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "Event"
          ]
        },
        "optional": true,
        "description": "event object",
        "name": "evt"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "setting the value to false, or leaving it undefined, will result in the event\n not bubbling.  Setting the value to true will result in the event bubbling.",
        "name": "bubble"
      }
    ],
    "examples": [
      "// manually fire click event\nnode.fire('click');\n\n// fire custom event\nnode.fire('foo');\n\n// fire custom event with custom event object\nnode.fire('foo', {\n  bar: 10\n});\n\n// fire click event that bubbles\nnode.fire('click', null, true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3865,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3121
  },
  {
    "id": "Konva.Star#getAbsoluteTransform",
    "longname": "Konva.Star#getAbsoluteTransform",
    "name": "getAbsoluteTransform",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteTransform",
    "inherited": true,
    "description": "get absolute transform of the node which takes into\n account its ancestor transforms",
    "memberof": "Konva.Star",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3901,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3122
  },
  {
    "id": "Konva.Star#getAbsoluteScale",
    "longname": "Konva.Star#getAbsoluteScale",
    "name": "getAbsoluteScale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteScale",
    "inherited": true,
    "description": "get absolute scale of the node which takes into\n account its ancestor scales",
    "memberof": "Konva.Star",
    "examples": [
      "// get absolute scale x\nvar scaleX = node.getAbsoluteScale().x;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3961,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3123
  },
  {
    "id": "Konva.Star#getAbsoluteRotation",
    "longname": "Konva.Star#getAbsoluteRotation",
    "name": "getAbsoluteRotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteRotation",
    "inherited": true,
    "description": "get absolute rotation of the node which takes into\n account its ancestor rotations",
    "memberof": "Konva.Star",
    "examples": [
      "// get absolute rotation\nvar rotation = node.getAbsoluteRotation();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3989,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3124
  },
  {
    "id": "Konva.Star#getTransform",
    "longname": "Konva.Star#getTransform",
    "name": "getTransform",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getTransform",
    "inherited": true,
    "description": "get transform of the node",
    "memberof": "Konva.Star",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4009,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3125
  },
  {
    "id": "Konva.Star#clone",
    "longname": "Konva.Star#clone",
    "name": "clone",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#clone",
    "inherited": true,
    "description": "clone node.  Returns a new Node instance with identical attributes.  You can also override\n the node properties with an object literal, enabling you to use an existing node as a template\n for another node",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "override attrs",
        "name": "obj"
      }
    ],
    "examples": [
      "// simple clone\nvar clone = node.clone();\n\n// clone a node and override the x position\nvar clone = rect.clone({\n  x: 5\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4044,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3126
  },
  {
    "id": "Konva.Star#toCanvas",
    "longname": "Konva.Star#toCanvas",
    "name": "toCanvas",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toCanvas",
    "inherited": true,
    "description": "converts node into an canvas element.",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output canvas. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var canvas = node.toCanvas();"
    ],
    "meta": {
      "lineno": 4119,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3127
  },
  {
    "id": "Konva.Star#toDataURL",
    "longname": "Konva.Star#toDataURL",
    "name": "toDataURL",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toDataURL",
    "inherited": true,
    "description": "Creates a composite data URL (base64 string). If MIME type is not\nspecified, then \"image/png\" will result. For \"image/jpeg\", specify a quality\nlevel as quality (range 0.0 - 1.0)",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"image/png\" or \"image/jpeg\".\n \"image/png\" is the default",
        "name": "config.mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "jpeg quality.  If using an \"image/jpeg\" mimeType,\n you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n is very high quality",
        "name": "config.quality"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output image url. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4140,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3128
  },
  {
    "id": "Konva.Star#toImage",
    "longname": "Konva.Star#toImage",
    "name": "toImage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toImage",
    "inherited": true,
    "description": "converts node into an image.  Since the toImage\n method is asynchronous, the resulting image can only be retrieved from the config callback\n or the returned Promise.  toImage is most commonly used\n to cache complex drawings as an image so that they don't have to constantly be redrawn",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"image/png\" or \"image/jpeg\".\n \"image/png\" is the default",
        "name": "config.mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "jpeg quality.  If using an \"image/jpeg\" mimeType,\n you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n is very high quality",
        "name": "config.quality"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output image. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var image = node.toImage({\n  callback(img) {\n    // do stuff with img\n  }\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Image>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4172,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3129
  },
  {
    "id": "Konva.Star#toBlob",
    "longname": "Konva.Star#toBlob",
    "name": "toBlob",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toBlob",
    "inherited": true,
    "description": "Converts node into a blob.  Since the toBlob method is asynchronous,\n the resulting blob can only be retrieved from the config callback\n or the returned Promise.",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output canvas. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var blob = await node.toBlob({});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Blob>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4219,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3130
  },
  {
    "id": "Konva.Star#getClassName",
    "longname": "Konva.Star#getClassName",
    "name": "getClassName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getClassName",
    "inherited": true,
    "description": "get class name, which may return Stage, Layer, Group, or shape class names like Rect, Circle, Text, etc.",
    "memberof": "Konva.Star",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4267,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3131
  },
  {
    "id": "Konva.Star#getType",
    "longname": "Konva.Star#getType",
    "name": "getType",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getType",
    "inherited": true,
    "description": "get the node type, which may return Stage, Layer, Group, or Shape",
    "memberof": "Konva.Star",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4276,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3132
  },
  {
    "id": "Konva.Star#addName",
    "longname": "Konva.Star#addName",
    "name": "addName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#addName",
    "inherited": true,
    "description": "add name to node",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red');\nnode.addName('selected');\nnode.name(); // return 'red selected'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4324,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3133
  },
  {
    "id": "Konva.Star#hasName",
    "longname": "Konva.Star#hasName",
    "name": "hasName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hasName",
    "inherited": true,
    "description": "check is node has name",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red');\nnode.hasName('red');   // return true\nnode.hasName('selected'); // return false\nnode.hasName(''); // return false"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4343,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3134
  },
  {
    "id": "Konva.Star#removeName",
    "longname": "Konva.Star#removeName",
    "name": "removeName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#removeName",
    "inherited": true,
    "description": "remove name from node",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red selected');\nnode.removeName('selected');\nnode.hasName('selected'); // return false\nnode.name(); // return 'red'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4367,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3135
  },
  {
    "id": "Konva.Star#setAttr",
    "longname": "Konva.Star#setAttr",
    "name": "setAttr",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#setAttr",
    "inherited": true,
    "description": "set attr",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "attr"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "name": "val"
      }
    ],
    "examples": [
      "node.setAttr('x', 5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4388,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3136
  },
  {
    "id": "Konva.Star#draw",
    "longname": "Konva.Star#draw",
    "name": "draw",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#draw",
    "inherited": true,
    "description": "draw both scene and hit graphs.  If the node being drawn is the stage, all of the layers will be cleared and redrawn",
    "memberof": "Konva.Star",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4511,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3137
  },
  {
    "id": "Konva.Star#startDrag",
    "longname": "Konva.Star#startDrag",
    "name": "startDrag",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#startDrag",
    "inherited": true,
    "description": "initiate drag and drop.",
    "memberof": "Konva.Star",
    "meta": {
      "lineno": 4544,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3138
  },
  {
    "id": "Konva.Star#stopDrag",
    "longname": "Konva.Star#stopDrag",
    "name": "stopDrag",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#stopDrag",
    "inherited": true,
    "description": "stop drag and drop",
    "memberof": "Konva.Star",
    "meta": {
      "lineno": 4590,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3139
  },
  {
    "id": "Konva.Star#isDragging",
    "longname": "Konva.Star#isDragging",
    "name": "isDragging",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isDragging",
    "inherited": true,
    "description": "determine if node is currently in drag and drop mode",
    "memberof": "Konva.Star",
    "meta": {
      "lineno": 4607,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3140
  },
  {
    "id": "Konva.Star#isClientRectOnScreen",
    "longname": "Konva.Star#isClientRectOnScreen",
    "name": "isClientRectOnScreen",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isClientRectOnScreen",
    "inherited": true,
    "description": "determine if node (at least partially) is currently in user-visible area",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number",
            "Object"
          ]
        },
        "description": "optional margin in pixels",
        "name": "margin"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "margin.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "margin.y"
      }
    ],
    "examples": [
      "// get index\n// default calculations\nvar isOnScreen = node.isClientRectOnScreen()\n// increase object size (or screen size) for cases when objects close to the screen still need to be marked as \"visible\"\nvar isOnScreen = node.isClientRectOnScreen({ x: stage.width(), y: stage.height() })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4671,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3141
  },
  {
    "id": "Konva.Star#zIndex",
    "longname": "Konva.Star#zIndex",
    "name": "zIndex",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#zIndex",
    "inherited": true,
    "description": "get/set zIndex relative to the node's siblings who share the same parent.\nPlease remember that zIndex is not absolute (like in CSS). It is relative to parent element only.",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "index"
      }
    ],
    "examples": [
      "// get index\nvar index = node.zIndex();\n\n// set index\nnode.zIndex(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4764,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3142
  },
  {
    "id": "Konva.Star#absolutePosition",
    "longname": "Konva.Star#absolutePosition",
    "name": "absolutePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#absolutePosition",
    "inherited": true,
    "description": "get/set node absolute position",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "// get position\nvar position = node.absolutePosition();\n\n// set position\nnode.absolutePosition({\n  x: 5,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4779,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3143
  },
  {
    "id": "Konva.Star#position",
    "longname": "Konva.Star#position",
    "name": "position",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#position",
    "inherited": true,
    "description": "get/set node position relative to parent",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "// get position\nvar position = node.position();\n\n// set position\nnode.position({\n  x: 5,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4799,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3144
  },
  {
    "id": "Konva.Star#x",
    "longname": "Konva.Star#x",
    "name": "x",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#x",
    "inherited": true,
    "description": "get/set x position",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get x\nvar x = node.x();\n\n// set x\nnode.x(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4818,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3145
  },
  {
    "id": "Konva.Star#y",
    "longname": "Konva.Star#y",
    "name": "y",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#y",
    "inherited": true,
    "description": "get/set y position",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get y\nvar y = node.y();\n\n// set y\nnode.y(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4832,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3146
  },
  {
    "id": "Konva.Star#globalCompositeOperation",
    "longname": "Konva.Star#globalCompositeOperation",
    "name": "globalCompositeOperation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#globalCompositeOperation",
    "inherited": true,
    "description": "get/set globalCompositeOperation of a node. globalCompositeOperation DOESN'T affect hit graph of nodes. So they are still trigger to events as they have default \"source-over\" globalCompositeOperation.",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "type"
      }
    ],
    "examples": [
      "// get globalCompositeOperation\nvar globalCompositeOperation = shape.globalCompositeOperation();\n\n// set globalCompositeOperation\nshape.globalCompositeOperation('source-in');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4846,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3147
  },
  {
    "id": "Konva.Star#opacity",
    "longname": "Konva.Star#opacity",
    "name": "opacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#opacity",
    "inherited": true,
    "description": "get/set opacity.  Opacity values range from 0 to 1.\n A node with an opacity of 0 is fully transparent, and a node\n with an opacity of 1 is fully opaque",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "opacity"
      }
    ],
    "examples": [
      "// get opacity\nvar opacity = node.opacity();\n\n// set opacity\nnode.opacity(0.5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4860,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3148
  },
  {
    "id": "Konva.Star#name",
    "longname": "Konva.Star#name",
    "name": "name",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#name",
    "inherited": true,
    "description": "get/set name.",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "// get name\nvar name = node.name();\n\n// set name\nnode.name('foo');\n\n// also node may have multiple names (as css classes)\nnode.name('foo bar');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4876,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3149
  },
  {
    "id": "Konva.Star#id",
    "longname": "Konva.Star#id",
    "name": "id",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#id",
    "inherited": true,
    "description": "get/set id. Id is global for whole page.",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "id"
      }
    ],
    "examples": [
      "// get id\nvar name = node.id();\n\n// set id\nnode.id('foo');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4893,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3150
  },
  {
    "id": "Konva.Star#rotation",
    "longname": "Konva.Star#rotation",
    "name": "rotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#rotation",
    "inherited": true,
    "description": "get/set rotation in degrees",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get rotation in degrees\nvar rotation = node.rotation();\n\n// set rotation in degrees\nnode.rotation(45);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4907,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3151
  },
  {
    "id": "Konva.Star#scale",
    "longname": "Konva.Star#scale",
    "name": "scale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scale",
    "inherited": true,
    "description": "get/set scale",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.y"
      }
    ],
    "examples": [
      "// get scale\nvar scale = node.scale();\n\n// set scale\nshape.scale({\n  x: 2,\n  y: 3\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4921,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3152
  },
  {
    "id": "Konva.Star#scaleX",
    "longname": "Konva.Star#scaleX",
    "name": "scaleX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scaleX",
    "inherited": true,
    "description": "get/set scale x",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get scale x\nvar scaleX = node.scaleX();\n\n// set scale x\nnode.scaleX(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4940,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3153
  },
  {
    "id": "Konva.Star#scaleY",
    "longname": "Konva.Star#scaleY",
    "name": "scaleY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scaleY",
    "inherited": true,
    "description": "get/set scale y",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get scale y\nvar scaleY = node.scaleY();\n\n// set scale y\nnode.scaleY(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4954,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3154
  },
  {
    "id": "Konva.Star#skew",
    "longname": "Konva.Star#skew",
    "name": "skew",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skew",
    "inherited": true,
    "description": "get/set skew",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "skew"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "skew.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "skew.y"
      }
    ],
    "examples": [
      "// get skew\nvar skew = node.skew();\n\n// set skew\nnode.skew({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4968,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3155
  },
  {
    "id": "Konva.Star#skewX",
    "longname": "Konva.Star#skewX",
    "name": "skewX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skewX",
    "inherited": true,
    "description": "get/set skew x",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get skew x\nvar skewX = node.skewX();\n\n// set skew x\nnode.skewX(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4987,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3156
  },
  {
    "id": "Konva.Star#skewY",
    "longname": "Konva.Star#skewY",
    "name": "skewY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skewY",
    "inherited": true,
    "description": "get/set skew y",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get skew y\nvar skewY = node.skewY();\n\n// set skew y\nnode.skewY(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5001,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3157
  },
  {
    "id": "Konva.Star#offsetX",
    "longname": "Konva.Star#offsetX",
    "name": "offsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#offsetX",
    "inherited": true,
    "description": "get/set offset x",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get offset x\nvar offsetX = node.offsetX();\n\n// set offset x\nnode.offsetX(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5033,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3158
  },
  {
    "id": "Konva.Star#offsetY",
    "longname": "Konva.Star#offsetY",
    "name": "offsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#offsetY",
    "inherited": true,
    "description": "get/set offset y",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get offset y\nvar offsetY = node.offsetY();\n\n// set offset y\nnode.offsetY(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5047,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3159
  },
  {
    "id": "Konva.Star#dragDistance",
    "longname": "Konva.Star#dragDistance",
    "name": "dragDistance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#dragDistance",
    "inherited": true,
    "description": "get/set drag distance",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "distance"
      }
    ],
    "examples": [
      "// get drag distance\nvar dragDistance = node.dragDistance();\n\n// set distance\n// node starts dragging only if pointer moved more then 3 pixels\nnode.dragDistance(3);\n// or set globally\nKonva.dragDistance = 3;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5061,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3160
  },
  {
    "id": "Konva.Star#width",
    "longname": "Konva.Star#width",
    "name": "width",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#width",
    "inherited": true,
    "description": "get/set width",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "width"
      }
    ],
    "examples": [
      "// get width\nvar width = node.width();\n\n// set width\nnode.width(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5078,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3161
  },
  {
    "id": "Konva.Star#height",
    "longname": "Konva.Star#height",
    "name": "height",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#height",
    "inherited": true,
    "description": "get/set height",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "height"
      }
    ],
    "examples": [
      "// get height\nvar height = node.height();\n\n// set height\nnode.height(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5092,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3162
  },
  {
    "id": "Konva.Star#listening",
    "longname": "Konva.Star#listening",
    "name": "listening",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#listening",
    "inherited": true,
    "description": "get/set listening attr.  If you need to determine if a node is listening or not\n  by taking into account its parents, use the isListening() method\n  nodes with listening set to false will not be detected in hit graph\n  so they will be ignored in container.getIntersection() method",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "Can be true, or false.  The default is true.",
        "name": "listening"
      }
    ],
    "examples": [
      "// get listening attr\nvar listening = node.listening();\n\n// stop listening for events, remove node and all its children from hit graph\nnode.listening(false);\n\n// listen to events according to the parent\nnode.listening(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5106,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3163
  },
  {
    "id": "Konva.Star#preventDefault",
    "longname": "Konva.Star#preventDefault",
    "name": "preventDefault",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#preventDefault",
    "inherited": true,
    "description": "get/set preventDefault\nBy default all shapes will prevent default behavior\nof a browser on a pointer move or tap.\nthat will prevent native scrolling when you are trying to drag&drop a node\nbut sometimes you may need to enable default actions\nin that case you can set the property to false",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "preventDefault"
      }
    ],
    "examples": [
      "// get preventDefault\nvar shouldPrevent = shape.preventDefault();\n\n// set preventDefault\nshape.preventDefault(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5125,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3164
  },
  {
    "id": "Konva.Star#filters",
    "longname": "Konva.Star#filters",
    "name": "filters",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#filters",
    "inherited": true,
    "description": "get/set filters.  Filters are applied to cached canvases",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "array of filters",
        "name": "filters"
      }
    ],
    "examples": [
      "// get filters\nvar filters = node.filters();\n\n// set a single filter\nnode.cache();\nnode.filters([Konva.Filters.Blur]);\n\n// set multiple filters\nnode.cache();\nnode.filters([\n  Konva.Filters.Blur,\n  Konva.Filters.Sepia,\n  Konva.Filters.Invert\n]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5148,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3165
  },
  {
    "id": "Konva.Star#visible",
    "longname": "Konva.Star#visible",
    "name": "visible",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#visible",
    "inherited": true,
    "description": "get/set visible attr.  Can be true, or false.  The default is true.\n  If you need to determine if a node is visible or not\n  by taking into account its parents, use the isVisible() method",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "visible"
      }
    ],
    "examples": [
      "// get visible attr\nvar visible = node.visible();\n\n// make invisible\nnode.visible(false);\n\n// make visible (according to the parent)\nnode.visible(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5171,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3166
  },
  {
    "id": "Konva.Star#transformsEnabled",
    "longname": "Konva.Star#transformsEnabled",
    "name": "transformsEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#transformsEnabled",
    "inherited": true,
    "description": "get/set transforms that are enabled.  Can be \"all\", \"none\", or \"position\".  The default\n is \"all\"",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// enable position transform only to improve draw performance\nnode.transformsEnabled('position');\n\n// enable all transforms\nnode.transformsEnabled('all');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5191,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3167
  },
  {
    "id": "Konva.Star#size",
    "longname": "Konva.Star#size",
    "name": "size",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#size",
    "inherited": true,
    "description": "get/set node size",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "size"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size.height"
      }
    ],
    "examples": [
      "// get node size\nvar size = node.size();\nvar width = size.width;\nvar height = size.height;\n\n// set size\nnode.size({\n  width: 100,\n  height: 200\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5205,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3168
  },
  {
    "id": "Konva.Star#dragBoundFunc",
    "longname": "Konva.Star#dragBoundFunc",
    "name": "dragBoundFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#dragBoundFunc",
    "inherited": true,
    "description": "get/set drag bound function.  This is used to override the default\n drag and drop position.",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "name": "dragBoundFunc"
      }
    ],
    "examples": [
      "// get drag bound function\nvar dragBoundFunc = node.dragBoundFunc();\n\n// create vertical drag and drop\nnode.dragBoundFunc(function(pos){\n  // important pos - is absolute position of the node\n  // you should return absolute position too\n  return {\n    x: this.absolutePosition().x,\n    y: pos.y\n  };\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5226,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3169
  },
  {
    "id": "Konva.Star#draggable",
    "longname": "Konva.Star#draggable",
    "name": "draggable",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#draggable",
    "inherited": true,
    "description": "get/set draggable flag",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "draggable"
      }
    ],
    "examples": [
      "// get draggable flag\nvar draggable = node.draggable();\n\n// enable drag and drop\nnode.draggable(true);\n\n// disable drag and drop\nnode.draggable(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5248,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3170
  },
  {
    "id": "Konva.Star#to",
    "longname": "Konva.Star#to",
    "name": "to",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#to",
    "inherited": true,
    "description": "Tween node properties. Shorter usage of {@link Konva.Tween} object.",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "tween params",
        "name": "params"
      }
    ],
    "examples": [
      "circle.to({\n  x : 50,\n  duration : 0.5,\n  onUpdate: () => console.log('props updated'),\n  onFinish: () => console.log('finished'),\n});"
    ],
    "meta": {
      "lineno": 9588,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3171
  },
  {
    "id": "Konva.Star#blurRadius",
    "longname": "Konva.Star#blurRadius",
    "name": "blurRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#blurRadius",
    "inherited": true,
    "description": "get/set blur radius. Use with {@link Konva.Filters.Blur} filter",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "radius"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17517,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3172
  },
  {
    "id": "Konva.Star#brightness",
    "longname": "Konva.Star#brightness",
    "name": "brightness",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#brightness",
    "inherited": true,
    "description": "get/set filter brightness.  The brightness is a number between -1 and 1.&nbsp; Positive values\n brighten the pixels and negative values darken them. Use with {@link Konva.Filters.Brighten} filter.",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between -1 and 1",
        "name": "brightness"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17547,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3173
  },
  {
    "id": "Konva.Star#contrast",
    "longname": "Konva.Star#contrast",
    "name": "contrast",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#contrast",
    "inherited": true,
    "description": "get/set filter contrast.  The contrast is a number between -100 and 100.\nUse with {@link Konva.Filters.Contrast} filter.",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between -100 and 100",
        "name": "contrast"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17600,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3174
  },
  {
    "id": "Konva.Star#embossStrength",
    "longname": "Konva.Star#embossStrength",
    "name": "embossStrength",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossStrength",
    "inherited": true,
    "description": "get/set emboss strength. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1.  Default is 0.5",
        "name": "level"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17725,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3175
  },
  {
    "id": "Konva.Star#embossWhiteLevel",
    "longname": "Konva.Star#embossWhiteLevel",
    "name": "embossWhiteLevel",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossWhiteLevel",
    "inherited": true,
    "description": "get/set emboss white level. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1.  Default is 0.5",
        "name": "embossWhiteLevel"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17733,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3176
  },
  {
    "id": "Konva.Star#embossDirection",
    "longname": "Konva.Star#embossDirection",
    "name": "embossDirection",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossDirection",
    "inherited": true,
    "description": "get/set emboss direction. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "can be top-left, top, top-right, right, bottom-right, bottom, bottom-left or left\n  The default is top-left",
        "name": "embossDirection"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17741,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3177
  },
  {
    "id": "Konva.Star#embossBlend",
    "longname": "Konva.Star#embossBlend",
    "name": "embossBlend",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossBlend",
    "inherited": true,
    "description": "get/set emboss blend. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "embossBlend"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17750,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3178
  },
  {
    "id": "Konva.Star#enhance",
    "longname": "Konva.Star#enhance",
    "name": "enhance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#enhance",
    "inherited": true,
    "description": "get/set enhance. Use with {@link Konva.Filters.Enhance} filter. -1 to 1 values",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Float"
          ]
        },
        "name": "amount"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Float"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17864,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3179
  },
  {
    "id": "Konva.Star#hue",
    "longname": "Konva.Star#hue",
    "name": "hue",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hue",
    "inherited": true,
    "description": "get/set hsv hue in degrees. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between 0 and 359",
        "name": "hue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17896,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3180
  },
  {
    "id": "Konva.Star#saturation",
    "longname": "Konva.Star#saturation",
    "name": "saturation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#saturation",
    "inherited": true,
    "description": "get/set hsv saturation. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the saturation, 1.0 doubles, etc..",
        "name": "saturation"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17904,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3181
  },
  {
    "id": "Konva.Star#luminance",
    "longname": "Konva.Star#luminance",
    "name": "luminance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#luminance",
    "inherited": true,
    "description": "get/set hsl luminance. Use with {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "from -1 to 1",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17912,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3182
  },
  {
    "id": "Konva.Star#value",
    "longname": "Konva.Star#value",
    "name": "value",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#value",
    "inherited": true,
    "description": "get/set hsv value. Use with {@link Konva.Filters.HSV} filter.",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the value, 1.0 doubles, etc..",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18018,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3183
  },
  {
    "id": "Konva.Star#kaleidoscopePower",
    "longname": "Konva.Star#kaleidoscopePower",
    "name": "kaleidoscopePower",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#kaleidoscopePower",
    "inherited": true,
    "description": "get/set kaleidoscope power. Use with {@link Konva.Filters.Kaleidoscope} filter.",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "of kaleidoscope",
        "name": "power"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18243,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3184
  },
  {
    "id": "Konva.Star#kaleidoscopeAngle",
    "longname": "Konva.Star#kaleidoscopeAngle",
    "name": "kaleidoscopeAngle",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#kaleidoscopeAngle",
    "inherited": true,
    "description": "get/set kaleidoscope angle. Use with {@link Konva.Filters.Kaleidoscope} filter.",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "degrees"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18251,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3185
  },
  {
    "id": "Konva.Star#noise",
    "longname": "Konva.Star#noise",
    "name": "noise",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#noise",
    "inherited": true,
    "description": "get/set noise amount.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Noise} filter.",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "noise"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18437,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3186
  },
  {
    "id": "Konva.Star#pixelSize",
    "longname": "Konva.Star#pixelSize",
    "name": "pixelSize",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#pixelSize",
    "inherited": true,
    "description": "get/set pixel size. Use with {@link Konva.Filters.Pixelate} filter.",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "pixelSize"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18522,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3187
  },
  {
    "id": "Konva.Star#levels",
    "longname": "Konva.Star#levels",
    "name": "levels",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#levels",
    "inherited": true,
    "description": "get/set levels.  Must be a number between 0 and 1.  Use with {@link Konva.Filters.Posterize} filter.",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1",
        "name": "level"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18552,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3188
  },
  {
    "id": "Konva.Star#red",
    "longname": "Konva.Star#red",
    "name": "red",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#red",
    "inherited": true,
    "description": "get/set filter red value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "red"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18596,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3189
  },
  {
    "id": "Konva.Star#green",
    "longname": "Konva.Star#green",
    "name": "green",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#green",
    "inherited": true,
    "description": "get/set filter green value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "green"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18616,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3190
  },
  {
    "id": "Konva.Star#blue",
    "longname": "Konva.Star#blue",
    "name": "blue",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#blue",
    "inherited": true,
    "description": "get/set filter blue value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "blue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18625,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3191
  },
  {
    "id": "Konva.Star#alpha",
    "longname": "Konva.Star#alpha",
    "name": "alpha",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#alpha",
    "inherited": true,
    "description": "get/set filter alpha value. Use with {@link Konva.Filters.RGBA} filter.",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Float"
          ]
        },
        "description": "value between 0 and 1",
        "name": "alpha"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Float"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18718,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3192
  },
  {
    "id": "Konva.Star#threshold",
    "longname": "Konva.Star#threshold",
    "name": "threshold",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#threshold",
    "inherited": true,
    "description": "get/set threshold.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Threshold} or {@link Konva.Filters.Mask} filter.",
    "memberof": "Konva.Star",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "threshold"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18809,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3193
  },
  {
    "id": "Konva.Text#hasShadow",
    "longname": "Konva.Text#hasShadow",
    "name": "hasShadow",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasShadow",
    "inherited": true,
    "overrides": "Konva.Shape#hasShadow",
    "description": "returns whether or not a shadow will be rendered",
    "memberof": "Konva.Text",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 6909,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3194
  },
  {
    "id": "Konva.Text#hasFill",
    "longname": "Konva.Text#hasFill",
    "name": "hasFill",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasFill",
    "inherited": true,
    "overrides": "Konva.Shape#hasFill",
    "description": "returns whether or not the shape will be filled",
    "memberof": "Konva.Text",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7009,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3195
  },
  {
    "id": "Konva.Text#hasStroke",
    "longname": "Konva.Text#hasStroke",
    "name": "hasStroke",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasStroke",
    "inherited": true,
    "overrides": "Konva.Shape#hasStroke",
    "description": "returns whether or not the shape will be stroked",
    "memberof": "Konva.Text",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7030,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3196
  },
  {
    "id": "Konva.Text#intersects",
    "longname": "Konva.Text#intersects",
    "name": "intersects",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#intersects",
    "inherited": true,
    "overrides": "Konva.Shape#intersects",
    "description": "determines if point is in the shape, regardless if other shapes are on top of it.  Note: because\n this method clears a temporary canvas and then redraws the shape, it performs very poorly if executed many times\n consecutively.  Please use the {@link Konva.Stage#getIntersection} method if at all possible\n because it performs much better",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "point"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "point.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "point.y"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7066,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3197
  },
  {
    "id": "Konva.Text#getSelfRect",
    "longname": "Konva.Text#getSelfRect",
    "name": "getSelfRect",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#getSelfRect",
    "inherited": true,
    "overrides": "Konva.Shape#getSelfRect",
    "description": "return self rectangle (x, y, width, height) of shape.\nThis method are not taken into account transformation and styles.",
    "memberof": "Konva.Text",
    "examples": [
      "rect.getSelfRect();  // return {x:0, y:0, width:rect.width(), height:rect.height()}\ncircle.getSelfRect();  // return {x: - circle.width() / 2, y: - circle.height() / 2, width:circle.width(), height:circle.height()}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "rect with `{x, y, width, height}` properties"
      }
    ],
    "meta": {
      "lineno": 7138,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3198
  },
  {
    "id": "Konva.Text#drawHitFromCache",
    "longname": "Konva.Text#drawHitFromCache",
    "name": "drawHitFromCache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#drawHitFromCache",
    "inherited": true,
    "overrides": "Konva.Shape#drawHitFromCache",
    "description": "draw hit graph using the cached scene canvas",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "alpha channel threshold that determines whether or not\n a pixel should be drawn onto the hit graph.  Must be a value between 0 and 255.\n The default is 0",
        "name": "alphaThreshold"
      }
    ],
    "examples": [
      "shape.cache();\nshape.drawHitFromCache();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7294,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3199
  },
  {
    "id": "Konva.Text#stroke",
    "longname": "Konva.Text#stroke",
    "name": "stroke",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#stroke",
    "inherited": true,
    "overrides": "Konva.Shape#stroke",
    "description": "get/set stroke color",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get stroke color\nvar stroke = shape.stroke();\n\n// set stroke color with color string\nshape.stroke('green');\n\n// set stroke color with hex\nshape.stroke('#00ff00');\n\n// set stroke color with rgb\nshape.stroke('rgb(0,255,0)');\n\n// set stroke color with rgba and make it 50% opaque\nshape.stroke('rgba(0,255,0,0.5');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7360,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3200
  },
  {
    "id": "Konva.Text#strokeWidth",
    "longname": "Konva.Text#strokeWidth",
    "name": "strokeWidth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeWidth",
    "inherited": true,
    "overrides": "Konva.Shape#strokeWidth",
    "description": "get/set stroke width",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "strokeWidth"
      }
    ],
    "examples": [
      "// get stroke width\nvar strokeWidth = shape.strokeWidth();\n\n// set stroke width\nshape.strokeWidth(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7383,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3201
  },
  {
    "id": "Konva.Text#fillAfterStrokeEnabled",
    "longname": "Konva.Text#fillAfterStrokeEnabled",
    "name": "fillAfterStrokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillAfterStrokeEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#fillAfterStrokeEnabled",
    "description": "get/set fillAfterStrokeEnabled property. By default Konva is drawing filling first, then stroke on top of the fill.\nIn rare situations you may want a different behavior. When you have a stroke first then fill on top of it.\nEspecially useful for Text objects.\nDefault is false.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "fillAfterStrokeEnabled"
      }
    ],
    "examples": [
      "// get stroke width\nvar fillAfterStrokeEnabled = shape.fillAfterStrokeEnabled();\n\n// set stroke width\nshape.fillAfterStrokeEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7397,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3202
  },
  {
    "id": "Konva.Text#hitStrokeWidth",
    "longname": "Konva.Text#hitStrokeWidth",
    "name": "hitStrokeWidth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hitStrokeWidth",
    "inherited": true,
    "overrides": "Konva.Shape#hitStrokeWidth",
    "description": "get/set stroke width for hit detection. Default value is \"auto\", it means it will be equals to strokeWidth",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "hitStrokeWidth"
      }
    ],
    "examples": [
      "// get stroke width\nvar hitStrokeWidth = shape.hitStrokeWidth();\n\n// set hit stroke width\nshape.hitStrokeWidth(20);\n// set hit stroke width always equals to scene stroke width\nshape.hitStrokeWidth('auto');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7414,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3203
  },
  {
    "id": "Konva.Text#strokeHitEnabled",
    "longname": "Konva.Text#strokeHitEnabled",
    "name": "strokeHitEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeHitEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#strokeHitEnabled",
    "description": "**deprecated, use hitStrokeWidth instead!** get/set strokeHitEnabled property. Useful for performance optimization.\nYou may set `shape.strokeHitEnabled(false)`. In this case stroke will be no draw on hit canvas, so hit area\nof shape will be decreased (by lineWidth / 2). Remember that non closed line with `strokeHitEnabled = false`\nwill be not drawn on hit canvas, that is mean line will no trigger pointer events (like mouseover)\nDefault value is true.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "strokeHitEnabled"
      }
    ],
    "examples": [
      "// get strokeHitEnabled\nvar strokeHitEnabled = shape.strokeHitEnabled();\n\n// set strokeHitEnabled\nshape.strokeHitEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7430,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3204
  },
  {
    "id": "Konva.Text#perfectDrawEnabled",
    "longname": "Konva.Text#perfectDrawEnabled",
    "name": "perfectDrawEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#perfectDrawEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#perfectDrawEnabled",
    "description": "get/set perfectDrawEnabled. If a shape has fill, stroke and opacity you may set `perfectDrawEnabled` to false to improve performance.\nSee http://konvajs.org/docs/performance/Disable_Perfect_Draw.html for more information.\nDefault value is true",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "perfectDrawEnabled"
      }
    ],
    "examples": [
      "// get perfectDrawEnabled\nvar perfectDrawEnabled = shape.perfectDrawEnabled();\n\n// set perfectDrawEnabled\nshape.perfectDrawEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7448,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3205
  },
  {
    "id": "Konva.Text#shadowForStrokeEnabled",
    "longname": "Konva.Text#shadowForStrokeEnabled",
    "name": "shadowForStrokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowForStrokeEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#shadowForStrokeEnabled",
    "description": "get/set shadowForStrokeEnabled. Useful for performance optimization.\nYou may set `shape.shadowForStrokeEnabled(false)`. In this case stroke will no effect shadow.\nRemember if you set `shadowForStrokeEnabled = false` for non closed line - that line will have no shadow!.\nDefault value is true",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "shadowForStrokeEnabled"
      }
    ],
    "examples": [
      "// get shadowForStrokeEnabled\nvar shadowForStrokeEnabled = shape.shadowForStrokeEnabled();\n\n// set shadowForStrokeEnabled\nshape.shadowForStrokeEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7464,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3206
  },
  {
    "id": "Konva.Text#lineJoin",
    "longname": "Konva.Text#lineJoin",
    "name": "lineJoin",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#lineJoin",
    "inherited": true,
    "overrides": "Konva.Shape#lineJoin",
    "description": "get/set line join.  Can be miter, round, or bevel.  The\n default is miter",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "lineJoin"
      }
    ],
    "examples": [
      "// get line join\nvar lineJoin = shape.lineJoin();\n\n// set line join\nshape.lineJoin('round');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7481,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3207
  },
  {
    "id": "Konva.Text#lineCap",
    "longname": "Konva.Text#lineCap",
    "name": "lineCap",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#lineCap",
    "inherited": true,
    "overrides": "Konva.Shape#lineCap",
    "description": "get/set line cap.  Can be butt, round, or square",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "lineCap"
      }
    ],
    "examples": [
      "// get line cap\nvar lineCap = shape.lineCap();\n\n// set line cap\nshape.lineCap('round');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7496,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3208
  },
  {
    "id": "Konva.Text#sceneFunc",
    "longname": "Konva.Text#sceneFunc",
    "name": "sceneFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#sceneFunc",
    "inherited": true,
    "overrides": "Konva.Shape#sceneFunc",
    "description": "get/set scene draw function. That function is used to draw the shape on a canvas.\nAlso that function will be used to draw hit area of the shape, in case if hitFunc is not defined.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "drawing function",
        "name": "drawFunc"
      }
    ],
    "examples": [
      "// get scene draw function\nvar sceneFunc = shape.sceneFunc();\n\n// set scene draw function\nshape.sceneFunc(function(context, shape) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  // like stroke and fill\n  context.fillStrokeShape(shape);\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7510,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3209
  },
  {
    "id": "Konva.Text#hitFunc",
    "longname": "Konva.Text#hitFunc",
    "name": "hitFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hitFunc",
    "inherited": true,
    "overrides": "Konva.Shape#hitFunc",
    "description": "get/set hit draw function. That function is used to draw custom hit area of a shape.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "drawing function",
        "name": "drawFunc"
      }
    ],
    "examples": [
      "// get hit draw function\nvar hitFunc = shape.hitFunc();\n\n// set hit draw function\nshape.hitFunc(function(context) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  context.fillStrokeShape(shape);\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7532,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3210
  },
  {
    "id": "Konva.Text#dash",
    "longname": "Konva.Text#dash",
    "name": "dash",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#dash",
    "inherited": true,
    "overrides": "Konva.Shape#dash",
    "description": "get/set dash array for stroke.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "dash"
      }
    ],
    "examples": [
      "// apply dashed stroke that is 10px long and 5 pixels apart\n line.dash([10, 5]);\n // apply dashed stroke that is made up of alternating dashed\n // lines that are 10px long and 20px apart, and dots that have\n // a radius of 5px and are 20px apart\n line.dash([10, 20, 0.001, 20]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7552,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3211
  },
  {
    "id": "Konva.Text#shadowColor",
    "longname": "Konva.Text#shadowColor",
    "name": "shadowColor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowColor",
    "inherited": true,
    "overrides": "Konva.Shape#shadowColor",
    "description": "get/set shadow color",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get shadow color\nvar shadow = shape.shadowColor();\n\n// set shadow color with color string\nshape.shadowColor('green');\n\n// set shadow color with hex\nshape.shadowColor('#00ff00');\n\n// set shadow color with rgb\nshape.shadowColor('rgb(0,255,0)');\n\n// set shadow color with rgba and make it 50% opaque\nshape.shadowColor('rgba(0,255,0,0.5');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7579,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3212
  },
  {
    "id": "Konva.Text#shadowBlur",
    "longname": "Konva.Text#shadowBlur",
    "name": "shadowBlur",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowBlur",
    "inherited": true,
    "overrides": "Konva.Shape#shadowBlur",
    "description": "get/set shadow blur",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "blur"
      }
    ],
    "examples": [
      "// get shadow blur\nvar shadowBlur = shape.shadowBlur();\n\n// set shadow blur\nshape.shadowBlur(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7602,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3213
  },
  {
    "id": "Konva.Text#shadowOpacity",
    "longname": "Konva.Text#shadowOpacity",
    "name": "shadowOpacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOpacity",
    "inherited": true,
    "overrides": "Konva.Shape#shadowOpacity",
    "description": "get/set shadow opacity.  must be a value between 0 and 1",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "opacity"
      }
    ],
    "examples": [
      "// get shadow opacity\nvar shadowOpacity = shape.shadowOpacity();\n\n// set shadow opacity\nshape.shadowOpacity(0.5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7616,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3214
  },
  {
    "id": "Konva.Text#shadowOffset",
    "longname": "Konva.Text#shadowOffset",
    "name": "shadowOffset",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffset",
    "inherited": true,
    "overrides": "Konva.Shape#shadowOffset",
    "description": "get/set shadow offset",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.y"
      }
    ],
    "examples": [
      "// get shadow offset\nvar shadowOffset = shape.shadowOffset();\n\n// set shadow offset\nshape.shadowOffset({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7630,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3215
  },
  {
    "id": "Konva.Text#shadowOffsetX",
    "longname": "Konva.Text#shadowOffsetX",
    "name": "shadowOffsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffsetX",
    "inherited": true,
    "overrides": "Konva.Shape#shadowOffsetX",
    "description": "get/set shadow offset x",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get shadow offset x\nvar shadowOffsetX = shape.shadowOffsetX();\n\n// set shadow offset x\nshape.shadowOffsetX(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7649,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3216
  },
  {
    "id": "Konva.Text#shadowOffsetY",
    "longname": "Konva.Text#shadowOffsetY",
    "name": "shadowOffsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffsetY",
    "inherited": true,
    "overrides": "Konva.Shape#shadowOffsetY",
    "description": "get/set shadow offset y",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get shadow offset y\nvar shadowOffsetY = shape.shadowOffsetY();\n\n// set shadow offset y\nshape.shadowOffsetY(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7663,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3217
  },
  {
    "id": "Konva.Text#fillPatternImage",
    "longname": "Konva.Text#fillPatternImage",
    "name": "fillPatternImage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternImage",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternImage",
    "description": "get/set fill pattern image",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Image"
          ]
        },
        "description": "object",
        "name": "image"
      }
    ],
    "examples": [
      "// get fill pattern image\nvar fillPatternImage = shape.fillPatternImage();\n\n// set fill pattern image\nvar imageObj = new Image();\nimageObj.onload = function() {\n  shape.fillPatternImage(imageObj);\n};\nimageObj.src = 'path/to/image/jpg';"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Image"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7677,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3218
  },
  {
    "id": "Konva.Text#fill",
    "longname": "Konva.Text#fill",
    "name": "fill",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fill",
    "inherited": true,
    "overrides": "Konva.Shape#fill",
    "description": "get/set fill color",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get fill color\nvar fill = shape.fill();\n\n// set fill color with color string\nshape.fill('green');\n\n// set fill color with hex\nshape.fill('#00ff00');\n\n// set fill color with rgb\nshape.fill('rgb(0,255,0)');\n\n// set fill color with rgba and make it 50% opaque\nshape.fill('rgba(0,255,0,0.5');\n\n// shape without fill\nshape.fill(null);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7695,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3219
  },
  {
    "id": "Konva.Text#fillPatternX",
    "longname": "Konva.Text#fillPatternX",
    "name": "fillPatternX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternX",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternX",
    "description": "get/set fill pattern x",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern x\nvar fillPatternX = shape.fillPatternX();\n// set fill pattern x\nshape.fillPatternX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7721,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3220
  },
  {
    "id": "Konva.Text#fillPatternY",
    "longname": "Konva.Text#fillPatternY",
    "name": "fillPatternY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternY",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternY",
    "description": "get/set fill pattern y",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern y\nvar fillPatternY = shape.fillPatternY();\n// set fill pattern y\nshape.fillPatternY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7734,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3221
  },
  {
    "id": "Konva.Text#fillLinearGradientColorStops",
    "longname": "Konva.Text#fillLinearGradientColorStops",
    "name": "fillLinearGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientColorStops",
    "inherited": true,
    "overrides": "Konva.Shape#fillLinearGradientColorStops",
    "description": "get/set fill linear gradient color stops",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get fill linear gradient color stops\nvar colorStops = shape.fillLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillLinearGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "colorStops"
      }
    ],
    "meta": {
      "lineno": 7747,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3222
  },
  {
    "id": "Konva.Text#strokeLinearGradientColorStops",
    "longname": "Konva.Text#strokeLinearGradientColorStops",
    "name": "strokeLinearGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientColorStops",
    "inherited": true,
    "overrides": "Konva.Shape#strokeLinearGradientColorStops",
    "description": "get/set stroke linear gradient color stops",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get stroke linear gradient color stops\nvar colorStops = shape.strokeLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.strokeLinearGradientColorStops([0, 'red', 0.5, 'blue', 1, 'green']);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "colorStops"
      }
    ],
    "meta": {
      "lineno": 7762,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3223
  },
  {
    "id": "Konva.Text#fillRadialGradientStartRadius",
    "longname": "Konva.Text#fillRadialGradientStartRadius",
    "name": "fillRadialGradientStartRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartRadius",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientStartRadius",
    "description": "get/set fill radial gradient start radius",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "radius"
      }
    ],
    "examples": [
      "// get radial gradient start radius\nvar startRadius = shape.fillRadialGradientStartRadius();\n\n// set radial gradient start radius\nshape.fillRadialGradientStartRadius(0);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7777,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3224
  },
  {
    "id": "Konva.Text#fillRadialGradientEndRadius",
    "longname": "Konva.Text#fillRadialGradientEndRadius",
    "name": "fillRadialGradientEndRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndRadius",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientEndRadius",
    "description": "get/set fill radial gradient end radius",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "radius"
      }
    ],
    "examples": [
      "// get radial gradient end radius\nvar endRadius = shape.fillRadialGradientEndRadius();\n\n// set radial gradient end radius\nshape.fillRadialGradientEndRadius(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7791,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3225
  },
  {
    "id": "Konva.Text#fillRadialGradientColorStops",
    "longname": "Konva.Text#fillRadialGradientColorStops",
    "name": "fillRadialGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientColorStops",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientColorStops",
    "description": "get/set fill radial gradient color stops",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get fill radial gradient color stops\nvar colorStops = shape.fillRadialGradientColorStops();\n\n// create a radial gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillRadialGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7805,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3226
  },
  {
    "id": "Konva.Text#fillPatternRepeat",
    "longname": "Konva.Text#fillPatternRepeat",
    "name": "fillPatternRepeat",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternRepeat",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternRepeat",
    "description": "get/set fill pattern repeat.  Can be 'repeat', 'repeat-x', 'repeat-y', or 'no-repeat'.  The default is 'repeat'",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "repeat"
      }
    ],
    "examples": [
      "// get fill pattern repeat\nvar repeat = shape.fillPatternRepeat();\n\n// repeat pattern in x direction only\nshape.fillPatternRepeat('repeat-x');\n\n// do not repeat the pattern\nshape.fillPatternRepeat('no-repeat');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7820,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3227
  },
  {
    "id": "Konva.Text#fillEnabled",
    "longname": "Konva.Text#fillEnabled",
    "name": "fillEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#fillEnabled",
    "description": "get/set fill enabled flag",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get fill enabled flag\nvar fillEnabled = shape.fillEnabled();\n\n// disable fill\nshape.fillEnabled(false);\n\n// enable fill\nshape.fillEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7837,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3228
  },
  {
    "id": "Konva.Text#strokeEnabled",
    "longname": "Konva.Text#strokeEnabled",
    "name": "strokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#strokeEnabled",
    "description": "get/set stroke enabled flag",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get stroke enabled flag\nvar strokeEnabled = shape.strokeEnabled();\n\n// disable stroke\nshape.strokeEnabled(false);\n\n// enable stroke\nshape.strokeEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7854,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3229
  },
  {
    "id": "Konva.Text#shadowEnabled",
    "longname": "Konva.Text#shadowEnabled",
    "name": "shadowEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#shadowEnabled",
    "description": "get/set shadow enabled flag",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get shadow enabled flag\nvar shadowEnabled = shape.shadowEnabled();\n\n// disable shadow\nshape.shadowEnabled(false);\n\n// enable shadow\nshape.shadowEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7871,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3230
  },
  {
    "id": "Konva.Text#dashEnabled",
    "longname": "Konva.Text#dashEnabled",
    "name": "dashEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#dashEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#dashEnabled",
    "description": "get/set dash enabled flag",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get dash enabled flag\nvar dashEnabled = shape.dashEnabled();\n\n// disable dash\nshape.dashEnabled(false);\n\n// enable dash\nshape.dashEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7888,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3231
  },
  {
    "id": "Konva.Text#strokeScaleEnabled",
    "longname": "Konva.Text#strokeScaleEnabled",
    "name": "strokeScaleEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeScaleEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#strokeScaleEnabled",
    "description": "get/set strokeScale enabled flag",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get stroke scale enabled flag\nvar strokeScaleEnabled = shape.strokeScaleEnabled();\n\n// disable stroke scale\nshape.strokeScaleEnabled(false);\n\n// enable stroke scale\nshape.strokeScaleEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7905,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3232
  },
  {
    "id": "Konva.Text#fillPriority",
    "longname": "Konva.Text#fillPriority",
    "name": "fillPriority",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPriority",
    "inherited": true,
    "overrides": "Konva.Shape#fillPriority",
    "description": "get/set fill priority.  can be color, pattern, linear-gradient, or radial-gradient.  The default is color.\n  This is handy if you want to toggle between different fill types.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "priority"
      }
    ],
    "examples": [
      "// get fill priority\nvar fillPriority = shape.fillPriority();\n\n// set fill priority\nshape.fillPriority('linear-gradient');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7922,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3233
  },
  {
    "id": "Konva.Text#fillPatternOffset",
    "longname": "Konva.Text#fillPatternOffset",
    "name": "fillPatternOffset",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffset",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternOffset",
    "description": "get/set fill pattern offset",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.y"
      }
    ],
    "examples": [
      "// get fill pattern offset\nvar patternOffset = shape.fillPatternOffset();\n\n// set fill pattern offset\nshape.fillPatternOffset({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7937,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3234
  },
  {
    "id": "Konva.Text#fillPatternOffsetX",
    "longname": "Konva.Text#fillPatternOffsetX",
    "name": "fillPatternOffsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffsetX",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternOffsetX",
    "description": "get/set fill pattern offset x",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern offset x\nvar patternOffsetX = shape.fillPatternOffsetX();\n\n// set fill pattern offset x\nshape.fillPatternOffsetX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7956,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3235
  },
  {
    "id": "Konva.Text#fillPatternOffsetY",
    "longname": "Konva.Text#fillPatternOffsetY",
    "name": "fillPatternOffsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffsetY",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternOffsetY",
    "description": "get/set fill pattern offset y",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern offset y\nvar patternOffsetY = shape.fillPatternOffsetY();\n\n// set fill pattern offset y\nshape.fillPatternOffsetY(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7970,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3236
  },
  {
    "id": "Konva.Text#fillPatternScale",
    "longname": "Konva.Text#fillPatternScale",
    "name": "fillPatternScale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScale",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternScale",
    "description": "get/set fill pattern scale",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.y"
      }
    ],
    "examples": [
      "// get fill pattern scale\nvar patternScale = shape.fillPatternScale();\n\n// set fill pattern scale\nshape.fillPatternScale({\n  x: 2,\n  y: 2\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7984,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3237
  },
  {
    "id": "Konva.Text#fillPatternScaleX",
    "longname": "Konva.Text#fillPatternScaleX",
    "name": "fillPatternScaleX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScaleX",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternScaleX",
    "description": "get/set fill pattern scale x",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern scale x\nvar patternScaleX = shape.fillPatternScaleX();\n\n// set fill pattern scale x\nshape.fillPatternScaleX(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8003,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3238
  },
  {
    "id": "Konva.Text#fillPatternScaleY",
    "longname": "Konva.Text#fillPatternScaleY",
    "name": "fillPatternScaleY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScaleY",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternScaleY",
    "description": "get/set fill pattern scale y",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern scale y\nvar patternScaleY = shape.fillPatternScaleY();\n\n// set fill pattern scale y\nshape.fillPatternScaleY(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8017,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3239
  },
  {
    "id": "Konva.Text#fillLinearGradientStartPoint",
    "longname": "Konva.Text#fillLinearGradientStartPoint",
    "name": "fillLinearGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPoint",
    "inherited": true,
    "overrides": "Konva.Shape#fillLinearGradientStartPoint",
    "description": "get/set fill linear gradient start point",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get fill linear gradient start point\nvar startPoint = shape.fillLinearGradientStartPoint();\n\n// set fill linear gradient start point\nshape.fillLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8034,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3240
  },
  {
    "id": "Konva.Text#strokeLinearGradientStartPoint",
    "longname": "Konva.Text#strokeLinearGradientStartPoint",
    "name": "strokeLinearGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientStartPoint",
    "inherited": true,
    "overrides": "Konva.Shape#strokeLinearGradientStartPoint",
    "description": "get/set stroke linear gradient start point",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point\nvar startPoint = shape.strokeLinearGradientStartPoint();\n\n// set stroke linear gradient start point\nshape.strokeLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8056,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3241
  },
  {
    "id": "Konva.Text#fillLinearGradientStartPointX",
    "longname": "Konva.Text#fillLinearGradientStartPointX",
    "name": "fillLinearGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPointX",
    "inherited": true,
    "overrides": "Konva.Shape#fillLinearGradientStartPointX",
    "description": "get/set fill linear gradient start point x",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill linear gradient start point x\nvar startPointX = shape.fillLinearGradientStartPointX();\n\n// set fill linear gradient start point x\nshape.fillLinearGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8075,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3242
  },
  {
    "id": "Konva.Text#linearLinearGradientStartPointX",
    "longname": "Konva.Text#linearLinearGradientStartPointX",
    "name": "linearLinearGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#linearLinearGradientStartPointX",
    "inherited": true,
    "overrides": "Konva.Shape#linearLinearGradientStartPointX",
    "description": "get/set stroke linear gradient start point x",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point x\nvar startPointX = shape.strokeLinearGradientStartPointX();\n\n// set stroke linear gradient start point x\nshape.strokeLinearGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8089,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3243
  },
  {
    "id": "Konva.Text#fillLinearGradientStartPointY",
    "longname": "Konva.Text#fillLinearGradientStartPointY",
    "name": "fillLinearGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPointY",
    "inherited": true,
    "overrides": "Konva.Shape#fillLinearGradientStartPointY",
    "description": "get/set fill linear gradient start point y",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill linear gradient start point y\nvar startPointY = shape.fillLinearGradientStartPointY();\n\n// set fill linear gradient start point y\nshape.fillLinearGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8103,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3244
  },
  {
    "id": "Konva.Text#strokeLinearGradientStartPointY",
    "longname": "Konva.Text#strokeLinearGradientStartPointY",
    "name": "strokeLinearGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientStartPointY",
    "inherited": true,
    "overrides": "Konva.Shape#strokeLinearGradientStartPointY",
    "description": "get/set stroke linear gradient start point y",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point y\nvar startPointY = shape.strokeLinearGradientStartPointY();\n\n// set stroke linear gradient start point y\nshape.strokeLinearGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8117,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3245
  },
  {
    "id": "Konva.Text#fillLinearGradientEndPoint",
    "longname": "Konva.Text#fillLinearGradientEndPoint",
    "name": "fillLinearGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPoint",
    "inherited": true,
    "overrides": "Konva.Shape#fillLinearGradientEndPoint",
    "description": "get/set fill linear gradient end point",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get fill linear gradient end point\nvar endPoint = shape.fillLinearGradientEndPoint();\n\n// set fill linear gradient end point\nshape.fillLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8134,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3246
  },
  {
    "id": "Konva.Text#strokeLinearGradientEndPoint",
    "longname": "Konva.Text#strokeLinearGradientEndPoint",
    "name": "strokeLinearGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPoint",
    "inherited": true,
    "overrides": "Konva.Shape#strokeLinearGradientEndPoint",
    "description": "get/set stroke linear gradient end point",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point\nvar endPoint = shape.strokeLinearGradientEndPoint();\n\n// set stroke linear gradient end point\nshape.strokeLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8156,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3247
  },
  {
    "id": "Konva.Text#fillLinearGradientEndPointX",
    "longname": "Konva.Text#fillLinearGradientEndPointX",
    "name": "fillLinearGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPointX",
    "inherited": true,
    "overrides": "Konva.Shape#fillLinearGradientEndPointX",
    "description": "get/set fill linear gradient end point x",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill linear gradient end point x\nvar endPointX = shape.fillLinearGradientEndPointX();\n\n// set fill linear gradient end point x\nshape.fillLinearGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8175,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3248
  },
  {
    "id": "Konva.Text#strokeLinearGradientEndPointX",
    "longname": "Konva.Text#strokeLinearGradientEndPointX",
    "name": "strokeLinearGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPointX",
    "inherited": true,
    "overrides": "Konva.Shape#strokeLinearGradientEndPointX",
    "description": "get/set fill linear gradient end point x",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point x\nvar endPointX = shape.strokeLinearGradientEndPointX();\n\n// set stroke linear gradient end point x\nshape.strokeLinearGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8189,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3249
  },
  {
    "id": "Konva.Text#fillLinearGradientEndPointY",
    "longname": "Konva.Text#fillLinearGradientEndPointY",
    "name": "fillLinearGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPointY",
    "inherited": true,
    "overrides": "Konva.Shape#fillLinearGradientEndPointY",
    "description": "get/set fill linear gradient end point y",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill linear gradient end point y\nvar endPointY = shape.fillLinearGradientEndPointY();\n\n// set fill linear gradient end point y\nshape.fillLinearGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8203,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3250
  },
  {
    "id": "Konva.Text#strokeLinearGradientEndPointY",
    "longname": "Konva.Text#strokeLinearGradientEndPointY",
    "name": "strokeLinearGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPointY",
    "inherited": true,
    "overrides": "Konva.Shape#strokeLinearGradientEndPointY",
    "description": "get/set stroke linear gradient end point y",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point y\nvar endPointY = shape.strokeLinearGradientEndPointY();\n\n// set stroke linear gradient end point y\nshape.strokeLinearGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8217,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3251
  },
  {
    "id": "Konva.Text#fillRadialGradientStartPoint",
    "longname": "Konva.Text#fillRadialGradientStartPoint",
    "name": "fillRadialGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPoint",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientStartPoint",
    "description": "get/set fill radial gradient start point",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get fill radial gradient start point\nvar startPoint = shape.fillRadialGradientStartPoint();\n\n// set fill radial gradient start point\nshape.fillRadialGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8234,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3252
  },
  {
    "id": "Konva.Text#fillRadialGradientStartPointX",
    "longname": "Konva.Text#fillRadialGradientStartPointX",
    "name": "fillRadialGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPointX",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientStartPointX",
    "description": "get/set fill radial gradient start point x",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill radial gradient start point x\nvar startPointX = shape.fillRadialGradientStartPointX();\n\n// set fill radial gradient start point x\nshape.fillRadialGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8253,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3253
  },
  {
    "id": "Konva.Text#fillRadialGradientStartPointY",
    "longname": "Konva.Text#fillRadialGradientStartPointY",
    "name": "fillRadialGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPointY",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientStartPointY",
    "description": "get/set fill radial gradient start point y",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill radial gradient start point y\nvar startPointY = shape.fillRadialGradientStartPointY();\n\n// set fill radial gradient start point y\nshape.fillRadialGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8267,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3254
  },
  {
    "id": "Konva.Text#fillRadialGradientEndPoint",
    "longname": "Konva.Text#fillRadialGradientEndPoint",
    "name": "fillRadialGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPoint",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientEndPoint",
    "description": "get/set fill radial gradient end point",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get fill radial gradient end point\nvar endPoint = shape.fillRadialGradientEndPoint();\n\n// set fill radial gradient end point\nshape.fillRadialGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8284,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3255
  },
  {
    "id": "Konva.Text#fillRadialGradientEndPointX",
    "longname": "Konva.Text#fillRadialGradientEndPointX",
    "name": "fillRadialGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPointX",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientEndPointX",
    "description": "get/set fill radial gradient end point x",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill radial gradient end point x\nvar endPointX = shape.fillRadialGradientEndPointX();\n\n// set fill radial gradient end point x\nshape.fillRadialGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8303,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3256
  },
  {
    "id": "Konva.Text#fillRadialGradientEndPointY",
    "longname": "Konva.Text#fillRadialGradientEndPointY",
    "name": "fillRadialGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPointY",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientEndPointY",
    "description": "get/set fill radial gradient end point y",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill radial gradient end point y\nvar endPointY = shape.fillRadialGradientEndPointY();\n\n// set fill radial gradient end point y\nshape.fillRadialGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8317,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3257
  },
  {
    "id": "Konva.Text#fillPatternRotation",
    "longname": "Konva.Text#fillPatternRotation",
    "name": "fillPatternRotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternRotation",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternRotation",
    "description": "get/set fill pattern rotation in degrees",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get fill pattern rotation\nvar patternRotation = shape.fillPatternRotation();\n\n// set fill pattern rotation\nshape.fillPatternRotation(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8331,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3258
  },
  {
    "id": "Konva.Text#fillRule",
    "longname": "Konva.Text#fillRule",
    "name": "fillRule",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRule",
    "inherited": true,
    "overrides": "Konva.Shape#fillRule",
    "description": "get/set fill rule",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "CanvasFillRule"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get fill rule\nvar fillRule = shape.fillRule();\n\n// set fill rule\nshape.fillRule('evenodd');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8345,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3259
  },
  {
    "id": "Konva.Text#clearCache",
    "longname": "Konva.Text#clearCache",
    "name": "clearCache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#clearCache",
    "inherited": true,
    "overrides": "Konva.Shape#clearCache",
    "description": "clear cached canvas",
    "memberof": "Konva.Text",
    "examples": [
      "node.clearCache();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2632,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3260
  },
  {
    "id": "Konva.Text#cache",
    "longname": "Konva.Text#cache",
    "name": "cache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#cache",
    "inherited": true,
    "overrides": "Konva.Shape#cache",
    "description": "cache node to improve drawing performance, apply filters, or create more accurate\n hit regions. For all basic shapes size of cache canvas will be automatically detected.\n If you need to cache your custom `Konva.Shape` instance you have to pass shape's bounding box\n properties. Look at [https://konvajs.org/docs/performance/Shape_Caching.html](https://konvajs.org/docs/performance/Shape_Caching.html) for more information.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "increase canvas size by `offset` pixel in all directions.",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "when set to true, a red border will be drawn around the cached\n region for debugging purposes",
        "name": "config.drawBorder"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "change quality (or pixel ratio) of cached image. pixelRatio = 2 will produce 2x sized cache.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "control imageSmoothingEnabled property of created canvas for cache",
        "name": "config.imageSmoothingEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "change quality (or pixel ratio) of cached hit canvas.",
        "name": "config.hitCanvasPixelRatio"
      }
    ],
    "examples": [
      "// cache a shape with the x,y position of the bounding box at the center and\n// the width and height of the bounding box equal to the width and height of\n// the shape obtained from shape.width() and shape.height()\nimage.cache();\n\n// cache a node and define the bounding box position and size\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200\n});\n\n// cache a node and draw a red border around the bounding box\n// for debugging purposes\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200,\n  offset : 10,\n  drawBorder: true\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2650,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3261
  },
  {
    "id": "Konva.Text#isCached",
    "longname": "Konva.Text#isCached",
    "name": "isCached",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isCached",
    "inherited": true,
    "overrides": "Konva.Shape#isCached",
    "description": "determine if node is currently cached",
    "memberof": "Konva.Text",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2788,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3262
  },
  {
    "id": "Konva.Text#getClientRect",
    "longname": "Konva.Text#getClientRect",
    "name": "getClientRect",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getClientRect",
    "inherited": true,
    "overrides": "Konva.Shape#getClientRect",
    "description": "Return client rectangle `{x, y, width, height}` of node. This rectangle also include all styling (strokes, shadows, etc).\nThe purpose of the method is similar to getBoundingClientRect API of the DOM.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply transform to node for calculating rect?",
        "name": "config.skipTransform"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply shadow to the node for calculating bound box?",
        "name": "config.skipShadow"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply stroke to the node for calculating bound box?",
        "name": "config.skipStroke"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "calculate client rect relative to one of the parents",
        "name": "config.relativeTo"
      }
    ],
    "examples": [
      "var rect = new Konva.Rect({\n     width : 100,\n     height : 100,\n     x : 50,\n     y : 50,\n     strokeWidth : 4,\n     stroke : 'black',\n     offsetX : 50,\n     scaleY : 2\n});\n\n// get client rect without think off transformations (position, rotation, scale, offset, etc)\nrect.getClientRect({ skipTransform: true});\n// returns {\n//     x : -2,   // two pixels for stroke / 2\n//     y : -2,\n//     width : 104, // increased by 4 for stroke\n//     height : 104\n//}\n\n// get client rect with transformation applied\nrect.getClientRect();\n// returns Object {x: -2, y: 46, width: 104, height: 208}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "rect with `{x, y, width, height}` properties"
      }
    ],
    "meta": {
      "lineno": 2797,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3263
  },
  {
    "id": "Konva.Text#on",
    "longname": "Konva.Text#on",
    "name": "on",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#on",
    "inherited": true,
    "overrides": "Konva.Shape#on",
    "description": "bind events to the node. KonvaJS supports mouseover, mousemove,\n mouseout, mouseenter, mouseleave, mousedown, mouseup, wheel, contextmenu, click, dblclick, touchstart, touchmove,\n touchend, tap, dbltap, dragstart, dragmove, and dragend events.\n Pass in a string of events delimited by a space to bind multiple events at once\n such as 'mousedown mouseup mousemove'. Include a namespace to bind an\n event by name such as 'click.foobar'.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'click', 'mousedown touchstart', 'mousedown.foo touchstart.foo'",
        "name": "evtStr"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The handler function. The first argument of that function is event object. Event object has `target` as main target of the event, `currentTarget` as current node listener and `evt` as native browser event.",
        "name": "handler"
      }
    ],
    "examples": [
      "// add click listener\nnode.on('click', function() {\n  console.log('you clicked me!');\n});\n\n// get the target node\nnode.on('click', function(evt) {\n  console.log(evt.target);\n});\n\n// stop event propagation\nnode.on('click', function(evt) {\n  evt.cancelBubble = true;\n});\n\n// bind multiple listeners\nnode.on('click touchstart', function() {\n  console.log('you clicked/touched me!');\n});\n\n// namespace listener\nnode.on('click.foo', function() {\n  console.log('you clicked/touched me!');\n});\n\n// get the event type\nnode.on('click tap', function(evt) {\n  var eventType = evt.type;\n});\n\n// get native event object\nnode.on('click tap', function(evt) {\n  var nativeEvent = evt.evt;\n});\n\n// for change events, get the old and new val\nnode.on('xChange', function(evt) {\n  var oldVal = evt.oldVal;\n  var newVal = evt.newVal;\n});\n\n// get event targets\n// with event delegations\nlayer.on('click', 'Group', function(evt) {\n  var shape = evt.target;\n  var group = evt.currentTarget;\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2919,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3264
  },
  {
    "id": "Konva.Text#off",
    "longname": "Konva.Text#off",
    "name": "off",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#off",
    "inherited": true,
    "overrides": "Konva.Shape#off",
    "description": "remove event bindings from the node. Pass in a string of\n event types delimmited by a space to remove multiple event\n bindings at once such as 'mousedown mouseup mousemove'.\n include a namespace to remove an event binding by name\n such as 'click.foobar'. If you only give a name like '.foobar',\n all events in that namespace will be removed.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'click', 'mousedown touchstart', '.foobar'",
        "name": "evtStr"
      }
    ],
    "examples": [
      "// remove listener\nnode.off('click');\n\n// remove multiple listeners\nnode.off('click touchstart');\n\n// remove listener by name\nnode.off('click.foo');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3007,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3265
  },
  {
    "id": "Konva.Text#remove",
    "longname": "Konva.Text#remove",
    "name": "remove",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#remove",
    "inherited": true,
    "overrides": "Konva.Shape#remove",
    "description": "remove a node from parent, but don't destroy. You can reuse the node later.",
    "memberof": "Konva.Text",
    "examples": [
      "node.remove();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3088,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3266
  },
  {
    "id": "Konva.Text#destroy",
    "longname": "Konva.Text#destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#destroy",
    "inherited": true,
    "overrides": "Konva.Shape#destroy",
    "description": "remove and destroy a node. Kill it and delete forever! You should not reuse node after destroy().\nIf the node is a container (Group, Stage or Layer) it will destroy all children too.",
    "memberof": "Konva.Text",
    "examples": [
      "node.destroy();"
    ],
    "meta": {
      "lineno": 3125,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3267
  },
  {
    "id": "Konva.Text#getAttr",
    "longname": "Konva.Text#getAttr",
    "name": "getAttr",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAttr",
    "inherited": true,
    "overrides": "Konva.Shape#getAttr",
    "description": "get attr",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "attr"
      }
    ],
    "examples": [
      "var x = node.getAttr('x');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer",
            "String",
            "Object",
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3138,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3268
  },
  {
    "id": "Konva.Text#getAncestors",
    "longname": "Konva.Text#getAncestors",
    "name": "getAncestors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAncestors",
    "inherited": true,
    "overrides": "Konva.Shape#getAncestors",
    "description": "get ancestors",
    "memberof": "Konva.Text",
    "examples": [
      "shape.getAncestors().forEach(function(node) {\n  console.log(node.getId());\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3155,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3269
  },
  {
    "id": "Konva.Text#getAttrs",
    "longname": "Konva.Text#getAttrs",
    "name": "getAttrs",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAttrs",
    "inherited": true,
    "overrides": "Konva.Shape#getAttrs",
    "description": "get attrs object literal",
    "memberof": "Konva.Text",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3173,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3270
  },
  {
    "id": "Konva.Text#setAttrs",
    "longname": "Konva.Text#setAttrs",
    "name": "setAttrs",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#setAttrs",
    "inherited": true,
    "overrides": "Konva.Shape#setAttrs",
    "description": "set multiple attrs at once using an object literal",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "object containing key value pairs",
        "name": "config"
      }
    ],
    "examples": [
      "node.setAttrs({\n  x: 5,\n  fill: 'red'\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3182,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3271
  },
  {
    "id": "Konva.Text#isListening",
    "longname": "Konva.Text#isListening",
    "name": "isListening",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isListening",
    "inherited": true,
    "overrides": "Konva.Shape#isListening",
    "description": "determine if node is listening for events by taking into account ancestors.\n\nParent    | Self      | isListening\nlistening | listening |\n----------+-----------+------------\nT         | T         | T\nT         | F         | F\nF         | T         | F\nF         | F         | F",
    "memberof": "Konva.Text",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3217,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3272
  },
  {
    "id": "Konva.Text#isVisible",
    "longname": "Konva.Text#isVisible",
    "name": "isVisible",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isVisible",
    "inherited": true,
    "overrides": "Konva.Shape#isVisible",
    "description": "determine if node is visible by taking into account ancestors.\n\nParent    | Self      | isVisible\nvisible   | visible   |\n----------+-----------+------------\nT         | T         | T\nT         | F         | F\nF         | T         | F\nF         | F         | F",
    "memberof": "Konva.Text",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3248,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3273
  },
  {
    "id": "Konva.Text#show",
    "longname": "Konva.Text#show",
    "name": "show",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#show",
    "inherited": true,
    "overrides": "Konva.Shape#show",
    "description": "show node. set visible = true",
    "memberof": "Konva.Text",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3300,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3274
  },
  {
    "id": "Konva.Text#hide",
    "longname": "Konva.Text#hide",
    "name": "hide",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hide",
    "inherited": true,
    "overrides": "Konva.Shape#hide",
    "description": "hide node.  Hidden nodes are no longer detectable",
    "memberof": "Konva.Text",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3310,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3275
  },
  {
    "id": "Konva.Text#getAbsoluteZIndex",
    "longname": "Konva.Text#getAbsoluteZIndex",
    "name": "getAbsoluteZIndex",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteZIndex",
    "inherited": true,
    "overrides": "Konva.Shape#getAbsoluteZIndex",
    "description": "get absolute z-index which takes into account sibling\n and ancestor indices",
    "memberof": "Konva.Text",
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3323,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3276
  },
  {
    "id": "Konva.Text#getDepth",
    "longname": "Konva.Text#getDepth",
    "name": "getDepth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getDepth",
    "inherited": true,
    "overrides": "Konva.Shape#getDepth",
    "description": "get node depth in node tree.  Returns an integer.\n e.g. Stage depth will always be 0.  Layers will always be 1.  Groups and Shapes will always\n be >= 2",
    "memberof": "Konva.Text",
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3355,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3277
  },
  {
    "id": "Konva.Text#getRelativePointerPosition",
    "longname": "Konva.Text#getRelativePointerPosition",
    "name": "getRelativePointerPosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getRelativePointerPosition",
    "inherited": true,
    "overrides": "Konva.Shape#getRelativePointerPosition",
    "description": "get position of first pointer (like mouse or first touch) relative to local coordinates of current node",
    "memberof": "Konva.Text",
    "examples": [
      "// let's think we have a rectangle at position x = 10, y = 10\n// now we clicked at x = 15, y = 15 of the stage\n// if you want to know position of the click, related to the rectangle you can use\nrect.getRelativePointerPosition();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3398,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3278
  },
  {
    "id": "Konva.Text#getAbsolutePosition",
    "longname": "Konva.Text#getAbsolutePosition",
    "name": "getAbsolutePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsolutePosition",
    "inherited": true,
    "overrides": "Konva.Shape#getAbsolutePosition",
    "description": "get absolute position of a node. That function can be used to calculate absolute position, but relative to any ancestor",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "optional ancestor node",
        "name": "Ancestor"
      }
    ],
    "examples": [
      "// returns absolute position relative to top-left corner of canvas\nnode.getAbsolutePosition();\n\n// calculate absolute position of node, inside stage\n// so stage transforms are ignored\nnode.getAbsolutePosition(stage)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3426,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3279
  },
  {
    "id": "Konva.Text#move",
    "longname": "Konva.Text#move",
    "name": "move",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#move",
    "inherited": true,
    "overrides": "Konva.Shape#move",
    "description": "move node by an amount relative to its current position",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "change"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "change.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "change.y"
      }
    ],
    "examples": [
      "// move node in x direction by 1px and y direction by 2px\nnode.move({\n  x: 1,\n  y: 2\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3514,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3280
  },
  {
    "id": "Konva.Text#rotate",
    "longname": "Konva.Text#rotate",
    "name": "rotate",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#rotate",
    "inherited": true,
    "overrides": "Konva.Shape#rotate",
    "description": "rotate node by an amount in degrees relative to its current rotation",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "theta"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3559,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3281
  },
  {
    "id": "Konva.Text#moveToTop",
    "longname": "Konva.Text#moveToTop",
    "name": "moveToTop",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveToTop",
    "inherited": true,
    "overrides": "Konva.Shape#moveToTop",
    "description": "move node to the top of its siblings",
    "memberof": "Konva.Text",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3570,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3282
  },
  {
    "id": "Konva.Text#moveUp",
    "longname": "Konva.Text#moveUp",
    "name": "moveUp",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveUp",
    "inherited": true,
    "overrides": "Konva.Shape#moveUp",
    "description": "move node up",
    "memberof": "Konva.Text",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "flag is moved or not"
      }
    ],
    "meta": {
      "lineno": 3590,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3283
  },
  {
    "id": "Konva.Text#moveDown",
    "longname": "Konva.Text#moveDown",
    "name": "moveDown",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveDown",
    "inherited": true,
    "overrides": "Konva.Shape#moveDown",
    "description": "move node down",
    "memberof": "Konva.Text",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3610,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3284
  },
  {
    "id": "Konva.Text#moveToBottom",
    "longname": "Konva.Text#moveToBottom",
    "name": "moveToBottom",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveToBottom",
    "inherited": true,
    "overrides": "Konva.Shape#moveToBottom",
    "description": "move node to the bottom of its siblings",
    "memberof": "Konva.Text",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3630,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3285
  },
  {
    "id": "Konva.Text#getAbsoluteOpacity",
    "longname": "Konva.Text#getAbsoluteOpacity",
    "name": "getAbsoluteOpacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteOpacity",
    "inherited": true,
    "overrides": "Konva.Shape#getAbsoluteOpacity",
    "description": "get absolute opacity",
    "memberof": "Konva.Text",
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3668,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3286
  },
  {
    "id": "Konva.Text#moveTo",
    "longname": "Konva.Text#moveTo",
    "name": "moveTo",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveTo",
    "inherited": true,
    "overrides": "Konva.Shape#moveTo",
    "description": "move node to another container",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Container"
          ]
        },
        "name": "newContainer"
      }
    ],
    "examples": [
      "// move node from current layer into layer2\nnode.moveTo(layer2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3685,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3287
  },
  {
    "id": "Konva.Text#toObject",
    "longname": "Konva.Text#toObject",
    "name": "toObject",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toObject",
    "inherited": true,
    "overrides": "Konva.Shape#toObject",
    "description": "convert Node into an object for serialization.  Returns an object.",
    "memberof": "Konva.Text",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3703,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3288
  },
  {
    "id": "Konva.Text#toJSON",
    "longname": "Konva.Text#toJSON",
    "name": "toJSON",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toJSON",
    "inherited": true,
    "overrides": "Konva.Shape#toJSON",
    "description": "convert Node into a JSON string.  Returns a JSON string.",
    "memberof": "Konva.Text",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3736,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3289
  },
  {
    "id": "Konva.Text#getParent",
    "longname": "Konva.Text#getParent",
    "name": "getParent",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getParent",
    "inherited": true,
    "overrides": "Konva.Shape#getParent",
    "description": "get parent container",
    "memberof": "Konva.Text",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3745,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3290
  },
  {
    "id": "Konva.Text#findAncestors",
    "longname": "Konva.Text#findAncestors",
    "name": "findAncestors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#findAncestors",
    "inherited": true,
    "overrides": "Konva.Shape#findAncestors",
    "description": "get all ancestors (parent then parent of the parent, etc) of the node",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "selector for search",
        "name": "selector"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "show we think that node is ancestro itself?",
        "name": "includeSelf"
      },
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "optional": true,
        "description": "optional node where we need to stop searching (one of ancestors)",
        "name": "stopNode"
      }
    ],
    "examples": [
      "// get one of the parent group\nvar parentGroups = node.findAncestors('Group');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "[ancestors]"
      }
    ],
    "meta": {
      "lineno": 3754,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3291
  },
  {
    "id": "Konva.Text#findAncestor",
    "longname": "Konva.Text#findAncestor",
    "name": "findAncestor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#findAncestor",
    "inherited": true,
    "overrides": "Konva.Shape#findAncestor",
    "description": "get ancestor (parent or parent of the parent, etc) of the node that match passed selector",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "selector for search",
        "name": "selector"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "show we think that node is ancestro itself?",
        "name": "includeSelf"
      },
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "optional": true,
        "description": "optional node where we need to stop searching (one of ancestors)",
        "name": "stopNode"
      }
    ],
    "examples": [
      "// get one of the parent group\nvar group = node.findAncestors('.mygroup');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "description": "ancestor"
      }
    ],
    "meta": {
      "lineno": 3786,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3292
  },
  {
    "id": "Konva.Text#getLayer",
    "longname": "Konva.Text#getLayer",
    "name": "getLayer",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getLayer",
    "inherited": true,
    "overrides": "Konva.Shape#getLayer",
    "description": "get layer ancestor",
    "memberof": "Konva.Text",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Layer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3837,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3293
  },
  {
    "id": "Konva.Text#getStage",
    "longname": "Konva.Text#getStage",
    "name": "getStage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getStage",
    "inherited": true,
    "overrides": "Konva.Shape#getStage",
    "description": "get stage ancestor",
    "memberof": "Konva.Text",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Stage"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3847,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3294
  },
  {
    "id": "Konva.Text#fire",
    "longname": "Konva.Text#fire",
    "name": "fire",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#fire",
    "inherited": true,
    "overrides": "Konva.Shape#fire",
    "description": "fire event",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "event type.  can be a regular event, like click, mouseover, or mouseout, or it can be a custom event, like myCustomEvent",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "Event"
          ]
        },
        "optional": true,
        "description": "event object",
        "name": "evt"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "setting the value to false, or leaving it undefined, will result in the event\n not bubbling.  Setting the value to true will result in the event bubbling.",
        "name": "bubble"
      }
    ],
    "examples": [
      "// manually fire click event\nnode.fire('click');\n\n// fire custom event\nnode.fire('foo');\n\n// fire custom event with custom event object\nnode.fire('foo', {\n  bar: 10\n});\n\n// fire click event that bubbles\nnode.fire('click', null, true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3865,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3295
  },
  {
    "id": "Konva.Text#getAbsoluteTransform",
    "longname": "Konva.Text#getAbsoluteTransform",
    "name": "getAbsoluteTransform",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteTransform",
    "inherited": true,
    "overrides": "Konva.Shape#getAbsoluteTransform",
    "description": "get absolute transform of the node which takes into\n account its ancestor transforms",
    "memberof": "Konva.Text",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3901,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3296
  },
  {
    "id": "Konva.Text#getAbsoluteScale",
    "longname": "Konva.Text#getAbsoluteScale",
    "name": "getAbsoluteScale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteScale",
    "inherited": true,
    "overrides": "Konva.Shape#getAbsoluteScale",
    "description": "get absolute scale of the node which takes into\n account its ancestor scales",
    "memberof": "Konva.Text",
    "examples": [
      "// get absolute scale x\nvar scaleX = node.getAbsoluteScale().x;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3961,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3297
  },
  {
    "id": "Konva.Text#getAbsoluteRotation",
    "longname": "Konva.Text#getAbsoluteRotation",
    "name": "getAbsoluteRotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteRotation",
    "inherited": true,
    "overrides": "Konva.Shape#getAbsoluteRotation",
    "description": "get absolute rotation of the node which takes into\n account its ancestor rotations",
    "memberof": "Konva.Text",
    "examples": [
      "// get absolute rotation\nvar rotation = node.getAbsoluteRotation();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3989,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3298
  },
  {
    "id": "Konva.Text#getTransform",
    "longname": "Konva.Text#getTransform",
    "name": "getTransform",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getTransform",
    "inherited": true,
    "overrides": "Konva.Shape#getTransform",
    "description": "get transform of the node",
    "memberof": "Konva.Text",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4009,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3299
  },
  {
    "id": "Konva.Text#clone",
    "longname": "Konva.Text#clone",
    "name": "clone",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#clone",
    "inherited": true,
    "overrides": "Konva.Shape#clone",
    "description": "clone node.  Returns a new Node instance with identical attributes.  You can also override\n the node properties with an object literal, enabling you to use an existing node as a template\n for another node",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "override attrs",
        "name": "obj"
      }
    ],
    "examples": [
      "// simple clone\nvar clone = node.clone();\n\n// clone a node and override the x position\nvar clone = rect.clone({\n  x: 5\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4044,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3300
  },
  {
    "id": "Konva.Text#toCanvas",
    "longname": "Konva.Text#toCanvas",
    "name": "toCanvas",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toCanvas",
    "inherited": true,
    "overrides": "Konva.Shape#toCanvas",
    "description": "converts node into an canvas element.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output canvas. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var canvas = node.toCanvas();"
    ],
    "meta": {
      "lineno": 4119,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3301
  },
  {
    "id": "Konva.Text#toDataURL",
    "longname": "Konva.Text#toDataURL",
    "name": "toDataURL",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toDataURL",
    "inherited": true,
    "overrides": "Konva.Shape#toDataURL",
    "description": "Creates a composite data URL (base64 string). If MIME type is not\nspecified, then \"image/png\" will result. For \"image/jpeg\", specify a quality\nlevel as quality (range 0.0 - 1.0)",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"image/png\" or \"image/jpeg\".\n \"image/png\" is the default",
        "name": "config.mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "jpeg quality.  If using an \"image/jpeg\" mimeType,\n you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n is very high quality",
        "name": "config.quality"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output image url. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4140,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3302
  },
  {
    "id": "Konva.Text#toImage",
    "longname": "Konva.Text#toImage",
    "name": "toImage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toImage",
    "inherited": true,
    "overrides": "Konva.Shape#toImage",
    "description": "converts node into an image.  Since the toImage\n method is asynchronous, the resulting image can only be retrieved from the config callback\n or the returned Promise.  toImage is most commonly used\n to cache complex drawings as an image so that they don't have to constantly be redrawn",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"image/png\" or \"image/jpeg\".\n \"image/png\" is the default",
        "name": "config.mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "jpeg quality.  If using an \"image/jpeg\" mimeType,\n you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n is very high quality",
        "name": "config.quality"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output image. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var image = node.toImage({\n  callback(img) {\n    // do stuff with img\n  }\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Image>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4172,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3303
  },
  {
    "id": "Konva.Text#toBlob",
    "longname": "Konva.Text#toBlob",
    "name": "toBlob",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toBlob",
    "inherited": true,
    "overrides": "Konva.Shape#toBlob",
    "description": "Converts node into a blob.  Since the toBlob method is asynchronous,\n the resulting blob can only be retrieved from the config callback\n or the returned Promise.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output canvas. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var blob = await node.toBlob({});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Blob>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4219,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3304
  },
  {
    "id": "Konva.Text#getClassName",
    "longname": "Konva.Text#getClassName",
    "name": "getClassName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getClassName",
    "inherited": true,
    "overrides": "Konva.Shape#getClassName",
    "description": "get class name, which may return Stage, Layer, Group, or shape class names like Rect, Circle, Text, etc.",
    "memberof": "Konva.Text",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4267,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3305
  },
  {
    "id": "Konva.Text#getType",
    "longname": "Konva.Text#getType",
    "name": "getType",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getType",
    "inherited": true,
    "overrides": "Konva.Shape#getType",
    "description": "get the node type, which may return Stage, Layer, Group, or Shape",
    "memberof": "Konva.Text",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4276,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3306
  },
  {
    "id": "Konva.Text#addName",
    "longname": "Konva.Text#addName",
    "name": "addName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#addName",
    "inherited": true,
    "overrides": "Konva.Shape#addName",
    "description": "add name to node",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red');\nnode.addName('selected');\nnode.name(); // return 'red selected'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4324,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3307
  },
  {
    "id": "Konva.Text#hasName",
    "longname": "Konva.Text#hasName",
    "name": "hasName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hasName",
    "inherited": true,
    "overrides": "Konva.Shape#hasName",
    "description": "check is node has name",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red');\nnode.hasName('red');   // return true\nnode.hasName('selected'); // return false\nnode.hasName(''); // return false"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4343,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3308
  },
  {
    "id": "Konva.Text#removeName",
    "longname": "Konva.Text#removeName",
    "name": "removeName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#removeName",
    "inherited": true,
    "overrides": "Konva.Shape#removeName",
    "description": "remove name from node",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red selected');\nnode.removeName('selected');\nnode.hasName('selected'); // return false\nnode.name(); // return 'red'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4367,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3309
  },
  {
    "id": "Konva.Text#setAttr",
    "longname": "Konva.Text#setAttr",
    "name": "setAttr",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#setAttr",
    "inherited": true,
    "overrides": "Konva.Shape#setAttr",
    "description": "set attr",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "attr"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "name": "val"
      }
    ],
    "examples": [
      "node.setAttr('x', 5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4388,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3310
  },
  {
    "id": "Konva.Text#draw",
    "longname": "Konva.Text#draw",
    "name": "draw",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#draw",
    "inherited": true,
    "overrides": "Konva.Shape#draw",
    "description": "draw both scene and hit graphs.  If the node being drawn is the stage, all of the layers will be cleared and redrawn",
    "memberof": "Konva.Text",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4511,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3311
  },
  {
    "id": "Konva.Text#startDrag",
    "longname": "Konva.Text#startDrag",
    "name": "startDrag",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#startDrag",
    "inherited": true,
    "overrides": "Konva.Shape#startDrag",
    "description": "initiate drag and drop.",
    "memberof": "Konva.Text",
    "meta": {
      "lineno": 4544,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3312
  },
  {
    "id": "Konva.Text#stopDrag",
    "longname": "Konva.Text#stopDrag",
    "name": "stopDrag",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#stopDrag",
    "inherited": true,
    "overrides": "Konva.Shape#stopDrag",
    "description": "stop drag and drop",
    "memberof": "Konva.Text",
    "meta": {
      "lineno": 4590,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3313
  },
  {
    "id": "Konva.Text#isDragging",
    "longname": "Konva.Text#isDragging",
    "name": "isDragging",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isDragging",
    "inherited": true,
    "overrides": "Konva.Shape#isDragging",
    "description": "determine if node is currently in drag and drop mode",
    "memberof": "Konva.Text",
    "meta": {
      "lineno": 4607,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3314
  },
  {
    "id": "Konva.Text#isClientRectOnScreen",
    "longname": "Konva.Text#isClientRectOnScreen",
    "name": "isClientRectOnScreen",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isClientRectOnScreen",
    "inherited": true,
    "overrides": "Konva.Shape#isClientRectOnScreen",
    "description": "determine if node (at least partially) is currently in user-visible area",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number",
            "Object"
          ]
        },
        "description": "optional margin in pixels",
        "name": "margin"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "margin.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "margin.y"
      }
    ],
    "examples": [
      "// get index\n// default calculations\nvar isOnScreen = node.isClientRectOnScreen()\n// increase object size (or screen size) for cases when objects close to the screen still need to be marked as \"visible\"\nvar isOnScreen = node.isClientRectOnScreen({ x: stage.width(), y: stage.height() })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4671,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3315
  },
  {
    "id": "Konva.Text#zIndex",
    "longname": "Konva.Text#zIndex",
    "name": "zIndex",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#zIndex",
    "inherited": true,
    "overrides": "Konva.Shape#zIndex",
    "description": "get/set zIndex relative to the node's siblings who share the same parent.\nPlease remember that zIndex is not absolute (like in CSS). It is relative to parent element only.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "index"
      }
    ],
    "examples": [
      "// get index\nvar index = node.zIndex();\n\n// set index\nnode.zIndex(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4764,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3316
  },
  {
    "id": "Konva.Text#absolutePosition",
    "longname": "Konva.Text#absolutePosition",
    "name": "absolutePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#absolutePosition",
    "inherited": true,
    "overrides": "Konva.Shape#absolutePosition",
    "description": "get/set node absolute position",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "// get position\nvar position = node.absolutePosition();\n\n// set position\nnode.absolutePosition({\n  x: 5,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4779,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3317
  },
  {
    "id": "Konva.Text#position",
    "longname": "Konva.Text#position",
    "name": "position",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#position",
    "inherited": true,
    "overrides": "Konva.Shape#position",
    "description": "get/set node position relative to parent",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "// get position\nvar position = node.position();\n\n// set position\nnode.position({\n  x: 5,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4799,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3318
  },
  {
    "id": "Konva.Text#x",
    "longname": "Konva.Text#x",
    "name": "x",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#x",
    "inherited": true,
    "overrides": "Konva.Shape#x",
    "description": "get/set x position",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get x\nvar x = node.x();\n\n// set x\nnode.x(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4818,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3319
  },
  {
    "id": "Konva.Text#y",
    "longname": "Konva.Text#y",
    "name": "y",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#y",
    "inherited": true,
    "overrides": "Konva.Shape#y",
    "description": "get/set y position",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get y\nvar y = node.y();\n\n// set y\nnode.y(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4832,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3320
  },
  {
    "id": "Konva.Text#globalCompositeOperation",
    "longname": "Konva.Text#globalCompositeOperation",
    "name": "globalCompositeOperation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#globalCompositeOperation",
    "inherited": true,
    "overrides": "Konva.Shape#globalCompositeOperation",
    "description": "get/set globalCompositeOperation of a node. globalCompositeOperation DOESN'T affect hit graph of nodes. So they are still trigger to events as they have default \"source-over\" globalCompositeOperation.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "type"
      }
    ],
    "examples": [
      "// get globalCompositeOperation\nvar globalCompositeOperation = shape.globalCompositeOperation();\n\n// set globalCompositeOperation\nshape.globalCompositeOperation('source-in');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4846,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3321
  },
  {
    "id": "Konva.Text#opacity",
    "longname": "Konva.Text#opacity",
    "name": "opacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#opacity",
    "inherited": true,
    "overrides": "Konva.Shape#opacity",
    "description": "get/set opacity.  Opacity values range from 0 to 1.\n A node with an opacity of 0 is fully transparent, and a node\n with an opacity of 1 is fully opaque",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "opacity"
      }
    ],
    "examples": [
      "// get opacity\nvar opacity = node.opacity();\n\n// set opacity\nnode.opacity(0.5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4860,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3322
  },
  {
    "id": "Konva.Text#name",
    "longname": "Konva.Text#name",
    "name": "name",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#name",
    "inherited": true,
    "overrides": "Konva.Shape#name",
    "description": "get/set name.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "// get name\nvar name = node.name();\n\n// set name\nnode.name('foo');\n\n// also node may have multiple names (as css classes)\nnode.name('foo bar');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4876,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3323
  },
  {
    "id": "Konva.Text#id",
    "longname": "Konva.Text#id",
    "name": "id",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#id",
    "inherited": true,
    "overrides": "Konva.Shape#id",
    "description": "get/set id. Id is global for whole page.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "id"
      }
    ],
    "examples": [
      "// get id\nvar name = node.id();\n\n// set id\nnode.id('foo');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4893,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3324
  },
  {
    "id": "Konva.Text#rotation",
    "longname": "Konva.Text#rotation",
    "name": "rotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#rotation",
    "inherited": true,
    "overrides": "Konva.Shape#rotation",
    "description": "get/set rotation in degrees",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get rotation in degrees\nvar rotation = node.rotation();\n\n// set rotation in degrees\nnode.rotation(45);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4907,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3325
  },
  {
    "id": "Konva.Text#scale",
    "longname": "Konva.Text#scale",
    "name": "scale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scale",
    "inherited": true,
    "overrides": "Konva.Shape#scale",
    "description": "get/set scale",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.y"
      }
    ],
    "examples": [
      "// get scale\nvar scale = node.scale();\n\n// set scale\nshape.scale({\n  x: 2,\n  y: 3\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4921,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3326
  },
  {
    "id": "Konva.Text#scaleX",
    "longname": "Konva.Text#scaleX",
    "name": "scaleX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scaleX",
    "inherited": true,
    "overrides": "Konva.Shape#scaleX",
    "description": "get/set scale x",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get scale x\nvar scaleX = node.scaleX();\n\n// set scale x\nnode.scaleX(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4940,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3327
  },
  {
    "id": "Konva.Text#scaleY",
    "longname": "Konva.Text#scaleY",
    "name": "scaleY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scaleY",
    "inherited": true,
    "overrides": "Konva.Shape#scaleY",
    "description": "get/set scale y",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get scale y\nvar scaleY = node.scaleY();\n\n// set scale y\nnode.scaleY(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4954,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3328
  },
  {
    "id": "Konva.Text#skew",
    "longname": "Konva.Text#skew",
    "name": "skew",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skew",
    "inherited": true,
    "overrides": "Konva.Shape#skew",
    "description": "get/set skew",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "skew"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "skew.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "skew.y"
      }
    ],
    "examples": [
      "// get skew\nvar skew = node.skew();\n\n// set skew\nnode.skew({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4968,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3329
  },
  {
    "id": "Konva.Text#skewX",
    "longname": "Konva.Text#skewX",
    "name": "skewX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skewX",
    "inherited": true,
    "overrides": "Konva.Shape#skewX",
    "description": "get/set skew x",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get skew x\nvar skewX = node.skewX();\n\n// set skew x\nnode.skewX(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4987,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3330
  },
  {
    "id": "Konva.Text#skewY",
    "longname": "Konva.Text#skewY",
    "name": "skewY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skewY",
    "inherited": true,
    "overrides": "Konva.Shape#skewY",
    "description": "get/set skew y",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get skew y\nvar skewY = node.skewY();\n\n// set skew y\nnode.skewY(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5001,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3331
  },
  {
    "id": "Konva.Text#offsetX",
    "longname": "Konva.Text#offsetX",
    "name": "offsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#offsetX",
    "inherited": true,
    "overrides": "Konva.Shape#offsetX",
    "description": "get/set offset x",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get offset x\nvar offsetX = node.offsetX();\n\n// set offset x\nnode.offsetX(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5033,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3332
  },
  {
    "id": "Konva.Text#offsetY",
    "longname": "Konva.Text#offsetY",
    "name": "offsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#offsetY",
    "inherited": true,
    "overrides": "Konva.Shape#offsetY",
    "description": "get/set offset y",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get offset y\nvar offsetY = node.offsetY();\n\n// set offset y\nnode.offsetY(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5047,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3333
  },
  {
    "id": "Konva.Text#dragDistance",
    "longname": "Konva.Text#dragDistance",
    "name": "dragDistance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#dragDistance",
    "inherited": true,
    "overrides": "Konva.Shape#dragDistance",
    "description": "get/set drag distance",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "distance"
      }
    ],
    "examples": [
      "// get drag distance\nvar dragDistance = node.dragDistance();\n\n// set distance\n// node starts dragging only if pointer moved more then 3 pixels\nnode.dragDistance(3);\n// or set globally\nKonva.dragDistance = 3;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5061,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3334
  },
  {
    "id": "Konva.Text#listening",
    "longname": "Konva.Text#listening",
    "name": "listening",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#listening",
    "inherited": true,
    "overrides": "Konva.Shape#listening",
    "description": "get/set listening attr.  If you need to determine if a node is listening or not\n  by taking into account its parents, use the isListening() method\n  nodes with listening set to false will not be detected in hit graph\n  so they will be ignored in container.getIntersection() method",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "Can be true, or false.  The default is true.",
        "name": "listening"
      }
    ],
    "examples": [
      "// get listening attr\nvar listening = node.listening();\n\n// stop listening for events, remove node and all its children from hit graph\nnode.listening(false);\n\n// listen to events according to the parent\nnode.listening(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5106,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3335
  },
  {
    "id": "Konva.Text#preventDefault",
    "longname": "Konva.Text#preventDefault",
    "name": "preventDefault",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#preventDefault",
    "inherited": true,
    "overrides": "Konva.Shape#preventDefault",
    "description": "get/set preventDefault\nBy default all shapes will prevent default behavior\nof a browser on a pointer move or tap.\nthat will prevent native scrolling when you are trying to drag&drop a node\nbut sometimes you may need to enable default actions\nin that case you can set the property to false",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "preventDefault"
      }
    ],
    "examples": [
      "// get preventDefault\nvar shouldPrevent = shape.preventDefault();\n\n// set preventDefault\nshape.preventDefault(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5125,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3336
  },
  {
    "id": "Konva.Text#filters",
    "longname": "Konva.Text#filters",
    "name": "filters",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#filters",
    "inherited": true,
    "overrides": "Konva.Shape#filters",
    "description": "get/set filters.  Filters are applied to cached canvases",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "array of filters",
        "name": "filters"
      }
    ],
    "examples": [
      "// get filters\nvar filters = node.filters();\n\n// set a single filter\nnode.cache();\nnode.filters([Konva.Filters.Blur]);\n\n// set multiple filters\nnode.cache();\nnode.filters([\n  Konva.Filters.Blur,\n  Konva.Filters.Sepia,\n  Konva.Filters.Invert\n]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5148,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3337
  },
  {
    "id": "Konva.Text#visible",
    "longname": "Konva.Text#visible",
    "name": "visible",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#visible",
    "inherited": true,
    "overrides": "Konva.Shape#visible",
    "description": "get/set visible attr.  Can be true, or false.  The default is true.\n  If you need to determine if a node is visible or not\n  by taking into account its parents, use the isVisible() method",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "visible"
      }
    ],
    "examples": [
      "// get visible attr\nvar visible = node.visible();\n\n// make invisible\nnode.visible(false);\n\n// make visible (according to the parent)\nnode.visible(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5171,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3338
  },
  {
    "id": "Konva.Text#transformsEnabled",
    "longname": "Konva.Text#transformsEnabled",
    "name": "transformsEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#transformsEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#transformsEnabled",
    "description": "get/set transforms that are enabled.  Can be \"all\", \"none\", or \"position\".  The default\n is \"all\"",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// enable position transform only to improve draw performance\nnode.transformsEnabled('position');\n\n// enable all transforms\nnode.transformsEnabled('all');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5191,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3339
  },
  {
    "id": "Konva.Text#size",
    "longname": "Konva.Text#size",
    "name": "size",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#size",
    "inherited": true,
    "overrides": "Konva.Shape#size",
    "description": "get/set node size",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "size"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size.height"
      }
    ],
    "examples": [
      "// get node size\nvar size = node.size();\nvar width = size.width;\nvar height = size.height;\n\n// set size\nnode.size({\n  width: 100,\n  height: 200\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5205,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3340
  },
  {
    "id": "Konva.Text#dragBoundFunc",
    "longname": "Konva.Text#dragBoundFunc",
    "name": "dragBoundFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#dragBoundFunc",
    "inherited": true,
    "overrides": "Konva.Shape#dragBoundFunc",
    "description": "get/set drag bound function.  This is used to override the default\n drag and drop position.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "name": "dragBoundFunc"
      }
    ],
    "examples": [
      "// get drag bound function\nvar dragBoundFunc = node.dragBoundFunc();\n\n// create vertical drag and drop\nnode.dragBoundFunc(function(pos){\n  // important pos - is absolute position of the node\n  // you should return absolute position too\n  return {\n    x: this.absolutePosition().x,\n    y: pos.y\n  };\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5226,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3341
  },
  {
    "id": "Konva.Text#draggable",
    "longname": "Konva.Text#draggable",
    "name": "draggable",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#draggable",
    "inherited": true,
    "overrides": "Konva.Shape#draggable",
    "description": "get/set draggable flag",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "draggable"
      }
    ],
    "examples": [
      "// get draggable flag\nvar draggable = node.draggable();\n\n// enable drag and drop\nnode.draggable(true);\n\n// disable drag and drop\nnode.draggable(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5248,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3342
  },
  {
    "id": "Konva.Text#to",
    "longname": "Konva.Text#to",
    "name": "to",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#to",
    "inherited": true,
    "overrides": "Konva.Shape#to",
    "description": "Tween node properties. Shorter usage of {@link Konva.Tween} object.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "tween params",
        "name": "params"
      }
    ],
    "examples": [
      "circle.to({\n  x : 50,\n  duration : 0.5,\n  onUpdate: () => console.log('props updated'),\n  onFinish: () => console.log('finished'),\n});"
    ],
    "meta": {
      "lineno": 9588,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3343
  },
  {
    "id": "Konva.Text#blurRadius",
    "longname": "Konva.Text#blurRadius",
    "name": "blurRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#blurRadius",
    "inherited": true,
    "overrides": "Konva.Shape#blurRadius",
    "description": "get/set blur radius. Use with {@link Konva.Filters.Blur} filter",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "radius"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17517,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3344
  },
  {
    "id": "Konva.Text#brightness",
    "longname": "Konva.Text#brightness",
    "name": "brightness",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#brightness",
    "inherited": true,
    "overrides": "Konva.Shape#brightness",
    "description": "get/set filter brightness.  The brightness is a number between -1 and 1.&nbsp; Positive values\n brighten the pixels and negative values darken them. Use with {@link Konva.Filters.Brighten} filter.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between -1 and 1",
        "name": "brightness"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17547,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3345
  },
  {
    "id": "Konva.Text#contrast",
    "longname": "Konva.Text#contrast",
    "name": "contrast",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#contrast",
    "inherited": true,
    "overrides": "Konva.Shape#contrast",
    "description": "get/set filter contrast.  The contrast is a number between -100 and 100.\nUse with {@link Konva.Filters.Contrast} filter.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between -100 and 100",
        "name": "contrast"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17600,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3346
  },
  {
    "id": "Konva.Text#embossStrength",
    "longname": "Konva.Text#embossStrength",
    "name": "embossStrength",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossStrength",
    "inherited": true,
    "overrides": "Konva.Shape#embossStrength",
    "description": "get/set emboss strength. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1.  Default is 0.5",
        "name": "level"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17725,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3347
  },
  {
    "id": "Konva.Text#embossWhiteLevel",
    "longname": "Konva.Text#embossWhiteLevel",
    "name": "embossWhiteLevel",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossWhiteLevel",
    "inherited": true,
    "overrides": "Konva.Shape#embossWhiteLevel",
    "description": "get/set emboss white level. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1.  Default is 0.5",
        "name": "embossWhiteLevel"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17733,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3348
  },
  {
    "id": "Konva.Text#embossDirection",
    "longname": "Konva.Text#embossDirection",
    "name": "embossDirection",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossDirection",
    "inherited": true,
    "overrides": "Konva.Shape#embossDirection",
    "description": "get/set emboss direction. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "can be top-left, top, top-right, right, bottom-right, bottom, bottom-left or left\n  The default is top-left",
        "name": "embossDirection"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17741,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3349
  },
  {
    "id": "Konva.Text#embossBlend",
    "longname": "Konva.Text#embossBlend",
    "name": "embossBlend",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossBlend",
    "inherited": true,
    "overrides": "Konva.Shape#embossBlend",
    "description": "get/set emboss blend. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "embossBlend"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17750,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3350
  },
  {
    "id": "Konva.Text#enhance",
    "longname": "Konva.Text#enhance",
    "name": "enhance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#enhance",
    "inherited": true,
    "overrides": "Konva.Shape#enhance",
    "description": "get/set enhance. Use with {@link Konva.Filters.Enhance} filter. -1 to 1 values",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Float"
          ]
        },
        "name": "amount"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Float"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17864,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3351
  },
  {
    "id": "Konva.Text#hue",
    "longname": "Konva.Text#hue",
    "name": "hue",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hue",
    "inherited": true,
    "overrides": "Konva.Shape#hue",
    "description": "get/set hsv hue in degrees. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between 0 and 359",
        "name": "hue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17896,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3352
  },
  {
    "id": "Konva.Text#saturation",
    "longname": "Konva.Text#saturation",
    "name": "saturation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#saturation",
    "inherited": true,
    "overrides": "Konva.Shape#saturation",
    "description": "get/set hsv saturation. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the saturation, 1.0 doubles, etc..",
        "name": "saturation"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17904,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3353
  },
  {
    "id": "Konva.Text#luminance",
    "longname": "Konva.Text#luminance",
    "name": "luminance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#luminance",
    "inherited": true,
    "overrides": "Konva.Shape#luminance",
    "description": "get/set hsl luminance. Use with {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "from -1 to 1",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17912,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3354
  },
  {
    "id": "Konva.Text#value",
    "longname": "Konva.Text#value",
    "name": "value",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#value",
    "inherited": true,
    "overrides": "Konva.Shape#value",
    "description": "get/set hsv value. Use with {@link Konva.Filters.HSV} filter.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the value, 1.0 doubles, etc..",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18018,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3355
  },
  {
    "id": "Konva.Text#kaleidoscopePower",
    "longname": "Konva.Text#kaleidoscopePower",
    "name": "kaleidoscopePower",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#kaleidoscopePower",
    "inherited": true,
    "overrides": "Konva.Shape#kaleidoscopePower",
    "description": "get/set kaleidoscope power. Use with {@link Konva.Filters.Kaleidoscope} filter.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "of kaleidoscope",
        "name": "power"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18243,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3356
  },
  {
    "id": "Konva.Text#kaleidoscopeAngle",
    "longname": "Konva.Text#kaleidoscopeAngle",
    "name": "kaleidoscopeAngle",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#kaleidoscopeAngle",
    "inherited": true,
    "overrides": "Konva.Shape#kaleidoscopeAngle",
    "description": "get/set kaleidoscope angle. Use with {@link Konva.Filters.Kaleidoscope} filter.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "degrees"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18251,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3357
  },
  {
    "id": "Konva.Text#noise",
    "longname": "Konva.Text#noise",
    "name": "noise",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#noise",
    "inherited": true,
    "overrides": "Konva.Shape#noise",
    "description": "get/set noise amount.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Noise} filter.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "noise"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18437,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3358
  },
  {
    "id": "Konva.Text#pixelSize",
    "longname": "Konva.Text#pixelSize",
    "name": "pixelSize",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#pixelSize",
    "inherited": true,
    "overrides": "Konva.Shape#pixelSize",
    "description": "get/set pixel size. Use with {@link Konva.Filters.Pixelate} filter.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "pixelSize"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18522,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3359
  },
  {
    "id": "Konva.Text#levels",
    "longname": "Konva.Text#levels",
    "name": "levels",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#levels",
    "inherited": true,
    "overrides": "Konva.Shape#levels",
    "description": "get/set levels.  Must be a number between 0 and 1.  Use with {@link Konva.Filters.Posterize} filter.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1",
        "name": "level"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18552,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3360
  },
  {
    "id": "Konva.Text#red",
    "longname": "Konva.Text#red",
    "name": "red",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#red",
    "inherited": true,
    "overrides": "Konva.Shape#red",
    "description": "get/set filter red value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "red"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18596,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3361
  },
  {
    "id": "Konva.Text#green",
    "longname": "Konva.Text#green",
    "name": "green",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#green",
    "inherited": true,
    "overrides": "Konva.Shape#green",
    "description": "get/set filter green value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "green"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18616,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3362
  },
  {
    "id": "Konva.Text#blue",
    "longname": "Konva.Text#blue",
    "name": "blue",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#blue",
    "inherited": true,
    "overrides": "Konva.Shape#blue",
    "description": "get/set filter blue value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "blue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18625,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3363
  },
  {
    "id": "Konva.Text#alpha",
    "longname": "Konva.Text#alpha",
    "name": "alpha",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#alpha",
    "inherited": true,
    "overrides": "Konva.Shape#alpha",
    "description": "get/set filter alpha value. Use with {@link Konva.Filters.RGBA} filter.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Float"
          ]
        },
        "description": "value between 0 and 1",
        "name": "alpha"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Float"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18718,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3364
  },
  {
    "id": "Konva.Text#threshold",
    "longname": "Konva.Text#threshold",
    "name": "threshold",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#threshold",
    "inherited": true,
    "overrides": "Konva.Shape#threshold",
    "description": "get/set threshold.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Threshold} or {@link Konva.Filters.Mask} filter.",
    "memberof": "Konva.Text",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "threshold"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18809,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3365
  },
  {
    "id": "Konva.TextPath#hasShadow",
    "longname": "Konva.TextPath#hasShadow",
    "name": "hasShadow",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasShadow",
    "inherited": true,
    "overrides": "Konva.Shape#hasShadow",
    "description": "returns whether or not a shadow will be rendered",
    "memberof": "Konva.TextPath",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 6909,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3366
  },
  {
    "id": "Konva.TextPath#hasFill",
    "longname": "Konva.TextPath#hasFill",
    "name": "hasFill",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasFill",
    "inherited": true,
    "overrides": "Konva.Shape#hasFill",
    "description": "returns whether or not the shape will be filled",
    "memberof": "Konva.TextPath",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7009,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3367
  },
  {
    "id": "Konva.TextPath#hasStroke",
    "longname": "Konva.TextPath#hasStroke",
    "name": "hasStroke",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasStroke",
    "inherited": true,
    "overrides": "Konva.Shape#hasStroke",
    "description": "returns whether or not the shape will be stroked",
    "memberof": "Konva.TextPath",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7030,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3368
  },
  {
    "id": "Konva.TextPath#intersects",
    "longname": "Konva.TextPath#intersects",
    "name": "intersects",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#intersects",
    "inherited": true,
    "overrides": "Konva.Shape#intersects",
    "description": "determines if point is in the shape, regardless if other shapes are on top of it.  Note: because\n this method clears a temporary canvas and then redraws the shape, it performs very poorly if executed many times\n consecutively.  Please use the {@link Konva.Stage#getIntersection} method if at all possible\n because it performs much better",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "point"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "point.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "point.y"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7066,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3369
  },
  {
    "id": "Konva.TextPath#getSelfRect",
    "longname": "Konva.TextPath#getSelfRect",
    "name": "getSelfRect",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#getSelfRect",
    "inherited": true,
    "overrides": "Konva.Shape#getSelfRect",
    "description": "return self rectangle (x, y, width, height) of shape.\nThis method are not taken into account transformation and styles.",
    "memberof": "Konva.TextPath",
    "examples": [
      "rect.getSelfRect();  // return {x:0, y:0, width:rect.width(), height:rect.height()}\ncircle.getSelfRect();  // return {x: - circle.width() / 2, y: - circle.height() / 2, width:circle.width(), height:circle.height()}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "rect with `{x, y, width, height}` properties"
      }
    ],
    "meta": {
      "lineno": 7138,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3370
  },
  {
    "id": "Konva.TextPath#drawHitFromCache",
    "longname": "Konva.TextPath#drawHitFromCache",
    "name": "drawHitFromCache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#drawHitFromCache",
    "inherited": true,
    "overrides": "Konva.Shape#drawHitFromCache",
    "description": "draw hit graph using the cached scene canvas",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "alpha channel threshold that determines whether or not\n a pixel should be drawn onto the hit graph.  Must be a value between 0 and 255.\n The default is 0",
        "name": "alphaThreshold"
      }
    ],
    "examples": [
      "shape.cache();\nshape.drawHitFromCache();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7294,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3371
  },
  {
    "id": "Konva.TextPath#stroke",
    "longname": "Konva.TextPath#stroke",
    "name": "stroke",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#stroke",
    "inherited": true,
    "overrides": "Konva.Shape#stroke",
    "description": "get/set stroke color",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get stroke color\nvar stroke = shape.stroke();\n\n// set stroke color with color string\nshape.stroke('green');\n\n// set stroke color with hex\nshape.stroke('#00ff00');\n\n// set stroke color with rgb\nshape.stroke('rgb(0,255,0)');\n\n// set stroke color with rgba and make it 50% opaque\nshape.stroke('rgba(0,255,0,0.5');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7360,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3372
  },
  {
    "id": "Konva.TextPath#strokeWidth",
    "longname": "Konva.TextPath#strokeWidth",
    "name": "strokeWidth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeWidth",
    "inherited": true,
    "overrides": "Konva.Shape#strokeWidth",
    "description": "get/set stroke width",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "strokeWidth"
      }
    ],
    "examples": [
      "// get stroke width\nvar strokeWidth = shape.strokeWidth();\n\n// set stroke width\nshape.strokeWidth(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7383,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3373
  },
  {
    "id": "Konva.TextPath#fillAfterStrokeEnabled",
    "longname": "Konva.TextPath#fillAfterStrokeEnabled",
    "name": "fillAfterStrokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillAfterStrokeEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#fillAfterStrokeEnabled",
    "description": "get/set fillAfterStrokeEnabled property. By default Konva is drawing filling first, then stroke on top of the fill.\nIn rare situations you may want a different behavior. When you have a stroke first then fill on top of it.\nEspecially useful for Text objects.\nDefault is false.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "fillAfterStrokeEnabled"
      }
    ],
    "examples": [
      "// get stroke width\nvar fillAfterStrokeEnabled = shape.fillAfterStrokeEnabled();\n\n// set stroke width\nshape.fillAfterStrokeEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7397,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3374
  },
  {
    "id": "Konva.TextPath#hitStrokeWidth",
    "longname": "Konva.TextPath#hitStrokeWidth",
    "name": "hitStrokeWidth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hitStrokeWidth",
    "inherited": true,
    "overrides": "Konva.Shape#hitStrokeWidth",
    "description": "get/set stroke width for hit detection. Default value is \"auto\", it means it will be equals to strokeWidth",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "hitStrokeWidth"
      }
    ],
    "examples": [
      "// get stroke width\nvar hitStrokeWidth = shape.hitStrokeWidth();\n\n// set hit stroke width\nshape.hitStrokeWidth(20);\n// set hit stroke width always equals to scene stroke width\nshape.hitStrokeWidth('auto');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7414,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3375
  },
  {
    "id": "Konva.TextPath#strokeHitEnabled",
    "longname": "Konva.TextPath#strokeHitEnabled",
    "name": "strokeHitEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeHitEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#strokeHitEnabled",
    "description": "**deprecated, use hitStrokeWidth instead!** get/set strokeHitEnabled property. Useful for performance optimization.\nYou may set `shape.strokeHitEnabled(false)`. In this case stroke will be no draw on hit canvas, so hit area\nof shape will be decreased (by lineWidth / 2). Remember that non closed line with `strokeHitEnabled = false`\nwill be not drawn on hit canvas, that is mean line will no trigger pointer events (like mouseover)\nDefault value is true.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "strokeHitEnabled"
      }
    ],
    "examples": [
      "// get strokeHitEnabled\nvar strokeHitEnabled = shape.strokeHitEnabled();\n\n// set strokeHitEnabled\nshape.strokeHitEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7430,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3376
  },
  {
    "id": "Konva.TextPath#perfectDrawEnabled",
    "longname": "Konva.TextPath#perfectDrawEnabled",
    "name": "perfectDrawEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#perfectDrawEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#perfectDrawEnabled",
    "description": "get/set perfectDrawEnabled. If a shape has fill, stroke and opacity you may set `perfectDrawEnabled` to false to improve performance.\nSee http://konvajs.org/docs/performance/Disable_Perfect_Draw.html for more information.\nDefault value is true",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "perfectDrawEnabled"
      }
    ],
    "examples": [
      "// get perfectDrawEnabled\nvar perfectDrawEnabled = shape.perfectDrawEnabled();\n\n// set perfectDrawEnabled\nshape.perfectDrawEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7448,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3377
  },
  {
    "id": "Konva.TextPath#shadowForStrokeEnabled",
    "longname": "Konva.TextPath#shadowForStrokeEnabled",
    "name": "shadowForStrokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowForStrokeEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#shadowForStrokeEnabled",
    "description": "get/set shadowForStrokeEnabled. Useful for performance optimization.\nYou may set `shape.shadowForStrokeEnabled(false)`. In this case stroke will no effect shadow.\nRemember if you set `shadowForStrokeEnabled = false` for non closed line - that line will have no shadow!.\nDefault value is true",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "shadowForStrokeEnabled"
      }
    ],
    "examples": [
      "// get shadowForStrokeEnabled\nvar shadowForStrokeEnabled = shape.shadowForStrokeEnabled();\n\n// set shadowForStrokeEnabled\nshape.shadowForStrokeEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7464,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3378
  },
  {
    "id": "Konva.TextPath#lineJoin",
    "longname": "Konva.TextPath#lineJoin",
    "name": "lineJoin",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#lineJoin",
    "inherited": true,
    "overrides": "Konva.Shape#lineJoin",
    "description": "get/set line join.  Can be miter, round, or bevel.  The\n default is miter",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "lineJoin"
      }
    ],
    "examples": [
      "// get line join\nvar lineJoin = shape.lineJoin();\n\n// set line join\nshape.lineJoin('round');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7481,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3379
  },
  {
    "id": "Konva.TextPath#lineCap",
    "longname": "Konva.TextPath#lineCap",
    "name": "lineCap",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#lineCap",
    "inherited": true,
    "overrides": "Konva.Shape#lineCap",
    "description": "get/set line cap.  Can be butt, round, or square",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "lineCap"
      }
    ],
    "examples": [
      "// get line cap\nvar lineCap = shape.lineCap();\n\n// set line cap\nshape.lineCap('round');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7496,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3380
  },
  {
    "id": "Konva.TextPath#sceneFunc",
    "longname": "Konva.TextPath#sceneFunc",
    "name": "sceneFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#sceneFunc",
    "inherited": true,
    "overrides": "Konva.Shape#sceneFunc",
    "description": "get/set scene draw function. That function is used to draw the shape on a canvas.\nAlso that function will be used to draw hit area of the shape, in case if hitFunc is not defined.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "drawing function",
        "name": "drawFunc"
      }
    ],
    "examples": [
      "// get scene draw function\nvar sceneFunc = shape.sceneFunc();\n\n// set scene draw function\nshape.sceneFunc(function(context, shape) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  // like stroke and fill\n  context.fillStrokeShape(shape);\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7510,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3381
  },
  {
    "id": "Konva.TextPath#hitFunc",
    "longname": "Konva.TextPath#hitFunc",
    "name": "hitFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hitFunc",
    "inherited": true,
    "overrides": "Konva.Shape#hitFunc",
    "description": "get/set hit draw function. That function is used to draw custom hit area of a shape.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "drawing function",
        "name": "drawFunc"
      }
    ],
    "examples": [
      "// get hit draw function\nvar hitFunc = shape.hitFunc();\n\n// set hit draw function\nshape.hitFunc(function(context) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  context.fillStrokeShape(shape);\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7532,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3382
  },
  {
    "id": "Konva.TextPath#dash",
    "longname": "Konva.TextPath#dash",
    "name": "dash",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#dash",
    "inherited": true,
    "overrides": "Konva.Shape#dash",
    "description": "get/set dash array for stroke.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "dash"
      }
    ],
    "examples": [
      "// apply dashed stroke that is 10px long and 5 pixels apart\n line.dash([10, 5]);\n // apply dashed stroke that is made up of alternating dashed\n // lines that are 10px long and 20px apart, and dots that have\n // a radius of 5px and are 20px apart\n line.dash([10, 20, 0.001, 20]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7552,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3383
  },
  {
    "id": "Konva.TextPath#shadowColor",
    "longname": "Konva.TextPath#shadowColor",
    "name": "shadowColor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowColor",
    "inherited": true,
    "overrides": "Konva.Shape#shadowColor",
    "description": "get/set shadow color",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get shadow color\nvar shadow = shape.shadowColor();\n\n// set shadow color with color string\nshape.shadowColor('green');\n\n// set shadow color with hex\nshape.shadowColor('#00ff00');\n\n// set shadow color with rgb\nshape.shadowColor('rgb(0,255,0)');\n\n// set shadow color with rgba and make it 50% opaque\nshape.shadowColor('rgba(0,255,0,0.5');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7579,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3384
  },
  {
    "id": "Konva.TextPath#shadowBlur",
    "longname": "Konva.TextPath#shadowBlur",
    "name": "shadowBlur",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowBlur",
    "inherited": true,
    "overrides": "Konva.Shape#shadowBlur",
    "description": "get/set shadow blur",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "blur"
      }
    ],
    "examples": [
      "// get shadow blur\nvar shadowBlur = shape.shadowBlur();\n\n// set shadow blur\nshape.shadowBlur(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7602,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3385
  },
  {
    "id": "Konva.TextPath#shadowOpacity",
    "longname": "Konva.TextPath#shadowOpacity",
    "name": "shadowOpacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOpacity",
    "inherited": true,
    "overrides": "Konva.Shape#shadowOpacity",
    "description": "get/set shadow opacity.  must be a value between 0 and 1",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "opacity"
      }
    ],
    "examples": [
      "// get shadow opacity\nvar shadowOpacity = shape.shadowOpacity();\n\n// set shadow opacity\nshape.shadowOpacity(0.5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7616,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3386
  },
  {
    "id": "Konva.TextPath#shadowOffset",
    "longname": "Konva.TextPath#shadowOffset",
    "name": "shadowOffset",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffset",
    "inherited": true,
    "overrides": "Konva.Shape#shadowOffset",
    "description": "get/set shadow offset",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.y"
      }
    ],
    "examples": [
      "// get shadow offset\nvar shadowOffset = shape.shadowOffset();\n\n// set shadow offset\nshape.shadowOffset({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7630,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3387
  },
  {
    "id": "Konva.TextPath#shadowOffsetX",
    "longname": "Konva.TextPath#shadowOffsetX",
    "name": "shadowOffsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffsetX",
    "inherited": true,
    "overrides": "Konva.Shape#shadowOffsetX",
    "description": "get/set shadow offset x",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get shadow offset x\nvar shadowOffsetX = shape.shadowOffsetX();\n\n// set shadow offset x\nshape.shadowOffsetX(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7649,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3388
  },
  {
    "id": "Konva.TextPath#shadowOffsetY",
    "longname": "Konva.TextPath#shadowOffsetY",
    "name": "shadowOffsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffsetY",
    "inherited": true,
    "overrides": "Konva.Shape#shadowOffsetY",
    "description": "get/set shadow offset y",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get shadow offset y\nvar shadowOffsetY = shape.shadowOffsetY();\n\n// set shadow offset y\nshape.shadowOffsetY(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7663,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3389
  },
  {
    "id": "Konva.TextPath#fillPatternImage",
    "longname": "Konva.TextPath#fillPatternImage",
    "name": "fillPatternImage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternImage",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternImage",
    "description": "get/set fill pattern image",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Image"
          ]
        },
        "description": "object",
        "name": "image"
      }
    ],
    "examples": [
      "// get fill pattern image\nvar fillPatternImage = shape.fillPatternImage();\n\n// set fill pattern image\nvar imageObj = new Image();\nimageObj.onload = function() {\n  shape.fillPatternImage(imageObj);\n};\nimageObj.src = 'path/to/image/jpg';"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Image"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7677,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3390
  },
  {
    "id": "Konva.TextPath#fill",
    "longname": "Konva.TextPath#fill",
    "name": "fill",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fill",
    "inherited": true,
    "overrides": "Konva.Shape#fill",
    "description": "get/set fill color",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get fill color\nvar fill = shape.fill();\n\n// set fill color with color string\nshape.fill('green');\n\n// set fill color with hex\nshape.fill('#00ff00');\n\n// set fill color with rgb\nshape.fill('rgb(0,255,0)');\n\n// set fill color with rgba and make it 50% opaque\nshape.fill('rgba(0,255,0,0.5');\n\n// shape without fill\nshape.fill(null);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7695,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3391
  },
  {
    "id": "Konva.TextPath#fillPatternX",
    "longname": "Konva.TextPath#fillPatternX",
    "name": "fillPatternX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternX",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternX",
    "description": "get/set fill pattern x",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern x\nvar fillPatternX = shape.fillPatternX();\n// set fill pattern x\nshape.fillPatternX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7721,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3392
  },
  {
    "id": "Konva.TextPath#fillPatternY",
    "longname": "Konva.TextPath#fillPatternY",
    "name": "fillPatternY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternY",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternY",
    "description": "get/set fill pattern y",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern y\nvar fillPatternY = shape.fillPatternY();\n// set fill pattern y\nshape.fillPatternY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7734,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3393
  },
  {
    "id": "Konva.TextPath#fillLinearGradientColorStops",
    "longname": "Konva.TextPath#fillLinearGradientColorStops",
    "name": "fillLinearGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientColorStops",
    "inherited": true,
    "overrides": "Konva.Shape#fillLinearGradientColorStops",
    "description": "get/set fill linear gradient color stops",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get fill linear gradient color stops\nvar colorStops = shape.fillLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillLinearGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "colorStops"
      }
    ],
    "meta": {
      "lineno": 7747,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3394
  },
  {
    "id": "Konva.TextPath#strokeLinearGradientColorStops",
    "longname": "Konva.TextPath#strokeLinearGradientColorStops",
    "name": "strokeLinearGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientColorStops",
    "inherited": true,
    "overrides": "Konva.Shape#strokeLinearGradientColorStops",
    "description": "get/set stroke linear gradient color stops",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get stroke linear gradient color stops\nvar colorStops = shape.strokeLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.strokeLinearGradientColorStops([0, 'red', 0.5, 'blue', 1, 'green']);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "colorStops"
      }
    ],
    "meta": {
      "lineno": 7762,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3395
  },
  {
    "id": "Konva.TextPath#fillRadialGradientStartRadius",
    "longname": "Konva.TextPath#fillRadialGradientStartRadius",
    "name": "fillRadialGradientStartRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartRadius",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientStartRadius",
    "description": "get/set fill radial gradient start radius",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "radius"
      }
    ],
    "examples": [
      "// get radial gradient start radius\nvar startRadius = shape.fillRadialGradientStartRadius();\n\n// set radial gradient start radius\nshape.fillRadialGradientStartRadius(0);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7777,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3396
  },
  {
    "id": "Konva.TextPath#fillRadialGradientEndRadius",
    "longname": "Konva.TextPath#fillRadialGradientEndRadius",
    "name": "fillRadialGradientEndRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndRadius",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientEndRadius",
    "description": "get/set fill radial gradient end radius",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "radius"
      }
    ],
    "examples": [
      "// get radial gradient end radius\nvar endRadius = shape.fillRadialGradientEndRadius();\n\n// set radial gradient end radius\nshape.fillRadialGradientEndRadius(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7791,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3397
  },
  {
    "id": "Konva.TextPath#fillRadialGradientColorStops",
    "longname": "Konva.TextPath#fillRadialGradientColorStops",
    "name": "fillRadialGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientColorStops",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientColorStops",
    "description": "get/set fill radial gradient color stops",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get fill radial gradient color stops\nvar colorStops = shape.fillRadialGradientColorStops();\n\n// create a radial gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillRadialGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7805,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3398
  },
  {
    "id": "Konva.TextPath#fillPatternRepeat",
    "longname": "Konva.TextPath#fillPatternRepeat",
    "name": "fillPatternRepeat",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternRepeat",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternRepeat",
    "description": "get/set fill pattern repeat.  Can be 'repeat', 'repeat-x', 'repeat-y', or 'no-repeat'.  The default is 'repeat'",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "repeat"
      }
    ],
    "examples": [
      "// get fill pattern repeat\nvar repeat = shape.fillPatternRepeat();\n\n// repeat pattern in x direction only\nshape.fillPatternRepeat('repeat-x');\n\n// do not repeat the pattern\nshape.fillPatternRepeat('no-repeat');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7820,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3399
  },
  {
    "id": "Konva.TextPath#fillEnabled",
    "longname": "Konva.TextPath#fillEnabled",
    "name": "fillEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#fillEnabled",
    "description": "get/set fill enabled flag",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get fill enabled flag\nvar fillEnabled = shape.fillEnabled();\n\n// disable fill\nshape.fillEnabled(false);\n\n// enable fill\nshape.fillEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7837,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3400
  },
  {
    "id": "Konva.TextPath#strokeEnabled",
    "longname": "Konva.TextPath#strokeEnabled",
    "name": "strokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#strokeEnabled",
    "description": "get/set stroke enabled flag",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get stroke enabled flag\nvar strokeEnabled = shape.strokeEnabled();\n\n// disable stroke\nshape.strokeEnabled(false);\n\n// enable stroke\nshape.strokeEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7854,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3401
  },
  {
    "id": "Konva.TextPath#shadowEnabled",
    "longname": "Konva.TextPath#shadowEnabled",
    "name": "shadowEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#shadowEnabled",
    "description": "get/set shadow enabled flag",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get shadow enabled flag\nvar shadowEnabled = shape.shadowEnabled();\n\n// disable shadow\nshape.shadowEnabled(false);\n\n// enable shadow\nshape.shadowEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7871,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3402
  },
  {
    "id": "Konva.TextPath#dashEnabled",
    "longname": "Konva.TextPath#dashEnabled",
    "name": "dashEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#dashEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#dashEnabled",
    "description": "get/set dash enabled flag",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get dash enabled flag\nvar dashEnabled = shape.dashEnabled();\n\n// disable dash\nshape.dashEnabled(false);\n\n// enable dash\nshape.dashEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7888,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3403
  },
  {
    "id": "Konva.TextPath#strokeScaleEnabled",
    "longname": "Konva.TextPath#strokeScaleEnabled",
    "name": "strokeScaleEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeScaleEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#strokeScaleEnabled",
    "description": "get/set strokeScale enabled flag",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get stroke scale enabled flag\nvar strokeScaleEnabled = shape.strokeScaleEnabled();\n\n// disable stroke scale\nshape.strokeScaleEnabled(false);\n\n// enable stroke scale\nshape.strokeScaleEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7905,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3404
  },
  {
    "id": "Konva.TextPath#fillPriority",
    "longname": "Konva.TextPath#fillPriority",
    "name": "fillPriority",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPriority",
    "inherited": true,
    "overrides": "Konva.Shape#fillPriority",
    "description": "get/set fill priority.  can be color, pattern, linear-gradient, or radial-gradient.  The default is color.\n  This is handy if you want to toggle between different fill types.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "priority"
      }
    ],
    "examples": [
      "// get fill priority\nvar fillPriority = shape.fillPriority();\n\n// set fill priority\nshape.fillPriority('linear-gradient');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7922,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3405
  },
  {
    "id": "Konva.TextPath#fillPatternOffset",
    "longname": "Konva.TextPath#fillPatternOffset",
    "name": "fillPatternOffset",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffset",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternOffset",
    "description": "get/set fill pattern offset",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.y"
      }
    ],
    "examples": [
      "// get fill pattern offset\nvar patternOffset = shape.fillPatternOffset();\n\n// set fill pattern offset\nshape.fillPatternOffset({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7937,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3406
  },
  {
    "id": "Konva.TextPath#fillPatternOffsetX",
    "longname": "Konva.TextPath#fillPatternOffsetX",
    "name": "fillPatternOffsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffsetX",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternOffsetX",
    "description": "get/set fill pattern offset x",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern offset x\nvar patternOffsetX = shape.fillPatternOffsetX();\n\n// set fill pattern offset x\nshape.fillPatternOffsetX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7956,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3407
  },
  {
    "id": "Konva.TextPath#fillPatternOffsetY",
    "longname": "Konva.TextPath#fillPatternOffsetY",
    "name": "fillPatternOffsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffsetY",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternOffsetY",
    "description": "get/set fill pattern offset y",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern offset y\nvar patternOffsetY = shape.fillPatternOffsetY();\n\n// set fill pattern offset y\nshape.fillPatternOffsetY(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7970,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3408
  },
  {
    "id": "Konva.TextPath#fillPatternScale",
    "longname": "Konva.TextPath#fillPatternScale",
    "name": "fillPatternScale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScale",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternScale",
    "description": "get/set fill pattern scale",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.y"
      }
    ],
    "examples": [
      "// get fill pattern scale\nvar patternScale = shape.fillPatternScale();\n\n// set fill pattern scale\nshape.fillPatternScale({\n  x: 2,\n  y: 2\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7984,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3409
  },
  {
    "id": "Konva.TextPath#fillPatternScaleX",
    "longname": "Konva.TextPath#fillPatternScaleX",
    "name": "fillPatternScaleX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScaleX",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternScaleX",
    "description": "get/set fill pattern scale x",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern scale x\nvar patternScaleX = shape.fillPatternScaleX();\n\n// set fill pattern scale x\nshape.fillPatternScaleX(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8003,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3410
  },
  {
    "id": "Konva.TextPath#fillPatternScaleY",
    "longname": "Konva.TextPath#fillPatternScaleY",
    "name": "fillPatternScaleY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScaleY",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternScaleY",
    "description": "get/set fill pattern scale y",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern scale y\nvar patternScaleY = shape.fillPatternScaleY();\n\n// set fill pattern scale y\nshape.fillPatternScaleY(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8017,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3411
  },
  {
    "id": "Konva.TextPath#fillLinearGradientStartPoint",
    "longname": "Konva.TextPath#fillLinearGradientStartPoint",
    "name": "fillLinearGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPoint",
    "inherited": true,
    "overrides": "Konva.Shape#fillLinearGradientStartPoint",
    "description": "get/set fill linear gradient start point",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get fill linear gradient start point\nvar startPoint = shape.fillLinearGradientStartPoint();\n\n// set fill linear gradient start point\nshape.fillLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8034,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3412
  },
  {
    "id": "Konva.TextPath#strokeLinearGradientStartPoint",
    "longname": "Konva.TextPath#strokeLinearGradientStartPoint",
    "name": "strokeLinearGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientStartPoint",
    "inherited": true,
    "overrides": "Konva.Shape#strokeLinearGradientStartPoint",
    "description": "get/set stroke linear gradient start point",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point\nvar startPoint = shape.strokeLinearGradientStartPoint();\n\n// set stroke linear gradient start point\nshape.strokeLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8056,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3413
  },
  {
    "id": "Konva.TextPath#fillLinearGradientStartPointX",
    "longname": "Konva.TextPath#fillLinearGradientStartPointX",
    "name": "fillLinearGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPointX",
    "inherited": true,
    "overrides": "Konva.Shape#fillLinearGradientStartPointX",
    "description": "get/set fill linear gradient start point x",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill linear gradient start point x\nvar startPointX = shape.fillLinearGradientStartPointX();\n\n// set fill linear gradient start point x\nshape.fillLinearGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8075,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3414
  },
  {
    "id": "Konva.TextPath#linearLinearGradientStartPointX",
    "longname": "Konva.TextPath#linearLinearGradientStartPointX",
    "name": "linearLinearGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#linearLinearGradientStartPointX",
    "inherited": true,
    "overrides": "Konva.Shape#linearLinearGradientStartPointX",
    "description": "get/set stroke linear gradient start point x",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point x\nvar startPointX = shape.strokeLinearGradientStartPointX();\n\n// set stroke linear gradient start point x\nshape.strokeLinearGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8089,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3415
  },
  {
    "id": "Konva.TextPath#fillLinearGradientStartPointY",
    "longname": "Konva.TextPath#fillLinearGradientStartPointY",
    "name": "fillLinearGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPointY",
    "inherited": true,
    "overrides": "Konva.Shape#fillLinearGradientStartPointY",
    "description": "get/set fill linear gradient start point y",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill linear gradient start point y\nvar startPointY = shape.fillLinearGradientStartPointY();\n\n// set fill linear gradient start point y\nshape.fillLinearGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8103,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3416
  },
  {
    "id": "Konva.TextPath#strokeLinearGradientStartPointY",
    "longname": "Konva.TextPath#strokeLinearGradientStartPointY",
    "name": "strokeLinearGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientStartPointY",
    "inherited": true,
    "overrides": "Konva.Shape#strokeLinearGradientStartPointY",
    "description": "get/set stroke linear gradient start point y",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point y\nvar startPointY = shape.strokeLinearGradientStartPointY();\n\n// set stroke linear gradient start point y\nshape.strokeLinearGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8117,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3417
  },
  {
    "id": "Konva.TextPath#fillLinearGradientEndPoint",
    "longname": "Konva.TextPath#fillLinearGradientEndPoint",
    "name": "fillLinearGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPoint",
    "inherited": true,
    "overrides": "Konva.Shape#fillLinearGradientEndPoint",
    "description": "get/set fill linear gradient end point",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get fill linear gradient end point\nvar endPoint = shape.fillLinearGradientEndPoint();\n\n// set fill linear gradient end point\nshape.fillLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8134,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3418
  },
  {
    "id": "Konva.TextPath#strokeLinearGradientEndPoint",
    "longname": "Konva.TextPath#strokeLinearGradientEndPoint",
    "name": "strokeLinearGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPoint",
    "inherited": true,
    "overrides": "Konva.Shape#strokeLinearGradientEndPoint",
    "description": "get/set stroke linear gradient end point",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point\nvar endPoint = shape.strokeLinearGradientEndPoint();\n\n// set stroke linear gradient end point\nshape.strokeLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8156,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3419
  },
  {
    "id": "Konva.TextPath#fillLinearGradientEndPointX",
    "longname": "Konva.TextPath#fillLinearGradientEndPointX",
    "name": "fillLinearGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPointX",
    "inherited": true,
    "overrides": "Konva.Shape#fillLinearGradientEndPointX",
    "description": "get/set fill linear gradient end point x",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill linear gradient end point x\nvar endPointX = shape.fillLinearGradientEndPointX();\n\n// set fill linear gradient end point x\nshape.fillLinearGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8175,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3420
  },
  {
    "id": "Konva.TextPath#strokeLinearGradientEndPointX",
    "longname": "Konva.TextPath#strokeLinearGradientEndPointX",
    "name": "strokeLinearGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPointX",
    "inherited": true,
    "overrides": "Konva.Shape#strokeLinearGradientEndPointX",
    "description": "get/set fill linear gradient end point x",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point x\nvar endPointX = shape.strokeLinearGradientEndPointX();\n\n// set stroke linear gradient end point x\nshape.strokeLinearGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8189,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3421
  },
  {
    "id": "Konva.TextPath#fillLinearGradientEndPointY",
    "longname": "Konva.TextPath#fillLinearGradientEndPointY",
    "name": "fillLinearGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPointY",
    "inherited": true,
    "overrides": "Konva.Shape#fillLinearGradientEndPointY",
    "description": "get/set fill linear gradient end point y",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill linear gradient end point y\nvar endPointY = shape.fillLinearGradientEndPointY();\n\n// set fill linear gradient end point y\nshape.fillLinearGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8203,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3422
  },
  {
    "id": "Konva.TextPath#strokeLinearGradientEndPointY",
    "longname": "Konva.TextPath#strokeLinearGradientEndPointY",
    "name": "strokeLinearGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPointY",
    "inherited": true,
    "overrides": "Konva.Shape#strokeLinearGradientEndPointY",
    "description": "get/set stroke linear gradient end point y",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point y\nvar endPointY = shape.strokeLinearGradientEndPointY();\n\n// set stroke linear gradient end point y\nshape.strokeLinearGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8217,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3423
  },
  {
    "id": "Konva.TextPath#fillRadialGradientStartPoint",
    "longname": "Konva.TextPath#fillRadialGradientStartPoint",
    "name": "fillRadialGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPoint",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientStartPoint",
    "description": "get/set fill radial gradient start point",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get fill radial gradient start point\nvar startPoint = shape.fillRadialGradientStartPoint();\n\n// set fill radial gradient start point\nshape.fillRadialGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8234,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3424
  },
  {
    "id": "Konva.TextPath#fillRadialGradientStartPointX",
    "longname": "Konva.TextPath#fillRadialGradientStartPointX",
    "name": "fillRadialGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPointX",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientStartPointX",
    "description": "get/set fill radial gradient start point x",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill radial gradient start point x\nvar startPointX = shape.fillRadialGradientStartPointX();\n\n// set fill radial gradient start point x\nshape.fillRadialGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8253,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3425
  },
  {
    "id": "Konva.TextPath#fillRadialGradientStartPointY",
    "longname": "Konva.TextPath#fillRadialGradientStartPointY",
    "name": "fillRadialGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPointY",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientStartPointY",
    "description": "get/set fill radial gradient start point y",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill radial gradient start point y\nvar startPointY = shape.fillRadialGradientStartPointY();\n\n// set fill radial gradient start point y\nshape.fillRadialGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8267,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3426
  },
  {
    "id": "Konva.TextPath#fillRadialGradientEndPoint",
    "longname": "Konva.TextPath#fillRadialGradientEndPoint",
    "name": "fillRadialGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPoint",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientEndPoint",
    "description": "get/set fill radial gradient end point",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get fill radial gradient end point\nvar endPoint = shape.fillRadialGradientEndPoint();\n\n// set fill radial gradient end point\nshape.fillRadialGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8284,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3427
  },
  {
    "id": "Konva.TextPath#fillRadialGradientEndPointX",
    "longname": "Konva.TextPath#fillRadialGradientEndPointX",
    "name": "fillRadialGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPointX",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientEndPointX",
    "description": "get/set fill radial gradient end point x",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill radial gradient end point x\nvar endPointX = shape.fillRadialGradientEndPointX();\n\n// set fill radial gradient end point x\nshape.fillRadialGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8303,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3428
  },
  {
    "id": "Konva.TextPath#fillRadialGradientEndPointY",
    "longname": "Konva.TextPath#fillRadialGradientEndPointY",
    "name": "fillRadialGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPointY",
    "inherited": true,
    "overrides": "Konva.Shape#fillRadialGradientEndPointY",
    "description": "get/set fill radial gradient end point y",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill radial gradient end point y\nvar endPointY = shape.fillRadialGradientEndPointY();\n\n// set fill radial gradient end point y\nshape.fillRadialGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8317,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3429
  },
  {
    "id": "Konva.TextPath#fillPatternRotation",
    "longname": "Konva.TextPath#fillPatternRotation",
    "name": "fillPatternRotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternRotation",
    "inherited": true,
    "overrides": "Konva.Shape#fillPatternRotation",
    "description": "get/set fill pattern rotation in degrees",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get fill pattern rotation\nvar patternRotation = shape.fillPatternRotation();\n\n// set fill pattern rotation\nshape.fillPatternRotation(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8331,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3430
  },
  {
    "id": "Konva.TextPath#fillRule",
    "longname": "Konva.TextPath#fillRule",
    "name": "fillRule",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRule",
    "inherited": true,
    "overrides": "Konva.Shape#fillRule",
    "description": "get/set fill rule",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "CanvasFillRule"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get fill rule\nvar fillRule = shape.fillRule();\n\n// set fill rule\nshape.fillRule('evenodd');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8345,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3431
  },
  {
    "id": "Konva.TextPath#clearCache",
    "longname": "Konva.TextPath#clearCache",
    "name": "clearCache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#clearCache",
    "inherited": true,
    "overrides": "Konva.Shape#clearCache",
    "description": "clear cached canvas",
    "memberof": "Konva.TextPath",
    "examples": [
      "node.clearCache();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2632,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3432
  },
  {
    "id": "Konva.TextPath#cache",
    "longname": "Konva.TextPath#cache",
    "name": "cache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#cache",
    "inherited": true,
    "overrides": "Konva.Shape#cache",
    "description": "cache node to improve drawing performance, apply filters, or create more accurate\n hit regions. For all basic shapes size of cache canvas will be automatically detected.\n If you need to cache your custom `Konva.Shape` instance you have to pass shape's bounding box\n properties. Look at [https://konvajs.org/docs/performance/Shape_Caching.html](https://konvajs.org/docs/performance/Shape_Caching.html) for more information.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "increase canvas size by `offset` pixel in all directions.",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "when set to true, a red border will be drawn around the cached\n region for debugging purposes",
        "name": "config.drawBorder"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "change quality (or pixel ratio) of cached image. pixelRatio = 2 will produce 2x sized cache.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "control imageSmoothingEnabled property of created canvas for cache",
        "name": "config.imageSmoothingEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "change quality (or pixel ratio) of cached hit canvas.",
        "name": "config.hitCanvasPixelRatio"
      }
    ],
    "examples": [
      "// cache a shape with the x,y position of the bounding box at the center and\n// the width and height of the bounding box equal to the width and height of\n// the shape obtained from shape.width() and shape.height()\nimage.cache();\n\n// cache a node and define the bounding box position and size\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200\n});\n\n// cache a node and draw a red border around the bounding box\n// for debugging purposes\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200,\n  offset : 10,\n  drawBorder: true\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2650,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3433
  },
  {
    "id": "Konva.TextPath#isCached",
    "longname": "Konva.TextPath#isCached",
    "name": "isCached",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isCached",
    "inherited": true,
    "overrides": "Konva.Shape#isCached",
    "description": "determine if node is currently cached",
    "memberof": "Konva.TextPath",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2788,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3434
  },
  {
    "id": "Konva.TextPath#getClientRect",
    "longname": "Konva.TextPath#getClientRect",
    "name": "getClientRect",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getClientRect",
    "inherited": true,
    "overrides": "Konva.Shape#getClientRect",
    "description": "Return client rectangle `{x, y, width, height}` of node. This rectangle also include all styling (strokes, shadows, etc).\nThe purpose of the method is similar to getBoundingClientRect API of the DOM.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply transform to node for calculating rect?",
        "name": "config.skipTransform"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply shadow to the node for calculating bound box?",
        "name": "config.skipShadow"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply stroke to the node for calculating bound box?",
        "name": "config.skipStroke"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "calculate client rect relative to one of the parents",
        "name": "config.relativeTo"
      }
    ],
    "examples": [
      "var rect = new Konva.Rect({\n     width : 100,\n     height : 100,\n     x : 50,\n     y : 50,\n     strokeWidth : 4,\n     stroke : 'black',\n     offsetX : 50,\n     scaleY : 2\n});\n\n// get client rect without think off transformations (position, rotation, scale, offset, etc)\nrect.getClientRect({ skipTransform: true});\n// returns {\n//     x : -2,   // two pixels for stroke / 2\n//     y : -2,\n//     width : 104, // increased by 4 for stroke\n//     height : 104\n//}\n\n// get client rect with transformation applied\nrect.getClientRect();\n// returns Object {x: -2, y: 46, width: 104, height: 208}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "rect with `{x, y, width, height}` properties"
      }
    ],
    "meta": {
      "lineno": 2797,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3435
  },
  {
    "id": "Konva.TextPath#on",
    "longname": "Konva.TextPath#on",
    "name": "on",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#on",
    "inherited": true,
    "overrides": "Konva.Shape#on",
    "description": "bind events to the node. KonvaJS supports mouseover, mousemove,\n mouseout, mouseenter, mouseleave, mousedown, mouseup, wheel, contextmenu, click, dblclick, touchstart, touchmove,\n touchend, tap, dbltap, dragstart, dragmove, and dragend events.\n Pass in a string of events delimited by a space to bind multiple events at once\n such as 'mousedown mouseup mousemove'. Include a namespace to bind an\n event by name such as 'click.foobar'.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'click', 'mousedown touchstart', 'mousedown.foo touchstart.foo'",
        "name": "evtStr"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The handler function. The first argument of that function is event object. Event object has `target` as main target of the event, `currentTarget` as current node listener and `evt` as native browser event.",
        "name": "handler"
      }
    ],
    "examples": [
      "// add click listener\nnode.on('click', function() {\n  console.log('you clicked me!');\n});\n\n// get the target node\nnode.on('click', function(evt) {\n  console.log(evt.target);\n});\n\n// stop event propagation\nnode.on('click', function(evt) {\n  evt.cancelBubble = true;\n});\n\n// bind multiple listeners\nnode.on('click touchstart', function() {\n  console.log('you clicked/touched me!');\n});\n\n// namespace listener\nnode.on('click.foo', function() {\n  console.log('you clicked/touched me!');\n});\n\n// get the event type\nnode.on('click tap', function(evt) {\n  var eventType = evt.type;\n});\n\n// get native event object\nnode.on('click tap', function(evt) {\n  var nativeEvent = evt.evt;\n});\n\n// for change events, get the old and new val\nnode.on('xChange', function(evt) {\n  var oldVal = evt.oldVal;\n  var newVal = evt.newVal;\n});\n\n// get event targets\n// with event delegations\nlayer.on('click', 'Group', function(evt) {\n  var shape = evt.target;\n  var group = evt.currentTarget;\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2919,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3436
  },
  {
    "id": "Konva.TextPath#off",
    "longname": "Konva.TextPath#off",
    "name": "off",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#off",
    "inherited": true,
    "overrides": "Konva.Shape#off",
    "description": "remove event bindings from the node. Pass in a string of\n event types delimmited by a space to remove multiple event\n bindings at once such as 'mousedown mouseup mousemove'.\n include a namespace to remove an event binding by name\n such as 'click.foobar'. If you only give a name like '.foobar',\n all events in that namespace will be removed.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'click', 'mousedown touchstart', '.foobar'",
        "name": "evtStr"
      }
    ],
    "examples": [
      "// remove listener\nnode.off('click');\n\n// remove multiple listeners\nnode.off('click touchstart');\n\n// remove listener by name\nnode.off('click.foo');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3007,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3437
  },
  {
    "id": "Konva.TextPath#remove",
    "longname": "Konva.TextPath#remove",
    "name": "remove",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#remove",
    "inherited": true,
    "overrides": "Konva.Shape#remove",
    "description": "remove a node from parent, but don't destroy. You can reuse the node later.",
    "memberof": "Konva.TextPath",
    "examples": [
      "node.remove();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3088,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3438
  },
  {
    "id": "Konva.TextPath#destroy",
    "longname": "Konva.TextPath#destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#destroy",
    "inherited": true,
    "overrides": "Konva.Shape#destroy",
    "description": "remove and destroy a node. Kill it and delete forever! You should not reuse node after destroy().\nIf the node is a container (Group, Stage or Layer) it will destroy all children too.",
    "memberof": "Konva.TextPath",
    "examples": [
      "node.destroy();"
    ],
    "meta": {
      "lineno": 3125,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3439
  },
  {
    "id": "Konva.TextPath#getAttr",
    "longname": "Konva.TextPath#getAttr",
    "name": "getAttr",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAttr",
    "inherited": true,
    "overrides": "Konva.Shape#getAttr",
    "description": "get attr",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "attr"
      }
    ],
    "examples": [
      "var x = node.getAttr('x');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer",
            "String",
            "Object",
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3138,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3440
  },
  {
    "id": "Konva.TextPath#getAncestors",
    "longname": "Konva.TextPath#getAncestors",
    "name": "getAncestors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAncestors",
    "inherited": true,
    "overrides": "Konva.Shape#getAncestors",
    "description": "get ancestors",
    "memberof": "Konva.TextPath",
    "examples": [
      "shape.getAncestors().forEach(function(node) {\n  console.log(node.getId());\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3155,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3441
  },
  {
    "id": "Konva.TextPath#getAttrs",
    "longname": "Konva.TextPath#getAttrs",
    "name": "getAttrs",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAttrs",
    "inherited": true,
    "overrides": "Konva.Shape#getAttrs",
    "description": "get attrs object literal",
    "memberof": "Konva.TextPath",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3173,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3442
  },
  {
    "id": "Konva.TextPath#setAttrs",
    "longname": "Konva.TextPath#setAttrs",
    "name": "setAttrs",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#setAttrs",
    "inherited": true,
    "overrides": "Konva.Shape#setAttrs",
    "description": "set multiple attrs at once using an object literal",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "object containing key value pairs",
        "name": "config"
      }
    ],
    "examples": [
      "node.setAttrs({\n  x: 5,\n  fill: 'red'\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3182,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3443
  },
  {
    "id": "Konva.TextPath#isListening",
    "longname": "Konva.TextPath#isListening",
    "name": "isListening",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isListening",
    "inherited": true,
    "overrides": "Konva.Shape#isListening",
    "description": "determine if node is listening for events by taking into account ancestors.\n\nParent    | Self      | isListening\nlistening | listening |\n----------+-----------+------------\nT         | T         | T\nT         | F         | F\nF         | T         | F\nF         | F         | F",
    "memberof": "Konva.TextPath",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3217,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3444
  },
  {
    "id": "Konva.TextPath#isVisible",
    "longname": "Konva.TextPath#isVisible",
    "name": "isVisible",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isVisible",
    "inherited": true,
    "overrides": "Konva.Shape#isVisible",
    "description": "determine if node is visible by taking into account ancestors.\n\nParent    | Self      | isVisible\nvisible   | visible   |\n----------+-----------+------------\nT         | T         | T\nT         | F         | F\nF         | T         | F\nF         | F         | F",
    "memberof": "Konva.TextPath",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3248,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3445
  },
  {
    "id": "Konva.TextPath#show",
    "longname": "Konva.TextPath#show",
    "name": "show",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#show",
    "inherited": true,
    "overrides": "Konva.Shape#show",
    "description": "show node. set visible = true",
    "memberof": "Konva.TextPath",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3300,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3446
  },
  {
    "id": "Konva.TextPath#hide",
    "longname": "Konva.TextPath#hide",
    "name": "hide",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hide",
    "inherited": true,
    "overrides": "Konva.Shape#hide",
    "description": "hide node.  Hidden nodes are no longer detectable",
    "memberof": "Konva.TextPath",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3310,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3447
  },
  {
    "id": "Konva.TextPath#getAbsoluteZIndex",
    "longname": "Konva.TextPath#getAbsoluteZIndex",
    "name": "getAbsoluteZIndex",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteZIndex",
    "inherited": true,
    "overrides": "Konva.Shape#getAbsoluteZIndex",
    "description": "get absolute z-index which takes into account sibling\n and ancestor indices",
    "memberof": "Konva.TextPath",
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3323,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3448
  },
  {
    "id": "Konva.TextPath#getDepth",
    "longname": "Konva.TextPath#getDepth",
    "name": "getDepth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getDepth",
    "inherited": true,
    "overrides": "Konva.Shape#getDepth",
    "description": "get node depth in node tree.  Returns an integer.\n e.g. Stage depth will always be 0.  Layers will always be 1.  Groups and Shapes will always\n be >= 2",
    "memberof": "Konva.TextPath",
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3355,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3449
  },
  {
    "id": "Konva.TextPath#getRelativePointerPosition",
    "longname": "Konva.TextPath#getRelativePointerPosition",
    "name": "getRelativePointerPosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getRelativePointerPosition",
    "inherited": true,
    "overrides": "Konva.Shape#getRelativePointerPosition",
    "description": "get position of first pointer (like mouse or first touch) relative to local coordinates of current node",
    "memberof": "Konva.TextPath",
    "examples": [
      "// let's think we have a rectangle at position x = 10, y = 10\n// now we clicked at x = 15, y = 15 of the stage\n// if you want to know position of the click, related to the rectangle you can use\nrect.getRelativePointerPosition();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3398,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3450
  },
  {
    "id": "Konva.TextPath#getAbsolutePosition",
    "longname": "Konva.TextPath#getAbsolutePosition",
    "name": "getAbsolutePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsolutePosition",
    "inherited": true,
    "overrides": "Konva.Shape#getAbsolutePosition",
    "description": "get absolute position of a node. That function can be used to calculate absolute position, but relative to any ancestor",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "optional ancestor node",
        "name": "Ancestor"
      }
    ],
    "examples": [
      "// returns absolute position relative to top-left corner of canvas\nnode.getAbsolutePosition();\n\n// calculate absolute position of node, inside stage\n// so stage transforms are ignored\nnode.getAbsolutePosition(stage)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3426,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3451
  },
  {
    "id": "Konva.TextPath#move",
    "longname": "Konva.TextPath#move",
    "name": "move",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#move",
    "inherited": true,
    "overrides": "Konva.Shape#move",
    "description": "move node by an amount relative to its current position",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "change"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "change.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "change.y"
      }
    ],
    "examples": [
      "// move node in x direction by 1px and y direction by 2px\nnode.move({\n  x: 1,\n  y: 2\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3514,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3452
  },
  {
    "id": "Konva.TextPath#rotate",
    "longname": "Konva.TextPath#rotate",
    "name": "rotate",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#rotate",
    "inherited": true,
    "overrides": "Konva.Shape#rotate",
    "description": "rotate node by an amount in degrees relative to its current rotation",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "theta"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3559,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3453
  },
  {
    "id": "Konva.TextPath#moveToTop",
    "longname": "Konva.TextPath#moveToTop",
    "name": "moveToTop",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveToTop",
    "inherited": true,
    "overrides": "Konva.Shape#moveToTop",
    "description": "move node to the top of its siblings",
    "memberof": "Konva.TextPath",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3570,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3454
  },
  {
    "id": "Konva.TextPath#moveUp",
    "longname": "Konva.TextPath#moveUp",
    "name": "moveUp",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveUp",
    "inherited": true,
    "overrides": "Konva.Shape#moveUp",
    "description": "move node up",
    "memberof": "Konva.TextPath",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "flag is moved or not"
      }
    ],
    "meta": {
      "lineno": 3590,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3455
  },
  {
    "id": "Konva.TextPath#moveDown",
    "longname": "Konva.TextPath#moveDown",
    "name": "moveDown",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveDown",
    "inherited": true,
    "overrides": "Konva.Shape#moveDown",
    "description": "move node down",
    "memberof": "Konva.TextPath",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3610,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3456
  },
  {
    "id": "Konva.TextPath#moveToBottom",
    "longname": "Konva.TextPath#moveToBottom",
    "name": "moveToBottom",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveToBottom",
    "inherited": true,
    "overrides": "Konva.Shape#moveToBottom",
    "description": "move node to the bottom of its siblings",
    "memberof": "Konva.TextPath",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3630,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3457
  },
  {
    "id": "Konva.TextPath#getAbsoluteOpacity",
    "longname": "Konva.TextPath#getAbsoluteOpacity",
    "name": "getAbsoluteOpacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteOpacity",
    "inherited": true,
    "overrides": "Konva.Shape#getAbsoluteOpacity",
    "description": "get absolute opacity",
    "memberof": "Konva.TextPath",
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3668,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3458
  },
  {
    "id": "Konva.TextPath#moveTo",
    "longname": "Konva.TextPath#moveTo",
    "name": "moveTo",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveTo",
    "inherited": true,
    "overrides": "Konva.Shape#moveTo",
    "description": "move node to another container",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Container"
          ]
        },
        "name": "newContainer"
      }
    ],
    "examples": [
      "// move node from current layer into layer2\nnode.moveTo(layer2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3685,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3459
  },
  {
    "id": "Konva.TextPath#toObject",
    "longname": "Konva.TextPath#toObject",
    "name": "toObject",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toObject",
    "inherited": true,
    "overrides": "Konva.Shape#toObject",
    "description": "convert Node into an object for serialization.  Returns an object.",
    "memberof": "Konva.TextPath",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3703,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3460
  },
  {
    "id": "Konva.TextPath#toJSON",
    "longname": "Konva.TextPath#toJSON",
    "name": "toJSON",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toJSON",
    "inherited": true,
    "overrides": "Konva.Shape#toJSON",
    "description": "convert Node into a JSON string.  Returns a JSON string.",
    "memberof": "Konva.TextPath",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3736,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3461
  },
  {
    "id": "Konva.TextPath#getParent",
    "longname": "Konva.TextPath#getParent",
    "name": "getParent",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getParent",
    "inherited": true,
    "overrides": "Konva.Shape#getParent",
    "description": "get parent container",
    "memberof": "Konva.TextPath",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3745,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3462
  },
  {
    "id": "Konva.TextPath#findAncestors",
    "longname": "Konva.TextPath#findAncestors",
    "name": "findAncestors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#findAncestors",
    "inherited": true,
    "overrides": "Konva.Shape#findAncestors",
    "description": "get all ancestors (parent then parent of the parent, etc) of the node",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "selector for search",
        "name": "selector"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "show we think that node is ancestro itself?",
        "name": "includeSelf"
      },
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "optional": true,
        "description": "optional node where we need to stop searching (one of ancestors)",
        "name": "stopNode"
      }
    ],
    "examples": [
      "// get one of the parent group\nvar parentGroups = node.findAncestors('Group');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "[ancestors]"
      }
    ],
    "meta": {
      "lineno": 3754,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3463
  },
  {
    "id": "Konva.TextPath#findAncestor",
    "longname": "Konva.TextPath#findAncestor",
    "name": "findAncestor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#findAncestor",
    "inherited": true,
    "overrides": "Konva.Shape#findAncestor",
    "description": "get ancestor (parent or parent of the parent, etc) of the node that match passed selector",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "selector for search",
        "name": "selector"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "show we think that node is ancestro itself?",
        "name": "includeSelf"
      },
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "optional": true,
        "description": "optional node where we need to stop searching (one of ancestors)",
        "name": "stopNode"
      }
    ],
    "examples": [
      "// get one of the parent group\nvar group = node.findAncestors('.mygroup');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "description": "ancestor"
      }
    ],
    "meta": {
      "lineno": 3786,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3464
  },
  {
    "id": "Konva.TextPath#getLayer",
    "longname": "Konva.TextPath#getLayer",
    "name": "getLayer",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getLayer",
    "inherited": true,
    "overrides": "Konva.Shape#getLayer",
    "description": "get layer ancestor",
    "memberof": "Konva.TextPath",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Layer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3837,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3465
  },
  {
    "id": "Konva.TextPath#getStage",
    "longname": "Konva.TextPath#getStage",
    "name": "getStage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getStage",
    "inherited": true,
    "overrides": "Konva.Shape#getStage",
    "description": "get stage ancestor",
    "memberof": "Konva.TextPath",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Stage"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3847,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3466
  },
  {
    "id": "Konva.TextPath#fire",
    "longname": "Konva.TextPath#fire",
    "name": "fire",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#fire",
    "inherited": true,
    "overrides": "Konva.Shape#fire",
    "description": "fire event",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "event type.  can be a regular event, like click, mouseover, or mouseout, or it can be a custom event, like myCustomEvent",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "Event"
          ]
        },
        "optional": true,
        "description": "event object",
        "name": "evt"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "setting the value to false, or leaving it undefined, will result in the event\n not bubbling.  Setting the value to true will result in the event bubbling.",
        "name": "bubble"
      }
    ],
    "examples": [
      "// manually fire click event\nnode.fire('click');\n\n// fire custom event\nnode.fire('foo');\n\n// fire custom event with custom event object\nnode.fire('foo', {\n  bar: 10\n});\n\n// fire click event that bubbles\nnode.fire('click', null, true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3865,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3467
  },
  {
    "id": "Konva.TextPath#getAbsoluteTransform",
    "longname": "Konva.TextPath#getAbsoluteTransform",
    "name": "getAbsoluteTransform",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteTransform",
    "inherited": true,
    "overrides": "Konva.Shape#getAbsoluteTransform",
    "description": "get absolute transform of the node which takes into\n account its ancestor transforms",
    "memberof": "Konva.TextPath",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3901,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3468
  },
  {
    "id": "Konva.TextPath#getAbsoluteScale",
    "longname": "Konva.TextPath#getAbsoluteScale",
    "name": "getAbsoluteScale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteScale",
    "inherited": true,
    "overrides": "Konva.Shape#getAbsoluteScale",
    "description": "get absolute scale of the node which takes into\n account its ancestor scales",
    "memberof": "Konva.TextPath",
    "examples": [
      "// get absolute scale x\nvar scaleX = node.getAbsoluteScale().x;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3961,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3469
  },
  {
    "id": "Konva.TextPath#getAbsoluteRotation",
    "longname": "Konva.TextPath#getAbsoluteRotation",
    "name": "getAbsoluteRotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteRotation",
    "inherited": true,
    "overrides": "Konva.Shape#getAbsoluteRotation",
    "description": "get absolute rotation of the node which takes into\n account its ancestor rotations",
    "memberof": "Konva.TextPath",
    "examples": [
      "// get absolute rotation\nvar rotation = node.getAbsoluteRotation();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3989,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3470
  },
  {
    "id": "Konva.TextPath#getTransform",
    "longname": "Konva.TextPath#getTransform",
    "name": "getTransform",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getTransform",
    "inherited": true,
    "overrides": "Konva.Shape#getTransform",
    "description": "get transform of the node",
    "memberof": "Konva.TextPath",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4009,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3471
  },
  {
    "id": "Konva.TextPath#clone",
    "longname": "Konva.TextPath#clone",
    "name": "clone",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#clone",
    "inherited": true,
    "overrides": "Konva.Shape#clone",
    "description": "clone node.  Returns a new Node instance with identical attributes.  You can also override\n the node properties with an object literal, enabling you to use an existing node as a template\n for another node",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "override attrs",
        "name": "obj"
      }
    ],
    "examples": [
      "// simple clone\nvar clone = node.clone();\n\n// clone a node and override the x position\nvar clone = rect.clone({\n  x: 5\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4044,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3472
  },
  {
    "id": "Konva.TextPath#toCanvas",
    "longname": "Konva.TextPath#toCanvas",
    "name": "toCanvas",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toCanvas",
    "inherited": true,
    "overrides": "Konva.Shape#toCanvas",
    "description": "converts node into an canvas element.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output canvas. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var canvas = node.toCanvas();"
    ],
    "meta": {
      "lineno": 4119,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3473
  },
  {
    "id": "Konva.TextPath#toDataURL",
    "longname": "Konva.TextPath#toDataURL",
    "name": "toDataURL",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toDataURL",
    "inherited": true,
    "overrides": "Konva.Shape#toDataURL",
    "description": "Creates a composite data URL (base64 string). If MIME type is not\nspecified, then \"image/png\" will result. For \"image/jpeg\", specify a quality\nlevel as quality (range 0.0 - 1.0)",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"image/png\" or \"image/jpeg\".\n \"image/png\" is the default",
        "name": "config.mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "jpeg quality.  If using an \"image/jpeg\" mimeType,\n you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n is very high quality",
        "name": "config.quality"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output image url. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4140,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3474
  },
  {
    "id": "Konva.TextPath#toImage",
    "longname": "Konva.TextPath#toImage",
    "name": "toImage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toImage",
    "inherited": true,
    "overrides": "Konva.Shape#toImage",
    "description": "converts node into an image.  Since the toImage\n method is asynchronous, the resulting image can only be retrieved from the config callback\n or the returned Promise.  toImage is most commonly used\n to cache complex drawings as an image so that they don't have to constantly be redrawn",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"image/png\" or \"image/jpeg\".\n \"image/png\" is the default",
        "name": "config.mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "jpeg quality.  If using an \"image/jpeg\" mimeType,\n you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n is very high quality",
        "name": "config.quality"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output image. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var image = node.toImage({\n  callback(img) {\n    // do stuff with img\n  }\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Image>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4172,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3475
  },
  {
    "id": "Konva.TextPath#toBlob",
    "longname": "Konva.TextPath#toBlob",
    "name": "toBlob",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toBlob",
    "inherited": true,
    "overrides": "Konva.Shape#toBlob",
    "description": "Converts node into a blob.  Since the toBlob method is asynchronous,\n the resulting blob can only be retrieved from the config callback\n or the returned Promise.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output canvas. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var blob = await node.toBlob({});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Blob>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4219,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3476
  },
  {
    "id": "Konva.TextPath#getClassName",
    "longname": "Konva.TextPath#getClassName",
    "name": "getClassName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getClassName",
    "inherited": true,
    "overrides": "Konva.Shape#getClassName",
    "description": "get class name, which may return Stage, Layer, Group, or shape class names like Rect, Circle, Text, etc.",
    "memberof": "Konva.TextPath",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4267,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3477
  },
  {
    "id": "Konva.TextPath#getType",
    "longname": "Konva.TextPath#getType",
    "name": "getType",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getType",
    "inherited": true,
    "overrides": "Konva.Shape#getType",
    "description": "get the node type, which may return Stage, Layer, Group, or Shape",
    "memberof": "Konva.TextPath",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4276,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3478
  },
  {
    "id": "Konva.TextPath#addName",
    "longname": "Konva.TextPath#addName",
    "name": "addName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#addName",
    "inherited": true,
    "overrides": "Konva.Shape#addName",
    "description": "add name to node",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red');\nnode.addName('selected');\nnode.name(); // return 'red selected'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4324,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3479
  },
  {
    "id": "Konva.TextPath#hasName",
    "longname": "Konva.TextPath#hasName",
    "name": "hasName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hasName",
    "inherited": true,
    "overrides": "Konva.Shape#hasName",
    "description": "check is node has name",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red');\nnode.hasName('red');   // return true\nnode.hasName('selected'); // return false\nnode.hasName(''); // return false"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4343,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3480
  },
  {
    "id": "Konva.TextPath#removeName",
    "longname": "Konva.TextPath#removeName",
    "name": "removeName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#removeName",
    "inherited": true,
    "overrides": "Konva.Shape#removeName",
    "description": "remove name from node",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red selected');\nnode.removeName('selected');\nnode.hasName('selected'); // return false\nnode.name(); // return 'red'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4367,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3481
  },
  {
    "id": "Konva.TextPath#setAttr",
    "longname": "Konva.TextPath#setAttr",
    "name": "setAttr",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#setAttr",
    "inherited": true,
    "overrides": "Konva.Shape#setAttr",
    "description": "set attr",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "attr"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "name": "val"
      }
    ],
    "examples": [
      "node.setAttr('x', 5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4388,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3482
  },
  {
    "id": "Konva.TextPath#draw",
    "longname": "Konva.TextPath#draw",
    "name": "draw",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#draw",
    "inherited": true,
    "overrides": "Konva.Shape#draw",
    "description": "draw both scene and hit graphs.  If the node being drawn is the stage, all of the layers will be cleared and redrawn",
    "memberof": "Konva.TextPath",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4511,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3483
  },
  {
    "id": "Konva.TextPath#startDrag",
    "longname": "Konva.TextPath#startDrag",
    "name": "startDrag",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#startDrag",
    "inherited": true,
    "overrides": "Konva.Shape#startDrag",
    "description": "initiate drag and drop.",
    "memberof": "Konva.TextPath",
    "meta": {
      "lineno": 4544,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3484
  },
  {
    "id": "Konva.TextPath#stopDrag",
    "longname": "Konva.TextPath#stopDrag",
    "name": "stopDrag",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#stopDrag",
    "inherited": true,
    "overrides": "Konva.Shape#stopDrag",
    "description": "stop drag and drop",
    "memberof": "Konva.TextPath",
    "meta": {
      "lineno": 4590,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3485
  },
  {
    "id": "Konva.TextPath#isDragging",
    "longname": "Konva.TextPath#isDragging",
    "name": "isDragging",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isDragging",
    "inherited": true,
    "overrides": "Konva.Shape#isDragging",
    "description": "determine if node is currently in drag and drop mode",
    "memberof": "Konva.TextPath",
    "meta": {
      "lineno": 4607,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3486
  },
  {
    "id": "Konva.TextPath#isClientRectOnScreen",
    "longname": "Konva.TextPath#isClientRectOnScreen",
    "name": "isClientRectOnScreen",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isClientRectOnScreen",
    "inherited": true,
    "overrides": "Konva.Shape#isClientRectOnScreen",
    "description": "determine if node (at least partially) is currently in user-visible area",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number",
            "Object"
          ]
        },
        "description": "optional margin in pixels",
        "name": "margin"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "margin.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "margin.y"
      }
    ],
    "examples": [
      "// get index\n// default calculations\nvar isOnScreen = node.isClientRectOnScreen()\n// increase object size (or screen size) for cases when objects close to the screen still need to be marked as \"visible\"\nvar isOnScreen = node.isClientRectOnScreen({ x: stage.width(), y: stage.height() })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4671,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3487
  },
  {
    "id": "Konva.TextPath#zIndex",
    "longname": "Konva.TextPath#zIndex",
    "name": "zIndex",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#zIndex",
    "inherited": true,
    "overrides": "Konva.Shape#zIndex",
    "description": "get/set zIndex relative to the node's siblings who share the same parent.\nPlease remember that zIndex is not absolute (like in CSS). It is relative to parent element only.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "index"
      }
    ],
    "examples": [
      "// get index\nvar index = node.zIndex();\n\n// set index\nnode.zIndex(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4764,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3488
  },
  {
    "id": "Konva.TextPath#absolutePosition",
    "longname": "Konva.TextPath#absolutePosition",
    "name": "absolutePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#absolutePosition",
    "inherited": true,
    "overrides": "Konva.Shape#absolutePosition",
    "description": "get/set node absolute position",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "// get position\nvar position = node.absolutePosition();\n\n// set position\nnode.absolutePosition({\n  x: 5,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4779,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3489
  },
  {
    "id": "Konva.TextPath#position",
    "longname": "Konva.TextPath#position",
    "name": "position",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#position",
    "inherited": true,
    "overrides": "Konva.Shape#position",
    "description": "get/set node position relative to parent",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "// get position\nvar position = node.position();\n\n// set position\nnode.position({\n  x: 5,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4799,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3490
  },
  {
    "id": "Konva.TextPath#x",
    "longname": "Konva.TextPath#x",
    "name": "x",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#x",
    "inherited": true,
    "overrides": "Konva.Shape#x",
    "description": "get/set x position",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get x\nvar x = node.x();\n\n// set x\nnode.x(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4818,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3491
  },
  {
    "id": "Konva.TextPath#y",
    "longname": "Konva.TextPath#y",
    "name": "y",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#y",
    "inherited": true,
    "overrides": "Konva.Shape#y",
    "description": "get/set y position",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get y\nvar y = node.y();\n\n// set y\nnode.y(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4832,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3492
  },
  {
    "id": "Konva.TextPath#globalCompositeOperation",
    "longname": "Konva.TextPath#globalCompositeOperation",
    "name": "globalCompositeOperation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#globalCompositeOperation",
    "inherited": true,
    "overrides": "Konva.Shape#globalCompositeOperation",
    "description": "get/set globalCompositeOperation of a node. globalCompositeOperation DOESN'T affect hit graph of nodes. So they are still trigger to events as they have default \"source-over\" globalCompositeOperation.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "type"
      }
    ],
    "examples": [
      "// get globalCompositeOperation\nvar globalCompositeOperation = shape.globalCompositeOperation();\n\n// set globalCompositeOperation\nshape.globalCompositeOperation('source-in');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4846,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3493
  },
  {
    "id": "Konva.TextPath#opacity",
    "longname": "Konva.TextPath#opacity",
    "name": "opacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#opacity",
    "inherited": true,
    "overrides": "Konva.Shape#opacity",
    "description": "get/set opacity.  Opacity values range from 0 to 1.\n A node with an opacity of 0 is fully transparent, and a node\n with an opacity of 1 is fully opaque",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "opacity"
      }
    ],
    "examples": [
      "// get opacity\nvar opacity = node.opacity();\n\n// set opacity\nnode.opacity(0.5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4860,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3494
  },
  {
    "id": "Konva.TextPath#name",
    "longname": "Konva.TextPath#name",
    "name": "name",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#name",
    "inherited": true,
    "overrides": "Konva.Shape#name",
    "description": "get/set name.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "// get name\nvar name = node.name();\n\n// set name\nnode.name('foo');\n\n// also node may have multiple names (as css classes)\nnode.name('foo bar');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4876,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3495
  },
  {
    "id": "Konva.TextPath#id",
    "longname": "Konva.TextPath#id",
    "name": "id",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#id",
    "inherited": true,
    "overrides": "Konva.Shape#id",
    "description": "get/set id. Id is global for whole page.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "id"
      }
    ],
    "examples": [
      "// get id\nvar name = node.id();\n\n// set id\nnode.id('foo');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4893,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3496
  },
  {
    "id": "Konva.TextPath#rotation",
    "longname": "Konva.TextPath#rotation",
    "name": "rotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#rotation",
    "inherited": true,
    "overrides": "Konva.Shape#rotation",
    "description": "get/set rotation in degrees",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get rotation in degrees\nvar rotation = node.rotation();\n\n// set rotation in degrees\nnode.rotation(45);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4907,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3497
  },
  {
    "id": "Konva.TextPath#scale",
    "longname": "Konva.TextPath#scale",
    "name": "scale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scale",
    "inherited": true,
    "overrides": "Konva.Shape#scale",
    "description": "get/set scale",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.y"
      }
    ],
    "examples": [
      "// get scale\nvar scale = node.scale();\n\n// set scale\nshape.scale({\n  x: 2,\n  y: 3\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4921,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3498
  },
  {
    "id": "Konva.TextPath#scaleX",
    "longname": "Konva.TextPath#scaleX",
    "name": "scaleX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scaleX",
    "inherited": true,
    "overrides": "Konva.Shape#scaleX",
    "description": "get/set scale x",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get scale x\nvar scaleX = node.scaleX();\n\n// set scale x\nnode.scaleX(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4940,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3499
  },
  {
    "id": "Konva.TextPath#scaleY",
    "longname": "Konva.TextPath#scaleY",
    "name": "scaleY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scaleY",
    "inherited": true,
    "overrides": "Konva.Shape#scaleY",
    "description": "get/set scale y",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get scale y\nvar scaleY = node.scaleY();\n\n// set scale y\nnode.scaleY(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4954,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3500
  },
  {
    "id": "Konva.TextPath#skew",
    "longname": "Konva.TextPath#skew",
    "name": "skew",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skew",
    "inherited": true,
    "overrides": "Konva.Shape#skew",
    "description": "get/set skew",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "skew"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "skew.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "skew.y"
      }
    ],
    "examples": [
      "// get skew\nvar skew = node.skew();\n\n// set skew\nnode.skew({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4968,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3501
  },
  {
    "id": "Konva.TextPath#skewX",
    "longname": "Konva.TextPath#skewX",
    "name": "skewX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skewX",
    "inherited": true,
    "overrides": "Konva.Shape#skewX",
    "description": "get/set skew x",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get skew x\nvar skewX = node.skewX();\n\n// set skew x\nnode.skewX(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4987,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3502
  },
  {
    "id": "Konva.TextPath#skewY",
    "longname": "Konva.TextPath#skewY",
    "name": "skewY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skewY",
    "inherited": true,
    "overrides": "Konva.Shape#skewY",
    "description": "get/set skew y",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get skew y\nvar skewY = node.skewY();\n\n// set skew y\nnode.skewY(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5001,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3503
  },
  {
    "id": "Konva.TextPath#offsetX",
    "longname": "Konva.TextPath#offsetX",
    "name": "offsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#offsetX",
    "inherited": true,
    "overrides": "Konva.Shape#offsetX",
    "description": "get/set offset x",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get offset x\nvar offsetX = node.offsetX();\n\n// set offset x\nnode.offsetX(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5033,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3504
  },
  {
    "id": "Konva.TextPath#offsetY",
    "longname": "Konva.TextPath#offsetY",
    "name": "offsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#offsetY",
    "inherited": true,
    "overrides": "Konva.Shape#offsetY",
    "description": "get/set offset y",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get offset y\nvar offsetY = node.offsetY();\n\n// set offset y\nnode.offsetY(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5047,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3505
  },
  {
    "id": "Konva.TextPath#dragDistance",
    "longname": "Konva.TextPath#dragDistance",
    "name": "dragDistance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#dragDistance",
    "inherited": true,
    "overrides": "Konva.Shape#dragDistance",
    "description": "get/set drag distance",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "distance"
      }
    ],
    "examples": [
      "// get drag distance\nvar dragDistance = node.dragDistance();\n\n// set distance\n// node starts dragging only if pointer moved more then 3 pixels\nnode.dragDistance(3);\n// or set globally\nKonva.dragDistance = 3;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5061,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3506
  },
  {
    "id": "Konva.TextPath#width",
    "longname": "Konva.TextPath#width",
    "name": "width",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#width",
    "inherited": true,
    "overrides": "Konva.Shape#width",
    "description": "get/set width",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "width"
      }
    ],
    "examples": [
      "// get width\nvar width = node.width();\n\n// set width\nnode.width(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5078,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3507
  },
  {
    "id": "Konva.TextPath#height",
    "longname": "Konva.TextPath#height",
    "name": "height",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#height",
    "inherited": true,
    "overrides": "Konva.Shape#height",
    "description": "get/set height",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "height"
      }
    ],
    "examples": [
      "// get height\nvar height = node.height();\n\n// set height\nnode.height(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5092,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3508
  },
  {
    "id": "Konva.TextPath#listening",
    "longname": "Konva.TextPath#listening",
    "name": "listening",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#listening",
    "inherited": true,
    "overrides": "Konva.Shape#listening",
    "description": "get/set listening attr.  If you need to determine if a node is listening or not\n  by taking into account its parents, use the isListening() method\n  nodes with listening set to false will not be detected in hit graph\n  so they will be ignored in container.getIntersection() method",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "Can be true, or false.  The default is true.",
        "name": "listening"
      }
    ],
    "examples": [
      "// get listening attr\nvar listening = node.listening();\n\n// stop listening for events, remove node and all its children from hit graph\nnode.listening(false);\n\n// listen to events according to the parent\nnode.listening(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5106,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3509
  },
  {
    "id": "Konva.TextPath#preventDefault",
    "longname": "Konva.TextPath#preventDefault",
    "name": "preventDefault",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#preventDefault",
    "inherited": true,
    "overrides": "Konva.Shape#preventDefault",
    "description": "get/set preventDefault\nBy default all shapes will prevent default behavior\nof a browser on a pointer move or tap.\nthat will prevent native scrolling when you are trying to drag&drop a node\nbut sometimes you may need to enable default actions\nin that case you can set the property to false",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "preventDefault"
      }
    ],
    "examples": [
      "// get preventDefault\nvar shouldPrevent = shape.preventDefault();\n\n// set preventDefault\nshape.preventDefault(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5125,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3510
  },
  {
    "id": "Konva.TextPath#filters",
    "longname": "Konva.TextPath#filters",
    "name": "filters",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#filters",
    "inherited": true,
    "overrides": "Konva.Shape#filters",
    "description": "get/set filters.  Filters are applied to cached canvases",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "array of filters",
        "name": "filters"
      }
    ],
    "examples": [
      "// get filters\nvar filters = node.filters();\n\n// set a single filter\nnode.cache();\nnode.filters([Konva.Filters.Blur]);\n\n// set multiple filters\nnode.cache();\nnode.filters([\n  Konva.Filters.Blur,\n  Konva.Filters.Sepia,\n  Konva.Filters.Invert\n]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5148,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3511
  },
  {
    "id": "Konva.TextPath#visible",
    "longname": "Konva.TextPath#visible",
    "name": "visible",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#visible",
    "inherited": true,
    "overrides": "Konva.Shape#visible",
    "description": "get/set visible attr.  Can be true, or false.  The default is true.\n  If you need to determine if a node is visible or not\n  by taking into account its parents, use the isVisible() method",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "visible"
      }
    ],
    "examples": [
      "// get visible attr\nvar visible = node.visible();\n\n// make invisible\nnode.visible(false);\n\n// make visible (according to the parent)\nnode.visible(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5171,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3512
  },
  {
    "id": "Konva.TextPath#transformsEnabled",
    "longname": "Konva.TextPath#transformsEnabled",
    "name": "transformsEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#transformsEnabled",
    "inherited": true,
    "overrides": "Konva.Shape#transformsEnabled",
    "description": "get/set transforms that are enabled.  Can be \"all\", \"none\", or \"position\".  The default\n is \"all\"",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// enable position transform only to improve draw performance\nnode.transformsEnabled('position');\n\n// enable all transforms\nnode.transformsEnabled('all');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5191,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3513
  },
  {
    "id": "Konva.TextPath#size",
    "longname": "Konva.TextPath#size",
    "name": "size",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#size",
    "inherited": true,
    "overrides": "Konva.Shape#size",
    "description": "get/set node size",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "size"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size.height"
      }
    ],
    "examples": [
      "// get node size\nvar size = node.size();\nvar width = size.width;\nvar height = size.height;\n\n// set size\nnode.size({\n  width: 100,\n  height: 200\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5205,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3514
  },
  {
    "id": "Konva.TextPath#dragBoundFunc",
    "longname": "Konva.TextPath#dragBoundFunc",
    "name": "dragBoundFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#dragBoundFunc",
    "inherited": true,
    "overrides": "Konva.Shape#dragBoundFunc",
    "description": "get/set drag bound function.  This is used to override the default\n drag and drop position.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "name": "dragBoundFunc"
      }
    ],
    "examples": [
      "// get drag bound function\nvar dragBoundFunc = node.dragBoundFunc();\n\n// create vertical drag and drop\nnode.dragBoundFunc(function(pos){\n  // important pos - is absolute position of the node\n  // you should return absolute position too\n  return {\n    x: this.absolutePosition().x,\n    y: pos.y\n  };\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5226,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3515
  },
  {
    "id": "Konva.TextPath#draggable",
    "longname": "Konva.TextPath#draggable",
    "name": "draggable",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#draggable",
    "inherited": true,
    "overrides": "Konva.Shape#draggable",
    "description": "get/set draggable flag",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "draggable"
      }
    ],
    "examples": [
      "// get draggable flag\nvar draggable = node.draggable();\n\n// enable drag and drop\nnode.draggable(true);\n\n// disable drag and drop\nnode.draggable(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5248,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3516
  },
  {
    "id": "Konva.TextPath#to",
    "longname": "Konva.TextPath#to",
    "name": "to",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#to",
    "inherited": true,
    "overrides": "Konva.Shape#to",
    "description": "Tween node properties. Shorter usage of {@link Konva.Tween} object.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "tween params",
        "name": "params"
      }
    ],
    "examples": [
      "circle.to({\n  x : 50,\n  duration : 0.5,\n  onUpdate: () => console.log('props updated'),\n  onFinish: () => console.log('finished'),\n});"
    ],
    "meta": {
      "lineno": 9588,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3517
  },
  {
    "id": "Konva.TextPath#blurRadius",
    "longname": "Konva.TextPath#blurRadius",
    "name": "blurRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#blurRadius",
    "inherited": true,
    "overrides": "Konva.Shape#blurRadius",
    "description": "get/set blur radius. Use with {@link Konva.Filters.Blur} filter",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "radius"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17517,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3518
  },
  {
    "id": "Konva.TextPath#brightness",
    "longname": "Konva.TextPath#brightness",
    "name": "brightness",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#brightness",
    "inherited": true,
    "overrides": "Konva.Shape#brightness",
    "description": "get/set filter brightness.  The brightness is a number between -1 and 1.&nbsp; Positive values\n brighten the pixels and negative values darken them. Use with {@link Konva.Filters.Brighten} filter.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between -1 and 1",
        "name": "brightness"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17547,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3519
  },
  {
    "id": "Konva.TextPath#contrast",
    "longname": "Konva.TextPath#contrast",
    "name": "contrast",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#contrast",
    "inherited": true,
    "overrides": "Konva.Shape#contrast",
    "description": "get/set filter contrast.  The contrast is a number between -100 and 100.\nUse with {@link Konva.Filters.Contrast} filter.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between -100 and 100",
        "name": "contrast"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17600,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3520
  },
  {
    "id": "Konva.TextPath#embossStrength",
    "longname": "Konva.TextPath#embossStrength",
    "name": "embossStrength",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossStrength",
    "inherited": true,
    "overrides": "Konva.Shape#embossStrength",
    "description": "get/set emboss strength. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1.  Default is 0.5",
        "name": "level"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17725,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3521
  },
  {
    "id": "Konva.TextPath#embossWhiteLevel",
    "longname": "Konva.TextPath#embossWhiteLevel",
    "name": "embossWhiteLevel",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossWhiteLevel",
    "inherited": true,
    "overrides": "Konva.Shape#embossWhiteLevel",
    "description": "get/set emboss white level. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1.  Default is 0.5",
        "name": "embossWhiteLevel"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17733,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3522
  },
  {
    "id": "Konva.TextPath#embossDirection",
    "longname": "Konva.TextPath#embossDirection",
    "name": "embossDirection",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossDirection",
    "inherited": true,
    "overrides": "Konva.Shape#embossDirection",
    "description": "get/set emboss direction. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "can be top-left, top, top-right, right, bottom-right, bottom, bottom-left or left\n  The default is top-left",
        "name": "embossDirection"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17741,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3523
  },
  {
    "id": "Konva.TextPath#embossBlend",
    "longname": "Konva.TextPath#embossBlend",
    "name": "embossBlend",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossBlend",
    "inherited": true,
    "overrides": "Konva.Shape#embossBlend",
    "description": "get/set emboss blend. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "embossBlend"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17750,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3524
  },
  {
    "id": "Konva.TextPath#enhance",
    "longname": "Konva.TextPath#enhance",
    "name": "enhance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#enhance",
    "inherited": true,
    "overrides": "Konva.Shape#enhance",
    "description": "get/set enhance. Use with {@link Konva.Filters.Enhance} filter. -1 to 1 values",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Float"
          ]
        },
        "name": "amount"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Float"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17864,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3525
  },
  {
    "id": "Konva.TextPath#hue",
    "longname": "Konva.TextPath#hue",
    "name": "hue",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hue",
    "inherited": true,
    "overrides": "Konva.Shape#hue",
    "description": "get/set hsv hue in degrees. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between 0 and 359",
        "name": "hue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17896,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3526
  },
  {
    "id": "Konva.TextPath#saturation",
    "longname": "Konva.TextPath#saturation",
    "name": "saturation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#saturation",
    "inherited": true,
    "overrides": "Konva.Shape#saturation",
    "description": "get/set hsv saturation. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the saturation, 1.0 doubles, etc..",
        "name": "saturation"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17904,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3527
  },
  {
    "id": "Konva.TextPath#luminance",
    "longname": "Konva.TextPath#luminance",
    "name": "luminance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#luminance",
    "inherited": true,
    "overrides": "Konva.Shape#luminance",
    "description": "get/set hsl luminance. Use with {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "from -1 to 1",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17912,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3528
  },
  {
    "id": "Konva.TextPath#value",
    "longname": "Konva.TextPath#value",
    "name": "value",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#value",
    "inherited": true,
    "overrides": "Konva.Shape#value",
    "description": "get/set hsv value. Use with {@link Konva.Filters.HSV} filter.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the value, 1.0 doubles, etc..",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18018,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3529
  },
  {
    "id": "Konva.TextPath#kaleidoscopePower",
    "longname": "Konva.TextPath#kaleidoscopePower",
    "name": "kaleidoscopePower",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#kaleidoscopePower",
    "inherited": true,
    "overrides": "Konva.Shape#kaleidoscopePower",
    "description": "get/set kaleidoscope power. Use with {@link Konva.Filters.Kaleidoscope} filter.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "of kaleidoscope",
        "name": "power"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18243,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3530
  },
  {
    "id": "Konva.TextPath#kaleidoscopeAngle",
    "longname": "Konva.TextPath#kaleidoscopeAngle",
    "name": "kaleidoscopeAngle",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#kaleidoscopeAngle",
    "inherited": true,
    "overrides": "Konva.Shape#kaleidoscopeAngle",
    "description": "get/set kaleidoscope angle. Use with {@link Konva.Filters.Kaleidoscope} filter.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "degrees"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18251,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3531
  },
  {
    "id": "Konva.TextPath#noise",
    "longname": "Konva.TextPath#noise",
    "name": "noise",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#noise",
    "inherited": true,
    "overrides": "Konva.Shape#noise",
    "description": "get/set noise amount.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Noise} filter.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "noise"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18437,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3532
  },
  {
    "id": "Konva.TextPath#pixelSize",
    "longname": "Konva.TextPath#pixelSize",
    "name": "pixelSize",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#pixelSize",
    "inherited": true,
    "overrides": "Konva.Shape#pixelSize",
    "description": "get/set pixel size. Use with {@link Konva.Filters.Pixelate} filter.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "pixelSize"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18522,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3533
  },
  {
    "id": "Konva.TextPath#levels",
    "longname": "Konva.TextPath#levels",
    "name": "levels",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#levels",
    "inherited": true,
    "overrides": "Konva.Shape#levels",
    "description": "get/set levels.  Must be a number between 0 and 1.  Use with {@link Konva.Filters.Posterize} filter.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1",
        "name": "level"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18552,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3534
  },
  {
    "id": "Konva.TextPath#red",
    "longname": "Konva.TextPath#red",
    "name": "red",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#red",
    "inherited": true,
    "overrides": "Konva.Shape#red",
    "description": "get/set filter red value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "red"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18596,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3535
  },
  {
    "id": "Konva.TextPath#green",
    "longname": "Konva.TextPath#green",
    "name": "green",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#green",
    "inherited": true,
    "overrides": "Konva.Shape#green",
    "description": "get/set filter green value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "green"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18616,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3536
  },
  {
    "id": "Konva.TextPath#blue",
    "longname": "Konva.TextPath#blue",
    "name": "blue",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#blue",
    "inherited": true,
    "overrides": "Konva.Shape#blue",
    "description": "get/set filter blue value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "blue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18625,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3537
  },
  {
    "id": "Konva.TextPath#alpha",
    "longname": "Konva.TextPath#alpha",
    "name": "alpha",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#alpha",
    "inherited": true,
    "overrides": "Konva.Shape#alpha",
    "description": "get/set filter alpha value. Use with {@link Konva.Filters.RGBA} filter.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Float"
          ]
        },
        "description": "value between 0 and 1",
        "name": "alpha"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Float"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18718,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3538
  },
  {
    "id": "Konva.TextPath#threshold",
    "longname": "Konva.TextPath#threshold",
    "name": "threshold",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#threshold",
    "inherited": true,
    "overrides": "Konva.Shape#threshold",
    "description": "get/set threshold.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Threshold} or {@link Konva.Filters.Mask} filter.",
    "memberof": "Konva.TextPath",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "threshold"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18809,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3539
  },
  {
    "id": "Konva.Wedge#hasShadow",
    "longname": "Konva.Wedge#hasShadow",
    "name": "hasShadow",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasShadow",
    "inherited": true,
    "description": "returns whether or not a shadow will be rendered",
    "memberof": "Konva.Wedge",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 6909,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3540
  },
  {
    "id": "Konva.Wedge#hasFill",
    "longname": "Konva.Wedge#hasFill",
    "name": "hasFill",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasFill",
    "inherited": true,
    "description": "returns whether or not the shape will be filled",
    "memberof": "Konva.Wedge",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7009,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3541
  },
  {
    "id": "Konva.Wedge#hasStroke",
    "longname": "Konva.Wedge#hasStroke",
    "name": "hasStroke",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hasStroke",
    "inherited": true,
    "description": "returns whether or not the shape will be stroked",
    "memberof": "Konva.Wedge",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7030,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3542
  },
  {
    "id": "Konva.Wedge#intersects",
    "longname": "Konva.Wedge#intersects",
    "name": "intersects",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#intersects",
    "inherited": true,
    "description": "determines if point is in the shape, regardless if other shapes are on top of it.  Note: because\n this method clears a temporary canvas and then redraws the shape, it performs very poorly if executed many times\n consecutively.  Please use the {@link Konva.Stage#getIntersection} method if at all possible\n because it performs much better",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "point"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "point.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "point.y"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7066,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3543
  },
  {
    "id": "Konva.Wedge#getSelfRect",
    "longname": "Konva.Wedge#getSelfRect",
    "name": "getSelfRect",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#getSelfRect",
    "inherited": true,
    "description": "return self rectangle (x, y, width, height) of shape.\nThis method are not taken into account transformation and styles.",
    "memberof": "Konva.Wedge",
    "examples": [
      "rect.getSelfRect();  // return {x:0, y:0, width:rect.width(), height:rect.height()}\ncircle.getSelfRect();  // return {x: - circle.width() / 2, y: - circle.height() / 2, width:circle.width(), height:circle.height()}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "rect with `{x, y, width, height}` properties"
      }
    ],
    "meta": {
      "lineno": 7138,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3544
  },
  {
    "id": "Konva.Wedge#drawHitFromCache",
    "longname": "Konva.Wedge#drawHitFromCache",
    "name": "drawHitFromCache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#drawHitFromCache",
    "inherited": true,
    "description": "draw hit graph using the cached scene canvas",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "alpha channel threshold that determines whether or not\n a pixel should be drawn onto the hit graph.  Must be a value between 0 and 255.\n The default is 0",
        "name": "alphaThreshold"
      }
    ],
    "examples": [
      "shape.cache();\nshape.drawHitFromCache();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7294,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3545
  },
  {
    "id": "Konva.Wedge#stroke",
    "longname": "Konva.Wedge#stroke",
    "name": "stroke",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#stroke",
    "inherited": true,
    "description": "get/set stroke color",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get stroke color\nvar stroke = shape.stroke();\n\n// set stroke color with color string\nshape.stroke('green');\n\n// set stroke color with hex\nshape.stroke('#00ff00');\n\n// set stroke color with rgb\nshape.stroke('rgb(0,255,0)');\n\n// set stroke color with rgba and make it 50% opaque\nshape.stroke('rgba(0,255,0,0.5');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7360,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3546
  },
  {
    "id": "Konva.Wedge#strokeWidth",
    "longname": "Konva.Wedge#strokeWidth",
    "name": "strokeWidth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeWidth",
    "inherited": true,
    "description": "get/set stroke width",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "strokeWidth"
      }
    ],
    "examples": [
      "// get stroke width\nvar strokeWidth = shape.strokeWidth();\n\n// set stroke width\nshape.strokeWidth(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7383,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3547
  },
  {
    "id": "Konva.Wedge#fillAfterStrokeEnabled",
    "longname": "Konva.Wedge#fillAfterStrokeEnabled",
    "name": "fillAfterStrokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillAfterStrokeEnabled",
    "inherited": true,
    "description": "get/set fillAfterStrokeEnabled property. By default Konva is drawing filling first, then stroke on top of the fill.\nIn rare situations you may want a different behavior. When you have a stroke first then fill on top of it.\nEspecially useful for Text objects.\nDefault is false.",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "fillAfterStrokeEnabled"
      }
    ],
    "examples": [
      "// get stroke width\nvar fillAfterStrokeEnabled = shape.fillAfterStrokeEnabled();\n\n// set stroke width\nshape.fillAfterStrokeEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7397,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3548
  },
  {
    "id": "Konva.Wedge#hitStrokeWidth",
    "longname": "Konva.Wedge#hitStrokeWidth",
    "name": "hitStrokeWidth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hitStrokeWidth",
    "inherited": true,
    "description": "get/set stroke width for hit detection. Default value is \"auto\", it means it will be equals to strokeWidth",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "hitStrokeWidth"
      }
    ],
    "examples": [
      "// get stroke width\nvar hitStrokeWidth = shape.hitStrokeWidth();\n\n// set hit stroke width\nshape.hitStrokeWidth(20);\n// set hit stroke width always equals to scene stroke width\nshape.hitStrokeWidth('auto');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7414,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3549
  },
  {
    "id": "Konva.Wedge#strokeHitEnabled",
    "longname": "Konva.Wedge#strokeHitEnabled",
    "name": "strokeHitEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeHitEnabled",
    "inherited": true,
    "description": "**deprecated, use hitStrokeWidth instead!** get/set strokeHitEnabled property. Useful for performance optimization.\nYou may set `shape.strokeHitEnabled(false)`. In this case stroke will be no draw on hit canvas, so hit area\nof shape will be decreased (by lineWidth / 2). Remember that non closed line with `strokeHitEnabled = false`\nwill be not drawn on hit canvas, that is mean line will no trigger pointer events (like mouseover)\nDefault value is true.",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "strokeHitEnabled"
      }
    ],
    "examples": [
      "// get strokeHitEnabled\nvar strokeHitEnabled = shape.strokeHitEnabled();\n\n// set strokeHitEnabled\nshape.strokeHitEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7430,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3550
  },
  {
    "id": "Konva.Wedge#perfectDrawEnabled",
    "longname": "Konva.Wedge#perfectDrawEnabled",
    "name": "perfectDrawEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#perfectDrawEnabled",
    "inherited": true,
    "description": "get/set perfectDrawEnabled. If a shape has fill, stroke and opacity you may set `perfectDrawEnabled` to false to improve performance.\nSee http://konvajs.org/docs/performance/Disable_Perfect_Draw.html for more information.\nDefault value is true",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "perfectDrawEnabled"
      }
    ],
    "examples": [
      "// get perfectDrawEnabled\nvar perfectDrawEnabled = shape.perfectDrawEnabled();\n\n// set perfectDrawEnabled\nshape.perfectDrawEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7448,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3551
  },
  {
    "id": "Konva.Wedge#shadowForStrokeEnabled",
    "longname": "Konva.Wedge#shadowForStrokeEnabled",
    "name": "shadowForStrokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowForStrokeEnabled",
    "inherited": true,
    "description": "get/set shadowForStrokeEnabled. Useful for performance optimization.\nYou may set `shape.shadowForStrokeEnabled(false)`. In this case stroke will no effect shadow.\nRemember if you set `shadowForStrokeEnabled = false` for non closed line - that line will have no shadow!.\nDefault value is true",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "shadowForStrokeEnabled"
      }
    ],
    "examples": [
      "// get shadowForStrokeEnabled\nvar shadowForStrokeEnabled = shape.shadowForStrokeEnabled();\n\n// set shadowForStrokeEnabled\nshape.shadowForStrokeEnabled();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7464,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3552
  },
  {
    "id": "Konva.Wedge#lineJoin",
    "longname": "Konva.Wedge#lineJoin",
    "name": "lineJoin",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#lineJoin",
    "inherited": true,
    "description": "get/set line join.  Can be miter, round, or bevel.  The\n default is miter",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "lineJoin"
      }
    ],
    "examples": [
      "// get line join\nvar lineJoin = shape.lineJoin();\n\n// set line join\nshape.lineJoin('round');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7481,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3553
  },
  {
    "id": "Konva.Wedge#lineCap",
    "longname": "Konva.Wedge#lineCap",
    "name": "lineCap",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#lineCap",
    "inherited": true,
    "description": "get/set line cap.  Can be butt, round, or square",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "lineCap"
      }
    ],
    "examples": [
      "// get line cap\nvar lineCap = shape.lineCap();\n\n// set line cap\nshape.lineCap('round');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7496,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3554
  },
  {
    "id": "Konva.Wedge#sceneFunc",
    "longname": "Konva.Wedge#sceneFunc",
    "name": "sceneFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#sceneFunc",
    "inherited": true,
    "description": "get/set scene draw function. That function is used to draw the shape on a canvas.\nAlso that function will be used to draw hit area of the shape, in case if hitFunc is not defined.",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "drawing function",
        "name": "drawFunc"
      }
    ],
    "examples": [
      "// get scene draw function\nvar sceneFunc = shape.sceneFunc();\n\n// set scene draw function\nshape.sceneFunc(function(context, shape) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  // like stroke and fill\n  context.fillStrokeShape(shape);\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7510,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3555
  },
  {
    "id": "Konva.Wedge#hitFunc",
    "longname": "Konva.Wedge#hitFunc",
    "name": "hitFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#hitFunc",
    "inherited": true,
    "description": "get/set hit draw function. That function is used to draw custom hit area of a shape.",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "drawing function",
        "name": "drawFunc"
      }
    ],
    "examples": [
      "// get hit draw function\nvar hitFunc = shape.hitFunc();\n\n// set hit draw function\nshape.hitFunc(function(context) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  context.fillStrokeShape(shape);\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7532,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3556
  },
  {
    "id": "Konva.Wedge#dash",
    "longname": "Konva.Wedge#dash",
    "name": "dash",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#dash",
    "inherited": true,
    "overrides": "Konva.Shape#dash",
    "description": "get/set dash array for stroke.",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "dash"
      }
    ],
    "examples": [
      "// apply dashed stroke that is 10px long and 5 pixels apart\n line.dash([10, 5]);\n // apply dashed stroke that is made up of alternating dashed\n // lines that are 10px long and 20px apart, and dots that have\n // a radius of 5px and are 20px apart\n line.dash([10, 20, 0.001, 20]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7552,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3557
  },
  {
    "id": "Konva.Wedge#shadowColor",
    "longname": "Konva.Wedge#shadowColor",
    "name": "shadowColor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowColor",
    "inherited": true,
    "description": "get/set shadow color",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get shadow color\nvar shadow = shape.shadowColor();\n\n// set shadow color with color string\nshape.shadowColor('green');\n\n// set shadow color with hex\nshape.shadowColor('#00ff00');\n\n// set shadow color with rgb\nshape.shadowColor('rgb(0,255,0)');\n\n// set shadow color with rgba and make it 50% opaque\nshape.shadowColor('rgba(0,255,0,0.5');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7579,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3558
  },
  {
    "id": "Konva.Wedge#shadowBlur",
    "longname": "Konva.Wedge#shadowBlur",
    "name": "shadowBlur",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowBlur",
    "inherited": true,
    "description": "get/set shadow blur",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "blur"
      }
    ],
    "examples": [
      "// get shadow blur\nvar shadowBlur = shape.shadowBlur();\n\n// set shadow blur\nshape.shadowBlur(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7602,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3559
  },
  {
    "id": "Konva.Wedge#shadowOpacity",
    "longname": "Konva.Wedge#shadowOpacity",
    "name": "shadowOpacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOpacity",
    "inherited": true,
    "description": "get/set shadow opacity.  must be a value between 0 and 1",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "opacity"
      }
    ],
    "examples": [
      "// get shadow opacity\nvar shadowOpacity = shape.shadowOpacity();\n\n// set shadow opacity\nshape.shadowOpacity(0.5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7616,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3560
  },
  {
    "id": "Konva.Wedge#shadowOffset",
    "longname": "Konva.Wedge#shadowOffset",
    "name": "shadowOffset",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffset",
    "inherited": true,
    "description": "get/set shadow offset",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.y"
      }
    ],
    "examples": [
      "// get shadow offset\nvar shadowOffset = shape.shadowOffset();\n\n// set shadow offset\nshape.shadowOffset({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7630,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3561
  },
  {
    "id": "Konva.Wedge#shadowOffsetX",
    "longname": "Konva.Wedge#shadowOffsetX",
    "name": "shadowOffsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffsetX",
    "inherited": true,
    "description": "get/set shadow offset x",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get shadow offset x\nvar shadowOffsetX = shape.shadowOffsetX();\n\n// set shadow offset x\nshape.shadowOffsetX(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7649,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3562
  },
  {
    "id": "Konva.Wedge#shadowOffsetY",
    "longname": "Konva.Wedge#shadowOffsetY",
    "name": "shadowOffsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowOffsetY",
    "inherited": true,
    "description": "get/set shadow offset y",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get shadow offset y\nvar shadowOffsetY = shape.shadowOffsetY();\n\n// set shadow offset y\nshape.shadowOffsetY(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7663,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3563
  },
  {
    "id": "Konva.Wedge#fillPatternImage",
    "longname": "Konva.Wedge#fillPatternImage",
    "name": "fillPatternImage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternImage",
    "inherited": true,
    "description": "get/set fill pattern image",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Image"
          ]
        },
        "description": "object",
        "name": "image"
      }
    ],
    "examples": [
      "// get fill pattern image\nvar fillPatternImage = shape.fillPatternImage();\n\n// set fill pattern image\nvar imageObj = new Image();\nimageObj.onload = function() {\n  shape.fillPatternImage(imageObj);\n};\nimageObj.src = 'path/to/image/jpg';"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Image"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7677,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3564
  },
  {
    "id": "Konva.Wedge#fill",
    "longname": "Konva.Wedge#fill",
    "name": "fill",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fill",
    "inherited": true,
    "description": "get/set fill color",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// get fill color\nvar fill = shape.fill();\n\n// set fill color with color string\nshape.fill('green');\n\n// set fill color with hex\nshape.fill('#00ff00');\n\n// set fill color with rgb\nshape.fill('rgb(0,255,0)');\n\n// set fill color with rgba and make it 50% opaque\nshape.fill('rgba(0,255,0,0.5');\n\n// shape without fill\nshape.fill(null);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7695,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3565
  },
  {
    "id": "Konva.Wedge#fillPatternX",
    "longname": "Konva.Wedge#fillPatternX",
    "name": "fillPatternX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternX",
    "inherited": true,
    "description": "get/set fill pattern x",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern x\nvar fillPatternX = shape.fillPatternX();\n// set fill pattern x\nshape.fillPatternX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7721,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3566
  },
  {
    "id": "Konva.Wedge#fillPatternY",
    "longname": "Konva.Wedge#fillPatternY",
    "name": "fillPatternY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternY",
    "inherited": true,
    "description": "get/set fill pattern y",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern y\nvar fillPatternY = shape.fillPatternY();\n// set fill pattern y\nshape.fillPatternY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7734,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3567
  },
  {
    "id": "Konva.Wedge#fillLinearGradientColorStops",
    "longname": "Konva.Wedge#fillLinearGradientColorStops",
    "name": "fillLinearGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientColorStops",
    "inherited": true,
    "description": "get/set fill linear gradient color stops",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get fill linear gradient color stops\nvar colorStops = shape.fillLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillLinearGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "colorStops"
      }
    ],
    "meta": {
      "lineno": 7747,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3568
  },
  {
    "id": "Konva.Wedge#strokeLinearGradientColorStops",
    "longname": "Konva.Wedge#strokeLinearGradientColorStops",
    "name": "strokeLinearGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientColorStops",
    "inherited": true,
    "description": "get/set stroke linear gradient color stops",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get stroke linear gradient color stops\nvar colorStops = shape.strokeLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.strokeLinearGradientColorStops([0, 'red', 0.5, 'blue', 1, 'green']);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "colorStops"
      }
    ],
    "meta": {
      "lineno": 7762,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3569
  },
  {
    "id": "Konva.Wedge#fillRadialGradientStartRadius",
    "longname": "Konva.Wedge#fillRadialGradientStartRadius",
    "name": "fillRadialGradientStartRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartRadius",
    "inherited": true,
    "description": "get/set fill radial gradient start radius",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "radius"
      }
    ],
    "examples": [
      "// get radial gradient start radius\nvar startRadius = shape.fillRadialGradientStartRadius();\n\n// set radial gradient start radius\nshape.fillRadialGradientStartRadius(0);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7777,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3570
  },
  {
    "id": "Konva.Wedge#fillRadialGradientEndRadius",
    "longname": "Konva.Wedge#fillRadialGradientEndRadius",
    "name": "fillRadialGradientEndRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndRadius",
    "inherited": true,
    "description": "get/set fill radial gradient end radius",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "radius"
      }
    ],
    "examples": [
      "// get radial gradient end radius\nvar endRadius = shape.fillRadialGradientEndRadius();\n\n// set radial gradient end radius\nshape.fillRadialGradientEndRadius(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7791,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3571
  },
  {
    "id": "Konva.Wedge#fillRadialGradientColorStops",
    "longname": "Konva.Wedge#fillRadialGradientColorStops",
    "name": "fillRadialGradientColorStops",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientColorStops",
    "inherited": true,
    "description": "get/set fill radial gradient color stops",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "colorStops"
      }
    ],
    "examples": [
      "// get fill radial gradient color stops\nvar colorStops = shape.fillRadialGradientColorStops();\n\n// create a radial gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillRadialGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7805,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3572
  },
  {
    "id": "Konva.Wedge#fillPatternRepeat",
    "longname": "Konva.Wedge#fillPatternRepeat",
    "name": "fillPatternRepeat",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternRepeat",
    "inherited": true,
    "description": "get/set fill pattern repeat.  Can be 'repeat', 'repeat-x', 'repeat-y', or 'no-repeat'.  The default is 'repeat'",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "repeat"
      }
    ],
    "examples": [
      "// get fill pattern repeat\nvar repeat = shape.fillPatternRepeat();\n\n// repeat pattern in x direction only\nshape.fillPatternRepeat('repeat-x');\n\n// do not repeat the pattern\nshape.fillPatternRepeat('no-repeat');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7820,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3573
  },
  {
    "id": "Konva.Wedge#fillEnabled",
    "longname": "Konva.Wedge#fillEnabled",
    "name": "fillEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillEnabled",
    "inherited": true,
    "description": "get/set fill enabled flag",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get fill enabled flag\nvar fillEnabled = shape.fillEnabled();\n\n// disable fill\nshape.fillEnabled(false);\n\n// enable fill\nshape.fillEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7837,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3574
  },
  {
    "id": "Konva.Wedge#strokeEnabled",
    "longname": "Konva.Wedge#strokeEnabled",
    "name": "strokeEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeEnabled",
    "inherited": true,
    "description": "get/set stroke enabled flag",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get stroke enabled flag\nvar strokeEnabled = shape.strokeEnabled();\n\n// disable stroke\nshape.strokeEnabled(false);\n\n// enable stroke\nshape.strokeEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7854,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3575
  },
  {
    "id": "Konva.Wedge#shadowEnabled",
    "longname": "Konva.Wedge#shadowEnabled",
    "name": "shadowEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#shadowEnabled",
    "inherited": true,
    "description": "get/set shadow enabled flag",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get shadow enabled flag\nvar shadowEnabled = shape.shadowEnabled();\n\n// disable shadow\nshape.shadowEnabled(false);\n\n// enable shadow\nshape.shadowEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7871,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3576
  },
  {
    "id": "Konva.Wedge#dashEnabled",
    "longname": "Konva.Wedge#dashEnabled",
    "name": "dashEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#dashEnabled",
    "inherited": true,
    "description": "get/set dash enabled flag",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get dash enabled flag\nvar dashEnabled = shape.dashEnabled();\n\n// disable dash\nshape.dashEnabled(false);\n\n// enable dash\nshape.dashEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7888,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3577
  },
  {
    "id": "Konva.Wedge#strokeScaleEnabled",
    "longname": "Konva.Wedge#strokeScaleEnabled",
    "name": "strokeScaleEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeScaleEnabled",
    "inherited": true,
    "description": "get/set strokeScale enabled flag",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// get stroke scale enabled flag\nvar strokeScaleEnabled = shape.strokeScaleEnabled();\n\n// disable stroke scale\nshape.strokeScaleEnabled(false);\n\n// enable stroke scale\nshape.strokeScaleEnabled(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7905,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3578
  },
  {
    "id": "Konva.Wedge#fillPriority",
    "longname": "Konva.Wedge#fillPriority",
    "name": "fillPriority",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPriority",
    "inherited": true,
    "description": "get/set fill priority.  can be color, pattern, linear-gradient, or radial-gradient.  The default is color.\n  This is handy if you want to toggle between different fill types.",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "priority"
      }
    ],
    "examples": [
      "// get fill priority\nvar fillPriority = shape.fillPriority();\n\n// set fill priority\nshape.fillPriority('linear-gradient');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7922,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3579
  },
  {
    "id": "Konva.Wedge#fillPatternOffset",
    "longname": "Konva.Wedge#fillPatternOffset",
    "name": "fillPatternOffset",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffset",
    "inherited": true,
    "description": "get/set fill pattern offset",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "offset"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "offset.y"
      }
    ],
    "examples": [
      "// get fill pattern offset\nvar patternOffset = shape.fillPatternOffset();\n\n// set fill pattern offset\nshape.fillPatternOffset({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7937,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3580
  },
  {
    "id": "Konva.Wedge#fillPatternOffsetX",
    "longname": "Konva.Wedge#fillPatternOffsetX",
    "name": "fillPatternOffsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffsetX",
    "inherited": true,
    "description": "get/set fill pattern offset x",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern offset x\nvar patternOffsetX = shape.fillPatternOffsetX();\n\n// set fill pattern offset x\nshape.fillPatternOffsetX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7956,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3581
  },
  {
    "id": "Konva.Wedge#fillPatternOffsetY",
    "longname": "Konva.Wedge#fillPatternOffsetY",
    "name": "fillPatternOffsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternOffsetY",
    "inherited": true,
    "description": "get/set fill pattern offset y",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern offset y\nvar patternOffsetY = shape.fillPatternOffsetY();\n\n// set fill pattern offset y\nshape.fillPatternOffsetY(10);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7970,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3582
  },
  {
    "id": "Konva.Wedge#fillPatternScale",
    "longname": "Konva.Wedge#fillPatternScale",
    "name": "fillPatternScale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScale",
    "inherited": true,
    "description": "get/set fill pattern scale",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.y"
      }
    ],
    "examples": [
      "// get fill pattern scale\nvar patternScale = shape.fillPatternScale();\n\n// set fill pattern scale\nshape.fillPatternScale({\n  x: 2,\n  y: 2\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 7984,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3583
  },
  {
    "id": "Konva.Wedge#fillPatternScaleX",
    "longname": "Konva.Wedge#fillPatternScaleX",
    "name": "fillPatternScaleX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScaleX",
    "inherited": true,
    "description": "get/set fill pattern scale x",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill pattern scale x\nvar patternScaleX = shape.fillPatternScaleX();\n\n// set fill pattern scale x\nshape.fillPatternScaleX(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8003,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3584
  },
  {
    "id": "Konva.Wedge#fillPatternScaleY",
    "longname": "Konva.Wedge#fillPatternScaleY",
    "name": "fillPatternScaleY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternScaleY",
    "inherited": true,
    "description": "get/set fill pattern scale y",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill pattern scale y\nvar patternScaleY = shape.fillPatternScaleY();\n\n// set fill pattern scale y\nshape.fillPatternScaleY(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8017,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3585
  },
  {
    "id": "Konva.Wedge#fillLinearGradientStartPoint",
    "longname": "Konva.Wedge#fillLinearGradientStartPoint",
    "name": "fillLinearGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPoint",
    "inherited": true,
    "description": "get/set fill linear gradient start point",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get fill linear gradient start point\nvar startPoint = shape.fillLinearGradientStartPoint();\n\n// set fill linear gradient start point\nshape.fillLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8034,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3586
  },
  {
    "id": "Konva.Wedge#strokeLinearGradientStartPoint",
    "longname": "Konva.Wedge#strokeLinearGradientStartPoint",
    "name": "strokeLinearGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientStartPoint",
    "inherited": true,
    "description": "get/set stroke linear gradient start point",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point\nvar startPoint = shape.strokeLinearGradientStartPoint();\n\n// set stroke linear gradient start point\nshape.strokeLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8056,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3587
  },
  {
    "id": "Konva.Wedge#fillLinearGradientStartPointX",
    "longname": "Konva.Wedge#fillLinearGradientStartPointX",
    "name": "fillLinearGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPointX",
    "inherited": true,
    "description": "get/set fill linear gradient start point x",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill linear gradient start point x\nvar startPointX = shape.fillLinearGradientStartPointX();\n\n// set fill linear gradient start point x\nshape.fillLinearGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8075,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3588
  },
  {
    "id": "Konva.Wedge#linearLinearGradientStartPointX",
    "longname": "Konva.Wedge#linearLinearGradientStartPointX",
    "name": "linearLinearGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#linearLinearGradientStartPointX",
    "inherited": true,
    "description": "get/set stroke linear gradient start point x",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point x\nvar startPointX = shape.strokeLinearGradientStartPointX();\n\n// set stroke linear gradient start point x\nshape.strokeLinearGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8089,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3589
  },
  {
    "id": "Konva.Wedge#fillLinearGradientStartPointY",
    "longname": "Konva.Wedge#fillLinearGradientStartPointY",
    "name": "fillLinearGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientStartPointY",
    "inherited": true,
    "description": "get/set fill linear gradient start point y",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill linear gradient start point y\nvar startPointY = shape.fillLinearGradientStartPointY();\n\n// set fill linear gradient start point y\nshape.fillLinearGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8103,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3590
  },
  {
    "id": "Konva.Wedge#strokeLinearGradientStartPointY",
    "longname": "Konva.Wedge#strokeLinearGradientStartPointY",
    "name": "strokeLinearGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientStartPointY",
    "inherited": true,
    "description": "get/set stroke linear gradient start point y",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get stroke linear gradient start point y\nvar startPointY = shape.strokeLinearGradientStartPointY();\n\n// set stroke linear gradient start point y\nshape.strokeLinearGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8117,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3591
  },
  {
    "id": "Konva.Wedge#fillLinearGradientEndPoint",
    "longname": "Konva.Wedge#fillLinearGradientEndPoint",
    "name": "fillLinearGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPoint",
    "inherited": true,
    "description": "get/set fill linear gradient end point",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get fill linear gradient end point\nvar endPoint = shape.fillLinearGradientEndPoint();\n\n// set fill linear gradient end point\nshape.fillLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8134,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3592
  },
  {
    "id": "Konva.Wedge#strokeLinearGradientEndPoint",
    "longname": "Konva.Wedge#strokeLinearGradientEndPoint",
    "name": "strokeLinearGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPoint",
    "inherited": true,
    "description": "get/set stroke linear gradient end point",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point\nvar endPoint = shape.strokeLinearGradientEndPoint();\n\n// set stroke linear gradient end point\nshape.strokeLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8156,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3593
  },
  {
    "id": "Konva.Wedge#fillLinearGradientEndPointX",
    "longname": "Konva.Wedge#fillLinearGradientEndPointX",
    "name": "fillLinearGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPointX",
    "inherited": true,
    "description": "get/set fill linear gradient end point x",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill linear gradient end point x\nvar endPointX = shape.fillLinearGradientEndPointX();\n\n// set fill linear gradient end point x\nshape.fillLinearGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8175,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3594
  },
  {
    "id": "Konva.Wedge#strokeLinearGradientEndPointX",
    "longname": "Konva.Wedge#strokeLinearGradientEndPointX",
    "name": "strokeLinearGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPointX",
    "inherited": true,
    "description": "get/set fill linear gradient end point x",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point x\nvar endPointX = shape.strokeLinearGradientEndPointX();\n\n// set stroke linear gradient end point x\nshape.strokeLinearGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8189,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3595
  },
  {
    "id": "Konva.Wedge#fillLinearGradientEndPointY",
    "longname": "Konva.Wedge#fillLinearGradientEndPointY",
    "name": "fillLinearGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillLinearGradientEndPointY",
    "inherited": true,
    "description": "get/set fill linear gradient end point y",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill linear gradient end point y\nvar endPointY = shape.fillLinearGradientEndPointY();\n\n// set fill linear gradient end point y\nshape.fillLinearGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8203,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3596
  },
  {
    "id": "Konva.Wedge#strokeLinearGradientEndPointY",
    "longname": "Konva.Wedge#strokeLinearGradientEndPointY",
    "name": "strokeLinearGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#strokeLinearGradientEndPointY",
    "inherited": true,
    "description": "get/set stroke linear gradient end point y",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get stroke linear gradient end point y\nvar endPointY = shape.strokeLinearGradientEndPointY();\n\n// set stroke linear gradient end point y\nshape.strokeLinearGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8217,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3597
  },
  {
    "id": "Konva.Wedge#fillRadialGradientStartPoint",
    "longname": "Konva.Wedge#fillRadialGradientStartPoint",
    "name": "fillRadialGradientStartPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPoint",
    "inherited": true,
    "description": "get/set fill radial gradient start point",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "startPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "startPoint.y"
      }
    ],
    "examples": [
      "// get fill radial gradient start point\nvar startPoint = shape.fillRadialGradientStartPoint();\n\n// set fill radial gradient start point\nshape.fillRadialGradientStartPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8234,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3598
  },
  {
    "id": "Konva.Wedge#fillRadialGradientStartPointX",
    "longname": "Konva.Wedge#fillRadialGradientStartPointX",
    "name": "fillRadialGradientStartPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPointX",
    "inherited": true,
    "description": "get/set fill radial gradient start point x",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill radial gradient start point x\nvar startPointX = shape.fillRadialGradientStartPointX();\n\n// set fill radial gradient start point x\nshape.fillRadialGradientStartPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8253,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3599
  },
  {
    "id": "Konva.Wedge#fillRadialGradientStartPointY",
    "longname": "Konva.Wedge#fillRadialGradientStartPointY",
    "name": "fillRadialGradientStartPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientStartPointY",
    "inherited": true,
    "description": "get/set fill radial gradient start point y",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill radial gradient start point y\nvar startPointY = shape.fillRadialGradientStartPointY();\n\n// set fill radial gradient start point y\nshape.fillRadialGradientStartPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8267,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3600
  },
  {
    "id": "Konva.Wedge#fillRadialGradientEndPoint",
    "longname": "Konva.Wedge#fillRadialGradientEndPoint",
    "name": "fillRadialGradientEndPoint",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPoint",
    "inherited": true,
    "description": "get/set fill radial gradient end point",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "endPoint"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "endPoint.y"
      }
    ],
    "examples": [
      "// get fill radial gradient end point\nvar endPoint = shape.fillRadialGradientEndPoint();\n\n// set fill radial gradient end point\nshape.fillRadialGradientEndPoint({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8284,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3601
  },
  {
    "id": "Konva.Wedge#fillRadialGradientEndPointX",
    "longname": "Konva.Wedge#fillRadialGradientEndPointX",
    "name": "fillRadialGradientEndPointX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPointX",
    "inherited": true,
    "description": "get/set fill radial gradient end point x",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get fill radial gradient end point x\nvar endPointX = shape.fillRadialGradientEndPointX();\n\n// set fill radial gradient end point x\nshape.fillRadialGradientEndPointX(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8303,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3602
  },
  {
    "id": "Konva.Wedge#fillRadialGradientEndPointY",
    "longname": "Konva.Wedge#fillRadialGradientEndPointY",
    "name": "fillRadialGradientEndPointY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRadialGradientEndPointY",
    "inherited": true,
    "description": "get/set fill radial gradient end point y",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get fill radial gradient end point y\nvar endPointY = shape.fillRadialGradientEndPointY();\n\n// set fill radial gradient end point y\nshape.fillRadialGradientEndPointY(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8317,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3603
  },
  {
    "id": "Konva.Wedge#fillPatternRotation",
    "longname": "Konva.Wedge#fillPatternRotation",
    "name": "fillPatternRotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillPatternRotation",
    "inherited": true,
    "description": "get/set fill pattern rotation in degrees",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get fill pattern rotation\nvar patternRotation = shape.fillPatternRotation();\n\n// set fill pattern rotation\nshape.fillPatternRotation(20);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8331,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3604
  },
  {
    "id": "Konva.Wedge#fillRule",
    "longname": "Konva.Wedge#fillRule",
    "name": "fillRule",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Shape#fillRule",
    "inherited": true,
    "description": "get/set fill rule",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "CanvasFillRule"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get fill rule\nvar fillRule = shape.fillRule();\n\n// set fill rule\nshape.fillRule('evenodd');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Shape"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 8345,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3605
  },
  {
    "id": "Konva.Wedge#clearCache",
    "longname": "Konva.Wedge#clearCache",
    "name": "clearCache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#clearCache",
    "inherited": true,
    "description": "clear cached canvas",
    "memberof": "Konva.Wedge",
    "examples": [
      "node.clearCache();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2632,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3606
  },
  {
    "id": "Konva.Wedge#cache",
    "longname": "Konva.Wedge#cache",
    "name": "cache",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#cache",
    "inherited": true,
    "description": "cache node to improve drawing performance, apply filters, or create more accurate\n hit regions. For all basic shapes size of cache canvas will be automatically detected.\n If you need to cache your custom `Konva.Shape` instance you have to pass shape's bounding box\n properties. Look at [https://konvajs.org/docs/performance/Shape_Caching.html](https://konvajs.org/docs/performance/Shape_Caching.html) for more information.",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "increase canvas size by `offset` pixel in all directions.",
        "name": "config.offset"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "when set to true, a red border will be drawn around the cached\n region for debugging purposes",
        "name": "config.drawBorder"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "change quality (or pixel ratio) of cached image. pixelRatio = 2 will produce 2x sized cache.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "control imageSmoothingEnabled property of created canvas for cache",
        "name": "config.imageSmoothingEnabled"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "change quality (or pixel ratio) of cached hit canvas.",
        "name": "config.hitCanvasPixelRatio"
      }
    ],
    "examples": [
      "// cache a shape with the x,y position of the bounding box at the center and\n// the width and height of the bounding box equal to the width and height of\n// the shape obtained from shape.width() and shape.height()\nimage.cache();\n\n// cache a node and define the bounding box position and size\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200\n});\n\n// cache a node and draw a red border around the bounding box\n// for debugging purposes\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200,\n  offset : 10,\n  drawBorder: true\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2650,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3607
  },
  {
    "id": "Konva.Wedge#isCached",
    "longname": "Konva.Wedge#isCached",
    "name": "isCached",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isCached",
    "inherited": true,
    "description": "determine if node is currently cached",
    "memberof": "Konva.Wedge",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2788,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3608
  },
  {
    "id": "Konva.Wedge#getClientRect",
    "longname": "Konva.Wedge#getClientRect",
    "name": "getClientRect",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getClientRect",
    "inherited": true,
    "description": "Return client rectangle `{x, y, width, height}` of node. This rectangle also include all styling (strokes, shadows, etc).\nThe purpose of the method is similar to getBoundingClientRect API of the DOM.",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply transform to node for calculating rect?",
        "name": "config.skipTransform"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply shadow to the node for calculating bound box?",
        "name": "config.skipShadow"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "should we apply stroke to the node for calculating bound box?",
        "name": "config.skipStroke"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "calculate client rect relative to one of the parents",
        "name": "config.relativeTo"
      }
    ],
    "examples": [
      "var rect = new Konva.Rect({\n     width : 100,\n     height : 100,\n     x : 50,\n     y : 50,\n     strokeWidth : 4,\n     stroke : 'black',\n     offsetX : 50,\n     scaleY : 2\n});\n\n// get client rect without think off transformations (position, rotation, scale, offset, etc)\nrect.getClientRect({ skipTransform: true});\n// returns {\n//     x : -2,   // two pixels for stroke / 2\n//     y : -2,\n//     width : 104, // increased by 4 for stroke\n//     height : 104\n//}\n\n// get client rect with transformation applied\nrect.getClientRect();\n// returns Object {x: -2, y: 46, width: 104, height: 208}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "rect with `{x, y, width, height}` properties"
      }
    ],
    "meta": {
      "lineno": 2797,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3609
  },
  {
    "id": "Konva.Wedge#on",
    "longname": "Konva.Wedge#on",
    "name": "on",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#on",
    "inherited": true,
    "description": "bind events to the node. KonvaJS supports mouseover, mousemove,\n mouseout, mouseenter, mouseleave, mousedown, mouseup, wheel, contextmenu, click, dblclick, touchstart, touchmove,\n touchend, tap, dbltap, dragstart, dragmove, and dragend events.\n Pass in a string of events delimited by a space to bind multiple events at once\n such as 'mousedown mouseup mousemove'. Include a namespace to bind an\n event by name such as 'click.foobar'.",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'click', 'mousedown touchstart', 'mousedown.foo touchstart.foo'",
        "name": "evtStr"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The handler function. The first argument of that function is event object. Event object has `target` as main target of the event, `currentTarget` as current node listener and `evt` as native browser event.",
        "name": "handler"
      }
    ],
    "examples": [
      "// add click listener\nnode.on('click', function() {\n  console.log('you clicked me!');\n});\n\n// get the target node\nnode.on('click', function(evt) {\n  console.log(evt.target);\n});\n\n// stop event propagation\nnode.on('click', function(evt) {\n  evt.cancelBubble = true;\n});\n\n// bind multiple listeners\nnode.on('click touchstart', function() {\n  console.log('you clicked/touched me!');\n});\n\n// namespace listener\nnode.on('click.foo', function() {\n  console.log('you clicked/touched me!');\n});\n\n// get the event type\nnode.on('click tap', function(evt) {\n  var eventType = evt.type;\n});\n\n// get native event object\nnode.on('click tap', function(evt) {\n  var nativeEvent = evt.evt;\n});\n\n// for change events, get the old and new val\nnode.on('xChange', function(evt) {\n  var oldVal = evt.oldVal;\n  var newVal = evt.newVal;\n});\n\n// get event targets\n// with event delegations\nlayer.on('click', 'Group', function(evt) {\n  var shape = evt.target;\n  var group = evt.currentTarget;\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 2919,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3610
  },
  {
    "id": "Konva.Wedge#off",
    "longname": "Konva.Wedge#off",
    "name": "off",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#off",
    "inherited": true,
    "description": "remove event bindings from the node. Pass in a string of\n event types delimmited by a space to remove multiple event\n bindings at once such as 'mousedown mouseup mousemove'.\n include a namespace to remove an event binding by name\n such as 'click.foobar'. If you only give a name like '.foobar',\n all events in that namespace will be removed.",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "e.g. 'click', 'mousedown touchstart', '.foobar'",
        "name": "evtStr"
      }
    ],
    "examples": [
      "// remove listener\nnode.off('click');\n\n// remove multiple listeners\nnode.off('click touchstart');\n\n// remove listener by name\nnode.off('click.foo');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3007,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3611
  },
  {
    "id": "Konva.Wedge#remove",
    "longname": "Konva.Wedge#remove",
    "name": "remove",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#remove",
    "inherited": true,
    "description": "remove a node from parent, but don't destroy. You can reuse the node later.",
    "memberof": "Konva.Wedge",
    "examples": [
      "node.remove();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3088,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3612
  },
  {
    "id": "Konva.Wedge#destroy",
    "longname": "Konva.Wedge#destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#destroy",
    "inherited": true,
    "description": "remove and destroy a node. Kill it and delete forever! You should not reuse node after destroy().\nIf the node is a container (Group, Stage or Layer) it will destroy all children too.",
    "memberof": "Konva.Wedge",
    "examples": [
      "node.destroy();"
    ],
    "meta": {
      "lineno": 3125,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3613
  },
  {
    "id": "Konva.Wedge#getAttr",
    "longname": "Konva.Wedge#getAttr",
    "name": "getAttr",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAttr",
    "inherited": true,
    "description": "get attr",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "attr"
      }
    ],
    "examples": [
      "var x = node.getAttr('x');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer",
            "String",
            "Object",
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3138,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3614
  },
  {
    "id": "Konva.Wedge#getAncestors",
    "longname": "Konva.Wedge#getAncestors",
    "name": "getAncestors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAncestors",
    "inherited": true,
    "description": "get ancestors",
    "memberof": "Konva.Wedge",
    "examples": [
      "shape.getAncestors().forEach(function(node) {\n  console.log(node.getId());\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3155,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3615
  },
  {
    "id": "Konva.Wedge#getAttrs",
    "longname": "Konva.Wedge#getAttrs",
    "name": "getAttrs",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAttrs",
    "inherited": true,
    "description": "get attrs object literal",
    "memberof": "Konva.Wedge",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3173,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3616
  },
  {
    "id": "Konva.Wedge#setAttrs",
    "longname": "Konva.Wedge#setAttrs",
    "name": "setAttrs",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#setAttrs",
    "inherited": true,
    "description": "set multiple attrs at once using an object literal",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "object containing key value pairs",
        "name": "config"
      }
    ],
    "examples": [
      "node.setAttrs({\n  x: 5,\n  fill: 'red'\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3182,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3617
  },
  {
    "id": "Konva.Wedge#isListening",
    "longname": "Konva.Wedge#isListening",
    "name": "isListening",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isListening",
    "inherited": true,
    "description": "determine if node is listening for events by taking into account ancestors.\n\nParent    | Self      | isListening\nlistening | listening |\n----------+-----------+------------\nT         | T         | T\nT         | F         | F\nF         | T         | F\nF         | F         | F",
    "memberof": "Konva.Wedge",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3217,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3618
  },
  {
    "id": "Konva.Wedge#isVisible",
    "longname": "Konva.Wedge#isVisible",
    "name": "isVisible",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isVisible",
    "inherited": true,
    "description": "determine if node is visible by taking into account ancestors.\n\nParent    | Self      | isVisible\nvisible   | visible   |\n----------+-----------+------------\nT         | T         | T\nT         | F         | F\nF         | T         | F\nF         | F         | F",
    "memberof": "Konva.Wedge",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3248,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3619
  },
  {
    "id": "Konva.Wedge#show",
    "longname": "Konva.Wedge#show",
    "name": "show",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#show",
    "inherited": true,
    "description": "show node. set visible = true",
    "memberof": "Konva.Wedge",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3300,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3620
  },
  {
    "id": "Konva.Wedge#hide",
    "longname": "Konva.Wedge#hide",
    "name": "hide",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hide",
    "inherited": true,
    "description": "hide node.  Hidden nodes are no longer detectable",
    "memberof": "Konva.Wedge",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3310,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3621
  },
  {
    "id": "Konva.Wedge#getAbsoluteZIndex",
    "longname": "Konva.Wedge#getAbsoluteZIndex",
    "name": "getAbsoluteZIndex",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteZIndex",
    "inherited": true,
    "description": "get absolute z-index which takes into account sibling\n and ancestor indices",
    "memberof": "Konva.Wedge",
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3323,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3622
  },
  {
    "id": "Konva.Wedge#getDepth",
    "longname": "Konva.Wedge#getDepth",
    "name": "getDepth",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getDepth",
    "inherited": true,
    "description": "get node depth in node tree.  Returns an integer.\n e.g. Stage depth will always be 0.  Layers will always be 1.  Groups and Shapes will always\n be >= 2",
    "memberof": "Konva.Wedge",
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3355,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3623
  },
  {
    "id": "Konva.Wedge#getRelativePointerPosition",
    "longname": "Konva.Wedge#getRelativePointerPosition",
    "name": "getRelativePointerPosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getRelativePointerPosition",
    "inherited": true,
    "description": "get position of first pointer (like mouse or first touch) relative to local coordinates of current node",
    "memberof": "Konva.Wedge",
    "examples": [
      "// let's think we have a rectangle at position x = 10, y = 10\n// now we clicked at x = 15, y = 15 of the stage\n// if you want to know position of the click, related to the rectangle you can use\nrect.getRelativePointerPosition();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3398,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3624
  },
  {
    "id": "Konva.Wedge#getAbsolutePosition",
    "longname": "Konva.Wedge#getAbsolutePosition",
    "name": "getAbsolutePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsolutePosition",
    "inherited": true,
    "description": "get absolute position of a node. That function can be used to calculate absolute position, but relative to any ancestor",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "optional ancestor node",
        "name": "Ancestor"
      }
    ],
    "examples": [
      "// returns absolute position relative to top-left corner of canvas\nnode.getAbsolutePosition();\n\n// calculate absolute position of node, inside stage\n// so stage transforms are ignored\nnode.getAbsolutePosition(stage)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3426,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3625
  },
  {
    "id": "Konva.Wedge#move",
    "longname": "Konva.Wedge#move",
    "name": "move",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#move",
    "inherited": true,
    "description": "move node by an amount relative to its current position",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "change"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "change.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "change.y"
      }
    ],
    "examples": [
      "// move node in x direction by 1px and y direction by 2px\nnode.move({\n  x: 1,\n  y: 2\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3514,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3626
  },
  {
    "id": "Konva.Wedge#rotate",
    "longname": "Konva.Wedge#rotate",
    "name": "rotate",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#rotate",
    "inherited": true,
    "description": "rotate node by an amount in degrees relative to its current rotation",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "theta"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3559,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3627
  },
  {
    "id": "Konva.Wedge#moveToTop",
    "longname": "Konva.Wedge#moveToTop",
    "name": "moveToTop",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveToTop",
    "inherited": true,
    "description": "move node to the top of its siblings",
    "memberof": "Konva.Wedge",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3570,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3628
  },
  {
    "id": "Konva.Wedge#moveUp",
    "longname": "Konva.Wedge#moveUp",
    "name": "moveUp",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveUp",
    "inherited": true,
    "description": "move node up",
    "memberof": "Konva.Wedge",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "flag is moved or not"
      }
    ],
    "meta": {
      "lineno": 3590,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3629
  },
  {
    "id": "Konva.Wedge#moveDown",
    "longname": "Konva.Wedge#moveDown",
    "name": "moveDown",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveDown",
    "inherited": true,
    "description": "move node down",
    "memberof": "Konva.Wedge",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3610,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3630
  },
  {
    "id": "Konva.Wedge#moveToBottom",
    "longname": "Konva.Wedge#moveToBottom",
    "name": "moveToBottom",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveToBottom",
    "inherited": true,
    "description": "move node to the bottom of its siblings",
    "memberof": "Konva.Wedge",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3630,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3631
  },
  {
    "id": "Konva.Wedge#getAbsoluteOpacity",
    "longname": "Konva.Wedge#getAbsoluteOpacity",
    "name": "getAbsoluteOpacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteOpacity",
    "inherited": true,
    "description": "get absolute opacity",
    "memberof": "Konva.Wedge",
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3668,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3632
  },
  {
    "id": "Konva.Wedge#moveTo",
    "longname": "Konva.Wedge#moveTo",
    "name": "moveTo",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#moveTo",
    "inherited": true,
    "description": "move node to another container",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Container"
          ]
        },
        "name": "newContainer"
      }
    ],
    "examples": [
      "// move node from current layer into layer2\nnode.moveTo(layer2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3685,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3633
  },
  {
    "id": "Konva.Wedge#toObject",
    "longname": "Konva.Wedge#toObject",
    "name": "toObject",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toObject",
    "inherited": true,
    "description": "convert Node into an object for serialization.  Returns an object.",
    "memberof": "Konva.Wedge",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3703,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3634
  },
  {
    "id": "Konva.Wedge#toJSON",
    "longname": "Konva.Wedge#toJSON",
    "name": "toJSON",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toJSON",
    "inherited": true,
    "description": "convert Node into a JSON string.  Returns a JSON string.",
    "memberof": "Konva.Wedge",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3736,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3635
  },
  {
    "id": "Konva.Wedge#getParent",
    "longname": "Konva.Wedge#getParent",
    "name": "getParent",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getParent",
    "inherited": true,
    "description": "get parent container",
    "memberof": "Konva.Wedge",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3745,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3636
  },
  {
    "id": "Konva.Wedge#findAncestors",
    "longname": "Konva.Wedge#findAncestors",
    "name": "findAncestors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#findAncestors",
    "inherited": true,
    "description": "get all ancestors (parent then parent of the parent, etc) of the node",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "selector for search",
        "name": "selector"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "show we think that node is ancestro itself?",
        "name": "includeSelf"
      },
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "optional": true,
        "description": "optional node where we need to stop searching (one of ancestors)",
        "name": "stopNode"
      }
    ],
    "examples": [
      "// get one of the parent group\nvar parentGroups = node.findAncestors('Group');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "[ancestors]"
      }
    ],
    "meta": {
      "lineno": 3754,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3637
  },
  {
    "id": "Konva.Wedge#findAncestor",
    "longname": "Konva.Wedge#findAncestor",
    "name": "findAncestor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#findAncestor",
    "inherited": true,
    "description": "get ancestor (parent or parent of the parent, etc) of the node that match passed selector",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "selector for search",
        "name": "selector"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "show we think that node is ancestro itself?",
        "name": "includeSelf"
      },
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "optional": true,
        "description": "optional node where we need to stop searching (one of ancestors)",
        "name": "stopNode"
      }
    ],
    "examples": [
      "// get one of the parent group\nvar group = node.findAncestors('.mygroup');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        },
        "description": "ancestor"
      }
    ],
    "meta": {
      "lineno": 3786,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3638
  },
  {
    "id": "Konva.Wedge#getLayer",
    "longname": "Konva.Wedge#getLayer",
    "name": "getLayer",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getLayer",
    "inherited": true,
    "description": "get layer ancestor",
    "memberof": "Konva.Wedge",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Layer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3837,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3639
  },
  {
    "id": "Konva.Wedge#getStage",
    "longname": "Konva.Wedge#getStage",
    "name": "getStage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getStage",
    "inherited": true,
    "description": "get stage ancestor",
    "memberof": "Konva.Wedge",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Stage"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3847,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3640
  },
  {
    "id": "Konva.Wedge#fire",
    "longname": "Konva.Wedge#fire",
    "name": "fire",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#fire",
    "inherited": true,
    "description": "fire event",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "event type.  can be a regular event, like click, mouseover, or mouseout, or it can be a custom event, like myCustomEvent",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "Event"
          ]
        },
        "optional": true,
        "description": "event object",
        "name": "evt"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "setting the value to false, or leaving it undefined, will result in the event\n not bubbling.  Setting the value to true will result in the event bubbling.",
        "name": "bubble"
      }
    ],
    "examples": [
      "// manually fire click event\nnode.fire('click');\n\n// fire custom event\nnode.fire('foo');\n\n// fire custom event with custom event object\nnode.fire('foo', {\n  bar: 10\n});\n\n// fire click event that bubbles\nnode.fire('click', null, true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3865,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3641
  },
  {
    "id": "Konva.Wedge#getAbsoluteTransform",
    "longname": "Konva.Wedge#getAbsoluteTransform",
    "name": "getAbsoluteTransform",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteTransform",
    "inherited": true,
    "description": "get absolute transform of the node which takes into\n account its ancestor transforms",
    "memberof": "Konva.Wedge",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3901,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3642
  },
  {
    "id": "Konva.Wedge#getAbsoluteScale",
    "longname": "Konva.Wedge#getAbsoluteScale",
    "name": "getAbsoluteScale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteScale",
    "inherited": true,
    "description": "get absolute scale of the node which takes into\n account its ancestor scales",
    "memberof": "Konva.Wedge",
    "examples": [
      "// get absolute scale x\nvar scaleX = node.getAbsoluteScale().x;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3961,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3643
  },
  {
    "id": "Konva.Wedge#getAbsoluteRotation",
    "longname": "Konva.Wedge#getAbsoluteRotation",
    "name": "getAbsoluteRotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getAbsoluteRotation",
    "inherited": true,
    "description": "get absolute rotation of the node which takes into\n account its ancestor rotations",
    "memberof": "Konva.Wedge",
    "examples": [
      "// get absolute rotation\nvar rotation = node.getAbsoluteRotation();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 3989,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3644
  },
  {
    "id": "Konva.Wedge#getTransform",
    "longname": "Konva.Wedge#getTransform",
    "name": "getTransform",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getTransform",
    "inherited": true,
    "description": "get transform of the node",
    "memberof": "Konva.Wedge",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Transform"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4009,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3645
  },
  {
    "id": "Konva.Wedge#clone",
    "longname": "Konva.Wedge#clone",
    "name": "clone",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#clone",
    "inherited": true,
    "description": "clone node.  Returns a new Node instance with identical attributes.  You can also override\n the node properties with an object literal, enabling you to use an existing node as a template\n for another node",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "override attrs",
        "name": "obj"
      }
    ],
    "examples": [
      "// simple clone\nvar clone = node.clone();\n\n// clone a node and override the x position\nvar clone = rect.clone({\n  x: 5\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4044,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3646
  },
  {
    "id": "Konva.Wedge#toCanvas",
    "longname": "Konva.Wedge#toCanvas",
    "name": "toCanvas",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toCanvas",
    "inherited": true,
    "description": "converts node into an canvas element.",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output canvas. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var canvas = node.toCanvas();"
    ],
    "meta": {
      "lineno": 4119,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3647
  },
  {
    "id": "Konva.Wedge#toDataURL",
    "longname": "Konva.Wedge#toDataURL",
    "name": "toDataURL",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toDataURL",
    "inherited": true,
    "description": "Creates a composite data URL (base64 string). If MIME type is not\nspecified, then \"image/png\" will result. For \"image/jpeg\", specify a quality\nlevel as quality (range 0.0 - 1.0)",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"image/png\" or \"image/jpeg\".\n \"image/png\" is the default",
        "name": "config.mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "jpeg quality.  If using an \"image/jpeg\" mimeType,\n you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n is very high quality",
        "name": "config.quality"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output image url. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4140,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3648
  },
  {
    "id": "Konva.Wedge#toImage",
    "longname": "Konva.Wedge#toImage",
    "name": "toImage",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toImage",
    "inherited": true,
    "description": "converts node into an image.  Since the toImage\n method is asynchronous, the resulting image can only be retrieved from the config callback\n or the returned Promise.  toImage is most commonly used\n to cache complex drawings as an image so that they don't have to constantly be redrawn",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "can be \"image/png\" or \"image/jpeg\".\n \"image/png\" is the default",
        "name": "config.mimeType"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "jpeg quality.  If using an \"image/jpeg\" mimeType,\n you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n is very high quality",
        "name": "config.quality"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output image. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var image = node.toImage({\n  callback(img) {\n    // do stuff with img\n  }\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Image>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4172,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3649
  },
  {
    "id": "Konva.Wedge#toBlob",
    "longname": "Konva.Wedge#toBlob",
    "name": "toBlob",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#toBlob",
    "inherited": true,
    "description": "Converts node into a blob.  Since the toBlob method is asynchronous,\n the resulting blob can only be retrieved from the config callback\n or the returned Promise.",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "function executed when the composite has completed",
        "name": "config.callback"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "x position of canvas section",
        "name": "config.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "y position of canvas section",
        "name": "config.y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "width of canvas section",
        "name": "config.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of canvas section",
        "name": "config.height"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "pixelRatio of output canvas. Default is 1.\nYou can use that property to increase quality of the image, for example for super hight quality exports\nor usage on retina (or similar) displays. pixelRatio will be used to multiply the size of exported image.\nIf you export to 500x500 size with pixelRatio = 2, then produced image will have size 1000x1000.",
        "name": "config.pixelRatio"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "set this to false if you want to disable imageSmoothing",
        "name": "config.imageSmoothingEnabled"
      }
    ],
    "examples": [
      "var blob = await node.toBlob({});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Blob>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4219,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3650
  },
  {
    "id": "Konva.Wedge#getClassName",
    "longname": "Konva.Wedge#getClassName",
    "name": "getClassName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getClassName",
    "inherited": true,
    "description": "get class name, which may return Stage, Layer, Group, or shape class names like Rect, Circle, Text, etc.",
    "memberof": "Konva.Wedge",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4267,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3651
  },
  {
    "id": "Konva.Wedge#getType",
    "longname": "Konva.Wedge#getType",
    "name": "getType",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#getType",
    "inherited": true,
    "description": "get the node type, which may return Stage, Layer, Group, or Shape",
    "memberof": "Konva.Wedge",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4276,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3652
  },
  {
    "id": "Konva.Wedge#addName",
    "longname": "Konva.Wedge#addName",
    "name": "addName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#addName",
    "inherited": true,
    "description": "add name to node",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red');\nnode.addName('selected');\nnode.name(); // return 'red selected'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4324,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3653
  },
  {
    "id": "Konva.Wedge#hasName",
    "longname": "Konva.Wedge#hasName",
    "name": "hasName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hasName",
    "inherited": true,
    "description": "check is node has name",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red');\nnode.hasName('red');   // return true\nnode.hasName('selected'); // return false\nnode.hasName(''); // return false"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4343,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3654
  },
  {
    "id": "Konva.Wedge#removeName",
    "longname": "Konva.Wedge#removeName",
    "name": "removeName",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#removeName",
    "inherited": true,
    "description": "remove name from node",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "node.name('red selected');\nnode.removeName('selected');\nnode.hasName('selected'); // return false\nnode.name(); // return 'red'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4367,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3655
  },
  {
    "id": "Konva.Wedge#setAttr",
    "longname": "Konva.Wedge#setAttr",
    "name": "setAttr",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#setAttr",
    "inherited": true,
    "description": "set attr",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "attr"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "name": "val"
      }
    ],
    "examples": [
      "node.setAttr('x', 5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4388,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3656
  },
  {
    "id": "Konva.Wedge#draw",
    "longname": "Konva.Wedge#draw",
    "name": "draw",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#draw",
    "inherited": true,
    "description": "draw both scene and hit graphs.  If the node being drawn is the stage, all of the layers will be cleared and redrawn",
    "memberof": "Konva.Wedge",
    "returns": [
      {
        "type": {
          "names": [
            "Konva.Node"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4511,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3657
  },
  {
    "id": "Konva.Wedge#startDrag",
    "longname": "Konva.Wedge#startDrag",
    "name": "startDrag",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#startDrag",
    "inherited": true,
    "description": "initiate drag and drop.",
    "memberof": "Konva.Wedge",
    "meta": {
      "lineno": 4544,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3658
  },
  {
    "id": "Konva.Wedge#stopDrag",
    "longname": "Konva.Wedge#stopDrag",
    "name": "stopDrag",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#stopDrag",
    "inherited": true,
    "description": "stop drag and drop",
    "memberof": "Konva.Wedge",
    "meta": {
      "lineno": 4590,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3659
  },
  {
    "id": "Konva.Wedge#isDragging",
    "longname": "Konva.Wedge#isDragging",
    "name": "isDragging",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isDragging",
    "inherited": true,
    "description": "determine if node is currently in drag and drop mode",
    "memberof": "Konva.Wedge",
    "meta": {
      "lineno": 4607,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3660
  },
  {
    "id": "Konva.Wedge#isClientRectOnScreen",
    "longname": "Konva.Wedge#isClientRectOnScreen",
    "name": "isClientRectOnScreen",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#isClientRectOnScreen",
    "inherited": true,
    "description": "determine if node (at least partially) is currently in user-visible area",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number",
            "Object"
          ]
        },
        "description": "optional margin in pixels",
        "name": "margin"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "margin.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "margin.y"
      }
    ],
    "examples": [
      "// get index\n// default calculations\nvar isOnScreen = node.isClientRectOnScreen()\n// increase object size (or screen size) for cases when objects close to the screen still need to be marked as \"visible\"\nvar isOnScreen = node.isClientRectOnScreen({ x: stage.width(), y: stage.height() })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4671,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3661
  },
  {
    "id": "Konva.Wedge#zIndex",
    "longname": "Konva.Wedge#zIndex",
    "name": "zIndex",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#zIndex",
    "inherited": true,
    "description": "get/set zIndex relative to the node's siblings who share the same parent.\nPlease remember that zIndex is not absolute (like in CSS). It is relative to parent element only.",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "index"
      }
    ],
    "examples": [
      "// get index\nvar index = node.zIndex();\n\n// set index\nnode.zIndex(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4764,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3662
  },
  {
    "id": "Konva.Wedge#absolutePosition",
    "longname": "Konva.Wedge#absolutePosition",
    "name": "absolutePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#absolutePosition",
    "inherited": true,
    "description": "get/set node absolute position",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "// get position\nvar position = node.absolutePosition();\n\n// set position\nnode.absolutePosition({\n  x: 5,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4779,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3663
  },
  {
    "id": "Konva.Wedge#position",
    "longname": "Konva.Wedge#position",
    "name": "position",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#position",
    "inherited": true,
    "description": "get/set node position relative to parent",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "pos.y"
      }
    ],
    "examples": [
      "// get position\nvar position = node.position();\n\n// set position\nnode.position({\n  x: 5,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4799,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3664
  },
  {
    "id": "Konva.Wedge#x",
    "longname": "Konva.Wedge#x",
    "name": "x",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#x",
    "inherited": true,
    "description": "get/set x position",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get x\nvar x = node.x();\n\n// set x\nnode.x(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4818,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3665
  },
  {
    "id": "Konva.Wedge#y",
    "longname": "Konva.Wedge#y",
    "name": "y",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#y",
    "inherited": true,
    "description": "get/set y position",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get y\nvar y = node.y();\n\n// set y\nnode.y(5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4832,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3666
  },
  {
    "id": "Konva.Wedge#globalCompositeOperation",
    "longname": "Konva.Wedge#globalCompositeOperation",
    "name": "globalCompositeOperation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#globalCompositeOperation",
    "inherited": true,
    "description": "get/set globalCompositeOperation of a node. globalCompositeOperation DOESN'T affect hit graph of nodes. So they are still trigger to events as they have default \"source-over\" globalCompositeOperation.",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "type"
      }
    ],
    "examples": [
      "// get globalCompositeOperation\nvar globalCompositeOperation = shape.globalCompositeOperation();\n\n// set globalCompositeOperation\nshape.globalCompositeOperation('source-in');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4846,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3667
  },
  {
    "id": "Konva.Wedge#opacity",
    "longname": "Konva.Wedge#opacity",
    "name": "opacity",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#opacity",
    "inherited": true,
    "description": "get/set opacity.  Opacity values range from 0 to 1.\n A node with an opacity of 0 is fully transparent, and a node\n with an opacity of 1 is fully opaque",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "opacity"
      }
    ],
    "examples": [
      "// get opacity\nvar opacity = node.opacity();\n\n// set opacity\nnode.opacity(0.5);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4860,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3668
  },
  {
    "id": "Konva.Wedge#name",
    "longname": "Konva.Wedge#name",
    "name": "name",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#name",
    "inherited": true,
    "description": "get/set name.",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "name"
      }
    ],
    "examples": [
      "// get name\nvar name = node.name();\n\n// set name\nnode.name('foo');\n\n// also node may have multiple names (as css classes)\nnode.name('foo bar');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4876,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3669
  },
  {
    "id": "Konva.Wedge#id",
    "longname": "Konva.Wedge#id",
    "name": "id",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#id",
    "inherited": true,
    "description": "get/set id. Id is global for whole page.",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "id"
      }
    ],
    "examples": [
      "// get id\nvar name = node.id();\n\n// set id\nnode.id('foo');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4893,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3670
  },
  {
    "id": "Konva.Wedge#rotation",
    "longname": "Konva.Wedge#rotation",
    "name": "rotation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#rotation",
    "inherited": true,
    "description": "get/set rotation in degrees",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "rotation"
      }
    ],
    "examples": [
      "// get rotation in degrees\nvar rotation = node.rotation();\n\n// set rotation in degrees\nnode.rotation(45);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4907,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3671
  },
  {
    "id": "Konva.Wedge#scale",
    "longname": "Konva.Wedge#scale",
    "name": "scale",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scale",
    "inherited": true,
    "description": "get/set scale",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "scale"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "scale.y"
      }
    ],
    "examples": [
      "// get scale\nvar scale = node.scale();\n\n// set scale\nshape.scale({\n  x: 2,\n  y: 3\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4921,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3672
  },
  {
    "id": "Konva.Wedge#scaleX",
    "longname": "Konva.Wedge#scaleX",
    "name": "scaleX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scaleX",
    "inherited": true,
    "description": "get/set scale x",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get scale x\nvar scaleX = node.scaleX();\n\n// set scale x\nnode.scaleX(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4940,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3673
  },
  {
    "id": "Konva.Wedge#scaleY",
    "longname": "Konva.Wedge#scaleY",
    "name": "scaleY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#scaleY",
    "inherited": true,
    "description": "get/set scale y",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get scale y\nvar scaleY = node.scaleY();\n\n// set scale y\nnode.scaleY(2);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4954,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3674
  },
  {
    "id": "Konva.Wedge#skew",
    "longname": "Konva.Wedge#skew",
    "name": "skew",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skew",
    "inherited": true,
    "description": "get/set skew",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "skew"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "skew.x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "skew.y"
      }
    ],
    "examples": [
      "// get skew\nvar skew = node.skew();\n\n// set skew\nnode.skew({\n  x: 20,\n  y: 10\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4968,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3675
  },
  {
    "id": "Konva.Wedge#skewX",
    "longname": "Konva.Wedge#skewX",
    "name": "skewX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skewX",
    "inherited": true,
    "description": "get/set skew x",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get skew x\nvar skewX = node.skewX();\n\n// set skew x\nnode.skewX(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 4987,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3676
  },
  {
    "id": "Konva.Wedge#skewY",
    "longname": "Konva.Wedge#skewY",
    "name": "skewY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#skewY",
    "inherited": true,
    "description": "get/set skew y",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get skew y\nvar skewY = node.skewY();\n\n// set skew y\nnode.skewY(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5001,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3677
  },
  {
    "id": "Konva.Wedge#offsetX",
    "longname": "Konva.Wedge#offsetX",
    "name": "offsetX",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#offsetX",
    "inherited": true,
    "description": "get/set offset x",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      }
    ],
    "examples": [
      "// get offset x\nvar offsetX = node.offsetX();\n\n// set offset x\nnode.offsetX(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5033,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3678
  },
  {
    "id": "Konva.Wedge#offsetY",
    "longname": "Konva.Wedge#offsetY",
    "name": "offsetY",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#offsetY",
    "inherited": true,
    "description": "get/set offset y",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      }
    ],
    "examples": [
      "// get offset y\nvar offsetY = node.offsetY();\n\n// set offset y\nnode.offsetY(3);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5047,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3679
  },
  {
    "id": "Konva.Wedge#dragDistance",
    "longname": "Konva.Wedge#dragDistance",
    "name": "dragDistance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#dragDistance",
    "inherited": true,
    "description": "get/set drag distance",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "distance"
      }
    ],
    "examples": [
      "// get drag distance\nvar dragDistance = node.dragDistance();\n\n// set distance\n// node starts dragging only if pointer moved more then 3 pixels\nnode.dragDistance(3);\n// or set globally\nKonva.dragDistance = 3;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5061,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3680
  },
  {
    "id": "Konva.Wedge#width",
    "longname": "Konva.Wedge#width",
    "name": "width",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#width",
    "inherited": true,
    "description": "get/set width",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "width"
      }
    ],
    "examples": [
      "// get width\nvar width = node.width();\n\n// set width\nnode.width(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5078,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3681
  },
  {
    "id": "Konva.Wedge#height",
    "longname": "Konva.Wedge#height",
    "name": "height",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#height",
    "inherited": true,
    "description": "get/set height",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "height"
      }
    ],
    "examples": [
      "// get height\nvar height = node.height();\n\n// set height\nnode.height(100);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5092,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3682
  },
  {
    "id": "Konva.Wedge#listening",
    "longname": "Konva.Wedge#listening",
    "name": "listening",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#listening",
    "inherited": true,
    "description": "get/set listening attr.  If you need to determine if a node is listening or not\n  by taking into account its parents, use the isListening() method\n  nodes with listening set to false will not be detected in hit graph\n  so they will be ignored in container.getIntersection() method",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "Can be true, or false.  The default is true.",
        "name": "listening"
      }
    ],
    "examples": [
      "// get listening attr\nvar listening = node.listening();\n\n// stop listening for events, remove node and all its children from hit graph\nnode.listening(false);\n\n// listen to events according to the parent\nnode.listening(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5106,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3683
  },
  {
    "id": "Konva.Wedge#preventDefault",
    "longname": "Konva.Wedge#preventDefault",
    "name": "preventDefault",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#preventDefault",
    "inherited": true,
    "description": "get/set preventDefault\nBy default all shapes will prevent default behavior\nof a browser on a pointer move or tap.\nthat will prevent native scrolling when you are trying to drag&drop a node\nbut sometimes you may need to enable default actions\nin that case you can set the property to false",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "preventDefault"
      }
    ],
    "examples": [
      "// get preventDefault\nvar shouldPrevent = shape.preventDefault();\n\n// set preventDefault\nshape.preventDefault(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5125,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3684
  },
  {
    "id": "Konva.Wedge#filters",
    "longname": "Konva.Wedge#filters",
    "name": "filters",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#filters",
    "inherited": true,
    "description": "get/set filters.  Filters are applied to cached canvases",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "array of filters",
        "name": "filters"
      }
    ],
    "examples": [
      "// get filters\nvar filters = node.filters();\n\n// set a single filter\nnode.cache();\nnode.filters([Konva.Filters.Blur]);\n\n// set multiple filters\nnode.cache();\nnode.filters([\n  Konva.Filters.Blur,\n  Konva.Filters.Sepia,\n  Konva.Filters.Invert\n]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5148,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3685
  },
  {
    "id": "Konva.Wedge#visible",
    "longname": "Konva.Wedge#visible",
    "name": "visible",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#visible",
    "inherited": true,
    "description": "get/set visible attr.  Can be true, or false.  The default is true.\n  If you need to determine if a node is visible or not\n  by taking into account its parents, use the isVisible() method",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "visible"
      }
    ],
    "examples": [
      "// get visible attr\nvar visible = node.visible();\n\n// make invisible\nnode.visible(false);\n\n// make visible (according to the parent)\nnode.visible(true);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5171,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3686
  },
  {
    "id": "Konva.Wedge#transformsEnabled",
    "longname": "Konva.Wedge#transformsEnabled",
    "name": "transformsEnabled",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#transformsEnabled",
    "inherited": true,
    "description": "get/set transforms that are enabled.  Can be \"all\", \"none\", or \"position\".  The default\n is \"all\"",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "enabled"
      }
    ],
    "examples": [
      "// enable position transform only to improve draw performance\nnode.transformsEnabled('position');\n\n// enable all transforms\nnode.transformsEnabled('all');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5191,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3687
  },
  {
    "id": "Konva.Wedge#size",
    "longname": "Konva.Wedge#size",
    "name": "size",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#size",
    "inherited": true,
    "description": "get/set node size",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "size"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "size.height"
      }
    ],
    "examples": [
      "// get node size\nvar size = node.size();\nvar width = size.width;\nvar height = size.height;\n\n// set size\nnode.size({\n  width: 100,\n  height: 200\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5205,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3688
  },
  {
    "id": "Konva.Wedge#dragBoundFunc",
    "longname": "Konva.Wedge#dragBoundFunc",
    "name": "dragBoundFunc",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#dragBoundFunc",
    "inherited": true,
    "description": "get/set drag bound function.  This is used to override the default\n drag and drop position.",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "name": "dragBoundFunc"
      }
    ],
    "examples": [
      "// get drag bound function\nvar dragBoundFunc = node.dragBoundFunc();\n\n// create vertical drag and drop\nnode.dragBoundFunc(function(pos){\n  // important pos - is absolute position of the node\n  // you should return absolute position too\n  return {\n    x: this.absolutePosition().x,\n    y: pos.y\n  };\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5226,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3689
  },
  {
    "id": "Konva.Wedge#draggable",
    "longname": "Konva.Wedge#draggable",
    "name": "draggable",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#draggable",
    "inherited": true,
    "description": "get/set draggable flag",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "draggable"
      }
    ],
    "examples": [
      "// get draggable flag\nvar draggable = node.draggable();\n\n// enable drag and drop\nnode.draggable(true);\n\n// disable drag and drop\nnode.draggable(false);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 5248,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3690
  },
  {
    "id": "Konva.Wedge#to",
    "longname": "Konva.Wedge#to",
    "name": "to",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#to",
    "inherited": true,
    "description": "Tween node properties. Shorter usage of {@link Konva.Tween} object.",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "tween params",
        "name": "params"
      }
    ],
    "examples": [
      "circle.to({\n  x : 50,\n  duration : 0.5,\n  onUpdate: () => console.log('props updated'),\n  onFinish: () => console.log('finished'),\n});"
    ],
    "meta": {
      "lineno": 9588,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3691
  },
  {
    "id": "Konva.Wedge#blurRadius",
    "longname": "Konva.Wedge#blurRadius",
    "name": "blurRadius",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#blurRadius",
    "inherited": true,
    "description": "get/set blur radius. Use with {@link Konva.Filters.Blur} filter",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "radius"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17517,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3692
  },
  {
    "id": "Konva.Wedge#brightness",
    "longname": "Konva.Wedge#brightness",
    "name": "brightness",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#brightness",
    "inherited": true,
    "description": "get/set filter brightness.  The brightness is a number between -1 and 1.&nbsp; Positive values\n brighten the pixels and negative values darken them. Use with {@link Konva.Filters.Brighten} filter.",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between -1 and 1",
        "name": "brightness"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17547,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3693
  },
  {
    "id": "Konva.Wedge#contrast",
    "longname": "Konva.Wedge#contrast",
    "name": "contrast",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#contrast",
    "inherited": true,
    "description": "get/set filter contrast.  The contrast is a number between -100 and 100.\nUse with {@link Konva.Filters.Contrast} filter.",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between -100 and 100",
        "name": "contrast"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17600,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3694
  },
  {
    "id": "Konva.Wedge#embossStrength",
    "longname": "Konva.Wedge#embossStrength",
    "name": "embossStrength",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossStrength",
    "inherited": true,
    "description": "get/set emboss strength. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1.  Default is 0.5",
        "name": "level"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17725,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3695
  },
  {
    "id": "Konva.Wedge#embossWhiteLevel",
    "longname": "Konva.Wedge#embossWhiteLevel",
    "name": "embossWhiteLevel",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossWhiteLevel",
    "inherited": true,
    "description": "get/set emboss white level. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1.  Default is 0.5",
        "name": "embossWhiteLevel"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17733,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3696
  },
  {
    "id": "Konva.Wedge#embossDirection",
    "longname": "Konva.Wedge#embossDirection",
    "name": "embossDirection",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossDirection",
    "inherited": true,
    "description": "get/set emboss direction. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "can be top-left, top, top-right, right, bottom-right, bottom, bottom-left or left\n  The default is top-left",
        "name": "embossDirection"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17741,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3697
  },
  {
    "id": "Konva.Wedge#embossBlend",
    "longname": "Konva.Wedge#embossBlend",
    "name": "embossBlend",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#embossBlend",
    "inherited": true,
    "description": "get/set emboss blend. Use with {@link Konva.Filters.Emboss} filter.",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "name": "embossBlend"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17750,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3698
  },
  {
    "id": "Konva.Wedge#enhance",
    "longname": "Konva.Wedge#enhance",
    "name": "enhance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#enhance",
    "inherited": true,
    "description": "get/set enhance. Use with {@link Konva.Filters.Enhance} filter. -1 to 1 values",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Float"
          ]
        },
        "name": "amount"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Float"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17864,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3699
  },
  {
    "id": "Konva.Wedge#hue",
    "longname": "Konva.Wedge#hue",
    "name": "hue",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#hue",
    "inherited": true,
    "description": "get/set hsv hue in degrees. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value between 0 and 359",
        "name": "hue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17896,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3700
  },
  {
    "id": "Konva.Wedge#saturation",
    "longname": "Konva.Wedge#saturation",
    "name": "saturation",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#saturation",
    "inherited": true,
    "description": "get/set hsv saturation. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the saturation, 1.0 doubles, etc..",
        "name": "saturation"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17904,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3701
  },
  {
    "id": "Konva.Wedge#luminance",
    "longname": "Konva.Wedge#luminance",
    "name": "luminance",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#luminance",
    "inherited": true,
    "description": "get/set hsl luminance. Use with {@link Konva.Filters.HSL} filter.",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "from -1 to 1",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 17912,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3702
  },
  {
    "id": "Konva.Wedge#value",
    "longname": "Konva.Wedge#value",
    "name": "value",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#value",
    "inherited": true,
    "description": "get/set hsv value. Use with {@link Konva.Filters.HSV} filter.",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 is no change, -1.0 halves the value, 1.0 doubles, etc..",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18018,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3703
  },
  {
    "id": "Konva.Wedge#kaleidoscopePower",
    "longname": "Konva.Wedge#kaleidoscopePower",
    "name": "kaleidoscopePower",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#kaleidoscopePower",
    "inherited": true,
    "description": "get/set kaleidoscope power. Use with {@link Konva.Filters.Kaleidoscope} filter.",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "of kaleidoscope",
        "name": "power"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18243,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3704
  },
  {
    "id": "Konva.Wedge#kaleidoscopeAngle",
    "longname": "Konva.Wedge#kaleidoscopeAngle",
    "name": "kaleidoscopeAngle",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#kaleidoscopeAngle",
    "inherited": true,
    "description": "get/set kaleidoscope angle. Use with {@link Konva.Filters.Kaleidoscope} filter.",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "degrees"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18251,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3705
  },
  {
    "id": "Konva.Wedge#noise",
    "longname": "Konva.Wedge#noise",
    "name": "noise",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#noise",
    "inherited": true,
    "description": "get/set noise amount.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Noise} filter.",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "noise"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18437,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3706
  },
  {
    "id": "Konva.Wedge#pixelSize",
    "longname": "Konva.Wedge#pixelSize",
    "name": "pixelSize",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#pixelSize",
    "inherited": true,
    "description": "get/set pixel size. Use with {@link Konva.Filters.Pixelate} filter.",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "name": "pixelSize"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18522,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3707
  },
  {
    "id": "Konva.Wedge#levels",
    "longname": "Konva.Wedge#levels",
    "name": "levels",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#levels",
    "inherited": true,
    "description": "get/set levels.  Must be a number between 0 and 1.  Use with {@link Konva.Filters.Posterize} filter.",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "between 0 and 1",
        "name": "level"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18552,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3708
  },
  {
    "id": "Konva.Wedge#red",
    "longname": "Konva.Wedge#red",
    "name": "red",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#red",
    "inherited": true,
    "description": "get/set filter red value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "red"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18596,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3709
  },
  {
    "id": "Konva.Wedge#green",
    "longname": "Konva.Wedge#green",
    "name": "green",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#green",
    "inherited": true,
    "description": "get/set filter green value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "green"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18616,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3710
  },
  {
    "id": "Konva.Wedge#blue",
    "longname": "Konva.Wedge#blue",
    "name": "blue",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#blue",
    "inherited": true,
    "description": "get/set filter blue value. Use with {@link Konva.Filters.RGB} filter.",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "value between 0 and 255",
        "name": "blue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18625,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3711
  },
  {
    "id": "Konva.Wedge#alpha",
    "longname": "Konva.Wedge#alpha",
    "name": "alpha",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#alpha",
    "inherited": true,
    "description": "get/set filter alpha value. Use with {@link Konva.Filters.RGBA} filter.",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Float"
          ]
        },
        "description": "value between 0 and 1",
        "name": "alpha"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Float"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18718,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3712
  },
  {
    "id": "Konva.Wedge#threshold",
    "longname": "Konva.Wedge#threshold",
    "name": "threshold",
    "kind": "function",
    "scope": "instance",
    "inherits": "Konva.Node#threshold",
    "inherited": true,
    "description": "get/set threshold.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Threshold} or {@link Konva.Filters.Mask} filter.",
    "memberof": "Konva.Wedge",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "threshold"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18809,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3713
  },
  {
    "id": "Konva.Transform",
    "longname": "Konva.Transform",
    "name": "Transform",
    "kind": "class",
    "scope": "static",
    "description": "Transform constructor.\nIn most of the cases you don't need to use it in your app. Because it is for internal usage in Konva core.\nBut there is a documentation for that class in case you still want\nto make some manual calculations.",
    "memberof": "Konva",
    "meta": {
      "lineno": 212,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 12
  },
  {
    "id": "Konva.Context",
    "longname": "Konva.Context",
    "name": "Context",
    "kind": "class",
    "scope": "static",
    "description": "Konva wrapper around native 2d canvas context. It has almost the same API of 2d context with some additional functions.\nWith core Konva shapes you don't need to use this object. But you will use it if you want to create\na [custom shape](/docs/react/Custom_Shape.html) or a [custom hit regions](/docs/events/Custom_Hit_Region.html).\nFor full information about each 2d context API use [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D)",
    "memberof": "Konva",
    "meta": {
      "lineno": 1531,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 29
  },
  {
    "id": "Konva.Canvas",
    "longname": "Konva.Canvas",
    "name": "Canvas",
    "kind": "class",
    "scope": "static",
    "meta": {
      "lineno": 2260,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "virtual": true,
    "description": "Canvas Renderer constructor. It is a wrapper around native canvas element.\nUsually you don't need to use it manually.",
    "memberof": "Konva",
    "order": 72
  },
  {
    "id": "Konva.Node",
    "longname": "Konva.Node",
    "name": "Node",
    "kind": "class",
    "scope": "static",
    "description": "Node constructor. Nodes are entities that can be transformed, layered,\nand have bound events. The stage, layers, groups, and shapes all extend Node.",
    "memberof": "Konva",
    "meta": {
      "lineno": 2550,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 77
  },
  {
    "id": "Konva.Container",
    "longname": "Konva.Container",
    "name": "Container",
    "kind": "class",
    "scope": "static",
    "augments": [
      "Konva.Node"
    ],
    "description": "Container constructor.&nbsp; Containers are used to contain nodes or other containers",
    "memberof": "Konva",
    "meta": {
      "lineno": 5306,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "virtual": true,
    "order": 165
  },
  {
    "id": "Konva.Stage",
    "longname": "Konva.Stage",
    "name": "Stage",
    "kind": "class",
    "scope": "static",
    "augments": [
      "Konva.Container"
    ],
    "description": "Stage constructor.  A stage is used to contain multiple layers",
    "memberof": "Konva",
    "meta": {
      "lineno": 6019,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 182
  },
  {
    "id": "Konva.Shape",
    "longname": "Konva.Shape",
    "name": "Shape",
    "kind": "class",
    "scope": "static",
    "augments": [
      "Konva.Node"
    ],
    "description": "Shape constructor.  Shapes are primitive objects such as rectangles,\n circles, text, lines, etc.",
    "memberof": "Konva",
    "meta": {
      "lineno": 6881,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 192
  },
  {
    "id": "Konva.Layer",
    "longname": "Konva.Layer",
    "name": "Layer",
    "kind": "class",
    "scope": "static",
    "augments": [
      "Konva.Container"
    ],
    "description": "Layer constructor.  Layers are tied to their own canvas element and are used\nto contain groups or shapes.",
    "memberof": "Konva",
    "meta": {
      "lineno": 8427,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 261
  },
  {
    "id": "Konva.FastLayer",
    "longname": "Konva.FastLayer",
    "name": "FastLayer",
    "kind": "class",
    "scope": "static",
    "augments": [
      "Object"
    ],
    "description": "FastLayer constructor. **DEPRECATED!** Please use `Konva.Layer({ listening: false})` instead. Layers are tied to their own canvas element and are used\nto contain shapes only.  If you don't need node nesting, mouse and touch interactions,\nor event pub/sub, you should use FastLayer instead of Layer to create your layers.\nIt renders about 2x faster than normal layers.",
    "memberof": "Konva",
    "meta": {
      "lineno": 8878,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 277
  },
  {
    "id": "Konva.Group",
    "longname": "Konva.Group",
    "name": "Group",
    "kind": "class",
    "scope": "static",
    "augments": [
      "Konva.Container"
    ],
    "description": "Group constructor.  Groups are used to contain shapes or other groups.",
    "memberof": "Konva",
    "meta": {
      "lineno": 8924,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 279
  },
  {
    "id": "Konva.Animation",
    "longname": "Konva.Animation",
    "name": "Animation",
    "kind": "class",
    "scope": "static",
    "description": "Animation constructor.",
    "memberof": "Konva",
    "meta": {
      "lineno": 8967,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 281
  },
  {
    "id": "Konva.Tween",
    "longname": "Konva.Tween",
    "name": "Tween",
    "kind": "class",
    "scope": "static",
    "description": "Tween constructor.  Tweens enable you to animate a node between the current state and a new state.\n You can play, pause, reverse, seek, reset, and finish tweens.  By default, tweens are animated using\n a linear easing.  For more tweening options, check out {@link Konva.Easings}",
    "memberof": "Konva",
    "meta": {
      "lineno": 9298,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 289
  },
  {
    "id": "Konva.Arc",
    "longname": "Konva.Arc",
    "name": "Arc",
    "kind": "class",
    "scope": "static",
    "augments": [
      "Konva.Shape"
    ],
    "description": "Arc constructor",
    "memberof": "Konva",
    "meta": {
      "lineno": 9968,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 316
  },
  {
    "id": "Konva.Line",
    "longname": "Konva.Line",
    "name": "Line",
    "kind": "class",
    "scope": "static",
    "augments": [
      "Konva.Shape"
    ],
    "description": "Line constructor.&nbsp; Lines are defined by an array of points and\n a tension",
    "memberof": "Konva",
    "meta": {
      "lineno": 10190,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 322
  },
  {
    "id": "Konva.Path",
    "longname": "Konva.Path",
    "name": "Path",
    "kind": "class",
    "scope": "static",
    "augments": [
      "Konva.Shape"
    ],
    "description": "Path constructor.",
    "memberof": "Konva",
    "author": [
      "Jason Follas"
    ],
    "meta": {
      "lineno": 11279,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 329
  },
  {
    "id": "Konva.Arrow",
    "longname": "Konva.Arrow",
    "name": "Arrow",
    "kind": "class",
    "scope": "static",
    "augments": [
      "Konva.Line"
    ],
    "description": "Arrow constructor",
    "memberof": "Konva",
    "meta": {
      "lineno": 12073,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 334
  },
  {
    "id": "Konva.Circle",
    "longname": "Konva.Circle",
    "name": "Circle",
    "kind": "class",
    "scope": "static",
    "augments": [
      "Konva.Shape"
    ],
    "description": "Circle constructor",
    "memberof": "Konva",
    "meta": {
      "lineno": 12317,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 340
  },
  {
    "id": "Konva.Ellipse",
    "longname": "Konva.Ellipse",
    "name": "Ellipse",
    "kind": "class",
    "scope": "static",
    "augments": [
      "Konva.Shape"
    ],
    "description": "Ellipse constructor",
    "memberof": "Konva",
    "meta": {
      "lineno": 12450,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 343
  },
  {
    "id": "Konva.Image",
    "longname": "Konva.Image",
    "name": "Image",
    "kind": "class",
    "scope": "static",
    "augments": [
      "Konva.Shape"
    ],
    "description": "Image constructor",
    "memberof": "Konva",
    "meta": {
      "lineno": 12624,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 348
  },
  {
    "id": "Konva.Label",
    "longname": "Konva.Label",
    "name": "Label",
    "kind": "class",
    "scope": "static",
    "description": "Label constructor.&nbsp; Labels are groups that contain a Text and Tag shape",
    "memberof": "Konva",
    "meta": {
      "lineno": 12932,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 358
  },
  {
    "id": "Konva.Tag",
    "longname": "Konva.Tag",
    "name": "Tag",
    "kind": "class",
    "scope": "static",
    "description": "Tag constructor.&nbsp; A Tag can be configured\n to have a pointer element that points up, right, down, or left",
    "memberof": "Konva",
    "meta": {
      "lineno": 13031,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 362
  },
  {
    "id": "Konva.Rect",
    "longname": "Konva.Rect",
    "name": "Rect",
    "kind": "class",
    "scope": "static",
    "augments": [
      "Konva.Shape"
    ],
    "description": "Rect constructor",
    "memberof": "Konva",
    "meta": {
      "lineno": 13246,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 368
  },
  {
    "id": "Konva.RegularPolygon",
    "longname": "Konva.RegularPolygon",
    "name": "RegularPolygon",
    "kind": "class",
    "scope": "static",
    "augments": [
      "Konva.Shape"
    ],
    "description": "RegularPolygon constructor. Examples include triangles, squares, pentagons, hexagons, etc.",
    "memberof": "Konva",
    "meta": {
      "lineno": 13375,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 371
  },
  {
    "id": "Konva.Ring",
    "longname": "Konva.Ring",
    "name": "Ring",
    "kind": "class",
    "scope": "static",
    "augments": [
      "Konva.Shape"
    ],
    "description": "Ring constructor",
    "memberof": "Konva",
    "meta": {
      "lineno": 13555,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 375
  },
  {
    "id": "Konva.Sprite",
    "longname": "Konva.Sprite",
    "name": "Sprite",
    "kind": "class",
    "scope": "static",
    "augments": [
      "Konva.Shape"
    ],
    "description": "Sprite constructor",
    "memberof": "Konva",
    "meta": {
      "lineno": 13729,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 379
  },
  {
    "id": "Konva.Star",
    "longname": "Konva.Star",
    "name": "Star",
    "kind": "class",
    "scope": "static",
    "augments": [
      "Konva.Shape"
    ],
    "description": "Star constructor",
    "memberof": "Konva",
    "meta": {
      "lineno": 14072,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 390
  },
  {
    "id": "Konva.Text",
    "longname": "Konva.Text",
    "name": "Text",
    "kind": "class",
    "scope": "static",
    "augments": [
      "Konva.Shape"
    ],
    "description": "Text constructor",
    "memberof": "Konva",
    "meta": {
      "lineno": 14332,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 395
  },
  {
    "id": "Konva.TextPath",
    "longname": "Konva.TextPath",
    "name": "TextPath",
    "kind": "class",
    "scope": "static",
    "augments": [
      "Konva.Shape"
    ],
    "description": "Path constructor.",
    "memberof": "Konva",
    "author": [
      "Jason Follas"
    ],
    "meta": {
      "lineno": 15101,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 416
  },
  {
    "id": "Konva.Transformer",
    "longname": "Konva.Transformer",
    "name": "Transformer",
    "kind": "class",
    "scope": "static",
    "description": "Transformer constructor.  Transformer is a special type of group that allow you transform Konva\nprimitives and shapes. Transforming tool is not changing `width` and `height` properties of nodes\nwhen you resize them. Instead it changes `scaleX` and `scaleY` properties.",
    "memberof": "Konva",
    "meta": {
      "lineno": 15682,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 430
  },
  {
    "id": "Konva.Wedge",
    "longname": "Konva.Wedge",
    "name": "Wedge",
    "kind": "class",
    "scope": "static",
    "augments": [
      "Konva.Shape"
    ],
    "description": "Wedge constructor",
    "memberof": "Konva",
    "meta": {
      "lineno": 17155,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 468
  },
  {
    "id": "Konva.autoDrawEnabled",
    "longname": "Konva.autoDrawEnabled",
    "name": "autoDrawEnabled",
    "kind": "member",
    "scope": "static",
    "description": "Should Konva automatically update canvas on any changes. Default is true.",
    "memberof": "Konva",
    "examples": [
      "Konva.autoDrawEnabled = true;"
    ],
    "defaultvalue": "true",
    "properties": [
      {
        "name": "autoDrawEnabled"
      }
    ],
    "meta": {
      "lineno": 47,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 1
  },
  {
    "id": "Konva.hitOnDragEnabled",
    "longname": "Konva.hitOnDragEnabled",
    "name": "hitOnDragEnabled",
    "kind": "member",
    "scope": "static",
    "description": "Should we enable hit detection while dragging? For performance reasons, by default it is false.\nBut on some rare cases you want to see hit graph and check intersections. Just set it to true.",
    "memberof": "Konva",
    "examples": [
      "Konva.hitOnDragEnabled = true;"
    ],
    "defaultvalue": "false",
    "properties": [
      {
        "name": "hitOnDragEnabled"
      }
    ],
    "meta": {
      "lineno": 57,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 2
  },
  {
    "id": "Konva.capturePointerEventsEnabled",
    "longname": "Konva.capturePointerEventsEnabled",
    "name": "capturePointerEventsEnabled",
    "kind": "member",
    "scope": "static",
    "description": "Should we capture touch events and bind them to the touchstart target? That is how it works on DOM elements.\nThe case: we touchstart on div1, then touchmove out of that element into another element div2.\nDOM will continue trigger touchmove events on div1 (not div2). Because events are \"captured\" into initial target.\nBy default Konva do not do that and will trigger touchmove on another element, while pointer is moving.",
    "memberof": "Konva",
    "examples": [
      "Konva.capturePointerEventsEnabled = true;"
    ],
    "defaultvalue": "false",
    "properties": [
      {
        "name": "capturePointerEventsEnabled"
      }
    ],
    "meta": {
      "lineno": 68,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 3
  },
  {
    "id": "Konva.pixelRatio",
    "longname": "Konva.pixelRatio",
    "name": "pixelRatio",
    "kind": "member",
    "scope": "static",
    "description": "Global pixel ratio configuration. KonvaJS automatically detect pixel ratio of current device.\nBut you may override such property, if you want to use your value. Set this value before any components initializations.",
    "memberof": "Konva",
    "examples": [
      "// before any Konva code:\nKonva.pixelRatio = 1;"
    ],
    "defaultvalue": "undefined",
    "properties": [
      {
        "name": "pixelRatio"
      }
    ],
    "meta": {
      "lineno": 91,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 4
  },
  {
    "id": "Konva.dragDistance",
    "longname": "Konva.dragDistance",
    "name": "dragDistance",
    "kind": "member",
    "scope": "static",
    "description": "Drag distance property. If you start to drag a node you may want to wait until pointer is moved to some distance from start point,\nonly then start dragging. Default is 3px.",
    "memberof": "Konva",
    "examples": [
      "Konva.dragDistance = 10;"
    ],
    "defaultvalue": "0",
    "properties": [
      {
        "name": "dragDistance"
      }
    ],
    "meta": {
      "lineno": 112,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 5
  },
  {
    "id": "Konva.angleDeg",
    "longname": "Konva.angleDeg",
    "name": "angleDeg",
    "kind": "member",
    "scope": "static",
    "description": "Use degree values for angle properties. You may set this property to false if you want to use radian values.",
    "memberof": "Konva",
    "examples": [
      "node.rotation(45); // 45 degrees\nKonva.angleDeg = false;\nnode.rotation(Math.PI / 2); // PI/2 radian"
    ],
    "defaultvalue": "true",
    "properties": [
      {
        "name": "angleDeg"
      }
    ],
    "meta": {
      "lineno": 123,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 6
  },
  {
    "id": "Konva.showWarnings",
    "longname": "Konva.showWarnings",
    "name": "showWarnings",
    "kind": "member",
    "scope": "static",
    "description": "Show different warnings about errors or wrong API usage",
    "memberof": "Konva",
    "examples": [
      "Konva.showWarnings = false;"
    ],
    "defaultvalue": "true",
    "properties": [
      {
        "name": "showWarnings"
      }
    ],
    "meta": {
      "lineno": 132,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 7
  },
  {
    "id": "Konva.dragButtons",
    "longname": "Konva.dragButtons",
    "name": "dragButtons",
    "kind": "member",
    "scope": "static",
    "description": "Configure what mouse buttons can be used for drag and drop.\nDefault value is [0] - only left mouse button.",
    "memberof": "Konva",
    "examples": [
      "// enable left and right mouse buttons\nKonva.dragButtons = [0, 2];"
    ],
    "defaultvalue": "true",
    "properties": [
      {
        "name": "dragButtons"
      }
    ],
    "meta": {
      "lineno": 143,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 8
  },
  {
    "id": "Konva.releaseCanvasOnDestroy",
    "longname": "Konva.releaseCanvasOnDestroy",
    "name": "releaseCanvasOnDestroy",
    "kind": "member",
    "scope": "static",
    "description": "Should Konva release canvas elements on destroy. Default is true.\nUseful to avoid memory leak issues in Safari on macOS/iOS.",
    "memberof": "Konva",
    "examples": [
      "Konva.releaseCanvasOnDestroy = true;"
    ],
    "defaultvalue": "true",
    "properties": [
      {
        "name": "releaseCanvasOnDestroy"
      }
    ],
    "meta": {
      "lineno": 165,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 11
  },
  {
    "id": "Konva.Util",
    "longname": "Konva.Util",
    "name": "Util",
    "kind": "namespace",
    "scope": "static",
    "memberof": "Konva",
    "meta": {
      "lineno": 591,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 25
  },
  {
    "id": "Konva.Easings",
    "longname": "Konva.Easings",
    "name": "Easings",
    "kind": "namespace",
    "scope": "static",
    "memberof": "Konva",
    "meta": {
      "lineno": 9618,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 299
  },
  {
    "id": "Konva.Filters",
    "longname": "Konva.Filters",
    "name": "Filters",
    "kind": "namespace",
    "scope": "static",
    "memberof": "Konva",
    "meta": {
      "lineno": 18838,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 518
  },
  {
    "id": "Konva.isDragging",
    "longname": "Konva.isDragging",
    "name": "isDragging",
    "kind": "function",
    "scope": "static",
    "description": "returns whether or not drag and drop is currently active",
    "memberof": "Konva",
    "meta": {
      "lineno": 149,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 9
  },
  {
    "id": "Konva.isDragReady",
    "longname": "Konva.isDragReady",
    "name": "isDragReady",
    "kind": "function",
    "scope": "static",
    "description": "returns whether or not a drag and drop operation is ready, but may\n not necessarily have started",
    "memberof": "Konva",
    "meta": {
      "lineno": 162,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 10
  },
  {
    "id": "Konva.Util.getRandomColor",
    "longname": "Konva.Util.getRandomColor",
    "name": "getRandomColor",
    "kind": "function",
    "scope": "static",
    "description": "return random hex color",
    "memberof": "Konva.Util",
    "examples": [
      "shape.fill(Konva.Util.getRandomColor());"
    ],
    "meta": {
      "lineno": 710,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 26
  },
  {
    "id": "Konva.Util.getRGB",
    "longname": "Konva.Util.getRGB",
    "name": "getRGB",
    "kind": "function",
    "scope": "static",
    "description": "get RGB components of a color",
    "memberof": "Konva.Util",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "color"
      }
    ],
    "examples": [
      "// each of the following examples return {r:0, g:0, b:255}\nvar rgb = Konva.Util.getRGB('blue');\nvar rgb = Konva.Util.getRGB('#0000ff');\nvar rgb = Konva.Util.getRGB('rgb(0,0,255)');"
    ],
    "meta": {
      "lineno": 728,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 27
  },
  {
    "id": "Konva.Util.haveIntersection",
    "longname": "Konva.Util.haveIntersection",
    "name": "haveIntersection",
    "kind": "function",
    "scope": "static",
    "description": "check intersection of two client rectangles",
    "memberof": "Konva.Util",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "{ x, y, width, height } client rectangle",
        "name": "r1"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "{ x, y, width, height } client rectangle",
        "name": "r2"
      }
    ],
    "examples": [
      "const overlapping = Konva.Util.haveIntersection(shape1.getClientRect(), shape2.getClientRect());"
    ],
    "meta": {
      "lineno": 930,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 28
  },
  {
    "id": "Konva.Node.Node.create",
    "longname": "Konva.Node.Node.create",
    "name": "Node.create",
    "kind": "function",
    "scope": "static",
    "description": "create node with JSON string or an Object.  De-serializtion does not generate custom\n shape drawing functions, images, or event handlers (this would make the\n serialized object huge).  If your app uses custom shapes, images, and\n event handlers (it probably does), then you need to select the appropriate\n shapes after loading the stage and set these properties via on(), setSceneFunc(),\n and setImage() methods",
    "memberof": "Konva.Node",
    "params": [
      {
        "type": {
          "names": [
            "String",
            "Object"
          ]
        },
        "description": "string or object",
        "name": "json"
      },
      {
        "type": {
          "names": [
            "Element"
          ]
        },
        "optional": true,
        "description": "optional container dom element used only if you're\n creating a stage node",
        "name": "container"
      }
    ],
    "meta": {
      "lineno": 4712,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 135
  },
  {
    "id": "Konva.Easings.BackEaseIn",
    "longname": "Konva.Easings.BackEaseIn",
    "name": "BackEaseIn",
    "kind": "function",
    "scope": "static",
    "description": "back ease in",
    "memberof": "Konva.Easings",
    "meta": {
      "lineno": 9628,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 300
  },
  {
    "id": "Konva.Easings.BackEaseOut",
    "longname": "Konva.Easings.BackEaseOut",
    "name": "BackEaseOut",
    "kind": "function",
    "scope": "static",
    "description": "back ease out",
    "memberof": "Konva.Easings",
    "meta": {
      "lineno": 9637,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 301
  },
  {
    "id": "Konva.Easings.BackEaseInOut",
    "longname": "Konva.Easings.BackEaseInOut",
    "name": "BackEaseInOut",
    "kind": "function",
    "scope": "static",
    "description": "back ease in out",
    "memberof": "Konva.Easings",
    "meta": {
      "lineno": 9646,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 302
  },
  {
    "id": "Konva.Easings.ElasticEaseIn",
    "longname": "Konva.Easings.ElasticEaseIn",
    "name": "ElasticEaseIn",
    "kind": "function",
    "scope": "static",
    "description": "elastic ease in",
    "memberof": "Konva.Easings",
    "meta": {
      "lineno": 9658,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 303
  },
  {
    "id": "Konva.Easings.ElasticEaseOut",
    "longname": "Konva.Easings.ElasticEaseOut",
    "name": "ElasticEaseOut",
    "kind": "function",
    "scope": "static",
    "description": "elastic ease out",
    "memberof": "Konva.Easings",
    "meta": {
      "lineno": 9686,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 304
  },
  {
    "id": "Konva.Easings.ElasticEaseInOut",
    "longname": "Konva.Easings.ElasticEaseInOut",
    "name": "ElasticEaseInOut",
    "kind": "function",
    "scope": "static",
    "description": "elastic ease in out",
    "memberof": "Konva.Easings",
    "meta": {
      "lineno": 9714,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 305
  },
  {
    "id": "Konva.Easings.BounceEaseOut",
    "longname": "Konva.Easings.BounceEaseOut",
    "name": "BounceEaseOut",
    "kind": "function",
    "scope": "static",
    "description": "bounce ease out",
    "memberof": "Konva.Easings",
    "meta": {
      "lineno": 9752,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 306
  },
  {
    "id": "Konva.Easings.BounceEaseIn",
    "longname": "Konva.Easings.BounceEaseIn",
    "name": "BounceEaseIn",
    "kind": "function",
    "scope": "static",
    "description": "bounce ease in",
    "memberof": "Konva.Easings",
    "meta": {
      "lineno": 9771,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 307
  },
  {
    "id": "Konva.Easings.BounceEaseInOut",
    "longname": "Konva.Easings.BounceEaseInOut",
    "name": "BounceEaseInOut",
    "kind": "function",
    "scope": "static",
    "description": "bounce ease in out",
    "memberof": "Konva.Easings",
    "meta": {
      "lineno": 9779,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 308
  },
  {
    "id": "Konva.Easings.EaseIn",
    "longname": "Konva.Easings.EaseIn",
    "name": "EaseIn",
    "kind": "function",
    "scope": "static",
    "description": "ease in",
    "memberof": "Konva.Easings",
    "meta": {
      "lineno": 9792,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 309
  },
  {
    "id": "Konva.Easings.EaseOut",
    "longname": "Konva.Easings.EaseOut",
    "name": "EaseOut",
    "kind": "function",
    "scope": "static",
    "description": "ease out",
    "memberof": "Konva.Easings",
    "meta": {
      "lineno": 9800,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 310
  },
  {
    "id": "Konva.Easings.EaseInOut",
    "longname": "Konva.Easings.EaseInOut",
    "name": "EaseInOut",
    "kind": "function",
    "scope": "static",
    "description": "ease in out",
    "memberof": "Konva.Easings",
    "meta": {
      "lineno": 9808,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 311
  },
  {
    "id": "Konva.Easings.StrongEaseIn",
    "longname": "Konva.Easings.StrongEaseIn",
    "name": "StrongEaseIn",
    "kind": "function",
    "scope": "static",
    "description": "strong ease in",
    "memberof": "Konva.Easings",
    "meta": {
      "lineno": 9819,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 312
  },
  {
    "id": "Konva.Easings.StrongEaseOut",
    "longname": "Konva.Easings.StrongEaseOut",
    "name": "StrongEaseOut",
    "kind": "function",
    "scope": "static",
    "description": "strong ease out",
    "memberof": "Konva.Easings",
    "meta": {
      "lineno": 9827,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 313
  },
  {
    "id": "Konva.Easings.StrongEaseInOut",
    "longname": "Konva.Easings.StrongEaseInOut",
    "name": "StrongEaseInOut",
    "kind": "function",
    "scope": "static",
    "description": "strong ease in out",
    "memberof": "Konva.Easings",
    "meta": {
      "lineno": 9835,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 314
  },
  {
    "id": "Konva.Easings.Linear",
    "longname": "Konva.Easings.Linear",
    "name": "Linear",
    "kind": "function",
    "scope": "static",
    "description": "linear",
    "memberof": "Konva.Easings",
    "meta": {
      "lineno": 9846,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 315
  },
  {
    "id": "Konva.Image.Image.fromURL",
    "longname": "Konva.Image.Image.fromURL",
    "name": "Image.fromURL",
    "kind": "function",
    "scope": "static",
    "description": "load image from given url and create `Konva.Image` instance",
    "memberof": "Konva.Image",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "image source",
        "name": "url"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "with Konva.Image instance as first argument",
        "name": "callback"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "optional error handler",
        "name": "onError",
        "defaultvalue": null
      }
    ],
    "examples": [
      "Konva.Image.fromURL(imageURL, function(image){\n   // image is Konva.Image instance\n   layer.add(image);\n   layer.draw();\n });"
    ],
    "meta": {
      "lineno": 12732,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 350
  },
  {
    "id": "Konva.Filters.Blur",
    "longname": "Konva.Filters.Blur",
    "name": "Blur",
    "kind": "function",
    "scope": "static",
    "description": "Blur Filter",
    "memberof": "Konva.Filters",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "imageData"
      }
    ],
    "examples": [
      "node.cache();\nnode.filters([Konva.Filters.Blur]);\nnode.blurRadius(10);"
    ],
    "meta": {
      "lineno": 17499,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 473
  },
  {
    "id": "Konva.Filters.Brighten",
    "longname": "Konva.Filters.Brighten",
    "name": "Brighten",
    "kind": "function",
    "scope": "static",
    "description": "Brighten Filter.",
    "memberof": "Konva.Filters",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "imageData"
      }
    ],
    "examples": [
      "node.cache();\nnode.filters([Konva.Filters.Brighten]);\nnode.brightness(0.8);"
    ],
    "meta": {
      "lineno": 17535,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 475
  },
  {
    "id": "Konva.Filters.Contrast",
    "longname": "Konva.Filters.Contrast",
    "name": "Contrast",
    "kind": "function",
    "scope": "static",
    "description": "Contrast Filter.",
    "memberof": "Konva.Filters",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "imageData"
      }
    ],
    "examples": [
      "node.cache();\nnode.filters([Konva.Filters.Contrast]);\nnode.contrast(10);"
    ],
    "meta": {
      "lineno": 17567,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 477
  },
  {
    "id": "Konva.Filters.Emboss",
    "longname": "Konva.Filters.Emboss",
    "name": "Emboss",
    "kind": "function",
    "scope": "static",
    "description": "Emboss Filter.\nPixastic Lib - Emboss filter - v0.1.0\nCopyright (c) 2008 Jacob Seidelin, jseidelin@nihilogic.dk, http://blog.nihilogic.dk/\nLicense: [http://www.pixastic.com/lib/license.txt]",
    "memberof": "Konva.Filters",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "imageData"
      }
    ],
    "examples": [
      "node.cache();\nnode.filters([Konva.Filters.Emboss]);\nnode.embossStrength(0.8);\nnode.embossWhiteLevel(0.3);\nnode.embossDirection('right');\nnode.embossBlend(true);"
    ],
    "meta": {
      "lineno": 17626,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 479
  },
  {
    "id": "Konva.Filters.Enhance",
    "longname": "Konva.Filters.Enhance",
    "name": "Enhance",
    "kind": "function",
    "scope": "static",
    "description": "Enhance Filter. Adjusts the colors so that they span the widest\n possible range (ie 0-255). Performs w*h pixel reads and w*h pixel\n writes.",
    "memberof": "Konva.Filters",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "imageData"
      }
    ],
    "examples": [
      "node.cache();\nnode.filters([Konva.Filters.Enhance]);\nnode.enhance(0.4);"
    ],
    "author": [
      "ippo615"
    ],
    "meta": {
      "lineno": 17773,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 484
  },
  {
    "id": "Konva.Filters.Grayscale",
    "longname": "Konva.Filters.Grayscale",
    "name": "Grayscale",
    "kind": "function",
    "scope": "static",
    "description": "Grayscale Filter",
    "memberof": "Konva.Filters",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "imageData"
      }
    ],
    "examples": [
      "node.cache();\nnode.filters([Konva.Filters.Grayscale]);"
    ],
    "meta": {
      "lineno": 17882,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 486
  },
  {
    "id": "Konva.Filters.HSL",
    "longname": "Konva.Filters.HSL",
    "name": "HSL",
    "kind": "function",
    "scope": "static",
    "description": "HSL Filter. Adjusts the hue, saturation and luminance (or lightness)",
    "memberof": "Konva.Filters",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "imageData"
      }
    ],
    "examples": [
      "image.filters([Konva.Filters.HSL]);\nimage.luminance(0.2);"
    ],
    "author": [
      "ippo615"
    ],
    "meta": {
      "lineno": 17929,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 490
  },
  {
    "id": "Konva.Filters.HSV",
    "longname": "Konva.Filters.HSV",
    "name": "HSV",
    "kind": "function",
    "scope": "static",
    "description": "HSV Filter. Adjusts the hue, saturation and value",
    "memberof": "Konva.Filters",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "imageData"
      }
    ],
    "examples": [
      "image.filters([Konva.Filters.HSV]);\nimage.value(200);"
    ],
    "author": [
      "ippo615"
    ],
    "meta": {
      "lineno": 17960,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 491
  },
  {
    "id": "Konva.Filters.Invert",
    "longname": "Konva.Filters.Invert",
    "name": "Invert",
    "kind": "function",
    "scope": "static",
    "description": "Invert Filter",
    "memberof": "Konva.Filters",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "imageData"
      }
    ],
    "examples": [
      "node.cache();\nnode.filters([Konva.Filters.Invert]);"
    ],
    "meta": {
      "lineno": 18035,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 495
  },
  {
    "id": "Konva.Filters.Mask",
    "longname": "Konva.Filters.Mask",
    "name": "Mask",
    "kind": "function",
    "scope": "static",
    "description": "Mask Filter",
    "memberof": "Konva.Filters",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "imageData"
      }
    ],
    "examples": [
      "node.cache();\nnode.filters([Konva.Filters.Mask]);\nnode.threshold(200);"
    ],
    "meta": {
      "lineno": 18388,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 498
  },
  {
    "id": "Konva.Filters.Noise",
    "longname": "Konva.Filters.Noise",
    "name": "Noise",
    "kind": "function",
    "scope": "static",
    "description": "Noise Filter. Randomly adds or substracts to the color channels",
    "memberof": "Konva.Filters",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "imageData"
      }
    ],
    "examples": [
      "node.cache();\nnode.filters([Konva.Filters.Noise]);\nnode.noise(0.8);"
    ],
    "author": [
      "ippo615"
    ],
    "meta": {
      "lineno": 18416,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 499
  },
  {
    "id": "Konva.Filters.Pixelate",
    "longname": "Konva.Filters.Pixelate",
    "name": "Pixelate",
    "kind": "function",
    "scope": "static",
    "description": "Pixelate Filter. Averages groups of pixels and redraws\n them as larger pixels",
    "memberof": "Konva.Filters",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "imageData"
      }
    ],
    "examples": [
      "node.cache();\nnode.filters([Konva.Filters.Pixelate]);\nnode.pixelSize(10);"
    ],
    "author": [
      "ippo615"
    ],
    "meta": {
      "lineno": 18446,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 501
  },
  {
    "id": "Konva.Filters.Posterize",
    "longname": "Konva.Filters.Posterize",
    "name": "Posterize",
    "kind": "function",
    "scope": "static",
    "description": "Posterize Filter. Adjusts the channels so that there are no more\n than n different values for that channel. This is also applied\n to the alpha channel.",
    "memberof": "Konva.Filters",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "imageData"
      }
    ],
    "examples": [
      "node.cache();\nnode.filters([Konva.Filters.Posterize]);\nnode.levels(0.8); // between 0 and 1"
    ],
    "author": [
      "ippo615"
    ],
    "meta": {
      "lineno": 18530,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 503
  },
  {
    "id": "Konva.Filters.RGB",
    "longname": "Konva.Filters.RGB",
    "name": "RGB",
    "kind": "function",
    "scope": "static",
    "description": "RGB Filter",
    "memberof": "Konva.Filters",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "imageData"
      }
    ],
    "examples": [
      "node.cache();\nnode.filters([Konva.Filters.RGB]);\nnode.blue(120);\nnode.green(200);"
    ],
    "author": [
      "ippo615"
    ],
    "meta": {
      "lineno": 18560,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 505
  },
  {
    "id": "Konva.Filters.RGBA",
    "longname": "Konva.Filters.RGBA",
    "name": "RGBA",
    "kind": "function",
    "scope": "static",
    "description": "RGBA Filter",
    "memberof": "Konva.Filters",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "imageData"
      }
    ],
    "examples": [
      "node.cache();\nnode.filters([Konva.Filters.RGBA]);\nnode.blue(120);\nnode.green(200);\nnode.alpha(0.3);"
    ],
    "author": [
      "codefo"
    ],
    "meta": {
      "lineno": 18634,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 509
  },
  {
    "id": "Konva.Filters.Sepia",
    "longname": "Konva.Filters.Sepia",
    "name": "Sepia",
    "kind": "function",
    "scope": "static",
    "memberof": "Konva.Filters",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "imageData"
      }
    ],
    "examples": [
      "node.cache();\nnode.filters([Konva.Filters.Sepia]);"
    ],
    "meta": {
      "lineno": 18728,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 514
  },
  {
    "id": "Konva.Filters.Solarize",
    "longname": "Konva.Filters.Solarize",
    "name": "Solarize",
    "kind": "function",
    "scope": "static",
    "description": "Solarize Filter\nPixastic Lib - Solarize filter - v0.1.0\nCopyright (c) 2008 Jacob Seidelin, jseidelin@nihilogic.dk, http://blog.nihilogic.dk/\nLicense: [http://www.pixastic.com/lib/license.txt]",
    "memberof": "Konva.Filters",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "imageData"
      }
    ],
    "examples": [
      "node.cache();\nnode.filters([Konva.Filters.Solarize]);"
    ],
    "meta": {
      "lineno": 18749,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 515
  },
  {
    "id": "Konva.Filters.Threshold",
    "longname": "Konva.Filters.Threshold",
    "name": "Threshold",
    "kind": "function",
    "scope": "static",
    "description": "Threshold Filter. Pushes any value above the mid point to\n the max and any value below the mid point to the min.\n This affects the alpha channel.",
    "memberof": "Konva.Filters",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "imageData"
      }
    ],
    "examples": [
      "node.cache();\nnode.filters([Konva.Filters.Threshold]);\nnode.threshold(0.1);"
    ],
    "author": [
      "ippo615"
    ],
    "meta": {
      "lineno": 18788,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 516
  },
  {
    "id": "<anonymous>~getDerivative",
    "longname": "<anonymous>~getDerivative",
    "name": "getDerivative",
    "kind": "function",
    "scope": "inner",
    "description": "Compute the curve derivative (hodograph) at t.",
    "memberof": "<anonymous>",
    "params": [],
    "meta": {
      "lineno": 11126,
      "filename": "konva.js",
      "path": "/Users/anton/Projects/konva-site-2"
    },
    "order": 328
  }
]